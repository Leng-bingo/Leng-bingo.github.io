{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/123.png","path":"123.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/1926.png","path":"1926.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/cursor.js","path":"js/cursor.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/snow.js","path":"js/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/2.png","path":"medias/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"source/galleries/2020/0.jpg","path":"galleries/2020/0.jpg","modified":1,"renderable":0},{"_id":"source/galleries/test/0.jpg","path":"galleries/test/0.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/3.jpg","path":"galleries/2020/images/3.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/5.jpg","path":"galleries/2020/images/5.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/2.jpg","path":"galleries/2020/images/2.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/8.jpg","path":"galleries/2020/images/8.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/7.jpg","path":"galleries/2020/images/7.jpg","modified":1,"renderable":0},{"_id":"source/galleries/serect/images/lock.jpg","path":"galleries/serect/images/lock.jpg","modified":1,"renderable":0},{"_id":"source/galleries/serect/images/15.jpg","path":"galleries/serect/images/15.jpg","modified":1,"renderable":0},{"_id":"source/galleries/test/images/13.jpg","path":"galleries/test/images/13.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"source/galleries/2020/images/0.jpg","path":"galleries/2020/images/0.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/11.jpg","path":"galleries/2020/images/11.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/14.jpg","path":"galleries/2020/images/14.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/15.jpg","path":"galleries/2020/images/15.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/16.jpg","path":"galleries/2020/images/16.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/17.jpg","path":"galleries/2020/images/17.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/13.jpg","path":"galleries/2020/images/13.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/18.jpg","path":"galleries/2020/images/18.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/21.jpg","path":"galleries/2020/images/21.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/22.jpg","path":"galleries/2020/images/22.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/19.jpg","path":"galleries/2020/images/19.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/23.jpg","path":"galleries/2020/images/23.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/20.jpg","path":"galleries/2020/images/20.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/4.jpg","path":"galleries/2020/images/4.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/9.jpg","path":"galleries/2020/images/9.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/6.jpg","path":"galleries/2020/images/6.jpg","modified":1,"renderable":0},{"_id":"source/galleries/test/images/12.jpg","path":"galleries/test/images/12.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"source/galleries/2020/images/10.jpg","path":"galleries/2020/images/10.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/12.jpg","path":"galleries/2020/images/12.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/10.jpg","path":"medias/featureimages/原始图片/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/13.jpg","path":"medias/featureimages/原始图片/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/15.jpg","path":"medias/featureimages/原始图片/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/16.jpg","path":"medias/featureimages/原始图片/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/2.jpg","path":"medias/featureimages/原始图片/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/21.jpg","path":"medias/featureimages/原始图片/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/22.jpg","path":"medias/featureimages/原始图片/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/23.jpg","path":"medias/featureimages/原始图片/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/3.jpg","path":"medias/featureimages/原始图片/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/5.jpg","path":"medias/featureimages/原始图片/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"source/galleries/2020/images/1.jpg","path":"galleries/2020/images/1.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/7.jpg","path":"medias/featureimages/原始图片/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/8.jpg","path":"medias/featureimages/原始图片/8.jpg","modified":1,"renderable":1},{"_id":"source/galleries/test/images/cover/13.jpg","path":"galleries/test/images/cover/13.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/my404/bodymovin.js","path":"libs/my404/bodymovin.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/0.jpg","path":"medias/featureimages/原始图片/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/1.jpg","path":"medias/featureimages/原始图片/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/17.jpg","path":"medias/featureimages/原始图片/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/18.jpg","path":"medias/featureimages/原始图片/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/19.jpg","path":"medias/featureimages/原始图片/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/20.jpg","path":"medias/featureimages/原始图片/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/4.jpg","path":"medias/featureimages/原始图片/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/6.jpg","path":"medias/featureimages/原始图片/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/9.jpg","path":"medias/featureimages/原始图片/9.jpg","modified":1,"renderable":1},{"_id":"source/galleries/test/images/cover/12.jpg","path":"galleries/test/images/cover/12.jpg","modified":1,"renderable":0},{"_id":"source/galleries/2020/images/cover/p0.jpg","path":"galleries/2020/images/cover/p0.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/11.jpg","path":"medias/featureimages/原始图片/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/12.jpg","path":"medias/featureimages/原始图片/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/14.jpg","path":"medias/featureimages/原始图片/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/my404/data.js","path":"libs/my404/data.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"df93abe9e7a0ef09fbd4ab0d64a35653e5798de7","modified":1597282950000},{"_id":"source/.DS_Store","hash":"0eaa04d8a21117f1d60fed530c70dfba7e0fe4d1","modified":1620305299926},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1591088916000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1591088916000},{"_id":"themes/hexo-theme-matery/README.md","hash":"17bc69b0792b06a2eafde5174bd4f122917f690d","modified":1591088916000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"14bf70dade027765924cbc5db2f68366b7efe052","modified":1591088916000},{"_id":"source/robots.txt","hash":"aa444ef5779825885f01306f8ff66819fb45739f","modified":1599890768000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"1069142a4a98e221cfd3e3b24366f37a849418ee","modified":1619744992823},{"_id":"source/_posts/.DS_Store","hash":"bccdfbeac6ce872b10455c2f137b5d1dd8addedd","modified":1620305299927},{"_id":"source/_posts/2012-941.md","hash":"20499d830ddde7337e641f05710fa9d830200bbd","modified":1602069224000},{"_id":"source/_data/galleries.json","hash":"735f5f8a8a26c12c517ce73c4ac04bcb42a189ac","modified":1591168376000},{"_id":"source/_data/friends.json","hash":"8b454e8017b9fe5f257c8c75c5a39666198bf99d","modified":1591092568000},{"_id":"source/_posts/2013-941.md","hash":"7d09f630d800f69782a0447561311e00e6c8c23b","modified":1601189246000},{"_id":"source/_posts/2014-941.md","hash":"89e539b18c63f88c2cc2bd67ad7c576b40d919ce","modified":1601019088000},{"_id":"source/_posts/2015-941.md","hash":"f2fafa685fdc66ce236b10ff85300f54e9909db0","modified":1600847536000},{"_id":"source/_posts/2016-941.md","hash":"22abce94027a0cd73b15940fc0645ee471936c3d","modified":1600777398000},{"_id":"source/_posts/2018-941.md","hash":"68b1ca347844fc0b78413478ac3f8f614dcb020c","modified":1602069386000},{"_id":"source/_posts/2017-941.md","hash":"530982809a156abfcb547f46af9ca5cdbada1b8d","modified":1600525914000},{"_id":"source/_posts/2020吉林大学心理学拟录取名单.md","hash":"44569e76d6b214f8438c21fe585d516453f98f1f","modified":1597045876000},{"_id":"source/_posts/7月份学习计划.md","hash":"6d7a49e8f146f4ecd7ec9b46dedaf5a9269bd45f","modified":1597054696000},{"_id":"source/_posts/2018-979.md","hash":"08046dd4115f171a3571f59fa5e47d46661a8b5e","modified":1619427943249},{"_id":"source/_posts/SimCSE完成情况.md","hash":"86bd017c858bdd31d3c7d783e80ca5a9e56dc4a8","modified":1620200857563},{"_id":"source/_posts/9月8号计划.md","hash":"948893a82daaab4633007f62b0dac46bfe3f36e4","modified":1599479668000},{"_id":"source/_posts/SimCSE（一）.md","hash":"d02d8754a638690ab856686f41a59ca3b4978667","modified":1619593007049},{"_id":"source/_posts/SimCSE（七）.md","hash":"0deaabc5d6580be5dd4a6067158a301e88fea8f6","modified":1620113667090},{"_id":"source/_posts/SimCSE（三）.md","hash":"c84f9d09fe9b0434fd8242c5e4550b0a4f3fabc0","modified":1619592795825},{"_id":"source/_posts/SimCSE（二）.md","hash":"f6327fea9d207ebe3ff0f99c5cc5f0cd3dd368ee","modified":1619593040723},{"_id":"source/_posts/SimCSE（九）.md","hash":"b37de9fa247ba87347615fc23c440a4e5c2e17d8","modified":1620200657385},{"_id":"source/_posts/SimCSE（八）.md","hash":"22efd52a964d13bfa964d82224535b3d95c40b86","modified":1620113811277},{"_id":"source/_posts/SimCSE（十）.md","hash":"f46200d02506eefadf1e33f12b45f6cddaa4f4dc","modified":1620305363128},{"_id":"source/_posts/SimCSE（五）.md","hash":"9e7fb2bc992cf0775026f0bb02461ed7472c70b4","modified":1619681948077},{"_id":"source/_posts/SimCSE（六）.md","hash":"351597ca131729d78ab0c66aef343c8129b870ff","modified":1619763182000},{"_id":"source/_posts/SimCSE（四）.md","hash":"1b1eaa61ffef78dfa5f0ffe2c7a59a0c6482a876","modified":1619592373335},{"_id":"source/_posts/吉林大学招生简章.md","hash":"51b3b34312f1fe91de9260eed9ded7f6564f01e5","modified":1597045876000},{"_id":"source/_posts/八月份学习计划.md","hash":"baf00afa13e252742220abcfb8ea253e2761017c","modified":1600522510000},{"_id":"source/_posts/图相关代码.md","hash":"4b8fbffd16ea73fbaa718501152552bb73d59796","modified":1602069176000},{"_id":"source/_posts/基础通信.md","hash":"29d2631a5dadf059a8e2ba8bd76e98b74cff9df2","modified":1597045876000},{"_id":"source/_posts/学习计划.md","hash":"94c8635b464a60177cbd7129ea28f380d0abc42e","modified":1597062882000},{"_id":"source/_posts/强化-计网第三章-数据链路层.md","hash":"8958e2eda72de07fe75abdc4b8be3586ef00cb1f","modified":1601044446000},{"_id":"source/_posts/强化计网第一章-概述.md","hash":"ec4eb7acd813396f12b00c37d1916019d4266d66","modified":1600168746000},{"_id":"source/_posts/强化-计网第二章-物理层.md","hash":"2eec0e90b17b0352dd0384c80b47426b3c8167b9","modified":1600688562000},{"_id":"source/_posts/排序算法.md","hash":"119b26a81cafc336e71187b4e3fd01aaab5931ec","modified":1600422262000},{"_id":"source/_posts/树相关代码.md","hash":"ea4bcfdc5744bfb70dac1d963c0f2fb451e91aef","modified":1599889468000},{"_id":"source/_posts/每日一题7-27.md","hash":"bbce9c1294cb84363475fff6f02f6064e236578a","modified":1597045876000},{"_id":"source/_posts/每日一题7-28.md","hash":"9dc575ea947aa1c5049d91b38e57e0c8c34974fd","modified":1597045876000},{"_id":"source/_posts/每日一题8-3.md","hash":"6e37156046574df1ceb0e09875613a71090ede6d","modified":1597054878000},{"_id":"source/_posts/物理层.md","hash":"f7487a453b601d1b164be06f588a328d4da125fb","modified":1597045876000},{"_id":"source/_posts/第一次测试.md","hash":"02ad6e97b6e9b4f8a6043020b0c3142933a635ce","modified":1597045876000},{"_id":"source/_posts/每日一题7-29.md","hash":"80120dfd399ca6656e985105c7f5ab99b7239c86","modified":1597045876000},{"_id":"source/_posts/线性表代码.md","hash":"9fe20169710bb879883dc54c967a8046e1af943f","modified":1598347528000},{"_id":"source/_posts/艾宾浩斯背单词.md","hash":"69c339ba950e6a83676759c3af48f62c6e7b15b8","modified":1597045876000},{"_id":"source/_posts/菁菁学习计划.md","hash":"39c5d720d5c720e822bb5f0a3a2f84ff476a194c","modified":1597062886000},{"_id":"source/_posts/计网第一章-概述.md","hash":"0b55d5afee9794e6d40fda9be9c7b7ecca3ad1cc","modified":1597045876000},{"_id":"source/_posts/计网第七章-局域网和广域网技术.md","hash":"83f6e6d93f5844da1239d5f11df7e07c4063ded5","modified":1597991076000},{"_id":"source/_posts/计网第五章-网络层.md","hash":"df9ff13e216b2911d0ff7c84b1c4ea6ccd0b864b","modified":1597061960000},{"_id":"source/_posts/计网第八章-TCP-IP协议.md","hash":"e68e83f62c79b32ededc966cabef0d64a51c4824","modified":1598361014000},{"_id":"source/_posts/计网第六章-传输层.md","hash":"9510ffbba5eef85b8f219521d09ad43b52fc1bfa","modified":1599552690000},{"_id":"source/_posts/计网第四章-数据链路层.md","hash":"0cb22230cb3d78a04e23b4ed55680ff28d34ca3d","modified":1597045876000},{"_id":"source/_posts/链表代码.md","hash":"40ceb97fa6eb668c0f4117c71e20cd301ccd1d83","modified":1598795218000},{"_id":"source/_posts/高数第一讲总结.md","hash":"08fa222dcf4e05f7b6f3fdb8543f7a4156e90bb7","modified":1597045876000},{"_id":"source/about/index.md","hash":"c0c5e90b5ea1cc89e2ddb57bc0048e238f3df741","modified":1591092442000},{"_id":"source/categories/index.md","hash":"27751321f880c08de5562b5a84d7a8f980def63b","modified":1591092378000},{"_id":"source/contact/index.md","hash":"543e39afa39588a1c4cec1a9060dcf19fb8f2c2d","modified":1591092478000},{"_id":"source/friends/index.md","hash":"2be114a59665f3f4e39e39e1db1173e98d7b84c4","modified":1591092506000},{"_id":"source/galleries/index.md","hash":"e6826b7a7674a9ecb0eabe6a773361930bd48848","modified":1591167164000},{"_id":"source/tags/index.md","hash":"0eca48c8f4b4f84e1a964d10d5269e043a8751ac","modified":1591092406000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"aa3f930ce4c475664df9eb283ca76974e3e4c276","modified":1597301998000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"e9716a948172e6ad46c18cc7e78770cdc46f1857","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"a3c2f9935092344eaa09f6039f4a77c38a914aac","modified":1591189024000},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"b171427b81b1463eedd95c6977c7e79abc3b5ef7","modified":1591166328000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"3cabb8e3680858c1412277def37bdef73981be0f","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"597cc049c9669b081b5ba8c67c084016dbc3e1f6","modified":1594699998000},{"_id":"themes/hexo-theme-matery/source/123.png","hash":"bc8b87f6cca89ad6e4948f126cda3ad0118602e0","modified":1598164468000},{"_id":"themes/hexo-theme-matery/source/1926.png","hash":"7fe3f65c530251ca1302a7082ad592491d9d5ac6","modified":1598164696000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1591088918000},{"_id":"source/_posts/SimCSE（一）/拟合对比.png","hash":"ade4e63775a1475dbbc8576577ae658e44aea985","modified":1619490090686},{"_id":"source/_posts/SimCSE（一）/拟合图片.jpeg","hash":"350914236a057a25bf4b38cfb7dc76b1b913a531","modified":1619488114380},{"_id":"source/_posts/SimCSE（三）/对比表示学习.webp","hash":"32f4d8e690c48e9a85225d6a80647d7739f54e64","modified":1619576860189},{"_id":"source/_posts/SimCSE（六）/Table 3.png","hash":"9b1b72884ae7040b59126e8aa3e72bf9c9bcee18","modified":1619750421903},{"_id":"source/_posts/SimCSE（六）/Table 4.png","hash":"84e62bea77dcb9bae68c22cfd8921613e215dc94","modified":1619750643271},{"_id":"source/_posts/SimCSE（十）/拟合对比.png","hash":"ade4e63775a1475dbbc8576577ae658e44aea985","modified":1619490090686},{"_id":"source/_posts/SimCSE（四）/.DS_Store","hash":"56f308098f360f1f57d6db49d5d037c7e930cff5","modified":1619591098066},{"_id":"source/_posts/吉林大学招生简章/专硕.png","hash":"3f6cc9638d1008fdc17fdaf7a9ac21fbb33d3bec","modified":1591190970000},{"_id":"source/_posts/SimCSE（四）/001-surprise.png","hash":"df1017e79115d555acb6c20e92dedb943725d3e1","modified":1619579243386},{"_id":"source/_posts/吉林大学招生简章/学硕.png","hash":"cd78beb919d1f0890805ef1b72be62e07e13478f","modified":1591190956000},{"_id":"source/_posts/吉林大学招生简章/计算机专硕.png","hash":"1853a4b13e59f1ec2bb8b478f78f3cbb457882b4","modified":1591191580000},{"_id":"source/_posts/强化-计网第二章-物理层/FSK.png","hash":"ac413c0abe1af8b4bddb0349460cd718adc92def","modified":1600427838000},{"_id":"source/_posts/吉林大学招生简章/计算机学硕2.png","hash":"06fa26541b12b7f2183a75db465d6297c0b65c6b","modified":1591191564000},{"_id":"source/_posts/强化-计网第二章-物理层/PSK.png","hash":"486e4edfcd32d452203563c7e8a38717f3a3ae0f","modified":1600427864000},{"_id":"source/_posts/强化-计网第二章-物理层/单极性编码.png","hash":"3e1fc255c87b089e7215ad9c47e8661a37c2c510","modified":1600427194000},{"_id":"source/_posts/强化-计网第二章-物理层/ASK.png","hash":"9064448e487e8e86a72c826398410d7f3cb1ac30","modified":1600427822000},{"_id":"source/_posts/强化-计网第二章-物理层/QAM.png","hash":"a37b4f7c9209baa4659b6e7085b1a2a3dfed217b","modified":1600427908000},{"_id":"source/_posts/强化-计网第二章-物理层/非归零编码.png","hash":"bc6c4a1125794f5e901ab88a6aeb0c152e15c134","modified":1600427154000},{"_id":"source/_posts/计网第七章-局域网和广域网技术/img.png","hash":"1ed58176ace712ebcb350cd4f38cde8d07345fe1","modified":1597238116000},{"_id":"source/_posts/计网第八章-TCP-IP协议/B类子网编码.png","hash":"e7cbc020d5dcfde2afc669a6b80b3418358a6ca5","modified":1598356256000},{"_id":"source/_posts/计网第七章-局域网和广域网技术/img2.png","hash":"6f0da5a3255d4fcd96798a975420cc9d0e468984","modified":1597240196000},{"_id":"source/_posts/计网第八章-TCP-IP协议/IP地址范围.png","hash":"bc822cfc18f0dab6fd6d216605078f78a6153abb","modified":1598350656000},{"_id":"source/_posts/计网第八章-TCP-IP协议/IP报文格式.png","hash":"d7f64bcf781a9cceb7c382b976640ad02c25ed86","modified":1598351580000},{"_id":"source/_posts/计网第八章-TCP-IP协议/ip地址分类.png","hash":"3e979cba0042bf99d365c98f62797252760483e2","modified":1598097724000},{"_id":"source/galleries/2020/index.md","hash":"fe9db3134f89a453f5c348d6d72943927573a2f6","modified":1591167848000},{"_id":"source/galleries/个人生活/index.md","hash":"3ebcc1f41ade8da966854f1415c339a264221b03","modified":1591168406000},{"_id":"source/galleries/test/index.md","hash":"10cce90efad69fab7e0a794342e2e7607af44f9d","modified":1591167984000},{"_id":"source/galleries/serect/index.md","hash":"238f66e78d3c498d6a981d5d2cdcc8904a7f5f72","modified":1591168394000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1591194254000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"ae24615ac88719139b57a4709b096c81e1a64d5a","modified":1597053466000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"868ba6e0107b57000637b4f87881dbfacdf54fd1","modified":1597281988000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f1d9d245932fde9cb5365acec8fbf8e76b93e215","modified":1597061238000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"6dc2522bc03b65d0b421a643b21a78a59c8213c1","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"68085770dc09d71c14d323dff940fe6c1826ba76","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"1afa71b003c16fe1f17389ef9a84c7044b7ac362","modified":1597051622000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"8ad8a7ec3f6438af496c51fd6bef1684e158a9ef","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"c5f1a2de30363f370c8c37994140d6ef4fd0c4b7","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"908ddab5b5d5662c50b46ada0e03e06fe0a6c310","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"db62ecc8bfa16222b8080b5f624b856e6267554d","modified":1599893640000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"416f2f47f34df031fe4eef050fc21a2de06fdb83","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1591088916000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1591088918000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1591088916000},{"_id":"themes/hexo-theme-matery/scripts/helpers/encrypt.js","hash":"7d0ff9a889846fb55b4e3730187e4b6fc07a4bf1","modified":1591165996000},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"47a7ceb6cce120cc632201383d0f122128f6b2a7","modified":1591107790000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/js/cursor.js","hash":"d22c22398f5dd0d273a98031515821587c32fdcf","modified":1591168622000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"97c06820a14aa7ec9ad201fd81ec88aeb5b9c95f","modified":1619763599000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"8f173e67b23205a3baf468f1f2d7713c7579f800","modified":1591170144000},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"4ba874f9507602a571dfd38367a69e6154faf935","modified":1591169846000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/js/snow.js","hash":"711b6fe8bca5c8a45732901dff7fae0082e9f812","modified":1591098084000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/2.png","hash":"342759d8f8bc25491d6ba5e865de2bcd02a4a985","modified":1591095466000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1591088918000},{"_id":"source/_posts/SimCSE（六）/Figure 2.png","hash":"1fbf82c0bb59931035d6c1807cf34d5db58f819b","modified":1619751039932},{"_id":"source/_posts/SimCSE（六）/Table 2.png","hash":"b073cfe77432bcb540a9943782b56a17f1db6af0","modified":1619750037148},{"_id":"source/_posts/SimCSE（六）/Table 5.png","hash":"7ca1b25e1749f59db183527ac6f44f68347bf5f6","modified":1619756323253},{"_id":"source/_posts/吉林大学招生简章/计算机学硕1.png","hash":"47be7240a692215f98d87c4a49fe8b49a6f96b01","modified":1591191528000},{"_id":"source/_posts/SimCSE（四）/Unsupervised SimCSE.png","hash":"d9a3d0c1014ea23cc2aec9c9130bf81c34292083","modified":1619587071381},{"_id":"source/_posts/菁菁学习计划/2.png","hash":"7958ba1aa02ecc910f2b16447aacf3ae52bec2a2","modified":1591597000000},{"_id":"source/_posts/强化-计网第二章-物理层/曼彻斯特.png","hash":"9fc2f5c9639235a866c4b99de45a83f4f4e855a7","modified":1600427248000},{"_id":"source/_posts/菁菁学习计划/1.png","hash":"e3bd9199976b029443e186fc6a491406ea424b07","modified":1591596984000},{"_id":"source/galleries/2020/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1591088918000},{"_id":"source/galleries/test/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1591088918000},{"_id":"source/_posts/SimCSE（十）/dropout.jpeg","hash":"f1349c4e39b7980b1acb7823daa73126c67dbc81","modified":1619491216977},{"_id":"source/galleries/2020/images/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1591088918000},{"_id":"source/galleries/2020/images/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1591088918000},{"_id":"source/galleries/2020/images/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1591088918000},{"_id":"source/galleries/2020/images/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1591088918000},{"_id":"source/galleries/2020/images/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1591088918000},{"_id":"source/galleries/serect/images/lock.jpg","hash":"4fbda18ce7047d6ba74316ff8ed27446d7bdb9ed","modified":1591167050000},{"_id":"source/galleries/serect/images/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1591088918000},{"_id":"source/galleries/test/images/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1591096194000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1591096270000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1591096482000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"ed9da4adea9bcd618fdf25acab2daf9b9cdd341e","modified":1619745989196},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1591088918000},{"_id":"source/_posts/SimCSE（一）/dropout.jpeg","hash":"f1349c4e39b7980b1acb7823daa73126c67dbc81","modified":1619491216977},{"_id":"source/_posts/SimCSE（四）/Supervised SimCSE.png","hash":"b6770e01537295e8c83f691ca0af33d99a1d6c71","modified":1619591060988},{"_id":"source/galleries/2020/images/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1591088918000},{"_id":"source/galleries/2020/images/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1591088918000},{"_id":"source/galleries/2020/images/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1591088918000},{"_id":"source/galleries/2020/images/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1591088918000},{"_id":"source/galleries/2020/images/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1591088918000},{"_id":"source/galleries/2020/images/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1591088918000},{"_id":"source/galleries/2020/images/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1591088918000},{"_id":"source/galleries/2020/images/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1591088918000},{"_id":"source/galleries/2020/images/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1591088918000},{"_id":"source/galleries/2020/images/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1591088918000},{"_id":"source/galleries/2020/images/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1591088918000},{"_id":"source/galleries/2020/images/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1591088918000},{"_id":"source/galleries/2020/images/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1591088918000},{"_id":"source/galleries/2020/images/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1591088918000},{"_id":"source/galleries/2020/images/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1591088918000},{"_id":"source/galleries/2020/images/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1591088918000},{"_id":"source/galleries/test/images/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1591106602000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1591096444000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ed0ddcbb0d101f961eb6cb21773bb35b6f6fdfcd","modified":1591241686000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"2c8e19f4e3cdd6a31233ef216b51b6c750a5867b","modified":1591241642000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"09202ead78dc3cd57e674b30d0b16270bbf2db0f","modified":1597053580000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"ae95fc1feedfa7794471c075db395dbb42cf7bca","modified":1591241620000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"ed0ddcbb0d101f961eb6cb21773bb35b6f6fdfcd","modified":1591241686000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"09202ead78dc3cd57e674b30d0b16270bbf2db0f","modified":1597053580000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"5d473138e8aaf6bc4d98728a6caff2cd9bdf2fbc","modified":1597053590000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"09202ead78dc3cd57e674b30d0b16270bbf2db0f","modified":1597053580000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"5d473138e8aaf6bc4d98728a6caff2cd9bdf2fbc","modified":1597053590000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"ae95fc1feedfa7794471c075db395dbb42cf7bca","modified":1591241620000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"2c8e19f4e3cdd6a31233ef216b51b6c750a5867b","modified":1591241642000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"71ad4fae25d5dd74eab05a7934afeceb1046e5b2","modified":1591194060000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"2c8e19f4e3cdd6a31233ef216b51b6c750a5867b","modified":1591241642000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"351b0d9f6e9c3a6bbbdf61f40108288b42632b19","modified":1591194086000},{"_id":"source/galleries/2020/images/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1591088918000},{"_id":"source/galleries/2020/images/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"8bb636f3a08da1a38d79956373758bb12e30107f","modified":1591241570000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"379848eb0bf64c4bd0a94ea67d81b56f048fb2d6","modified":1591241652000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"8bb636f3a08da1a38d79956373758bb12e30107f","modified":1591241584000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"379848eb0bf64c4bd0a94ea67d81b56f048fb2d6","modified":1591241652000},{"_id":"source/galleries/2020/images/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1591193360000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1591088918000},{"_id":"source/galleries/test/images/cover/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/my404/bodymovin.js","hash":"0101a4545f219753bb617e9f1794444694b3e7d0","modified":1499821912000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"97894a96ce2c87a3141139553f2b41776fa131b6","modified":1619428909684},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1591088918000},{"_id":"source/_posts/计网第八章-TCP-IP协议/四次挥手过程.gif","hash":"4c9b15582bff89ea47b39b7f4ad4e97ebb38b8d7","modified":1598360206000},{"_id":"source/galleries/test/images/cover/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1591088918000},{"_id":"source/galleries/2020/images/cover/p0.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1591147632000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"224e516f87193797355c00f8e32769d5eda50897","modified":1591241676000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"224e516f87193797355c00f8e32769d5eda50897","modified":1591241676000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/原始图片/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1591088918000},{"_id":"source/_posts/SimCSE（九）/训练结果.png","hash":"c4d483b5314ba47a17f1b9de38347acaa3a628dd","modified":1620177812207},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/my404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":1499821914000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"6bd90963ff62eb70aa0eadaa067c4215073525f2","modified":1591241660000},{"_id":"source/_posts/计网第八章-TCP-IP协议/三次挥手.gif","hash":"13e16c6955cd6261a95520df3e828c769b80ade1","modified":1598359940000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1591192416000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1591088918000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1591088918000},{"_id":"source/_posts/计网第八章-TCP-IP协议/四次挥手.gif","hash":"0e19db0df5a10a28d0be9201319f137d47515a3f","modified":1598359986000},{"_id":"source/_posts/计网第八章-TCP-IP协议/三次握手建立过程.gif","hash":"b4538e2a6273431516a40d67772817887eb62833","modified":1598360184000},{"_id":"source/_posts/SimCSE（三）/ICML2020.pdf","hash":"7b029c48a62a3c07464f3a6a78d8575edc2f9b94","modified":1619574964365},{"_id":"public/baidu_urls.txt","hash":"90d7e7dfd86fcb9d2e3ab5e097220ca28f3fcc66","modified":1620305369845},{"_id":"public/baidusitemap.xml","hash":"9b54b901aac7dd4f7036480e00bdb53dd079e824","modified":1620305369845},{"_id":"public/sitemap.xml","hash":"51716a9c35aca086bba3157588a511e405a76e6b","modified":1620305369845},{"_id":"public/search.xml","hash":"d3628cb90ab1d52b13365ac4e119342f89191b3f","modified":1620305369845},{"_id":"public/404.html","hash":"117ea96eb13d05022718236d5796e1735148b961","modified":1620305369845},{"_id":"public/categories/index.html","hash":"d106736bc551a680f46da04c53887aa41df49614","modified":1620305369845},{"_id":"public/contact/index.html","hash":"17c777c0bf2601b2154edc9d46cf84c91f6f2402","modified":1620305369845},{"_id":"public/friends/index.html","hash":"5bdafa35914d43e5bedd9b0a3ee58bf021aaf45e","modified":1620305369845},{"_id":"public/galleries/index.html","hash":"5c1d7fa197f516eab1e25a5f9110c8d0db78d1a4","modified":1620305369845},{"_id":"public/galleries/2020/index.html","hash":"742f0a5116f774819f8d46815e71d49d893e9c69","modified":1620305369845},{"_id":"public/tags/index.html","hash":"dd0d254bd3e353a8e084e56542957f3fc27f5dd9","modified":1620305369845},{"_id":"public/galleries/test/index.html","hash":"00a24a4813718ff23628c841ec27ba0858d3adb8","modified":1620305369845},{"_id":"public/galleries/serect/index.html","hash":"93049ef1319858657e6364de0919d0fd8761e3b3","modified":1620305369845},{"_id":"public/galleries/个人生活/index.html","hash":"d15d2b30c0f88b9aa5aa0f3907745ee0eb6580e5","modified":1620305369845},{"_id":"public/about/index.html","hash":"6654ea3b1fdab1be0281a14a88cd24f639d574f0","modified":1620305369845},{"_id":"public/posts/9be8.html/index.html","hash":"0acf9933f27eebcd899ad2a4b503d57a48fe7824","modified":1620305369845},{"_id":"public/posts/1e5f.html/index.html","hash":"7a4d9787e59b6d827e6590c62e77300e7ed2cdc1","modified":1620305369845},{"_id":"public/posts/f664.html/index.html","hash":"8a87357cb567ca77d93f1af69f1d53a76f01264f","modified":1620305369845},{"_id":"public/posts/4201.html/index.html","hash":"51d89ae6be44faabdd68f29bd254dc8adc660fc6","modified":1620305369845},{"_id":"public/posts/8218.html/index.html","hash":"791f86f3648a38baa45372fe0de2976fe6cb9f47","modified":1620305369845},{"_id":"public/posts/3b4c.html/index.html","hash":"a415de7039fc4eee6e01440049ab7bfba96cb1a9","modified":1620305369845},{"_id":"public/posts/40a6.html/index.html","hash":"60b7809704a90b634b89b96b9764c1c415033041","modified":1620305369845},{"_id":"public/posts/939d.html/index.html","hash":"fab6821c0e02899f615696c3e3ad7a5b0d6c3352","modified":1620305369845},{"_id":"public/posts/5c43.html/index.html","hash":"d21ee1d8010ab20708e89c74e3c939794d78d691","modified":1620305369845},{"_id":"public/posts/221e.html/index.html","hash":"ecd9e53907d029f3fef68bee3ae88d9b64307425","modified":1620305369845},{"_id":"public/posts/6918.html/index.html","hash":"8938c54f976ba2de4e4e430d82031369442bd8ae","modified":1620305369845},{"_id":"public/posts/5e81.html/index.html","hash":"d199a30b3b8d92464c7f3397ac290d487f72d794","modified":1620305369845},{"_id":"public/posts/ca01.html/index.html","hash":"f9d2ead87266272a5a18b5c85f8f47d95affa730","modified":1620305369845},{"_id":"public/posts/9ebc.html/index.html","hash":"8add605e58d53aea012aa98f6db58d656187bd56","modified":1620305369845},{"_id":"public/posts/9e70.html/index.html","hash":"60a8f16555237a17cae1671a3bb29d0430b87990","modified":1620305369845},{"_id":"public/posts/9e34.html/index.html","hash":"8e0f423fc3a8080e2ad302627ce83af2f8a3e8ca","modified":1620305369845},{"_id":"public/posts/2fcb.html/index.html","hash":"063641de95c66407dca1a726468955f273cc0ed3","modified":1620305369845},{"_id":"public/posts/5e09.html/index.html","hash":"e1b2ae4cb64d50dd5e71d4cf292d5778b7837569","modified":1620305369845},{"_id":"public/posts/5f19.html/index.html","hash":"9ec2dd7058e55076024103b870e50f858130c401","modified":1620305369845},{"_id":"public/posts/f655.html/index.html","hash":"f6ae9a89ebfd755bf5b4dd5ac8208c7797f4fc9f","modified":1620305369845},{"_id":"public/posts/232f.html/index.html","hash":"8e7e198b7c1968fffa9335aa6bc6a732a0412a65","modified":1620305369845},{"_id":"public/posts/ad5b.html/index.html","hash":"e3bdf8bfb1b2892a2a2dd8fed710e9aee6d3e23d","modified":1620305369845},{"_id":"public/posts/5e4d.html/index.html","hash":"5fc363ea325b592f37d00499e4b54eb95c9905eb","modified":1620305369845},{"_id":"public/posts/51cd.html/index.html","hash":"e725674b67cbeb40b39bf731c9671287c7636548","modified":1620305369845},{"_id":"public/posts/3849.html/index.html","hash":"8ab3b3b0daad23c5b160e0f6babc2a61ab217711","modified":1620305369845},{"_id":"public/posts/3689.html/index.html","hash":"e32dd47a775dc2388e867ed2b175e3c3cc4b798c","modified":1620305369845},{"_id":"public/posts/d09f.html/index.html","hash":"dd5b1e77fc4d93e9db6d77dc850e501212de7d50","modified":1620305369845},{"_id":"public/posts/f4b7.html/index.html","hash":"8b3364af5ceff97d06fe3a0dcbe1b38a562332b3","modified":1620305369845},{"_id":"public/posts/93d0.html/index.html","hash":"e4cdb6f2e494367ca42962d17e711719744b2eaf","modified":1620305369845},{"_id":"public/posts/2140.html/index.html","hash":"c96621f15fe6b14f6b176881d03d8d28d10354eb","modified":1620305369845},{"_id":"public/posts/8cfd.html/index.html","hash":"47e1a4f13ad6bf8994f2e08d8b82360937490c99","modified":1620305369845},{"_id":"public/posts/156a.html/index.html","hash":"ee73340e0dd1e5b64ceb96c626e27612144a9898","modified":1620305369845},{"_id":"public/posts/dde7.html/index.html","hash":"79bc1a14edf9ebae3a51594b76e37ddebe934128","modified":1620305369845},{"_id":"public/posts/7624.html/index.html","hash":"bd79bd81f4919e86517121cab2e7705299323122","modified":1620305369845},{"_id":"public/posts/2693.html/index.html","hash":"f6be76f1a0830d386e2995baccd8240488c17196","modified":1620305369845},{"_id":"public/posts/6f31.html/index.html","hash":"c1cc36d96d9808e9ddca5089126d04f3b9048049","modified":1620305369845},{"_id":"public/posts/b074.html/index.html","hash":"999804db1016001de35cb0bd415b8cf2fce121ce","modified":1620305369845},{"_id":"public/posts/b23c.html/index.html","hash":"d9913b2971febbc2bb8bb897e171c10de57547e4","modified":1620305369845},{"_id":"public/posts/506b.html/index.html","hash":"ef8087e702a12dbbf9939e4af9182fe3c508fe45","modified":1620305369845},{"_id":"public/posts/6b05.html/index.html","hash":"20a5e2e26d020ea517d77d3bc26aafa6c357564b","modified":1620305369845},{"_id":"public/posts/6c68.html/index.html","hash":"b9d099e0b57c7d60510b80b93b2cad964dfbcc02","modified":1620305369845},{"_id":"public/posts/4cfa.html/index.html","hash":"7275412c0380902c023a9a1e7dfef37c503b644f","modified":1620305369845},{"_id":"public/posts/9eeb.html/index.html","hash":"fc2623298cd3a590470a4e9436add27a16b6e845","modified":1620305369845},{"_id":"public/posts/b0c7.html/index.html","hash":"e6ea8409ff76919c8a86d9e74176da649d7ef319","modified":1620305369845},{"_id":"public/posts/2e9c.html/index.html","hash":"01cc9639834c4f26ba9d5e2128a5e0b07ecf6515","modified":1620305369845},{"_id":"public/posts/a3e2.html/index.html","hash":"9f4425825ce5d4c211508b8caf6d40ff269b78c8","modified":1620305369845},{"_id":"public/posts/6214.html/index.html","hash":"40cee3419478fee0dec64b01769eb2d81ed760aa","modified":1620305369845},{"_id":"public/posts/e047.html/index.html","hash":"74a164fd87feadebb3ece970d71ab650b38a339a","modified":1620305369845},{"_id":"public/posts/7930.html/index.html","hash":"7d0a126c8b086be0e21c196821a22017eeeadb01","modified":1620305369845},{"_id":"public/archives/index.html","hash":"48da2660970a5247f2dbb1abb5e31e1318b3742f","modified":1620305369845},{"_id":"public/archives/page/3/index.html","hash":"de07f805b78369cf13074f648128ad15706e191e","modified":1620305369845},{"_id":"public/archives/page/5/index.html","hash":"c3c80aa9211fa85901ce84db1b8bb83c8d1a67f7","modified":1620305369845},{"_id":"public/archives/page/4/index.html","hash":"6ad4a99f557b60e4ffe17530b35e0522b4c5091e","modified":1620305369845},{"_id":"public/archives/page/2/index.html","hash":"49f6f94d6809a44abe33e86d9bec1e4ae05c47c4","modified":1620305369845},{"_id":"public/archives/2020/index.html","hash":"419fa99a7d9f54cd521aa3f6f4703e3dc21060ec","modified":1620305369845},{"_id":"public/archives/2020/page/2/index.html","hash":"5cef86e9c06fee9cdc440c4fedf4e12da85937d8","modified":1620305369845},{"_id":"public/archives/2020/page/3/index.html","hash":"15d6c8b42e26ebc1fc0bfa56b1a24f0e67ddfd85","modified":1620305369845},{"_id":"public/archives/2020/page/4/index.html","hash":"39b241423910aa51225b5a6f8fd848159eb25bc2","modified":1620305369845},{"_id":"public/archives/2020/05/index.html","hash":"2db7676f3f9a1c015aaaa0659a6bbdc3ed8ed400","modified":1620305369845},{"_id":"public/archives/2020/06/index.html","hash":"111a8fe6f4727403515b765f822730a3d8e6e861","modified":1620305369845},{"_id":"public/archives/2020/07/index.html","hash":"69cedf8a68b260ce6121e45791bd878c6b19ba85","modified":1620305369845},{"_id":"public/archives/2020/08/index.html","hash":"1db237d2b5d2cb7fbedf9a5ccc0317239ec4b045","modified":1620305369845},{"_id":"public/archives/2020/09/index.html","hash":"0dcfaaa5005929b129151f6a6df76a78b9dd54ba","modified":1620305369845},{"_id":"public/archives/2020/10/index.html","hash":"00c845d79cd52047ded73bc426846746ae738110","modified":1620305369845},{"_id":"public/archives/2021/index.html","hash":"2bcd2e2ab8b7e146d087b5da6f09597a7e9b91db","modified":1620305369845},{"_id":"public/archives/2021/04/index.html","hash":"de18ce81a5f07f904215ec4a7db99820dd009cd9","modified":1620305369845},{"_id":"public/categories/代码/index.html","hash":"374c5e236d7be1d7d19f101b89572f33990d46af","modified":1620305369845},{"_id":"public/categories/菁菁/index.html","hash":"102133d2eea0fd48915242002252a06e828b509b","modified":1620305369845},{"_id":"public/categories/男男/index.html","hash":"ae18baec1557ce91e16c667c6fe04dc3b34b6d56","modified":1620305369845},{"_id":"public/categories/计划/index.html","hash":"6f90ca8ef34f62f6a0e1a00d740e461b6203faf1","modified":1620305369845},{"_id":"public/categories/论文/index.html","hash":"a6524883e812f3ba77f490f7fb3eb5b33dcdf5c9","modified":1620305369845},{"_id":"public/categories/吉林大学/index.html","hash":"19f7ae6018fa49fe80f31c50a05d6e6794b81892","modified":1620305369845},{"_id":"public/archives/2021/05/index.html","hash":"4dc8c58d77a04bd982007f8d51ba3efb903cc81c","modified":1620305369845},{"_id":"public/categories/计网/index.html","hash":"b5c27d021ebe692a30b9d9a0f36fbe1553690571","modified":1620305369845},{"_id":"public/categories/代码/page/2/index.html","hash":"18c48c815ea746876458a2e9750f655fe940550a","modified":1620305369845},{"_id":"public/categories/每日一题/index.html","hash":"20ccf5e5162096dc576d8578811e3c17a3beff6c","modified":1620305369845},{"_id":"public/categories/first/index.html","hash":"802ecec87195e60f5c3c14c4f7b1d416d69dd064","modified":1620305369845},{"_id":"public/categories/考研/index.html","hash":"87ed32e42617f37e4705fcb1ff75a5896fb2b89d","modified":1620305369845},{"_id":"public/categories/数学/index.html","hash":"ce60107ceba0d17fba4217ed1214a3a530ac47d9","modified":1620305369845},{"_id":"public/index.html","hash":"698bb0df6394b163e8fa6416997847fe10e6938a","modified":1620305369845},{"_id":"public/page/3/index.html","hash":"478421ec44264ab90336de24c566ed6287d8d857","modified":1620305369845},{"_id":"public/page/4/index.html","hash":"e96fe0f62cf51c19f0db6c31d50dc30838c70deb","modified":1620305369845},{"_id":"public/page/2/index.html","hash":"51070f1fb7804e8f8bf4e8870afc7f60a55bc143","modified":1620305369845},{"_id":"public/tags/代码/index.html","hash":"7b5a3877cc4b44c9550597a130301069ba60c614","modified":1620305369845},{"_id":"public/tags/代码/page/2/index.html","hash":"003957543609c4c67e3fbf1216fe6ae7578f27ae","modified":1620305369845},{"_id":"public/tags/考研/index.html","hash":"020d3a6f434b69dcdbabb699f1d31627e4e5a954","modified":1620305369845},{"_id":"public/tags/考研/page/3/index.html","hash":"8787e84f7a2e02a9538d1f23abc6485871f2a54b","modified":1620305369845},{"_id":"public/tags/考研/page/2/index.html","hash":"990695803ccf7052becb765c8c27d11360b9e7c0","modified":1620305369845},{"_id":"public/tags/考研/page/4/index.html","hash":"57a7021f6917424b225076722a819659eedf84f0","modified":1620305369845},{"_id":"public/tags/心理学/index.html","hash":"fddc8a814c6dd412406a1472d945398840cdf0ce","modified":1620305369845},{"_id":"public/tags/论文/index.html","hash":"b0cf0e726c8542ced496a7aac128807f5f7f6277","modified":1620305369845},{"_id":"public/tags/计划/index.html","hash":"bf92a077173babc5a7fecba5fd84613715ef3230","modified":1620305369845},{"_id":"public/tags/研究生/index.html","hash":"6b8f87b8a103f74ffcd555f7905fe2fb5eed85aa","modified":1620305369845},{"_id":"public/page/5/index.html","hash":"112eea6f4af882053b52b1c6be9d1b9e16627949","modified":1620305369845},{"_id":"public/tags/知识图谱/index.html","hash":"63b18839f9ff66fc8075707b406e6b3ed0e14d8f","modified":1620305369845},{"_id":"public/tags/SimCSE/index.html","hash":"09e54196339a06decdcb84ae680e9633392e77eb","modified":1620305369845},{"_id":"public/tags/图/index.html","hash":"3ae1e32bcbab069753216d627751551558d94400","modified":1620305369845},{"_id":"public/tags/计算机/index.html","hash":"fc72a5b7ef91a752025e72763a9e57d3abf0913c","modified":1620305369845},{"_id":"public/tags/计网/index.html","hash":"b869300d39a24346518ef5ca60c131aabb0a0f29","modified":1620305369845},{"_id":"public/tags/总结/index.html","hash":"852d787489c4a32e981b22150c517c27c2d68cf5","modified":1620305369845},{"_id":"public/tags/男男/index.html","hash":"8e7223136c0d14a1f36380bfd067d4667ff4b001","modified":1620305369845},{"_id":"public/tags/数据链路层/index.html","hash":"b8ddfffed613014590c606b6e111b1e899c78bcf","modified":1620305369845},{"_id":"public/tags/强化/index.html","hash":"a98ae0a69cae10db96a3adf3f80bfd17983a482d","modified":1620305369845},{"_id":"public/tags/排序/index.html","hash":"9f58d293280a7f1a4ce18eb264bd09930430ef94","modified":1620305369845},{"_id":"public/tags/树/index.html","hash":"e734ad1b1e2684d781ef291dfd952d3e4c444a7d","modified":1620305369845},{"_id":"public/tags/线性表/index.html","hash":"0cfcfd996c3d50ef892376061695c750860dffab","modified":1620305369845},{"_id":"public/tags/每日一题/index.html","hash":"16ce8ec337557970dcd87b3d30b1f2d8bb92e172","modified":1620305369845},{"_id":"public/tags/Markdown/index.html","hash":"9ac87c137c3ccd0033c5abc4b0b349a52d05dff0","modified":1620305369845},{"_id":"public/tags/菁菁/index.html","hash":"34a5ff90f03ba3fd22424b8233f5706aa87e3ade","modified":1620305369845},{"_id":"public/tags/链表/index.html","hash":"425df9c881b6af5f0f3220e81ebd51567ccd6a85","modified":1620305369845},{"_id":"public/tags/高数/index.html","hash":"72b996c99589c78f562a41030689f2a3337a9ee8","modified":1620305369845},{"_id":"public/tags/Typora/index.html","hash":"e7c4ec438f7171fb30ec62f9e03022982544a672","modified":1620305369845},{"_id":"public/robots.txt","hash":"aa444ef5779825885f01306f8ff66819fb45739f","modified":1620305369845},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1620305369845},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1620305369845},{"_id":"public/1926.png","hash":"7fe3f65c530251ca1302a7082ad592491d9d5ac6","modified":1620305369845},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1620305369845},{"_id":"public/medias/2.png","hash":"342759d8f8bc25491d6ba5e865de2bcd02a4a985","modified":1620305369845},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1620305369845},{"_id":"public/123.png","hash":"bc8b87f6cca89ad6e4948f126cda3ad0118602e0","modified":1620305369845},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1620305369845},{"_id":"public/galleries/2020/images/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1620305369845},{"_id":"public/galleries/2020/images/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1620305369845},{"_id":"public/galleries/2020/images/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1620305369845},{"_id":"public/galleries/serect/images/lock.jpg","hash":"4fbda18ce7047d6ba74316ff8ed27446d7bdb9ed","modified":1620305369845},{"_id":"public/galleries/2020/images/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1620305369845},{"_id":"public/galleries/2020/images/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1620305369845},{"_id":"public/galleries/serect/images/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1620305369845},{"_id":"public/galleries/test/images/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1620305369845},{"_id":"public/galleries/2020/images/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1620305369845},{"_id":"public/galleries/2020/images/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1620305369845},{"_id":"public/galleries/2020/images/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1620305369845},{"_id":"public/galleries/2020/images/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1620305369845},{"_id":"public/galleries/2020/images/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1620305369845},{"_id":"public/galleries/2020/images/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1620305369845},{"_id":"public/galleries/2020/images/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1620305369845},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1620305369845},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1620305369845},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1620305369845},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1620305369845},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1620305369845},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1620305369845},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1620305369845},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1620305369845},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1620305369845},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1620305369845},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1620305369845},{"_id":"public/galleries/test/images/cover/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1620305369845},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1620305369845},{"_id":"public/posts/3b4c.html/对比表示学习.webp","hash":"32f4d8e690c48e9a85225d6a80647d7739f54e64","modified":1620305369845},{"_id":"public/posts/9be8.html/拟合对比.png","hash":"ade4e63775a1475dbbc8576577ae658e44aea985","modified":1620305369845},{"_id":"public/posts/93d0.html/img.png","hash":"1ed58176ace712ebcb350cd4f38cde8d07345fe1","modified":1620305369845},{"_id":"public/posts/5c43.html/拟合图片.jpeg","hash":"350914236a057a25bf4b38cfb7dc76b1b913a531","modified":1620305369845},{"_id":"public/posts/5c43.html/拟合对比.png","hash":"ade4e63775a1475dbbc8576577ae658e44aea985","modified":1620305369845},{"_id":"public/posts/40a6.html/001-surprise.png","hash":"df1017e79115d555acb6c20e92dedb943725d3e1","modified":1620305369845},{"_id":"public/posts/93d0.html/img2.png","hash":"6f0da5a3255d4fcd96798a975420cc9d0e468984","modified":1620305369845},{"_id":"public/posts/7930.html/2.png","hash":"7958ba1aa02ecc910f2b16447aacf3ae52bec2a2","modified":1620305369845},{"_id":"public/posts/2e9c.html/学硕.png","hash":"cd78beb919d1f0890805ef1b72be62e07e13478f","modified":1620305369845},{"_id":"public/posts/2e9c.html/计算机专硕.png","hash":"1853a4b13e59f1ec2bb8b478f78f3cbb457882b4","modified":1620305369845},{"_id":"public/posts/ca01.html/Table 4.png","hash":"84e62bea77dcb9bae68c22cfd8921613e215dc94","modified":1620305369845},{"_id":"public/posts/ca01.html/Table 3.png","hash":"9b1b72884ae7040b59126e8aa3e72bf9c9bcee18","modified":1620305369845},{"_id":"public/posts/2e9c.html/专硕.png","hash":"3f6cc9638d1008fdc17fdaf7a9ac21fbb33d3bec","modified":1620305369845},{"_id":"public/posts/2e9c.html/计算机学硕2.png","hash":"06fa26541b12b7f2183a75db465d6297c0b65c6b","modified":1620305369845},{"_id":"public/posts/f655.html/FSK.png","hash":"ac413c0abe1af8b4bddb0349460cd718adc92def","modified":1620305369845},{"_id":"public/posts/f655.html/ASK.png","hash":"9064448e487e8e86a72c826398410d7f3cb1ac30","modified":1620305369845},{"_id":"public/posts/f655.html/PSK.png","hash":"486e4edfcd32d452203563c7e8a38717f3a3ae0f","modified":1620305369845},{"_id":"public/posts/f655.html/单极性编码.png","hash":"3e1fc255c87b089e7215ad9c47e8661a37c2c510","modified":1620305369845},{"_id":"public/posts/156a.html/B类子网编码.png","hash":"e7cbc020d5dcfde2afc669a6b80b3418358a6ca5","modified":1620305369845},{"_id":"public/posts/f655.html/非归零编码.png","hash":"bc6c4a1125794f5e901ab88a6aeb0c152e15c134","modified":1620305369845},{"_id":"public/posts/156a.html/ip地址分类.png","hash":"3e979cba0042bf99d365c98f62797252760483e2","modified":1620305369845},{"_id":"public/posts/f655.html/QAM.png","hash":"a37b4f7c9209baa4659b6e7085b1a2a3dfed217b","modified":1620305369845},{"_id":"public/posts/156a.html/IP报文格式.png","hash":"d7f64bcf781a9cceb7c382b976640ad02c25ed86","modified":1620305369845},{"_id":"public/posts/156a.html/IP地址范围.png","hash":"bc822cfc18f0dab6fd6d216605078f78a6153abb","modified":1620305369845},{"_id":"public/css/prism-coy.css","hash":"e95a1fca67112e71cd43ab1e5332a9f798d0da3e","modified":1620305369845},{"_id":"public/lib/blog-encrypt.js","hash":"91fda12d550323056762c5408623eb8a1d201ecc","modified":1620305369845},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1620305369845},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1620305369845},{"_id":"public/galleries/2020/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1620305369845},{"_id":"public/galleries/test/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1620305369845},{"_id":"public/galleries/2020/images/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1620305369845},{"_id":"public/galleries/2020/images/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1620305369845},{"_id":"public/galleries/2020/images/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1620305369845},{"_id":"public/galleries/2020/images/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1620305369845},{"_id":"public/galleries/2020/images/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1620305369845},{"_id":"public/galleries/2020/images/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1620305369845},{"_id":"public/galleries/2020/images/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1620305369845},{"_id":"public/galleries/2020/images/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1620305369845},{"_id":"public/galleries/test/images/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1620305369845},{"_id":"public/galleries/2020/images/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1620305369845},{"_id":"public/galleries/2020/images/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1620305369845},{"_id":"public/medias/banner/0.jpg","hash":"2c8e19f4e3cdd6a31233ef216b51b6c750a5867b","modified":1620305369845},{"_id":"public/medias/banner/3.jpg","hash":"09202ead78dc3cd57e674b30d0b16270bbf2db0f","modified":1620305369845},{"_id":"public/medias/featureimages/12.jpg","hash":"5d473138e8aaf6bc4d98728a6caff2cd9bdf2fbc","modified":1620305369845},{"_id":"public/medias/banner/1.jpg","hash":"ed0ddcbb0d101f961eb6cb21773bb35b6f6fdfcd","modified":1620305369845},{"_id":"public/medias/featureimages/0.jpg","hash":"ed0ddcbb0d101f961eb6cb21773bb35b6f6fdfcd","modified":1620305369845},{"_id":"public/medias/banner/5.jpg","hash":"ae95fc1feedfa7794471c075db395dbb42cf7bca","modified":1620305369845},{"_id":"public/medias/featureimages/6.jpg","hash":"5d473138e8aaf6bc4d98728a6caff2cd9bdf2fbc","modified":1620305369845},{"_id":"public/medias/featureimages/11.jpg","hash":"09202ead78dc3cd57e674b30d0b16270bbf2db0f","modified":1620305369845},{"_id":"public/medias/featureimages/5.jpg","hash":"ae95fc1feedfa7794471c075db395dbb42cf7bca","modified":1620305369845},{"_id":"public/medias/reward/alipay.jpg","hash":"71ad4fae25d5dd74eab05a7934afeceb1046e5b2","modified":1620305369845},{"_id":"public/medias/featureimages/3.jpg","hash":"09202ead78dc3cd57e674b30d0b16270bbf2db0f","modified":1620305369845},{"_id":"public/medias/featureimages/7.jpg","hash":"2c8e19f4e3cdd6a31233ef216b51b6c750a5867b","modified":1620305369845},{"_id":"public/medias/featureimages/9.jpg","hash":"2c8e19f4e3cdd6a31233ef216b51b6c750a5867b","modified":1620305369845},{"_id":"public/medias/reward/wechat.png","hash":"351b0d9f6e9c3a6bbbdf61f40108288b42632b19","modified":1620305369845},{"_id":"public/galleries/2020/images/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1620305369845},{"_id":"public/galleries/2020/images/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1620305369845},{"_id":"public/galleries/test/images/cover/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1620305369845},{"_id":"public/medias/featureimages/原始图片/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1620305369845},{"_id":"public/posts/7930.html/1.png","hash":"e3bd9199976b029443e186fc6a491406ea424b07","modified":1620305369845},{"_id":"public/posts/ca01.html/Table 2.png","hash":"b073cfe77432bcb540a9943782b56a17f1db6af0","modified":1620305369845},{"_id":"public/posts/40a6.html/Unsupervised SimCSE.png","hash":"d9a3d0c1014ea23cc2aec9c9130bf81c34292083","modified":1620305369845},{"_id":"public/posts/ca01.html/Figure 2.png","hash":"1fbf82c0bb59931035d6c1807cf34d5db58f819b","modified":1620305369845},{"_id":"public/posts/ca01.html/Table 5.png","hash":"7ca1b25e1749f59db183527ac6f44f68347bf5f6","modified":1620305369845},{"_id":"public/posts/2e9c.html/计算机学硕1.png","hash":"47be7240a692215f98d87c4a49fe8b49a6f96b01","modified":1620305369845},{"_id":"public/posts/f655.html/曼彻斯特.png","hash":"9fc2f5c9639235a866c4b99de45a83f4f4e855a7","modified":1620305369845},{"_id":"public/css/gallery.css","hash":"43063994d9813c813620c7b204a3dd4b03dff0bc","modified":1620305369845},{"_id":"public/css/my.css","hash":"9cd162b6abcbb6b3ea8448d1b809a1f42358ee9e","modified":1620305369845},{"_id":"public/js/cursor.js","hash":"c94c446e154071062519a8846cdad8401b02d5f0","modified":1620305369845},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1620305369845},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1620305369845},{"_id":"public/js/gallery-encrypt.js","hash":"ff41bf0660399b074e26722d7ccc4dc1034f8a24","modified":1620305369845},{"_id":"public/js/snow.js","hash":"264295c67eaae8057380af993fc9f578c340afbd","modified":1620305369845},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1620305369845},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1620305369845},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1620305369845},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1620305369845},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1620305369845},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1620305369845},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1620305369845},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1620305369845},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1620305369845},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1620305369845},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1620305369845},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1620305369845},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1620305369845},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1620305369845},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1620305369845},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1620305369845},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1620305369845},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"ed9da4adea9bcd618fdf25acab2daf9b9cdd341e","modified":1620305369845},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1620305369845},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1620305369845},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1620305369845},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1620305369845},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1620305369845},{"_id":"public/css/matery.css","hash":"2af3a49e1d82c62f8ec2cbeb5c0bb59f9342a751","modified":1620305369845},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1620305369845},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1620305369845},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1620305369845},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1620305369845},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1620305369845},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1620305369845},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1620305369845},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1620305369845},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1620305369845},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1620305369845},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1620305369845},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1620305369845},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1620305369845},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1620305369845},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1620305369845},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1620305369845},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1620305369845},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1620305369845},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1620305369845},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1620305369845},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1620305369845},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1620305369845},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1620305369845},{"_id":"public/libs/my404/bodymovin.js","hash":"0101a4545f219753bb617e9f1794444694b3e7d0","modified":1620305369845},{"_id":"public/libs/valine/Valine.min.js","hash":"97894a96ce2c87a3141139553f2b41776fa131b6","modified":1620305369845},{"_id":"public/libs/my404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":1620305369845},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1620305369845},{"_id":"public/medias/banner/4.jpg","hash":"8bb636f3a08da1a38d79956373758bb12e30107f","modified":1620305369845},{"_id":"public/galleries/2020/images/cover/p0.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1620305369845},{"_id":"public/posts/9be8.html/dropout.jpeg","hash":"f1349c4e39b7980b1acb7823daa73126c67dbc81","modified":1620305369845},{"_id":"public/posts/40a6.html/Supervised SimCSE.png","hash":"b6770e01537295e8c83f691ca0af33d99a1d6c71","modified":1620305369845},{"_id":"public/posts/5c43.html/dropout.jpeg","hash":"f1349c4e39b7980b1acb7823daa73126c67dbc81","modified":1620305369845},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1620305369845},{"_id":"public/medias/featureimages/4.jpg","hash":"8bb636f3a08da1a38d79956373758bb12e30107f","modified":1620305369845},{"_id":"public/medias/featureimages/8.jpg","hash":"379848eb0bf64c4bd0a94ea67d81b56f048fb2d6","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1620305369845},{"_id":"public/medias/banner/6.jpg","hash":"379848eb0bf64c4bd0a94ea67d81b56f048fb2d6","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1620305369845},{"_id":"public/medias/featureimages/2.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1620305369845},{"_id":"public/medias/featureimages/10.jpg","hash":"224e516f87193797355c00f8e32769d5eda50897","modified":1620305369845},{"_id":"public/posts/156a.html/四次挥手过程.gif","hash":"4c9b15582bff89ea47b39b7f4ad4e97ebb38b8d7","modified":1620305369845},{"_id":"public/posts/1e5f.html/训练结果.png","hash":"c4d483b5314ba47a17f1b9de38347acaa3a628dd","modified":1620305369845},{"_id":"public/medias/banner/2.jpg","hash":"224e516f87193797355c00f8e32769d5eda50897","modified":1620305369845},{"_id":"public/medias/featureimages/1.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1620305369845},{"_id":"public/medias/featureimages/13.jpg","hash":"6bd90963ff62eb70aa0eadaa067c4215073525f2","modified":1620305369845},{"_id":"public/posts/156a.html/三次挥手.gif","hash":"13e16c6955cd6261a95520df3e828c769b80ade1","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1620305369845},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1620305369845},{"_id":"public/posts/156a.html/四次挥手.gif","hash":"0e19db0df5a10a28d0be9201319f137d47515a3f","modified":1620305369845},{"_id":"public/posts/156a.html/三次握手建立过程.gif","hash":"b4538e2a6273431516a40d67772817887eb62833","modified":1620305369845},{"_id":"public/posts/3b4c.html/ICML2020.pdf","hash":"7b029c48a62a3c07464f3a6a78d8575edc2f9b94","modified":1620305369845}],"Category":[{"name":"代码","_id":"ckocvzdhw0005zl9khytw5b43"},{"name":"菁菁","_id":"ckocvzdi4000rzl9k7xc66hao"},{"name":"男男","_id":"ckocvzdi50011zl9k2aenc0cd"},{"name":"计划","_id":"ckocvzdi7001azl9kck4wa8q6"},{"name":"论文","_id":"ckocvzdia001ozl9k5nbyeab2"},{"name":"吉林大学","_id":"ckocvzdig002zzl9k9lnj9z03"},{"name":"计网","_id":"ckocvzdih0038zl9k7v8v55l2"},{"name":"每日一题","_id":"ckocvzdil0041zl9khtcdh2cl"},{"name":"first","_id":"ckocvzdip004pzl9k9cuh3s5j"},{"name":"考研","_id":"ckocvzdir0051zl9keoa39j94"},{"name":"数学","_id":"ckocvzdir0057zl9k3dgu83hm"}],"Data":[{"_id":"galleries","data":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}]},{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2020-08-13T01:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2020-08-13 09:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---","updated":"2020-08-13T01:42:30.000Z","path":"404.html","comments":1,"_id":"ckocvzdgm0000zl9kem5fbfns","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-06-02T10:06:55.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-06-02 18:06:55\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2020-06-02T10:07:22.000Z","path":"about/index.html","comments":1,"_id":"ckocvzdhv0002zl9k2r6qfx2b","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-06-02T10:05:52.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-06-02 18:05:52\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-06-02T10:06:18.000Z","path":"categories/index.html","comments":1,"_id":"ckocvzdhw0004zl9k1akk59if","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-06-02T10:07:58.000Z","path":"contact/index.html","comments":1,"_id":"ckocvzdhy0008zl9kae893pu6","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2020-06-02T10:08:26.000Z","path":"friends/index.html","comments":1,"_id":"ckocvzdhz000azl9kgl507ewz","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"相册","date":"2020-06-02T11:02:29.000Z","type":"galleries","layout":"galleries","_content":"","source":"galleries/index.md","raw":"---\ntitle: 相册\ndate: 2020-06-02 19:02:29\ntype: \"galleries\"\nlayout: \"galleries\"\n---\n","updated":"2020-06-03T06:52:44.000Z","path":"galleries/index.html","comments":1,"_id":"ckocvzdi0000ezl9kg59l9wxa","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-06-02T10:06:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-06-02 18:06:27\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-06-02T10:06:46.000Z","path":"tags/index.html","comments":1,"_id":"ckocvzdjn00aezl9k02xz83u1","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"2020","date":"2020-05-19T02:51:50.000Z","type":"gallery","layout":"gallery","password":"lgn970722","_content":"","source":"galleries/2020/index.md","raw":"---\ntitle: 2020\ndate: 2020-05-19 10:51:50\ntype: \"gallery\"\nlayout: \"gallery\"\npassword: lgn970722\n---","updated":"2020-06-03T07:04:08.000Z","path":"galleries/2020/index.html","comments":1,"_id":"ckocvzdk800afzl9kfmks3hk1","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">Hey, password is required here.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"2958fa0556bfad5d0cc555521580adcf7743a9528760c82bc4c91fc1d0587f8f\">8567f00c865c7b7900a73b68f55362fcdff9531a62cee3bfa3d884880643639f177dddc72e00808ad5b95c2c6ab197a9cc63bfd66ebfbaab96bde6e6386ebb93c2aee1875f0fea819377dc2654acb6da18476d4d6e6d84da9d3a648a1c647845415075f3ace6d54a380986d64fce7fb0e0697890d34e9332326743120b47987baac95f16c5df3b1efbd1665357fbcd675b80baba03e1fe5f4a8d693cecc7c47e716f03e4f18b07463c3307ce43914306f2a3c626e9345c8a0bd5f012e23c27b028ed18eee88aaf0f26a3b88ca72b59a88916fcc12661d7ab3256ff511394c6a12106cc71ade9819efeb562fd83ee55f9c2e94dce49fc2fd99ef90732cfdb3d479ea974534671bc8fced2a83d7f8a414a67d2050a6c605afab7cdee51a503961305f88328a284f4c17ba5959441fa40a9d1a9db631e326153bce862076178670fc1069259173e9b4df09a14655239b91d2514acc566545e1b327b7619e05ea876c172660438178493577e858154bb4715331db1133f13223daf8b52f41bf11e6a458aefeb297a047548efbf37bc92795e1489d60d31540b36eb707c3e8bfa90f3a4f055194ff53864edd73824681bf134678c10e0ee4583084a6542ce89ea08dedbf53a1822d7b6c358571f57024a8e5f1e2eaa9a80f2c8f6b8eb7916ff3ec8e0ea4cda408e266db638dd63640f447b6adc9fa4cf7abcf312f5f9b1280ad227f35d060ddcea1f9eccde171ed1c1bcfdda36c0f235b5ac6b47346aa2c4c9f02bac5fa103bae46b6d1fcf20370f4bf08d18f42ba8af3a7b18b1c69b9290a9affb8e196e4e32a71cfc56be7aeace5b5d4a7a201821a7969a032498db457b97dfcd097d40e7ccd69c059ac9868a8de7c031b9d84455b36c8abafd38fa367ce51149bd66bbb58d5a5d6e4de997e245d136c4ef221edb6c52ef6185d63a95d31736ad803beefa18c2ff543555e7183d12035cca</script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","encrypt":true},{"title":"test","date":"2020-06-01T04:02:29.000Z","type":"gallery","layout":"gallery","password":"test","_content":"","source":"galleries/test/index.md","raw":"---\ntitle: test\ndate: 2020-06-01 12:02:29\ntype: \"gallery\"\nlayout: \"gallery\"\npassword: test\n---\n","updated":"2020-06-03T07:06:24.000Z","path":"galleries/test/index.html","comments":1,"_id":"ckocvzdk900agzl9k0ufa0tal","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">Hey, password is required here.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e963f58974547040a5d1086db3d611a24059ecb1dc7ae3df37066a729583ca00\">5f1ae1018b93439759966a504f76a6425751408c3953a755653773d327bcc06d75f4ecaf693fba9d1225cb53e1788e71f4dfbf441f06df463f52e6cea64e81061cbba0010e8ccb1180d6e47b37678d51e0f57096153cfc0631dbc7e24957240bf395610c3c47dbee5152928aed5545a30839208b0204ca7e9b022e2404a2c1a59b75a783fd7ab50b8f979bee1b3f9052957be524c85cf9d85b8fd27e2ae4b11c28d092628ac2e1352091f9415d45f6ee2c362f62cc0527c3d700b186a612b7782bdaae409496b6b890cc001fad228df50abc5802acbcd01f30655555c991e1996447280c245dc496b87d0031252d995194a55a529fce6e9c338d02596496e14df9ef984cf7984b2f8e8ba97a54ce5dab91c4d2e9300d4c3ae10df7cf9f3c34f8634c914805355683fd14d200315ce11e33e530c3af5d3c14f84b6c73c0a97ac1ede921fdbb2d8f1962aefe7d471d370d1c602c6adb93d277a7e3da188783735feaceb93c7b74beafe5853ac25deb8b98c31e423091d3451b57711dbb90d1fb7d46cfd1e8b2158fee8fd4729e98564e61e91df903548331588738a79ab525758d4a84cf514aa3461181d806d60aed86bfc46cd3ca1d2df36f21e4fa946059a513f11ceba11a38a72f0a4ff1f2c7eb1ceca3e37b41c944ec4721cba49505f587ccfaa10ffe3f3bba5b77266cc17848a9fe2cb9ecc7a26046e091fce25ab2083f05e3f729fd9be224cf93a7dba19778a1bc5886d8dd6b21e513a6879c1b2eaa87c953e83a2e66cbc6d129a9bbe0d208ee51aebb4c76944974c33471e74ae5611081e594978823d9317fb9a8bcbfefc2b8399808f7d53b172a130803271694057bf970443093e85b7ff7b211d6700917e60d82b84278bacd0d39f0b265692296bdafaa3dd83dabe02ad5afa02077072962f1cd34fa4ce72d879b14ca952561ae4ea5d190298b082bc4513f4be1efe1f9380e</script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","encrypt":true},{"title":"serect","date":"2020-06-03T07:02:29.000Z","type":"gallery","layout":"gallery","password":"serect","_content":"","source":"galleries/serect/index.md","raw":"---\ntitle: serect\ndate: 2020-06-03 15:02:29\ntype: \"gallery\"\nlayout: \"gallery\"\npassword: serect\n---\n","updated":"2020-06-03T07:13:14.000Z","path":"galleries/serect/index.html","comments":1,"_id":"ckocvzdk900ahzl9k04jlczjk","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">Hey, password is required here.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"3dce5d5511e4429cfece19f890d3004495b8d3f2a918e8b0b2e07d13f6c5d7a5\">6f52fb18315f92792099c76cb33cf964cbc9e8a52e01661f1ef370c8a59969f5592793e5735b22224c3fb93cc355ed6c319e98afda77bd575dd700761dc382efa9c2be3adb007130305e53114f061faf005b9c99d4687730c44b4ea9a2542fc6b3d0b692a1a2418a8d998688443456ddc7157d1974081be362a44462a8275f4695839e4440f3af41e9aa4420813ed82a7fc0ef7dd270d29a4bf4a331403d0a40003349b7ba15367b2d5e59cb30a8e2d08625107721575b8cd538d51c8f080a4cd9a68fde94465e3b9566deeeec7cddb74fd0dfc3c788bea9920c0c2f7209c28c99eedc218a9130a1ed07cc171b018581055d176c271e208113f1a1a074ee309da631b651ac9ce199a06ac33a079c30dcacbd821b7f4685c08ec9e65bf6396a2fa150fa75061506ab45d64ac284cdc250b7c194bcb5d04e2c53277b3ffa38e8cd75ae7c2fb46d849e495a741f95f96c08b8ebdf40bf899b089ac01240435998617a83e7d065b2c784668ed118cd03957bee5e87804af6cb9ed8c10cc6c60754db81de5ca380e1234170f5fd49364767e98bcb7ed5f1bb3c3f8f8dff91781adf39bbf80db94a7a08188f78fb85540bda08f6ca2d1e809818357e9d688721986a1bf7602650f69ffa7def992a762a8ef5331c0e2964b931e2c0138393e033c50c627cec582f98a02bcc319dfca4d8bbf81bdd7476a608068330a97caffcff70c4d2a29356c3c8106596d413cbc231134c044ae8ff36b7320d2022556dc1faeb307fa72077714509e45ecd7fe0d8b1f1ec1039a02328eaa6e4c2758691b24a4de545fd89b9a0ee2dbbad94b0d41a95ef44e65a8c21713f4cac1ea5b8555dc11f1f260df38b05aab689a19b8d8b4832662cb1dd971ca2d4c738637118aaad0be65964cd3da5957a5efe89d5432e850b1034fdf26198be44fc6cf9c821490286673b9bf21b2f05e9ee57c9ca1eb7d3f2987eb1</script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","encrypt":true},{"title":"个人生活","date":"2020-06-03T07:11:29.000Z","type":"gallery","layout":"gallery","password":"shenghuo","_content":"","source":"galleries/个人生活/index.md","raw":"---\ntitle: 个人生活\ndate: 2020-06-03 15:11:29\ntype: \"gallery\"\nlayout: \"gallery\"\npassword: shenghuo \n---\n","updated":"2020-06-03T07:13:26.000Z","path":"galleries/个人生活/index.html","comments":1,"_id":"ckocvzdk900aizl9k7plq26z9","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">Hey, password is required here.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"a049597181244d1f43122cf2d0dcdd54786255159a6330f2c916b38ff98c4936\">69cb69b134b8ae0378e39748c29440f49eae4a5ec2568e877c97c611e48011fcb0e191fbbddaecf3b452ff604874fda79020da843a6405e9d5615dd29da605d3147db1460153d66d7ab6ee98104386bb53135bd8de06d2bb9af6bb628ea7b9d49a7872f0825f032d24219561b3d46c13007d0ab1a1f917a151d556ee65dcc83c2d240268c4ca059435af37112793ed91863d16d26cc98fc386aa08344a6a2a1aa83e1c8a04df78abd4d5b6efc3b5f6d3986f72e5afa5bc23d2372db9fa988b99e35b549e48fbc55927f1bc2c470ebc921de59b4caa668dd9fa34aa6f49b2735ac0cd4ccf6be0513760bed8842fd71286299ee1d0d60c92cbaf52b4b13f2d0293fe582b87aafd5a99e8362226a540045a3664e9606d88f8edaef2bbd4007ce503c7433c00955e2fb61e42a35f1a24d38cdcc47686feddd724adbf5411eaddee24a02e373d2622179b07b565f5068bfcec88f7aa38a14c0e7d291e7fe4ea023ecbc28cb91e35666b1d971361097069ae7b5c9fce15120cb3a2961efa7a1f3fba81e8266f3032807e01821948a272902abb7759b95abd13ca0e66df80cfbb40300cc2654ca2e1585d0caa107818c546bb58178ebb45b1129bc2c68a9bf04965e4e8b448f0b3dc061f1534aca4cae0ed51867e325dadede58cacd57e77ca9ddc7713b3ff30784c9ee81752ff4a8954e1bc61134b5ee0c01f9048c7ab229422ef1256db0e2f984611b815b84f59e565a9d9c4bb9042bcb17af5a2887eb95658dd1b29c040fa3b6e53a175b6885efadb6aa1381887b07ba928b82b92054347df451738adb3537823655820a86c822f445b9ac8fe8f20acbfc901b877a8d4e86755812f41705f0dce5b5b9ea91b21c120c74da31e58ca5ca47a23cbed432379649ff442bd183a8d2ac8f0702bc3df3686c9f7f55fa818961187aac859f88bb53947509c8c661bfa0ef3974d21b34f6e2c0f041d</script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","encrypt":true}],"Post":[{"title":"2012-941","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"2012-941学硕代码题","description":"2012-941学硕代码题","summary":"2012-941学硕代码题","abbrlink":"5e81","date":"2020-10-07T11:12:22.000Z","password":null,"_content":"## 2012-941\n\n#### 1.求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点，路径长度以边数为单位计算\n\n- <font color=\"red\">复习，理解，重点</font>\n\n```c\ntypedef struct VNode{                      //顶点表结点\n    int len0;//距离初始顶点v0的距离\n    int v;//顶点编号\n}Node;//邻接表的顶点类型\nvoid bfsPrintNode(ALGraph *g,int v[],int k){\n    Node Queue[MaxSize];//定义一个顶点类型的队列\n    int front = 0;//队头\n    int rear = 0;//队尾\n    int flag[v0] = 1;//访问后则将其置为1\n    Queue[rear++] = {0,v0};//初始顶点v0入队\n    while(!isEmpty(Q)){\n        Node node = Queue[front++];//v接收出队元素\n        for(ArcNode *p = g.vexset[node.v].firstarc;p != NULL;p = p -> nextarc){\n            if(flag[p -> nextarc == 0]){\n                visit(p -> adjvex);//若p对应的邻接顶点没被访问，则访问它\n                flag[p -> adjvex] = 1;\n                Queue[rear++] = {node.len0 + 1,p -> adjvex};//邻接顶点入队\n            }\n        }\n    }\n    for(int i = 0;i < rear;++i){\n        if(Queue[i].len0 == k){//打印出距离初始顶点距离为k的所有顶点\n            printf(\"%d\",Queue[i].v);\n        }\n    }\n}\n```\n\n","source":"_posts/2012-941.md","raw":"---\ntitle: 2012-941\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nkeywords: 2012-941学硕代码题\ndescription: 2012-941学硕代码题\nsummary: 2012-941学硕代码题\nabbrlink: '5e81'\ndate: 2020-10-07 19:12:22\npassword:\n---\n## 2012-941\n\n#### 1.求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点，路径长度以边数为单位计算\n\n- <font color=\"red\">复习，理解，重点</font>\n\n```c\ntypedef struct VNode{                      //顶点表结点\n    int len0;//距离初始顶点v0的距离\n    int v;//顶点编号\n}Node;//邻接表的顶点类型\nvoid bfsPrintNode(ALGraph *g,int v[],int k){\n    Node Queue[MaxSize];//定义一个顶点类型的队列\n    int front = 0;//队头\n    int rear = 0;//队尾\n    int flag[v0] = 1;//访问后则将其置为1\n    Queue[rear++] = {0,v0};//初始顶点v0入队\n    while(!isEmpty(Q)){\n        Node node = Queue[front++];//v接收出队元素\n        for(ArcNode *p = g.vexset[node.v].firstarc;p != NULL;p = p -> nextarc){\n            if(flag[p -> nextarc == 0]){\n                visit(p -> adjvex);//若p对应的邻接顶点没被访问，则访问它\n                flag[p -> adjvex] = 1;\n                Queue[rear++] = {node.len0 + 1,p -> adjvex};//邻接顶点入队\n            }\n        }\n    }\n    for(int i = 0;i < rear;++i){\n        if(Queue[i].len0 == k){//打印出距离初始顶点距离为k的所有顶点\n            printf(\"%d\",Queue[i].v);\n        }\n    }\n}\n```\n\n","slug":"2012-941","published":1,"updated":"2020-10-07T11:13:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdht0001zl9k7uhk90wz","content":"<h2 id=\"2012-941\"><a class=\"markdownIt-Anchor\" href=\"#2012-941\"></a> 2012-941</h2>\n<h4 id=\"1求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点路径长度以边数为单位计算\"><a class=\"markdownIt-Anchor\" href=\"#1求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点路径长度以边数为单位计算\"></a> 1.求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点，路径长度以边数为单位计算</h4>\n<ul>\n<li><font color=\"red\">复习，理解，重点</font></li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VNode</span>{</span>                      <span class=\"hljs-comment\">//顶点表结点</span>\n    <span class=\"hljs-keyword\">int</span> len0;<span class=\"hljs-comment\">//距离初始顶点v0的距离</span>\n    <span class=\"hljs-keyword\">int</span> v;<span class=\"hljs-comment\">//顶点编号</span>\n}Node;<span class=\"hljs-comment\">//邻接表的顶点类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bfsPrintNode</span><span class=\"hljs-params\">(ALGraph *g,<span class=\"hljs-keyword\">int</span> v[],<span class=\"hljs-keyword\">int</span> k)</span></span>{\n    Node Queue[MaxSize];<span class=\"hljs-comment\">//定义一个顶点类型的队列</span>\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//队头</span>\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//队尾</span>\n    <span class=\"hljs-keyword\">int</span> flag[v0] = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//访问后则将其置为1</span>\n    Queue[rear++] = {<span class=\"hljs-number\">0</span>,v0};<span class=\"hljs-comment\">//初始顶点v0入队</span>\n    <span class=\"hljs-keyword\">while</span>(!isEmpty(Q)){\n        Node node = Queue[front++];<span class=\"hljs-comment\">//v接收出队元素</span>\n        <span class=\"hljs-keyword\">for</span>(ArcNode *p = g.vexset[node.v].firstarc;p != <span class=\"hljs-literal\">NULL</span>;p = p -&gt; nextarc){\n            <span class=\"hljs-keyword\">if</span>(flag[p -&gt; nextarc == <span class=\"hljs-number\">0</span>]){\n                visit(p -&gt; adjvex);<span class=\"hljs-comment\">//若p对应的邻接顶点没被访问，则访问它</span>\n                flag[p -&gt; adjvex] = <span class=\"hljs-number\">1</span>;\n                Queue[rear++] = {node.len0 + <span class=\"hljs-number\">1</span>,p -&gt; adjvex};<span class=\"hljs-comment\">//邻接顶点入队</span>\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; rear;++i){\n        <span class=\"hljs-keyword\">if</span>(Queue[i].len0 == k){<span class=\"hljs-comment\">//打印出距离初始顶点距离为k的所有顶点</span>\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,Queue[i].v);\n        }\n    }\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2012-941\"><a class=\"markdownIt-Anchor\" href=\"#2012-941\"></a> 2012-941</h2>\n<h4 id=\"1求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点路径长度以边数为单位计算\"><a class=\"markdownIt-Anchor\" href=\"#1求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点路径长度以边数为单位计算\"></a> 1.求出无向无权连通图中距离顶点v的最短路径长度k的所有顶点，路径长度以边数为单位计算</h4>\n<ul>\n<li><font color=\"red\">复习，理解，重点</font></li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VNode</span>{</span>                      <span class=\"hljs-comment\">//顶点表结点</span>\n    <span class=\"hljs-keyword\">int</span> len0;<span class=\"hljs-comment\">//距离初始顶点v0的距离</span>\n    <span class=\"hljs-keyword\">int</span> v;<span class=\"hljs-comment\">//顶点编号</span>\n}Node;<span class=\"hljs-comment\">//邻接表的顶点类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bfsPrintNode</span><span class=\"hljs-params\">(ALGraph *g,<span class=\"hljs-keyword\">int</span> v[],<span class=\"hljs-keyword\">int</span> k)</span></span>{\n    Node Queue[MaxSize];<span class=\"hljs-comment\">//定义一个顶点类型的队列</span>\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//队头</span>\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//队尾</span>\n    <span class=\"hljs-keyword\">int</span> flag[v0] = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//访问后则将其置为1</span>\n    Queue[rear++] = {<span class=\"hljs-number\">0</span>,v0};<span class=\"hljs-comment\">//初始顶点v0入队</span>\n    <span class=\"hljs-keyword\">while</span>(!isEmpty(Q)){\n        Node node = Queue[front++];<span class=\"hljs-comment\">//v接收出队元素</span>\n        <span class=\"hljs-keyword\">for</span>(ArcNode *p = g.vexset[node.v].firstarc;p != <span class=\"hljs-literal\">NULL</span>;p = p -&gt; nextarc){\n            <span class=\"hljs-keyword\">if</span>(flag[p -&gt; nextarc == <span class=\"hljs-number\">0</span>]){\n                visit(p -&gt; adjvex);<span class=\"hljs-comment\">//若p对应的邻接顶点没被访问，则访问它</span>\n                flag[p -&gt; adjvex] = <span class=\"hljs-number\">1</span>;\n                Queue[rear++] = {node.len0 + <span class=\"hljs-number\">1</span>,p -&gt; adjvex};<span class=\"hljs-comment\">//邻接顶点入队</span>\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; rear;++i){\n        <span class=\"hljs-keyword\">if</span>(Queue[i].len0 == k){<span class=\"hljs-comment\">//打印出距离初始顶点距离为k的所有顶点</span>\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,Queue[i].v);\n        }\n    }\n}\n</code></pre>\n"},{"title":"2013-941","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"2013-941学硕代码题","description":"2013-941学硕代码题","summary":"2013-941学硕代码题","abbrlink":"9ebc","date":"2020-09-27T06:46:29.000Z","password":null,"_content":"## 2013-941\n\n#### (1).找出二叉树先根序列的最后一个结点\n\n- 二叉查找树由3个域构成\n- key：给出结点数据项的值，为正整数\n- left：结点的左子结点地址\n- right：结点的右子结点地址\n- 根结点地址为root\n- 不能使用递归\n- 不能使用栈\n\n```c\nvoid last(BiTree root){\n    BiTree *p = root;\n    while(p -> right != NULL || p -> left != NULL){\n       if(p -> right){\n           while(p -> right != NULL){\n               p = p -> right;\n           }\n       }else{\n           p = p -> left;\n       }\n    }\n    return p;\n}\n```\n\n#### (2)将key域的值大于等于给定x的值的结点全部删除\n\n```c\nvoid Del(BiTree T){//递归删除树算法\n    if(T != NULL){\n        Del(T -> left);\n        Del(T -> right);\n        free(T);\n    }\n}\nvoid DeleteX(BiTree root,int x){\n    BiTree Queue[MaxSize];\n    int rear = -1,front = -1;\n    BiTree *p = root;\n    BiTree *pre = NULL;\n    while(p -> right != NULL && p -> key <= x){\n        pre = p;\n        p = p -> right;\n    }\n    if(p -> key <= x){\n            return;\n    }\n    Queue[++rear] = p;\n    while(rear != front){\n        p = Queue[++front];\n        if(p -> key > x){\n            Queue[++rear] = p -> left;\n            pre -> right = p -> left;\n            p -> left = NULL;\n            Del(p);\n        }else{\n            Queue[++rear] = p -> right;\n        }\n    }\n}\n```\n","source":"_posts/2013-941.md","raw":"---\ntitle: 2013-941\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nkeywords: 2013-941学硕代码题\ndescription: 2013-941学硕代码题\nsummary: 2013-941学硕代码题\nabbrlink: 9ebc\ndate: 2020-09-27 14:46:29\npassword:\n---\n## 2013-941\n\n#### (1).找出二叉树先根序列的最后一个结点\n\n- 二叉查找树由3个域构成\n- key：给出结点数据项的值，为正整数\n- left：结点的左子结点地址\n- right：结点的右子结点地址\n- 根结点地址为root\n- 不能使用递归\n- 不能使用栈\n\n```c\nvoid last(BiTree root){\n    BiTree *p = root;\n    while(p -> right != NULL || p -> left != NULL){\n       if(p -> right){\n           while(p -> right != NULL){\n               p = p -> right;\n           }\n       }else{\n           p = p -> left;\n       }\n    }\n    return p;\n}\n```\n\n#### (2)将key域的值大于等于给定x的值的结点全部删除\n\n```c\nvoid Del(BiTree T){//递归删除树算法\n    if(T != NULL){\n        Del(T -> left);\n        Del(T -> right);\n        free(T);\n    }\n}\nvoid DeleteX(BiTree root,int x){\n    BiTree Queue[MaxSize];\n    int rear = -1,front = -1;\n    BiTree *p = root;\n    BiTree *pre = NULL;\n    while(p -> right != NULL && p -> key <= x){\n        pre = p;\n        p = p -> right;\n    }\n    if(p -> key <= x){\n            return;\n    }\n    Queue[++rear] = p;\n    while(rear != front){\n        p = Queue[++front];\n        if(p -> key > x){\n            Queue[++rear] = p -> left;\n            pre -> right = p -> left;\n            p -> left = NULL;\n            Del(p);\n        }else{\n            Queue[++rear] = p -> right;\n        }\n    }\n}\n```\n","slug":"2013-941","published":1,"updated":"2020-09-27T06:47:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdhv0003zl9keozj1256","content":"<h2 id=\"2013-941\"><a class=\"markdownIt-Anchor\" href=\"#2013-941\"></a> 2013-941</h2>\n<h4 id=\"1找出二叉树先根序列的最后一个结点\"><a class=\"markdownIt-Anchor\" href=\"#1找出二叉树先根序列的最后一个结点\"></a> (1).找出二叉树先根序列的最后一个结点</h4>\n<ul>\n<li>二叉查找树由3个域构成</li>\n<li>key：给出结点数据项的值，为正整数</li>\n<li>left：结点的左子结点地址</li>\n<li>right：结点的右子结点地址</li>\n<li>根结点地址为root</li>\n<li>不能使用递归</li>\n<li>不能使用栈</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">last</span><span class=\"hljs-params\">(BiTree root)</span></span>{\n    BiTree *p = root;\n    <span class=\"hljs-keyword\">while</span>(p -&gt; right != <span class=\"hljs-literal\">NULL</span> || p -&gt; left != <span class=\"hljs-literal\">NULL</span>){\n       <span class=\"hljs-keyword\">if</span>(p -&gt; right){\n           <span class=\"hljs-keyword\">while</span>(p -&gt; right != <span class=\"hljs-literal\">NULL</span>){\n               p = p -&gt; right;\n           }\n       }<span class=\"hljs-keyword\">else</span>{\n           p = p -&gt; left;\n       }\n    }\n    <span class=\"hljs-keyword\">return</span> p;\n}\n</code></pre>\n<h4 id=\"2将key域的值大于等于给定x的值的结点全部删除\"><a class=\"markdownIt-Anchor\" href=\"#2将key域的值大于等于给定x的值的结点全部删除\"></a> (2)将key域的值大于等于给定x的值的结点全部删除</h4>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(BiTree T)</span></span>{<span class=\"hljs-comment\">//递归删除树算法</span>\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        Del(T -&gt; left);\n        Del(T -&gt; right);\n        <span class=\"hljs-built_in\">free</span>(T);\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteX</span><span class=\"hljs-params\">(BiTree root,<span class=\"hljs-keyword\">int</span> x)</span></span>{\n    BiTree Queue[MaxSize];\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">-1</span>,front = <span class=\"hljs-number\">-1</span>;\n    BiTree *p = root;\n    BiTree *pre = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p -&gt; right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; p -&gt; key &lt;= x){\n        pre = p;\n        p = p -&gt; right;\n    }\n    <span class=\"hljs-keyword\">if</span>(p -&gt; key &lt;= x){\n            <span class=\"hljs-keyword\">return</span>;\n    }\n    Queue[++rear] = p;\n    <span class=\"hljs-keyword\">while</span>(rear != front){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p -&gt; key &gt; x){\n            Queue[++rear] = p -&gt; left;\n            pre -&gt; right = p -&gt; left;\n            p -&gt; left = <span class=\"hljs-literal\">NULL</span>;\n            Del(p);\n        }<span class=\"hljs-keyword\">else</span>{\n            Queue[++rear] = p -&gt; right;\n        }\n    }\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2013-941\"><a class=\"markdownIt-Anchor\" href=\"#2013-941\"></a> 2013-941</h2>\n<h4 id=\"1找出二叉树先根序列的最后一个结点\"><a class=\"markdownIt-Anchor\" href=\"#1找出二叉树先根序列的最后一个结点\"></a> (1).找出二叉树先根序列的最后一个结点</h4>\n<ul>\n<li>二叉查找树由3个域构成</li>\n<li>key：给出结点数据项的值，为正整数</li>\n<li>left：结点的左子结点地址</li>\n<li>right：结点的右子结点地址</li>\n<li>根结点地址为root</li>\n<li>不能使用递归</li>\n<li>不能使用栈</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">last</span><span class=\"hljs-params\">(BiTree root)</span></span>{\n    BiTree *p = root;\n    <span class=\"hljs-keyword\">while</span>(p -&gt; right != <span class=\"hljs-literal\">NULL</span> || p -&gt; left != <span class=\"hljs-literal\">NULL</span>){\n       <span class=\"hljs-keyword\">if</span>(p -&gt; right){\n           <span class=\"hljs-keyword\">while</span>(p -&gt; right != <span class=\"hljs-literal\">NULL</span>){\n               p = p -&gt; right;\n           }\n       }<span class=\"hljs-keyword\">else</span>{\n           p = p -&gt; left;\n       }\n    }\n    <span class=\"hljs-keyword\">return</span> p;\n}\n</code></pre>\n<h4 id=\"2将key域的值大于等于给定x的值的结点全部删除\"><a class=\"markdownIt-Anchor\" href=\"#2将key域的值大于等于给定x的值的结点全部删除\"></a> (2)将key域的值大于等于给定x的值的结点全部删除</h4>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(BiTree T)</span></span>{<span class=\"hljs-comment\">//递归删除树算法</span>\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        Del(T -&gt; left);\n        Del(T -&gt; right);\n        <span class=\"hljs-built_in\">free</span>(T);\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteX</span><span class=\"hljs-params\">(BiTree root,<span class=\"hljs-keyword\">int</span> x)</span></span>{\n    BiTree Queue[MaxSize];\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">-1</span>,front = <span class=\"hljs-number\">-1</span>;\n    BiTree *p = root;\n    BiTree *pre = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p -&gt; right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; p -&gt; key &lt;= x){\n        pre = p;\n        p = p -&gt; right;\n    }\n    <span class=\"hljs-keyword\">if</span>(p -&gt; key &lt;= x){\n            <span class=\"hljs-keyword\">return</span>;\n    }\n    Queue[++rear] = p;\n    <span class=\"hljs-keyword\">while</span>(rear != front){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p -&gt; key &gt; x){\n            Queue[++rear] = p -&gt; left;\n            pre -&gt; right = p -&gt; left;\n            p -&gt; left = <span class=\"hljs-literal\">NULL</span>;\n            Del(p);\n        }<span class=\"hljs-keyword\">else</span>{\n            Queue[++rear] = p -&gt; right;\n        }\n    }\n}\n</code></pre>\n"},{"title":"2014-941","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"2014-941学硕代码题","description":"2014-941学硕代码题","summary":"2014-941学硕代码题","abbrlink":"5e09","date":"2020-09-25T07:27:49.000Z","password":null,"_content":"## 2014-941\n\n#### 1.将整数数组[1…n]中所有的偶数放到所有奇数之前，并求时间复杂度\n\n```c\nint swap(int a,int b){\n    int temp = b;\n    b = a;\n    a = temp;\n}\nint shuzu(int A[]){\n    int i,j = 0;\n    while(A[i] != NULL){\n        if(A[i] % 2 != 0){//奇数\n        \ti++;\n        }\n        if(A[i] % 2 = 0){//偶数\n            swap(A[i],A[j]);\n            i++；\n            j++;\n        }\n    }\n    return A;\n}\n```\n\n#### 2.按递减次序打印所有左子树非空，右子树为空的结点的关键字\n\n- **<font color=\"red\">重要</font>**\n\n- 二叉查找树采用链式存储\n- 各个结点的关键词均不相同\n- 非递归算法\n\n------\n\n- 利用栈，先一路走到最右边，然后判断该结点是否符合题意\n- 若不符合转向左子树，继续在左子树的右子树里依次寻找\n\n------\n\n\n```c\nint guanjianzi(BiTree T){\n    BiTree *p = T;\n    int Stack[];\n    int top = -1;\n    while(p || top > -1){\n        while(p){\n            Stack[++top] = p;\n            p = p -> rchild;//右分支向下\n        }\n        if(top > -1){\n            p = Stack[top--];\n            if(p -> lchild != NULL && p -> rchild == NULL){\n                printf(p -> data);\n            }\n            p = p -> lchild;//左分支\n        }//if\n    }//while\n}\n```\n","source":"_posts/2014-941.md","raw":"---\ntitle: 2014-941\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nkeywords: 2014-941学硕代码题\ndescription: 2014-941学硕代码题\nsummary: 2014-941学硕代码题\nabbrlink: '5e09'\ndate: 2020-09-25 15:27:49\npassword:\n---\n## 2014-941\n\n#### 1.将整数数组[1…n]中所有的偶数放到所有奇数之前，并求时间复杂度\n\n```c\nint swap(int a,int b){\n    int temp = b;\n    b = a;\n    a = temp;\n}\nint shuzu(int A[]){\n    int i,j = 0;\n    while(A[i] != NULL){\n        if(A[i] % 2 != 0){//奇数\n        \ti++;\n        }\n        if(A[i] % 2 = 0){//偶数\n            swap(A[i],A[j]);\n            i++；\n            j++;\n        }\n    }\n    return A;\n}\n```\n\n#### 2.按递减次序打印所有左子树非空，右子树为空的结点的关键字\n\n- **<font color=\"red\">重要</font>**\n\n- 二叉查找树采用链式存储\n- 各个结点的关键词均不相同\n- 非递归算法\n\n------\n\n- 利用栈，先一路走到最右边，然后判断该结点是否符合题意\n- 若不符合转向左子树，继续在左子树的右子树里依次寻找\n\n------\n\n\n```c\nint guanjianzi(BiTree T){\n    BiTree *p = T;\n    int Stack[];\n    int top = -1;\n    while(p || top > -1){\n        while(p){\n            Stack[++top] = p;\n            p = p -> rchild;//右分支向下\n        }\n        if(top > -1){\n            p = Stack[top--];\n            if(p -> lchild != NULL && p -> rchild == NULL){\n                printf(p -> data);\n            }\n            p = p -> lchild;//左分支\n        }//if\n    }//while\n}\n```\n","slug":"2014-941","published":1,"updated":"2020-09-25T07:31:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdhx0007zl9k3smu2xbr","content":"<h2 id=\"2014-941\"><a class=\"markdownIt-Anchor\" href=\"#2014-941\"></a> 2014-941</h2>\n<h4 id=\"1将整数数组1n中所有的偶数放到所有奇数之前并求时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#1将整数数组1n中所有的偶数放到所有奇数之前并求时间复杂度\"></a> 1.将整数数组[1…n]中所有的偶数放到所有奇数之前，并求时间复杂度</h4>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a,<span class=\"hljs-keyword\">int</span> b)</span></span>{\n    <span class=\"hljs-keyword\">int</span> temp = b;\n    b = a;\n    a = temp;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">shuzu</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[])</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(A[i] != <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">if</span>(A[i] % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>){<span class=\"hljs-comment\">//奇数</span>\n        \ti++;\n        }\n        <span class=\"hljs-keyword\">if</span>(A[i] % <span class=\"hljs-number\">2</span> = <span class=\"hljs-number\">0</span>){<span class=\"hljs-comment\">//偶数</span>\n            swap(A[i],A[j]);\n            i++；\n            j++;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> A;\n}\n</code></pre>\n<h4 id=\"2按递减次序打印所有左子树非空右子树为空的结点的关键字\"><a class=\"markdownIt-Anchor\" href=\"#2按递减次序打印所有左子树非空右子树为空的结点的关键字\"></a> 2.按递减次序打印所有左子树非空，右子树为空的结点的关键字</h4>\n<ul>\n<li>\n<p><strong><font color=\"red\">重要</font></strong></p>\n</li>\n<li>\n<p>二叉查找树采用链式存储</p>\n</li>\n<li>\n<p>各个结点的关键词均不相同</p>\n</li>\n<li>\n<p>非递归算法</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>利用栈，先一路走到最右边，然后判断该结点是否符合题意</li>\n<li>若不符合转向左子树，继续在左子树的右子树里依次寻找</li>\n</ul>\n<hr>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">guanjianzi</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree *p = T;\n    <span class=\"hljs-keyword\">int</span> Stack[];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">while</span>(p || top &gt; <span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">while</span>(p){\n            Stack[++top] = p;\n            p = p -&gt; rchild;<span class=\"hljs-comment\">//右分支向下</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(top &gt; <span class=\"hljs-number\">-1</span>){\n            p = Stack[top--];\n            <span class=\"hljs-keyword\">if</span>(p -&gt; lchild != <span class=\"hljs-literal\">NULL</span> &amp;&amp; p -&gt; rchild == <span class=\"hljs-literal\">NULL</span>){\n                <span class=\"hljs-built_in\">printf</span>(p -&gt; data);\n            }\n            p = p -&gt; lchild;<span class=\"hljs-comment\">//左分支</span>\n        }<span class=\"hljs-comment\">//if</span>\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2014-941\"><a class=\"markdownIt-Anchor\" href=\"#2014-941\"></a> 2014-941</h2>\n<h4 id=\"1将整数数组1n中所有的偶数放到所有奇数之前并求时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#1将整数数组1n中所有的偶数放到所有奇数之前并求时间复杂度\"></a> 1.将整数数组[1…n]中所有的偶数放到所有奇数之前，并求时间复杂度</h4>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a,<span class=\"hljs-keyword\">int</span> b)</span></span>{\n    <span class=\"hljs-keyword\">int</span> temp = b;\n    b = a;\n    a = temp;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">shuzu</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[])</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(A[i] != <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">if</span>(A[i] % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>){<span class=\"hljs-comment\">//奇数</span>\n        \ti++;\n        }\n        <span class=\"hljs-keyword\">if</span>(A[i] % <span class=\"hljs-number\">2</span> = <span class=\"hljs-number\">0</span>){<span class=\"hljs-comment\">//偶数</span>\n            swap(A[i],A[j]);\n            i++；\n            j++;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> A;\n}\n</code></pre>\n<h4 id=\"2按递减次序打印所有左子树非空右子树为空的结点的关键字\"><a class=\"markdownIt-Anchor\" href=\"#2按递减次序打印所有左子树非空右子树为空的结点的关键字\"></a> 2.按递减次序打印所有左子树非空，右子树为空的结点的关键字</h4>\n<ul>\n<li>\n<p><strong><font color=\"red\">重要</font></strong></p>\n</li>\n<li>\n<p>二叉查找树采用链式存储</p>\n</li>\n<li>\n<p>各个结点的关键词均不相同</p>\n</li>\n<li>\n<p>非递归算法</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li>利用栈，先一路走到最右边，然后判断该结点是否符合题意</li>\n<li>若不符合转向左子树，继续在左子树的右子树里依次寻找</li>\n</ul>\n<hr />\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">guanjianzi</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree *p = T;\n    <span class=\"hljs-keyword\">int</span> Stack[];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">while</span>(p || top &gt; <span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">while</span>(p){\n            Stack[++top] = p;\n            p = p -&gt; rchild;<span class=\"hljs-comment\">//右分支向下</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(top &gt; <span class=\"hljs-number\">-1</span>){\n            p = Stack[top--];\n            <span class=\"hljs-keyword\">if</span>(p -&gt; lchild != <span class=\"hljs-literal\">NULL</span> &amp;&amp; p -&gt; rchild == <span class=\"hljs-literal\">NULL</span>){\n                <span class=\"hljs-built_in\">printf</span>(p -&gt; data);\n            }\n            p = p -&gt; lchild;<span class=\"hljs-comment\">//左分支</span>\n        }<span class=\"hljs-comment\">//if</span>\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n"},{"title":"2015-941","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"2015-941学硕代码题","description":"2015-941学硕代码题","summary":"2015-941学硕代码题","abbrlink":"9e34","date":"2020-09-22T12:36:24.000Z","password":null,"_content":"## 2015-941\n\n#### 1.判断两个单链表是否相交\n\n- 两个单链表的头指针分别为head1和head2\n- 如果相交则返回第一个交点\n- 要求算法的时间复杂度为$O(length1+length2)$\n\n（1）算法思想\n\n- 先创建一个子函数求出链表长度\n- 主函数：\n- 因为两个链表如果相交，则两个链表中从某一结点开始往后一定全一样\n- 所以长链表比锻炼表前面多出的部分不可能存在交点\n- 利用链表的长度差值n，长链表从第n+1个结点，短链表从第一个结点开始，同时开始遍历\n\n```c\nint len(LinkList L){\n    int i = 0;\n    LNode *p = L;\n    while(p != NULL){\n        i++;\n        p = p -> next;\n    }\n    return i;\n}\nLNode Search(LinkList head1,LinkList head2){\n    int length1 = len(head1);\n    int length2 = len(head2);\n    int n;\n    LNode *q = head1;\n    LNode *s = head2;\n    if(length1 > length2){\n        n = length1 - length2;\n        for(int j = 0; j < n; j++){\n            q = q -> next;\n        }\n    }\n    if(length1 < length2){\n        n = length2 - length1;\n        for(int j = 0; j < n; j++){\n            s = s -> next;\n        }\n    }\n    while(q != NULL && q -> data != s -> data){\n        q = q -> next;\n        s = s -> next;\n    }\n    return q;\n}\n```\n\n#### 2.二叉树各层独生叶结点的数目\n\n- 独生叶结点（既是叶结点又无兄弟结点）\n- root指向二叉树根结点的指针\n- 输出各层独生叶结点的数目\n\n```c\nint shumu(BiTree root){\n    BiTree p = root;\n    int front = -1, rear = -1;\n    int level = 1;//层数\n    int last = 0;\n    int Queue[];\n    if(p = NULL){\n        return 0;\n    }\n    Queue[++rear] = p ;\n    while(front != rear){\n        int num = 0;\n        p = Queue[++front];\n        if(p -> lchild && p -> rchild){   \n            Queue[++rear] = p -> lchild;\n            Queue[++rear] = p -> rchild;\n            if(front == last){\n                level++;\n                last = rear;\n                printf(\"%d\",level);\n                printf(\"%d\",num);\n            }\n        }\n        if(p -> lchild && p -> rchild = NULL){\n            Queue[++rear] = p -> lchild;\n            num = num + 1;\n            if(front == last){\n                level++;\n                last = rear;\n            }\n        }\n        if(p -> rchild && p -> lchild = NULL){\n            Queue[++rear] = p -> rchild;\n            num = num + 1;\n            if(front == last){\n                level++;\n                last = rear;\n                printf(\"%d\",level);\n                printf(\"%d\",num);\n            }\n        }\n    }\n}\n```","source":"_posts/2015-941.md","raw":"---\ntitle: 2015-941\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nkeywords: 2015-941学硕代码题\ndescription: 2015-941学硕代码题\nsummary: 2015-941学硕代码题\nabbrlink: '9e34'\ndate: 2020-09-22 20:36:24\npassword:\n---\n## 2015-941\n\n#### 1.判断两个单链表是否相交\n\n- 两个单链表的头指针分别为head1和head2\n- 如果相交则返回第一个交点\n- 要求算法的时间复杂度为$O(length1+length2)$\n\n（1）算法思想\n\n- 先创建一个子函数求出链表长度\n- 主函数：\n- 因为两个链表如果相交，则两个链表中从某一结点开始往后一定全一样\n- 所以长链表比锻炼表前面多出的部分不可能存在交点\n- 利用链表的长度差值n，长链表从第n+1个结点，短链表从第一个结点开始，同时开始遍历\n\n```c\nint len(LinkList L){\n    int i = 0;\n    LNode *p = L;\n    while(p != NULL){\n        i++;\n        p = p -> next;\n    }\n    return i;\n}\nLNode Search(LinkList head1,LinkList head2){\n    int length1 = len(head1);\n    int length2 = len(head2);\n    int n;\n    LNode *q = head1;\n    LNode *s = head2;\n    if(length1 > length2){\n        n = length1 - length2;\n        for(int j = 0; j < n; j++){\n            q = q -> next;\n        }\n    }\n    if(length1 < length2){\n        n = length2 - length1;\n        for(int j = 0; j < n; j++){\n            s = s -> next;\n        }\n    }\n    while(q != NULL && q -> data != s -> data){\n        q = q -> next;\n        s = s -> next;\n    }\n    return q;\n}\n```\n\n#### 2.二叉树各层独生叶结点的数目\n\n- 独生叶结点（既是叶结点又无兄弟结点）\n- root指向二叉树根结点的指针\n- 输出各层独生叶结点的数目\n\n```c\nint shumu(BiTree root){\n    BiTree p = root;\n    int front = -1, rear = -1;\n    int level = 1;//层数\n    int last = 0;\n    int Queue[];\n    if(p = NULL){\n        return 0;\n    }\n    Queue[++rear] = p ;\n    while(front != rear){\n        int num = 0;\n        p = Queue[++front];\n        if(p -> lchild && p -> rchild){   \n            Queue[++rear] = p -> lchild;\n            Queue[++rear] = p -> rchild;\n            if(front == last){\n                level++;\n                last = rear;\n                printf(\"%d\",level);\n                printf(\"%d\",num);\n            }\n        }\n        if(p -> lchild && p -> rchild = NULL){\n            Queue[++rear] = p -> lchild;\n            num = num + 1;\n            if(front == last){\n                level++;\n                last = rear;\n            }\n        }\n        if(p -> rchild && p -> lchild = NULL){\n            Queue[++rear] = p -> rchild;\n            num = num + 1;\n            if(front == last){\n                level++;\n                last = rear;\n                printf(\"%d\",level);\n                printf(\"%d\",num);\n            }\n        }\n    }\n}\n```","slug":"2015-941","published":1,"updated":"2020-09-23T07:52:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdhy0009zl9kab4v9vbj","content":"<h2 id=\"2015-941\"><a class=\"markdownIt-Anchor\" href=\"#2015-941\"></a> 2015-941</h2>\n<h4 id=\"1判断两个单链表是否相交\"><a class=\"markdownIt-Anchor\" href=\"#1判断两个单链表是否相交\"></a> 1.判断两个单链表是否相交</h4>\n<ul>\n<li>两个单链表的头指针分别为head1和head2</li>\n<li>如果相交则返回第一个交点</li>\n<li>要求算法的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mn>1</mn><mo>+</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(length1+length2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>（1）算法思想</p>\n<ul>\n<li>先创建一个子函数求出链表长度</li>\n<li>主函数：</li>\n<li>因为两个链表如果相交，则两个链表中从某一结点开始往后一定全一样</li>\n<li>所以长链表比锻炼表前面多出的部分不可能存在交点</li>\n<li>利用链表的长度差值n，长链表从第n+1个结点，短链表从第一个结点开始，同时开始遍历</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">len</span><span class=\"hljs-params\">(LinkList L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n    LNode *p = L;\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span>){\n        i++;\n        p = p -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> i;\n}\n<span class=\"hljs-function\">LNode <span class=\"hljs-title\">Search</span><span class=\"hljs-params\">(LinkList head1,LinkList head2)</span></span>{\n    <span class=\"hljs-keyword\">int</span> length1 = len(head1);\n    <span class=\"hljs-keyword\">int</span> length2 = len(head2);\n    <span class=\"hljs-keyword\">int</span> n;\n    LNode *q = head1;\n    LNode *s = head2;\n    <span class=\"hljs-keyword\">if</span>(length1 &gt; length2){\n        n = length1 - length2;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++){\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(length1 &lt; length2){\n        n = length2 - length1;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++){\n            s = s -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(q != <span class=\"hljs-literal\">NULL</span> &amp;&amp; q -&gt; data != s -&gt; data){\n        q = q -&gt; next;\n        s = s -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> q;\n}\n</code></pre>\n<h4 id=\"2二叉树各层独生叶结点的数目\"><a class=\"markdownIt-Anchor\" href=\"#2二叉树各层独生叶结点的数目\"></a> 2.二叉树各层独生叶结点的数目</h4>\n<ul>\n<li>独生叶结点（既是叶结点又无兄弟结点）</li>\n<li>root指向二叉树根结点的指针</li>\n<li>输出各层独生叶结点的数目</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">shumu</span><span class=\"hljs-params\">(BiTree root)</span></span>{\n    BiTree p = root;\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">-1</span>, rear = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">int</span> level = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//层数</span>\n    <span class=\"hljs-keyword\">int</span> last = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">int</span> Queue[];\n    <span class=\"hljs-keyword\">if</span>(p = <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    Queue[++rear] = p ;\n    <span class=\"hljs-keyword\">while</span>(front != rear){\n        <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">0</span>;\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p -&gt; lchild &amp;&amp; p -&gt; rchild){   \n            Queue[++rear] = p -&gt; lchild;\n            Queue[++rear] = p -&gt; rchild;\n            <span class=\"hljs-keyword\">if</span>(front == last){\n                level++;\n                last = rear;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,level);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,num);\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p -&gt; lchild &amp;&amp; p -&gt; rchild = <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p -&gt; lchild;\n            num = num + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span>(front == last){\n                level++;\n                last = rear;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p -&gt; rchild &amp;&amp; p -&gt; lchild = <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p -&gt; rchild;\n            num = num + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span>(front == last){\n                level++;\n                last = rear;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,level);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,num);\n            }\n        }\n    }\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2015-941\"><a class=\"markdownIt-Anchor\" href=\"#2015-941\"></a> 2015-941</h2>\n<h4 id=\"1判断两个单链表是否相交\"><a class=\"markdownIt-Anchor\" href=\"#1判断两个单链表是否相交\"></a> 1.判断两个单链表是否相交</h4>\n<ul>\n<li>两个单链表的头指针分别为head1和head2</li>\n<li>如果相交则返回第一个交点</li>\n<li>要求算法的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mn>1</mn><mo>+</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(length1+length2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>（1）算法思想</p>\n<ul>\n<li>先创建一个子函数求出链表长度</li>\n<li>主函数：</li>\n<li>因为两个链表如果相交，则两个链表中从某一结点开始往后一定全一样</li>\n<li>所以长链表比锻炼表前面多出的部分不可能存在交点</li>\n<li>利用链表的长度差值n，长链表从第n+1个结点，短链表从第一个结点开始，同时开始遍历</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">len</span><span class=\"hljs-params\">(LinkList L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n    LNode *p = L;\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span>){\n        i++;\n        p = p -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> i;\n}\n<span class=\"hljs-function\">LNode <span class=\"hljs-title\">Search</span><span class=\"hljs-params\">(LinkList head1,LinkList head2)</span></span>{\n    <span class=\"hljs-keyword\">int</span> length1 = len(head1);\n    <span class=\"hljs-keyword\">int</span> length2 = len(head2);\n    <span class=\"hljs-keyword\">int</span> n;\n    LNode *q = head1;\n    LNode *s = head2;\n    <span class=\"hljs-keyword\">if</span>(length1 &gt; length2){\n        n = length1 - length2;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++){\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(length1 &lt; length2){\n        n = length2 - length1;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++){\n            s = s -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(q != <span class=\"hljs-literal\">NULL</span> &amp;&amp; q -&gt; data != s -&gt; data){\n        q = q -&gt; next;\n        s = s -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> q;\n}\n</code></pre>\n<h4 id=\"2二叉树各层独生叶结点的数目\"><a class=\"markdownIt-Anchor\" href=\"#2二叉树各层独生叶结点的数目\"></a> 2.二叉树各层独生叶结点的数目</h4>\n<ul>\n<li>独生叶结点（既是叶结点又无兄弟结点）</li>\n<li>root指向二叉树根结点的指针</li>\n<li>输出各层独生叶结点的数目</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">shumu</span><span class=\"hljs-params\">(BiTree root)</span></span>{\n    BiTree p = root;\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">-1</span>, rear = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">int</span> level = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//层数</span>\n    <span class=\"hljs-keyword\">int</span> last = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">int</span> Queue[];\n    <span class=\"hljs-keyword\">if</span>(p = <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    Queue[++rear] = p ;\n    <span class=\"hljs-keyword\">while</span>(front != rear){\n        <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">0</span>;\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p -&gt; lchild &amp;&amp; p -&gt; rchild){   \n            Queue[++rear] = p -&gt; lchild;\n            Queue[++rear] = p -&gt; rchild;\n            <span class=\"hljs-keyword\">if</span>(front == last){\n                level++;\n                last = rear;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,level);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,num);\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p -&gt; lchild &amp;&amp; p -&gt; rchild = <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p -&gt; lchild;\n            num = num + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span>(front == last){\n                level++;\n                last = rear;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p -&gt; rchild &amp;&amp; p -&gt; lchild = <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p -&gt; rchild;\n            num = num + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span>(front == last){\n                level++;\n                last = rear;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,level);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,num);\n            }\n        }\n    }\n}\n</code></pre>\n"},{"title":"2016-941","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"2016-941学硕代码题","description":"2016-941学硕代码题","summary":"2016-941学硕代码题","abbrlink":"9e70","date":"2020-09-20T10:56:04.000Z","password":null,"_content":"## 2016-941\n\n#### 1.查找倒数第k个值\n\n- 一个带有表头结点的**单链表**，结点结构为（data，link）\n- 链表只给出了头指针list\n- 在不改变链表的前提下，查找出链表中倒数第k个位置上的结点\n- 若查找成功，输出该结点的data域的值，并返回1；否则，只返回0\n\n（1）描述算法基本思想\n\n- 先求出链表的长度\n- 再用链表长度减去倒数第k个，就为倒数第k个的正向下标\n- 例如：链表长度为6，求倒数第2个值，即正数6-2=4下标\n- 在正向循环得出即可\n\n（2）写出代码\n\n（3）分析时间复杂性\n\n```c\ntypedef struct LNode{     //定义单链表结点类型\n    int data;             //数据域\n    struct LNode *link;   //指针域，指向下一个结点的指针\n}LNode,*LinkList;         //LNode是结构体的别名，用LNode即可代替typedef struct LNode\n                          //LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next\nint DaoshuK(LinkList list，int k){\n    int len = 0;\n    int i = -1;//\n    LNode *p = list, *q = list;   //p用来求链表长度,q开始查找倒数第k个值的下标\n    while(p != NULL){             //求链表长度\n        len++;\n        p = p -> link;\n    }\n    while(q->link){\n        i++;\n        if(i == len-k){           //找倒数第k个值\n            int data = q->data;\n            return data,1；\n        }\n        q = q -> link;\n    }\n    return 0;    \n}\n```\n\n#### 2.输出二叉树序列S\n\n- 输出二叉树序列，以r为树根\n- 给出二叉树序列，输出二叉树\n\n（1）算法思想\n\n- 引入一个辅助栈，以树的先序非递归遍历思想为基础，根据所给序列正向建树。\n- 若当前p指向结点非空，对应序号为0，则他的左右孩子赋值为空；\n- 对应序号为1，则创建一个结点，其左指针指向新创建的结点；\n- 若对应序号为2，则创建两个结点，其左右指针分别指向两个结点\n\n（2）代码\n\n```c\nBiTree CreateTree(BiTree &r,int A[],int len){\n    //该算法根据数组A中序建树，序列长度就是数组长度len\n    BiTree Stack[MaxSize];\n    int top = -1;//栈初始化\n    int i = 0;//计数值，判断序列结束\n    BiTree p = r, bt = NULL;//p用来遍历，bt用来辅助创造结点\n    while(p != NULL || top != -1 && i < len){\n        if(p != MULL){\n            if(A[i] == 0){\n                p -> lchild = NULL;\n                P -> rchild = NULL;\n                Stack[++top] = p;\n            }\n            if(A[i] == 1){\n                bt = (BiTree)malloc(sizeof(BiTree));\n                p -> lchild = bt;\n                P -> rchild = NULL;\n                Stack[++top] = NULL;\n            }\n            if(A[i] == 2){\n                bt = (BiTree)malloc(sizeof(BiTree));\n                p -> lchild = bt;\n                bt = (BiTree)malloc(sizeof(BiTree));\n                P -> rchild = bt;\n                Stack[++top] = p;\n            }\n            i++;\n            p = p -> lchild\n        }else{\n            p = Stack[top--];\n            p = p -> rchild;\n        }\n    }\n    return r;\n}\n```","source":"_posts/2016-941.md","raw":"---\ntitle: 2016-941\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nkeywords: 2016-941学硕代码题\ndescription: 2016-941学硕代码题\nsummary: 2016-941学硕代码题\nabbrlink: '9e70'\ndate: 2020-09-20 18:56:04\npassword:\n---\n## 2016-941\n\n#### 1.查找倒数第k个值\n\n- 一个带有表头结点的**单链表**，结点结构为（data，link）\n- 链表只给出了头指针list\n- 在不改变链表的前提下，查找出链表中倒数第k个位置上的结点\n- 若查找成功，输出该结点的data域的值，并返回1；否则，只返回0\n\n（1）描述算法基本思想\n\n- 先求出链表的长度\n- 再用链表长度减去倒数第k个，就为倒数第k个的正向下标\n- 例如：链表长度为6，求倒数第2个值，即正数6-2=4下标\n- 在正向循环得出即可\n\n（2）写出代码\n\n（3）分析时间复杂性\n\n```c\ntypedef struct LNode{     //定义单链表结点类型\n    int data;             //数据域\n    struct LNode *link;   //指针域，指向下一个结点的指针\n}LNode,*LinkList;         //LNode是结构体的别名，用LNode即可代替typedef struct LNode\n                          //LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next\nint DaoshuK(LinkList list，int k){\n    int len = 0;\n    int i = -1;//\n    LNode *p = list, *q = list;   //p用来求链表长度,q开始查找倒数第k个值的下标\n    while(p != NULL){             //求链表长度\n        len++;\n        p = p -> link;\n    }\n    while(q->link){\n        i++;\n        if(i == len-k){           //找倒数第k个值\n            int data = q->data;\n            return data,1；\n        }\n        q = q -> link;\n    }\n    return 0;    \n}\n```\n\n#### 2.输出二叉树序列S\n\n- 输出二叉树序列，以r为树根\n- 给出二叉树序列，输出二叉树\n\n（1）算法思想\n\n- 引入一个辅助栈，以树的先序非递归遍历思想为基础，根据所给序列正向建树。\n- 若当前p指向结点非空，对应序号为0，则他的左右孩子赋值为空；\n- 对应序号为1，则创建一个结点，其左指针指向新创建的结点；\n- 若对应序号为2，则创建两个结点，其左右指针分别指向两个结点\n\n（2）代码\n\n```c\nBiTree CreateTree(BiTree &r,int A[],int len){\n    //该算法根据数组A中序建树，序列长度就是数组长度len\n    BiTree Stack[MaxSize];\n    int top = -1;//栈初始化\n    int i = 0;//计数值，判断序列结束\n    BiTree p = r, bt = NULL;//p用来遍历，bt用来辅助创造结点\n    while(p != NULL || top != -1 && i < len){\n        if(p != MULL){\n            if(A[i] == 0){\n                p -> lchild = NULL;\n                P -> rchild = NULL;\n                Stack[++top] = p;\n            }\n            if(A[i] == 1){\n                bt = (BiTree)malloc(sizeof(BiTree));\n                p -> lchild = bt;\n                P -> rchild = NULL;\n                Stack[++top] = NULL;\n            }\n            if(A[i] == 2){\n                bt = (BiTree)malloc(sizeof(BiTree));\n                p -> lchild = bt;\n                bt = (BiTree)malloc(sizeof(BiTree));\n                P -> rchild = bt;\n                Stack[++top] = p;\n            }\n            i++;\n            p = p -> lchild\n        }else{\n            p = Stack[top--];\n            p = p -> rchild;\n        }\n    }\n    return r;\n}\n```","slug":"2016-941","published":1,"updated":"2020-09-22T12:23:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdhz000bzl9k41rx7hnk","content":"<h2 id=\"2016-941\"><a class=\"markdownIt-Anchor\" href=\"#2016-941\"></a> 2016-941</h2>\n<h4 id=\"1查找倒数第k个值\"><a class=\"markdownIt-Anchor\" href=\"#1查找倒数第k个值\"></a> 1.查找倒数第k个值</h4>\n<ul>\n<li>一个带有表头结点的<strong>单链表</strong>，结点结构为（data，link）</li>\n<li>链表只给出了头指针list</li>\n<li>在不改变链表的前提下，查找出链表中倒数第k个位置上的结点</li>\n<li>若查找成功，输出该结点的data域的值，并返回1；否则，只返回0</li>\n</ul>\n<p>（1）描述算法基本思想</p>\n<ul>\n<li>先求出链表的长度</li>\n<li>再用链表长度减去倒数第k个，就为倒数第k个的正向下标</li>\n<li>例如：链表长度为6，求倒数第2个值，即正数6-2=4下标</li>\n<li>在正向循环得出即可</li>\n</ul>\n<p>（2）写出代码</p>\n<p>（3）分析时间复杂性</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>{</span>     <span class=\"hljs-comment\">//定义单链表结点类型</span>\n    <span class=\"hljs-keyword\">int</span> data;             <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">link</span>;</span>   <span class=\"hljs-comment\">//指针域，指向下一个结点的指针</span>\n}LNode,*LinkList;         <span class=\"hljs-comment\">//LNode是结构体的别名，用LNode即可代替typedef struct LNode</span>\n                          <span class=\"hljs-comment\">//LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">DaoshuK</span><span class=\"hljs-params\">(LinkList <span class=\"hljs-built_in\">list</span>，<span class=\"hljs-keyword\">int</span> k)</span></span>{\n    <span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//</span>\n    LNode *p = <span class=\"hljs-built_in\">list</span>, *q = <span class=\"hljs-built_in\">list</span>;   <span class=\"hljs-comment\">//p用来求链表长度,q开始查找倒数第k个值的下标</span>\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span>){             <span class=\"hljs-comment\">//求链表长度</span>\n        len++;\n        p = p -&gt; link;\n    }\n    <span class=\"hljs-keyword\">while</span>(q-&gt;link){\n        i++;\n        <span class=\"hljs-keyword\">if</span>(i == len-k){           <span class=\"hljs-comment\">//找倒数第k个值</span>\n            <span class=\"hljs-keyword\">int</span> data = q-&gt;data;\n            <span class=\"hljs-keyword\">return</span> data,<span class=\"hljs-number\">1</span>；\n        }\n        q = q -&gt; link;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;    \n}\n</code></pre>\n<h4 id=\"2输出二叉树序列s\"><a class=\"markdownIt-Anchor\" href=\"#2输出二叉树序列s\"></a> 2.输出二叉树序列S</h4>\n<ul>\n<li>输出二叉树序列，以r为树根</li>\n<li>给出二叉树序列，输出二叉树</li>\n</ul>\n<p>（1）算法思想</p>\n<ul>\n<li>引入一个辅助栈，以树的先序非递归遍历思想为基础，根据所给序列正向建树。</li>\n<li>若当前p指向结点非空，对应序号为0，则他的左右孩子赋值为空；</li>\n<li>对应序号为1，则创建一个结点，其左指针指向新创建的结点；</li>\n<li>若对应序号为2，则创建两个结点，其左右指针分别指向两个结点</li>\n</ul>\n<p>（2）代码</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">CreateTree</span><span class=\"hljs-params\">(BiTree &amp;r,<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    <span class=\"hljs-comment\">//该算法根据数组A中序建树，序列长度就是数组长度len</span>\n    BiTree Stack[MaxSize];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//栈初始化</span>\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//计数值，判断序列结束</span>\n    BiTree p = r, bt = <span class=\"hljs-literal\">NULL</span>;<span class=\"hljs-comment\">//p用来遍历，bt用来辅助创造结点</span>\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span> || top != <span class=\"hljs-number\">-1</span> &amp;&amp; i &lt; len){\n        <span class=\"hljs-keyword\">if</span>(p != MULL){\n            <span class=\"hljs-keyword\">if</span>(A[i] == <span class=\"hljs-number\">0</span>){\n                p -&gt; lchild = <span class=\"hljs-literal\">NULL</span>;\n                P -&gt; rchild = <span class=\"hljs-literal\">NULL</span>;\n                Stack[++top] = p;\n            }\n            <span class=\"hljs-keyword\">if</span>(A[i] == <span class=\"hljs-number\">1</span>){\n                bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTree));\n                p -&gt; lchild = bt;\n                P -&gt; rchild = <span class=\"hljs-literal\">NULL</span>;\n                Stack[++top] = <span class=\"hljs-literal\">NULL</span>;\n            }\n            <span class=\"hljs-keyword\">if</span>(A[i] == <span class=\"hljs-number\">2</span>){\n                bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTree));\n                p -&gt; lchild = bt;\n                bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTree));\n                P -&gt; rchild = bt;\n                Stack[++top] = p;\n            }\n            i++;\n            p = p -&gt; lchild\n        }<span class=\"hljs-keyword\">else</span>{\n            p = Stack[top--];\n            p = p -&gt; rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> r;\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2016-941\"><a class=\"markdownIt-Anchor\" href=\"#2016-941\"></a> 2016-941</h2>\n<h4 id=\"1查找倒数第k个值\"><a class=\"markdownIt-Anchor\" href=\"#1查找倒数第k个值\"></a> 1.查找倒数第k个值</h4>\n<ul>\n<li>一个带有表头结点的<strong>单链表</strong>，结点结构为（data，link）</li>\n<li>链表只给出了头指针list</li>\n<li>在不改变链表的前提下，查找出链表中倒数第k个位置上的结点</li>\n<li>若查找成功，输出该结点的data域的值，并返回1；否则，只返回0</li>\n</ul>\n<p>（1）描述算法基本思想</p>\n<ul>\n<li>先求出链表的长度</li>\n<li>再用链表长度减去倒数第k个，就为倒数第k个的正向下标</li>\n<li>例如：链表长度为6，求倒数第2个值，即正数6-2=4下标</li>\n<li>在正向循环得出即可</li>\n</ul>\n<p>（2）写出代码</p>\n<p>（3）分析时间复杂性</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>{</span>     <span class=\"hljs-comment\">//定义单链表结点类型</span>\n    <span class=\"hljs-keyword\">int</span> data;             <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">link</span>;</span>   <span class=\"hljs-comment\">//指针域，指向下一个结点的指针</span>\n}LNode,*LinkList;         <span class=\"hljs-comment\">//LNode是结构体的别名，用LNode即可代替typedef struct LNode</span>\n                          <span class=\"hljs-comment\">//LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">DaoshuK</span><span class=\"hljs-params\">(LinkList <span class=\"hljs-built_in\">list</span>，<span class=\"hljs-keyword\">int</span> k)</span></span>{\n    <span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//</span>\n    LNode *p = <span class=\"hljs-built_in\">list</span>, *q = <span class=\"hljs-built_in\">list</span>;   <span class=\"hljs-comment\">//p用来求链表长度,q开始查找倒数第k个值的下标</span>\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span>){             <span class=\"hljs-comment\">//求链表长度</span>\n        len++;\n        p = p -&gt; link;\n    }\n    <span class=\"hljs-keyword\">while</span>(q-&gt;link){\n        i++;\n        <span class=\"hljs-keyword\">if</span>(i == len-k){           <span class=\"hljs-comment\">//找倒数第k个值</span>\n            <span class=\"hljs-keyword\">int</span> data = q-&gt;data;\n            <span class=\"hljs-keyword\">return</span> data,<span class=\"hljs-number\">1</span>；\n        }\n        q = q -&gt; link;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;    \n}\n</code></pre>\n<h4 id=\"2输出二叉树序列s\"><a class=\"markdownIt-Anchor\" href=\"#2输出二叉树序列s\"></a> 2.输出二叉树序列S</h4>\n<ul>\n<li>输出二叉树序列，以r为树根</li>\n<li>给出二叉树序列，输出二叉树</li>\n</ul>\n<p>（1）算法思想</p>\n<ul>\n<li>引入一个辅助栈，以树的先序非递归遍历思想为基础，根据所给序列正向建树。</li>\n<li>若当前p指向结点非空，对应序号为0，则他的左右孩子赋值为空；</li>\n<li>对应序号为1，则创建一个结点，其左指针指向新创建的结点；</li>\n<li>若对应序号为2，则创建两个结点，其左右指针分别指向两个结点</li>\n</ul>\n<p>（2）代码</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">CreateTree</span><span class=\"hljs-params\">(BiTree &amp;r,<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    <span class=\"hljs-comment\">//该算法根据数组A中序建树，序列长度就是数组长度len</span>\n    BiTree Stack[MaxSize];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//栈初始化</span>\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//计数值，判断序列结束</span>\n    BiTree p = r, bt = <span class=\"hljs-literal\">NULL</span>;<span class=\"hljs-comment\">//p用来遍历，bt用来辅助创造结点</span>\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span> || top != <span class=\"hljs-number\">-1</span> &amp;&amp; i &lt; len){\n        <span class=\"hljs-keyword\">if</span>(p != MULL){\n            <span class=\"hljs-keyword\">if</span>(A[i] == <span class=\"hljs-number\">0</span>){\n                p -&gt; lchild = <span class=\"hljs-literal\">NULL</span>;\n                P -&gt; rchild = <span class=\"hljs-literal\">NULL</span>;\n                Stack[++top] = p;\n            }\n            <span class=\"hljs-keyword\">if</span>(A[i] == <span class=\"hljs-number\">1</span>){\n                bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTree));\n                p -&gt; lchild = bt;\n                P -&gt; rchild = <span class=\"hljs-literal\">NULL</span>;\n                Stack[++top] = <span class=\"hljs-literal\">NULL</span>;\n            }\n            <span class=\"hljs-keyword\">if</span>(A[i] == <span class=\"hljs-number\">2</span>){\n                bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTree));\n                p -&gt; lchild = bt;\n                bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BiTree));\n                P -&gt; rchild = bt;\n                Stack[++top] = p;\n            }\n            i++;\n            p = p -&gt; lchild\n        }<span class=\"hljs-keyword\">else</span>{\n            p = Stack[top--];\n            p = p -&gt; rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> r;\n}\n</code></pre>\n"},{"title":"2018-941","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"2018-941学硕代码题","description":"2018-941学硕代码题","summary":"2018-941学硕代码题","abbrlink":"5f19","date":"2020-09-17T13:17:06.000Z","password":null,"_content":"## 2018-941-学硕-其他-数组\n\n#### 1.已知k阶斐波那契数列的定义为：\n\n​\t$f_0=0,f_1=0,…f_{k-2}=0,f_{k-1}=1,$\n\n​\t$f_n=f_{n-1}+f_{n-2}+…+f_{n-k},n=k,k+1,…$\n\n（1）试编写求$k$阶斐波那契序列的第$m$项值的非递归函数$F(k,m)$\n\n（2）计算$F(5,8)$的值\n\n- 算法思想：$k$阶斐波那契数列从第$0$项到$k-2$项全为$0$，$k-1$项为$1$，从第$k$项开始每项为前$2$项之和\n\n```c\nint F(int k,int m){\n    int f = 1, a = 0, b = 0;//a为第一项f0=1\n    if(m ≤ (k-2)){//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2\n        return 0;\n    }\n    for(int j = k-1;j < m;j++){\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    return f;\n}\n```\n\n- C语言可执行代码\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\nint F(int k, int m) {\n    int f = 1, a = 0, b = 0;//a为第一项f0=1\n    if (m <= (k - 2)) {//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2\n        return 0;\n    }\n    for (int j = k - 1; j < m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    //printf(\"%d\", f);\n    return f;\n}\n\nbool IsDescendant(int L[], int R[], int n, int u, int v) {\n    if(!v){\n        //return printf(\"%s\",\"没有\");\n        return false;\n    }\n    else{\n        if(L[v] == u || R[v] == u){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else if(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else{\n\n            //return printf(\"%s\",\"没有\");\n            return false;\n        }\n    }\n}\n\nint main() {\n    int Fibonacci = F(1, 4);\n    printf(\"Fibonacci: %d\\n\",Fibonacci);\n    int n =6,u=4,v=2;\n    int A[] = {0,2,4,0,0,0};\n    int B[] = {0,3,5,0,0,0};\n    bool status = IsDescendant(A,B,n,u,v);\n    printf(\"是否为子孙: %d\",status);\n    return 0;\n}\n```\n\n#### 2.假定用两个一维数组$L[1:n]$和$R[1:n]$作为有$n$个结点二叉树的存储结构，$L[i]$和$R[i]$分别指示结点$i$的左儿子和右儿子，$0$表示空。试写一个算法判断结点u是否为结点$v$的子孙\n\n```c\n//递归方法\nbool IsDescendant(int L[],int R[],int n,int u,int v){\n   int flag = 0;\n   if(!v){\n       return false;\n   }else{\n       if(L[v] == u || R[v] ==  u){\n           return true;\n       }else if(Dencendant(L,R,n,u,L[v]) || Dencendant(L,R,n,u,R[v])){\n           return true;\n       }else{\n           return false;\n       }\n   }\n}\n\n//非递归方法\nbool IsDescendant(int L[],int R[],int n,int u,int v){\n    int Queue[MaxSize];\n    int rear = -1,front = -1,p;\n    if(L[v] != 0 && u != v){\n        Queue[++rear] = L[v];//v的左孩子入队\n    }\n    if(R[v] != 0 && u != v){\n        Queue[++rear] = R[v];//v的右孩子入队\n    }\n    while(front != rear){//队不为空时\n        p = Queue[++front];\n        if(p == u){\n            return true;\n        }else{\n            if(L[p] != 0){\n                Queue[++rear] = L[p];\n            }\n            if(R[p] != 0){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    return false;\n}\n```\n\n- C语言可执行代码\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\nint F(int k, int m) {\n    int f = 1, a = 0, b = 0;//a为第一项f0=1\n    if (m <= (k - 2)) {//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2\n        return 0;\n    }\n    for (int j = k - 1; j < m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    //printf(\"%d\", f);\n    return f;\n}\n//递归\nbool IsDescendant(int L[], int R[], int n, int u, int v) {\n    if(!v){\n        //return printf(\"%s\",\"没有\");\n        return false;\n    }\n    else{\n        if(L[v] == u || R[v] == u){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else if(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else{\n\n            //return printf(\"%s\",\"没有\");\n            return false;\n        }\n    }\n}\n//非递归\nbool IsDescendant1(int L[],int R[],int n,int u,int v){\n    int Queue[50];\n    int rear = -1,front = -1,p;\n    if(L[v] != 0 && u != v){\n        Queue[++rear] = L[v];//v的左孩子入队\n    }\n    if(R[v] != 0 && u != v){\n        Queue[++rear] = R[v];//v的右孩子入队\n    }\n    while(front != rear){//队不为空时\n        p = Queue[++front];\n        if(p == u){\n            return true;\n        }else{\n            if(L[p] != 0){\n                Queue[++rear] = L[p];\n            }\n            if(R[p] != 0){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    int Fibonacci = F(1, 4);\n    printf(\"Fibonacci: %d\\n\",Fibonacci);\n    int n =6,u=4,v=2;\n    int A[] = {0,2,4,0,0,0};\n    int B[] = {0,3,5,0,0,0};\n    bool status = IsDescendant(A,B,n,u,v);\n    bool status1 = IsDescendant1(A,B,n,u,v);\n    printf(\"（非递归）是否为子孙: %d\",status);\n    printf(\"（递归）是否为子孙: %d\",status1);\n    return 0;\n}\n\n```\n","source":"_posts/2018-941.md","raw":"---\ntitle: 2018-941\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nkeywords: 2018-941学硕代码题\ndescription: 2018-941学硕代码题\nsummary: 2018-941学硕代码题\nabbrlink: 5f19\ndate: 2020-09-17 21:17:06\npassword:\n---\n## 2018-941-学硕-其他-数组\n\n#### 1.已知k阶斐波那契数列的定义为：\n\n​\t$f_0=0,f_1=0,…f_{k-2}=0,f_{k-1}=1,$\n\n​\t$f_n=f_{n-1}+f_{n-2}+…+f_{n-k},n=k,k+1,…$\n\n（1）试编写求$k$阶斐波那契序列的第$m$项值的非递归函数$F(k,m)$\n\n（2）计算$F(5,8)$的值\n\n- 算法思想：$k$阶斐波那契数列从第$0$项到$k-2$项全为$0$，$k-1$项为$1$，从第$k$项开始每项为前$2$项之和\n\n```c\nint F(int k,int m){\n    int f = 1, a = 0, b = 0;//a为第一项f0=1\n    if(m ≤ (k-2)){//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2\n        return 0;\n    }\n    for(int j = k-1;j < m;j++){\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    return f;\n}\n```\n\n- C语言可执行代码\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\nint F(int k, int m) {\n    int f = 1, a = 0, b = 0;//a为第一项f0=1\n    if (m <= (k - 2)) {//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2\n        return 0;\n    }\n    for (int j = k - 1; j < m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    //printf(\"%d\", f);\n    return f;\n}\n\nbool IsDescendant(int L[], int R[], int n, int u, int v) {\n    if(!v){\n        //return printf(\"%s\",\"没有\");\n        return false;\n    }\n    else{\n        if(L[v] == u || R[v] == u){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else if(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else{\n\n            //return printf(\"%s\",\"没有\");\n            return false;\n        }\n    }\n}\n\nint main() {\n    int Fibonacci = F(1, 4);\n    printf(\"Fibonacci: %d\\n\",Fibonacci);\n    int n =6,u=4,v=2;\n    int A[] = {0,2,4,0,0,0};\n    int B[] = {0,3,5,0,0,0};\n    bool status = IsDescendant(A,B,n,u,v);\n    printf(\"是否为子孙: %d\",status);\n    return 0;\n}\n```\n\n#### 2.假定用两个一维数组$L[1:n]$和$R[1:n]$作为有$n$个结点二叉树的存储结构，$L[i]$和$R[i]$分别指示结点$i$的左儿子和右儿子，$0$表示空。试写一个算法判断结点u是否为结点$v$的子孙\n\n```c\n//递归方法\nbool IsDescendant(int L[],int R[],int n,int u,int v){\n   int flag = 0;\n   if(!v){\n       return false;\n   }else{\n       if(L[v] == u || R[v] ==  u){\n           return true;\n       }else if(Dencendant(L,R,n,u,L[v]) || Dencendant(L,R,n,u,R[v])){\n           return true;\n       }else{\n           return false;\n       }\n   }\n}\n\n//非递归方法\nbool IsDescendant(int L[],int R[],int n,int u,int v){\n    int Queue[MaxSize];\n    int rear = -1,front = -1,p;\n    if(L[v] != 0 && u != v){\n        Queue[++rear] = L[v];//v的左孩子入队\n    }\n    if(R[v] != 0 && u != v){\n        Queue[++rear] = R[v];//v的右孩子入队\n    }\n    while(front != rear){//队不为空时\n        p = Queue[++front];\n        if(p == u){\n            return true;\n        }else{\n            if(L[p] != 0){\n                Queue[++rear] = L[p];\n            }\n            if(R[p] != 0){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    return false;\n}\n```\n\n- C语言可执行代码\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\nint F(int k, int m) {\n    int f = 1, a = 0, b = 0;//a为第一项f0=1\n    if (m <= (k - 2)) {//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2\n        return 0;\n    }\n    for (int j = k - 1; j < m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    //printf(\"%d\", f);\n    return f;\n}\n//递归\nbool IsDescendant(int L[], int R[], int n, int u, int v) {\n    if(!v){\n        //return printf(\"%s\",\"没有\");\n        return false;\n    }\n    else{\n        if(L[v] == u || R[v] == u){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else if(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            //return printf(\"%s\",\"有\");\n            return true;\n        }else{\n\n            //return printf(\"%s\",\"没有\");\n            return false;\n        }\n    }\n}\n//非递归\nbool IsDescendant1(int L[],int R[],int n,int u,int v){\n    int Queue[50];\n    int rear = -1,front = -1,p;\n    if(L[v] != 0 && u != v){\n        Queue[++rear] = L[v];//v的左孩子入队\n    }\n    if(R[v] != 0 && u != v){\n        Queue[++rear] = R[v];//v的右孩子入队\n    }\n    while(front != rear){//队不为空时\n        p = Queue[++front];\n        if(p == u){\n            return true;\n        }else{\n            if(L[p] != 0){\n                Queue[++rear] = L[p];\n            }\n            if(R[p] != 0){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    int Fibonacci = F(1, 4);\n    printf(\"Fibonacci: %d\\n\",Fibonacci);\n    int n =6,u=4,v=2;\n    int A[] = {0,2,4,0,0,0};\n    int B[] = {0,3,5,0,0,0};\n    bool status = IsDescendant(A,B,n,u,v);\n    bool status1 = IsDescendant1(A,B,n,u,v);\n    printf(\"（非递归）是否为子孙: %d\",status);\n    printf(\"（递归）是否为子孙: %d\",status1);\n    return 0;\n}\n\n```\n","slug":"2018-941","published":1,"updated":"2020-10-07T11:16:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi1000fzl9k5y5e66oz","content":"<h2 id=\"2018-941-学硕-其他-数组\"><a class=\"markdownIt-Anchor\" href=\"#2018-941-学硕-其他-数组\"></a> 2018-941-学硕-其他-数组</h2>\n<h4 id=\"1已知k阶斐波那契数列的定义为\"><a class=\"markdownIt-Anchor\" href=\"#1已知k阶斐波那契数列的定义为\"></a> 1.已知k阶斐波那契数列的定义为：</h4>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>f</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><msub><mi>f</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>f</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">f_0=0,f_1=0,…f_{k-2}=0,f_{k-1}=1,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span></span></span></span></p>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mo>…</mo><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msub><mo separator=\"true\">,</mo><mi>n</mi><mo>=</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">f_n=f_{n-1}+f_{n-2}+…+f_{n-k},n=k,k+1,…</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></p>\n<p>（1）试编写求<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>阶斐波那契序列的第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>项值的非递归函数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(k,m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>（2）计算<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>8</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(5,8)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span>的值</p>\n<ul>\n<li>算法思想：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>阶斐波那契数列从第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>项到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k-2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>项全为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>项为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，从第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>项开始每项为前<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>项之和</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k,<span class=\"hljs-keyword\">int</span> m)</span></span>{\n    <span class=\"hljs-keyword\">int</span> f = <span class=\"hljs-number\">1</span>, a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//a为第一项f0=1</span>\n    <span class=\"hljs-keyword\">if</span>(m ≤ (k<span class=\"hljs-number\">-2</span>)){<span class=\"hljs-comment\">//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = k<span class=\"hljs-number\">-1</span>;j &lt; m;j++){\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    <span class=\"hljs-keyword\">return</span> f;\n}\n</code></pre>\n<ul>\n<li>C语言可执行代码</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">int</span> m)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> f = <span class=\"hljs-number\">1</span>, a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//a为第一项f0=1</span>\n    <span class=\"hljs-keyword\">if</span> (m &lt;= (k - <span class=\"hljs-number\">2</span>)) {<span class=\"hljs-comment\">//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = k - <span class=\"hljs-number\">1</span>; j &lt; m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    <span class=\"hljs-comment\">//printf(\"%d\", f);</span>\n    <span class=\"hljs-keyword\">return</span> f;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[], <span class=\"hljs-keyword\">int</span> R[], <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> u, <span class=\"hljs-keyword\">int</span> v)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(!v){\n        <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(L[v] == u || R[v] == u){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> Fibonacci = F(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Fibonacci: %d\\n\"</span>,Fibonacci);\n    <span class=\"hljs-keyword\">int</span> n =<span class=\"hljs-number\">6</span>,u=<span class=\"hljs-number\">4</span>,v=<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">int</span> A[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">int</span> B[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">bool</span> status = IsDescendant(A,B,n,u,v);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"是否为子孙: %d\"</span>,status);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h4 id=\"2假定用两个一维数组l1n和r1n作为有n个结点二叉树的存储结构li和ri分别指示结点i的左儿子和右儿子0表示空-试写一个算法判断结点u是否为结点v的子孙\"><a class=\"markdownIt-Anchor\" href=\"#2假定用两个一维数组l1n和r1n作为有n个结点二叉树的存储结构li和ri分别指示结点i的左儿子和右儿子0表示空-试写一个算法判断结点u是否为结点v的子孙\"></a> 2.假定用两个一维数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo>:</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">L[1:n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">]</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo>:</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1:n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">]</span></span></span></span>作为有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>个结点二叉树的存储结构，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">L[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>分别指示结点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>的左儿子和右儿子，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>表示空。试写一个算法判断结点u是否为结点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span>的子孙</h4>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-comment\">//递归方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[],<span class=\"hljs-keyword\">int</span> R[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n   <span class=\"hljs-keyword\">int</span> flag = <span class=\"hljs-number\">0</span>;\n   <span class=\"hljs-keyword\">if</span>(!v){\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n   }<span class=\"hljs-keyword\">else</span>{\n       <span class=\"hljs-keyword\">if</span>(L[v] == u || R[v] ==  u){\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n       }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(Dencendant(L,R,n,u,L[v]) || Dencendant(L,R,n,u,R[v])){\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n       }<span class=\"hljs-keyword\">else</span>{\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n       }\n   }\n}\n\n<span class=\"hljs-comment\">//非递归方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[],<span class=\"hljs-keyword\">int</span> R[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    <span class=\"hljs-keyword\">int</span> Queue[MaxSize];\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">-1</span>,front = <span class=\"hljs-number\">-1</span>,p;\n    <span class=\"hljs-keyword\">if</span>(L[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = L[v];<span class=\"hljs-comment\">//v的左孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(R[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = R[v];<span class=\"hljs-comment\">//v的右孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">while</span>(front != rear){<span class=\"hljs-comment\">//队不为空时</span>\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p == u){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(L[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = L[p];\n            }\n            <span class=\"hljs-keyword\">if</span>(R[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<ul>\n<li>C语言可执行代码</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">int</span> m)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> f = <span class=\"hljs-number\">1</span>, a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//a为第一项f0=1</span>\n    <span class=\"hljs-keyword\">if</span> (m &lt;= (k - <span class=\"hljs-number\">2</span>)) {<span class=\"hljs-comment\">//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = k - <span class=\"hljs-number\">1</span>; j &lt; m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    <span class=\"hljs-comment\">//printf(\"%d\", f);</span>\n    <span class=\"hljs-keyword\">return</span> f;\n}\n<span class=\"hljs-comment\">//递归</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[], <span class=\"hljs-keyword\">int</span> R[], <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> u, <span class=\"hljs-keyword\">int</span> v)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(!v){\n        <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(L[v] == u || R[v] == u){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n}\n<span class=\"hljs-comment\">//非递归</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[],<span class=\"hljs-keyword\">int</span> R[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    <span class=\"hljs-keyword\">int</span> Queue[<span class=\"hljs-number\">50</span>];\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">-1</span>,front = <span class=\"hljs-number\">-1</span>,p;\n    <span class=\"hljs-keyword\">if</span>(L[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = L[v];<span class=\"hljs-comment\">//v的左孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(R[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = R[v];<span class=\"hljs-comment\">//v的右孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">while</span>(front != rear){<span class=\"hljs-comment\">//队不为空时</span>\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p == u){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(L[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = L[p];\n            }\n            <span class=\"hljs-keyword\">if</span>(R[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> Fibonacci = F(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Fibonacci: %d\\n\"</span>,Fibonacci);\n    <span class=\"hljs-keyword\">int</span> n =<span class=\"hljs-number\">6</span>,u=<span class=\"hljs-number\">4</span>,v=<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">int</span> A[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">int</span> B[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">bool</span> status = IsDescendant(A,B,n,u,v);\n    <span class=\"hljs-keyword\">bool</span> status1 = IsDescendant1(A,B,n,u,v);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"（非递归）是否为子孙: %d\"</span>,status);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"（递归）是否为子孙: %d\"</span>,status1);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2018-941-学硕-其他-数组\"><a class=\"markdownIt-Anchor\" href=\"#2018-941-学硕-其他-数组\"></a> 2018-941-学硕-其他-数组</h2>\n<h4 id=\"1已知k阶斐波那契数列的定义为\"><a class=\"markdownIt-Anchor\" href=\"#1已知k阶斐波那契数列的定义为\"></a> 1.已知k阶斐波那契数列的定义为：</h4>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>f</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><msub><mi>f</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>f</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">f_0=0,f_1=0,…f_{k-2}=0,f_{k-1}=1,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span></span></span></span></p>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mo>…</mo><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msub><mo separator=\"true\">,</mo><mi>n</mi><mo>=</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">f_n=f_{n-1}+f_{n-2}+…+f_{n-k},n=k,k+1,…</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></p>\n<p>（1）试编写求<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>阶斐波那契序列的第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>项值的非递归函数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(k,m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>（2）计算<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>8</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(5,8)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span>的值</p>\n<ul>\n<li>算法思想：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>阶斐波那契数列从第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>项到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k-2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>项全为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>项为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，从第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>项开始每项为前<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>项之和</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k,<span class=\"hljs-keyword\">int</span> m)</span></span>{\n    <span class=\"hljs-keyword\">int</span> f = <span class=\"hljs-number\">1</span>, a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//a为第一项f0=1</span>\n    <span class=\"hljs-keyword\">if</span>(m ≤ (k<span class=\"hljs-number\">-2</span>)){<span class=\"hljs-comment\">//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = k<span class=\"hljs-number\">-1</span>;j &lt; m;j++){\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    <span class=\"hljs-keyword\">return</span> f;\n}\n</code></pre>\n<ul>\n<li>C语言可执行代码</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">int</span> m)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> f = <span class=\"hljs-number\">1</span>, a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//a为第一项f0=1</span>\n    <span class=\"hljs-keyword\">if</span> (m &lt;= (k - <span class=\"hljs-number\">2</span>)) {<span class=\"hljs-comment\">//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = k - <span class=\"hljs-number\">1</span>; j &lt; m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    <span class=\"hljs-comment\">//printf(\"%d\", f);</span>\n    <span class=\"hljs-keyword\">return</span> f;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[], <span class=\"hljs-keyword\">int</span> R[], <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> u, <span class=\"hljs-keyword\">int</span> v)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(!v){\n        <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(L[v] == u || R[v] == u){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> Fibonacci = F(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Fibonacci: %d\\n\"</span>,Fibonacci);\n    <span class=\"hljs-keyword\">int</span> n =<span class=\"hljs-number\">6</span>,u=<span class=\"hljs-number\">4</span>,v=<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">int</span> A[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">int</span> B[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">bool</span> status = IsDescendant(A,B,n,u,v);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"是否为子孙: %d\"</span>,status);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h4 id=\"2假定用两个一维数组l1n和r1n作为有n个结点二叉树的存储结构li和ri分别指示结点i的左儿子和右儿子0表示空-试写一个算法判断结点u是否为结点v的子孙\"><a class=\"markdownIt-Anchor\" href=\"#2假定用两个一维数组l1n和r1n作为有n个结点二叉树的存储结构li和ri分别指示结点i的左儿子和右儿子0表示空-试写一个算法判断结点u是否为结点v的子孙\"></a> 2.假定用两个一维数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo>:</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">L[1:n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">]</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo>:</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1:n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">]</span></span></span></span>作为有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>个结点二叉树的存储结构，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">L[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>分别指示结点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>的左儿子和右儿子，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>表示空。试写一个算法判断结点u是否为结点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span>的子孙</h4>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-comment\">//递归方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[],<span class=\"hljs-keyword\">int</span> R[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n   <span class=\"hljs-keyword\">int</span> flag = <span class=\"hljs-number\">0</span>;\n   <span class=\"hljs-keyword\">if</span>(!v){\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n   }<span class=\"hljs-keyword\">else</span>{\n       <span class=\"hljs-keyword\">if</span>(L[v] == u || R[v] ==  u){\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n       }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(Dencendant(L,R,n,u,L[v]) || Dencendant(L,R,n,u,R[v])){\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n       }<span class=\"hljs-keyword\">else</span>{\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n       }\n   }\n}\n\n<span class=\"hljs-comment\">//非递归方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[],<span class=\"hljs-keyword\">int</span> R[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    <span class=\"hljs-keyword\">int</span> Queue[MaxSize];\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">-1</span>,front = <span class=\"hljs-number\">-1</span>,p;\n    <span class=\"hljs-keyword\">if</span>(L[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = L[v];<span class=\"hljs-comment\">//v的左孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(R[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = R[v];<span class=\"hljs-comment\">//v的右孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">while</span>(front != rear){<span class=\"hljs-comment\">//队不为空时</span>\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p == u){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(L[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = L[p];\n            }\n            <span class=\"hljs-keyword\">if</span>(R[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<ul>\n<li>C语言可执行代码</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">int</span> m)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> f = <span class=\"hljs-number\">1</span>, a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//a为第一项f0=1</span>\n    <span class=\"hljs-keyword\">if</span> (m &lt;= (k - <span class=\"hljs-number\">2</span>)) {<span class=\"hljs-comment\">//k阶斐波那契数列，k-1项为1（第二项），k-2项为0（第二项），所以m≥k-2</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = k - <span class=\"hljs-number\">1</span>; j &lt; m; j++) {\n        b = f;\n        f = f + a;\n        a = b;\n    }\n    <span class=\"hljs-comment\">//printf(\"%d\", f);</span>\n    <span class=\"hljs-keyword\">return</span> f;\n}\n<span class=\"hljs-comment\">//递归</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[], <span class=\"hljs-keyword\">int</span> R[], <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> u, <span class=\"hljs-keyword\">int</span> v)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(!v){\n        <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(L[v] == u || R[v] == u){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(IsDescendant(L, R, n, u, L[v]) || IsDescendant(L, R, n, u, R[v])){\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n\n            <span class=\"hljs-comment\">//return printf(\"%s\",\"没有\");</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n}\n<span class=\"hljs-comment\">//非递归</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsDescendant1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L[],<span class=\"hljs-keyword\">int</span> R[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    <span class=\"hljs-keyword\">int</span> Queue[<span class=\"hljs-number\">50</span>];\n    <span class=\"hljs-keyword\">int</span> rear = <span class=\"hljs-number\">-1</span>,front = <span class=\"hljs-number\">-1</span>,p;\n    <span class=\"hljs-keyword\">if</span>(L[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = L[v];<span class=\"hljs-comment\">//v的左孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(R[v] != <span class=\"hljs-number\">0</span> &amp;&amp; u != v){\n        Queue[++rear] = R[v];<span class=\"hljs-comment\">//v的右孩子入队</span>\n    }\n    <span class=\"hljs-keyword\">while</span>(front != rear){<span class=\"hljs-comment\">//队不为空时</span>\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p == u){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(L[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = L[p];\n            }\n            <span class=\"hljs-keyword\">if</span>(R[p] != <span class=\"hljs-number\">0</span>){\n                Queue[++rear] = R[p];\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> Fibonacci = F(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Fibonacci: %d\\n\"</span>,Fibonacci);\n    <span class=\"hljs-keyword\">int</span> n =<span class=\"hljs-number\">6</span>,u=<span class=\"hljs-number\">4</span>,v=<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">int</span> A[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">int</span> B[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">bool</span> status = IsDescendant(A,B,n,u,v);\n    <span class=\"hljs-keyword\">bool</span> status1 = IsDescendant1(A,B,n,u,v);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"（非递归）是否为子孙: %d\"</span>,status);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"（递归）是否为子孙: %d\"</span>,status1);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n</code></pre>\n"},{"title":"2017-941","top":false,"cover":false,"toc":false,"mathjax":true,"abbrlink":"5e4d","date":"2020-09-18T09:44:34.000Z","password":null,"keywords":"2017-941学硕代码题","description":"2017-941学硕代码题","summary":"2017-941学硕代码题","_content":"## 2017-941\n\n#### 1.（15分）A和B是长度为n的两个数组。设计一个算法，该算法输出长度为n的数组C。\n\n- 要求1：数组C中的每一个元素$C[i] = ||  \\{ A[j]|A[j]≤B[i],1≤j≤n\\}||$，其中$||S||$表示集合S中的元素个数。例如：下表给出了长度为4的两个数组A和B，以及满足要求的数组C\n- 要求2：所设计算法的时间复杂性低于$O(n^2)$\n\n| i    | 1    | 2    | 3    | 4    |\n| ---- | ---- | ---- | ---- | ---- |\n| A[i] | 6    | 17   | 9    | 10   |\n| B[i] | 8    | 2    | 17   | 13   |\n| C[i] | 1    | 0    | 4    | 3    |\n\n（1）描述算法的基本设计思想（3分）；\n\nC[1]的意思就是，A数组中小于等于B[1]的个数；C[2]就是，A数组中小于等于B[2]的个数。以此类推\n\n先将A利用快速排序排好顺序，再用b进行折半查找\n\n（2）用算法描述语言描述算法（8分）；\n\n```c\n//折半查找来确定有序序列A中有多少元素不大于x\nint binarySearch(int A[],int n,int x){\n    int l = 0,r = n-1,m = (l+r)/2;\n    while(l <= r){\n        if(A[m] > x){\n            r = m - 1;\n        }else{\n            l = m + 1;\n        }\n        m = (l+r)/2;\n    }\n    return l;//最后l为小于等于x元素的个数\n}\n//先采用快速排序排列A数组，时间复杂度（nlogn），要求不能超过n方\nint Partition(int A[],int low,int high){     //一趟划分\n    int pivot = A[low];                      //将当前表中第一个元素设为枢轴，对表进行划分\n    int t = low;\n    while(low<high){\n        low++;\n        while(A[low]<=pivot){                //从前往后找到一个比枢轴大的数\n            low++;\n        }\n        while(A[high]>pivot){                //从后往前找到一个比枢轴小的数\n            high--;\n        }\n        if(low<high){\n            int w = A[low];                  //用临时变量w储存值，交换两个数\n        \tA[low] = A[high];                //用临时变量w储存值，交换两个数\n        \tA[high] = w;                     //用临时变量w储存值，交换两个数\n        }\n    }\n    A[t] = A[high];                          //找到枢轴的正确位置，交换这两个元素\n    A[high] = pivot;\n    return high;                             //返回枢轴正确的位置\n}\nvoid QuickSort(int &A[],int low,int high){   //开始快排\n    if(low<high){\n        int mid = Partition(A,low,high);\n        QuickSort(A,low,mid-1);              //枢轴左半边继续快排\n        QuickSort(A,mid+1,high);\n    }\n}\n\nvoid getArrayC(int A[],int B[],int C[],int n){\n    Partition(A,0,n);//快排排序\n    for(int i = 0; i < n; ++i){\n        C[i] = binarySearch(A, n, B[i]);//查找\n    }\n}\n```\n\n（3）给出算法的时间复杂性分析（4分）。\n\n- 排序时间$O(nlogn)+$查找时间$O(logn)$，符合要求\n\n#### 2.（10分）写出求二叉树宽度的非递归算法\n\n- **二叉树的宽度定义为具有结点数最多的那一层上的结点总数。如下图所示，以a为根的二叉树宽度为3。假设二叉树以链接结构存储，指针T指向二叉树的根，树中结点的结构为（left，data，right）**\n\n（1）描述算法的基本设计思想（3分）；\n\n- 利用主要层次遍历\n\n- 再加上last指针：指向当前层数最右结点\n\n（2）用算法描述语言描述算法（7分）；\n\n```c\nint MaxBreadth(BiTree T){\n    int front = -1,rear = -1;//队头尾指针\n    int level =1,last = 0;//last指向当前层数最右结点，level为当前层数\n    int width[];//储存每层最大宽度的数组\n    BiTree p = T;//用p遍历二叉树\n    Queue[++rear] = p;//根结点入队\n    if(p == NULL){\n        return 0;\n    }\n    width[level] = 1;//第一层一个结点\n    while(rear > front){ //队列不为空\n        p = Queue[++front];//层次遍历，出队元素\n        if(p->lchild != NULL){\n            Queue[++rear] = p->lchild; //左子树不为空，则左子树根结点入队 \n        } \n        if(p->rchild != NULL){ \n            Queue[++rear] = p->rchild; //右子树不为空，则右子树根节点入队 \n        }\n        if(front == last){//出队元素和last所指向的最右结点相同时\n            width[++level] = rear - last;//该层元素个数等于此时队列的尾指针减去上一层最右结点的位置\n            last = rear;\n        } \n    }\n    //最后得到的层数会多一层 \n    int max=0;\n    for(int i=1;i<=level;i++){\n        if(width[i]>max){\n            max=width[i];\n        }\n    } \n    return max; \n}\n```","source":"_posts/2017-941.md","raw":"---\ntitle: 2017-941\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nabbrlink: 5e4d\ndate: 2020-09-18 17:44:34\npassword:\nkeywords: 2017-941学硕代码题\ndescription: 2017-941学硕代码题\nsummary: 2017-941学硕代码题\n---\n## 2017-941\n\n#### 1.（15分）A和B是长度为n的两个数组。设计一个算法，该算法输出长度为n的数组C。\n\n- 要求1：数组C中的每一个元素$C[i] = ||  \\{ A[j]|A[j]≤B[i],1≤j≤n\\}||$，其中$||S||$表示集合S中的元素个数。例如：下表给出了长度为4的两个数组A和B，以及满足要求的数组C\n- 要求2：所设计算法的时间复杂性低于$O(n^2)$\n\n| i    | 1    | 2    | 3    | 4    |\n| ---- | ---- | ---- | ---- | ---- |\n| A[i] | 6    | 17   | 9    | 10   |\n| B[i] | 8    | 2    | 17   | 13   |\n| C[i] | 1    | 0    | 4    | 3    |\n\n（1）描述算法的基本设计思想（3分）；\n\nC[1]的意思就是，A数组中小于等于B[1]的个数；C[2]就是，A数组中小于等于B[2]的个数。以此类推\n\n先将A利用快速排序排好顺序，再用b进行折半查找\n\n（2）用算法描述语言描述算法（8分）；\n\n```c\n//折半查找来确定有序序列A中有多少元素不大于x\nint binarySearch(int A[],int n,int x){\n    int l = 0,r = n-1,m = (l+r)/2;\n    while(l <= r){\n        if(A[m] > x){\n            r = m - 1;\n        }else{\n            l = m + 1;\n        }\n        m = (l+r)/2;\n    }\n    return l;//最后l为小于等于x元素的个数\n}\n//先采用快速排序排列A数组，时间复杂度（nlogn），要求不能超过n方\nint Partition(int A[],int low,int high){     //一趟划分\n    int pivot = A[low];                      //将当前表中第一个元素设为枢轴，对表进行划分\n    int t = low;\n    while(low<high){\n        low++;\n        while(A[low]<=pivot){                //从前往后找到一个比枢轴大的数\n            low++;\n        }\n        while(A[high]>pivot){                //从后往前找到一个比枢轴小的数\n            high--;\n        }\n        if(low<high){\n            int w = A[low];                  //用临时变量w储存值，交换两个数\n        \tA[low] = A[high];                //用临时变量w储存值，交换两个数\n        \tA[high] = w;                     //用临时变量w储存值，交换两个数\n        }\n    }\n    A[t] = A[high];                          //找到枢轴的正确位置，交换这两个元素\n    A[high] = pivot;\n    return high;                             //返回枢轴正确的位置\n}\nvoid QuickSort(int &A[],int low,int high){   //开始快排\n    if(low<high){\n        int mid = Partition(A,low,high);\n        QuickSort(A,low,mid-1);              //枢轴左半边继续快排\n        QuickSort(A,mid+1,high);\n    }\n}\n\nvoid getArrayC(int A[],int B[],int C[],int n){\n    Partition(A,0,n);//快排排序\n    for(int i = 0; i < n; ++i){\n        C[i] = binarySearch(A, n, B[i]);//查找\n    }\n}\n```\n\n（3）给出算法的时间复杂性分析（4分）。\n\n- 排序时间$O(nlogn)+$查找时间$O(logn)$，符合要求\n\n#### 2.（10分）写出求二叉树宽度的非递归算法\n\n- **二叉树的宽度定义为具有结点数最多的那一层上的结点总数。如下图所示，以a为根的二叉树宽度为3。假设二叉树以链接结构存储，指针T指向二叉树的根，树中结点的结构为（left，data，right）**\n\n（1）描述算法的基本设计思想（3分）；\n\n- 利用主要层次遍历\n\n- 再加上last指针：指向当前层数最右结点\n\n（2）用算法描述语言描述算法（7分）；\n\n```c\nint MaxBreadth(BiTree T){\n    int front = -1,rear = -1;//队头尾指针\n    int level =1,last = 0;//last指向当前层数最右结点，level为当前层数\n    int width[];//储存每层最大宽度的数组\n    BiTree p = T;//用p遍历二叉树\n    Queue[++rear] = p;//根结点入队\n    if(p == NULL){\n        return 0;\n    }\n    width[level] = 1;//第一层一个结点\n    while(rear > front){ //队列不为空\n        p = Queue[++front];//层次遍历，出队元素\n        if(p->lchild != NULL){\n            Queue[++rear] = p->lchild; //左子树不为空，则左子树根结点入队 \n        } \n        if(p->rchild != NULL){ \n            Queue[++rear] = p->rchild; //右子树不为空，则右子树根节点入队 \n        }\n        if(front == last){//出队元素和last所指向的最右结点相同时\n            width[++level] = rear - last;//该层元素个数等于此时队列的尾指针减去上一层最右结点的位置\n            last = rear;\n        } \n    }\n    //最后得到的层数会多一层 \n    int max=0;\n    for(int i=1;i<=level;i++){\n        if(width[i]>max){\n            max=width[i];\n        }\n    } \n    return max; \n}\n```","slug":"2017-941","published":1,"updated":"2020-09-19T14:31:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi1000gzl9kcl4e6r7r","content":"<h2 id=\"2017-941\"><a class=\"markdownIt-Anchor\" href=\"#2017-941\"></a> 2017-941</h2>\n<h4 id=\"115分a和b是长度为n的两个数组-设计一个算法该算法输出长度为n的数组c\"><a class=\"markdownIt-Anchor\" href=\"#115分a和b是长度为n的两个数组-设计一个算法该算法输出长度为n的数组c\"></a> 1.（15分）A和B是长度为n的两个数组。设计一个算法，该算法输出长度为n的数组C。</h4>\n<ul>\n<li>要求1：数组C中的每一个元素<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">{</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>≤</mo><mi>B</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mn>1</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>n</mi><mo stretchy=\"false\">}</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">C[i] = ||  \\{ A[j]|A[j]≤B[i],1≤j≤n\\}||</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">}</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||S||</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>表示集合S中的元素个数。例如：下表给出了长度为4的两个数组A和B，以及满足要求的数组C</li>\n<li>要求2：所设计算法的时间复杂性低于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>i</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A[i]</td>\n<td>6</td>\n<td>17</td>\n<td>9</td>\n<td>10</td>\n</tr>\n<tr>\n<td>B[i]</td>\n<td>8</td>\n<td>2</td>\n<td>17</td>\n<td>13</td>\n</tr>\n<tr>\n<td>C[i]</td>\n<td>1</td>\n<td>0</td>\n<td>4</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>（1）描述算法的基本设计思想（3分）；</p>\n<p>C[1]的意思就是，A数组中小于等于B[1]的个数；C[2]就是，A数组中小于等于B[2]的个数。以此类推</p>\n<p>先将A利用快速排序排好顺序，再用b进行折半查找</p>\n<p>（2）用算法描述语言描述算法（8分）；</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-comment\">//折半查找来确定有序序列A中有多少元素不大于x</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>,r = n<span class=\"hljs-number\">-1</span>,m = (l+r)/<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">while</span>(l &lt;= r){\n        <span class=\"hljs-keyword\">if</span>(A[m] &gt; x){\n            r = m - <span class=\"hljs-number\">1</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            l = m + <span class=\"hljs-number\">1</span>;\n        }\n        m = (l+r)/<span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> l;<span class=\"hljs-comment\">//最后l为小于等于x元素的个数</span>\n}\n<span class=\"hljs-comment\">//先采用快速排序排列A数组，时间复杂度（nlogn），要求不能超过n方</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Partition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{     <span class=\"hljs-comment\">//一趟划分</span>\n    <span class=\"hljs-keyword\">int</span> pivot = A[low];                      <span class=\"hljs-comment\">//将当前表中第一个元素设为枢轴，对表进行划分</span>\n    <span class=\"hljs-keyword\">int</span> t = low;\n    <span class=\"hljs-keyword\">while</span>(low&lt;high){\n        low++;\n        <span class=\"hljs-keyword\">while</span>(A[low]&lt;=pivot){                <span class=\"hljs-comment\">//从前往后找到一个比枢轴大的数</span>\n            low++;\n        }\n        <span class=\"hljs-keyword\">while</span>(A[high]&gt;pivot){                <span class=\"hljs-comment\">//从后往前找到一个比枢轴小的数</span>\n            high--;\n        }\n        <span class=\"hljs-keyword\">if</span>(low&lt;high){\n            <span class=\"hljs-keyword\">int</span> w = A[low];                  <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[low] = A[high];                <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[high] = w;                     <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        }\n    }\n    A[t] = A[high];                          <span class=\"hljs-comment\">//找到枢轴的正确位置，交换这两个元素</span>\n    A[high] = pivot;\n    <span class=\"hljs-keyword\">return</span> high;                             <span class=\"hljs-comment\">//返回枢轴正确的位置</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">QuickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> &amp;A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{   <span class=\"hljs-comment\">//开始快排</span>\n    <span class=\"hljs-keyword\">if</span>(low&lt;high){\n        <span class=\"hljs-keyword\">int</span> mid = Partition(A,low,high);\n        QuickSort(A,low,mid<span class=\"hljs-number\">-1</span>);              <span class=\"hljs-comment\">//枢轴左半边继续快排</span>\n        QuickSort(A,mid+<span class=\"hljs-number\">1</span>,high);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getArrayC</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> B[],<span class=\"hljs-keyword\">int</span> C[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    Partition(A,<span class=\"hljs-number\">0</span>,n);<span class=\"hljs-comment\">//快排排序</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i){\n        C[i] = binarySearch(A, n, B[i]);<span class=\"hljs-comment\">//查找</span>\n    }\n}\n</code></pre>\n<p>（3）给出算法的时间复杂性分析（4分）。</p>\n<ul>\n<li>排序时间<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mord\">+</span></span></span></span>查找时间<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，符合要求</li>\n</ul>\n<h4 id=\"210分写出求二叉树宽度的非递归算法\"><a class=\"markdownIt-Anchor\" href=\"#210分写出求二叉树宽度的非递归算法\"></a> 2.（10分）写出求二叉树宽度的非递归算法</h4>\n<ul>\n<li><strong>二叉树的宽度定义为具有结点数最多的那一层上的结点总数。如下图所示，以a为根的二叉树宽度为3。假设二叉树以链接结构存储，指针T指向二叉树的根，树中结点的结构为（left，data，right）</strong></li>\n</ul>\n<p>（1）描述算法的基本设计思想（3分）；</p>\n<ul>\n<li>\n<p>利用主要层次遍历</p>\n</li>\n<li>\n<p>再加上last指针：指向当前层数最右结点</p>\n</li>\n</ul>\n<p>（2）用算法描述语言描述算法（7分）；</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MaxBreadth</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">-1</span>,rear = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//队头尾指针</span>\n    <span class=\"hljs-keyword\">int</span> level =<span class=\"hljs-number\">1</span>,last = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//last指向当前层数最右结点，level为当前层数</span>\n    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span>[];<span class=\"hljs-comment\">//储存每层最大宽度的数组</span>\n    BiTree p = T;<span class=\"hljs-comment\">//用p遍历二叉树</span>\n    Queue[++rear] = p;<span class=\"hljs-comment\">//根结点入队</span>\n    <span class=\"hljs-keyword\">if</span>(p == <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-built_in\">width</span>[level] = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//第一层一个结点</span>\n    <span class=\"hljs-keyword\">while</span>(rear &gt; front){ <span class=\"hljs-comment\">//队列不为空</span>\n        p = Queue[++front];<span class=\"hljs-comment\">//层次遍历，出队元素</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;lchild; <span class=\"hljs-comment\">//左子树不为空，则左子树根结点入队 </span>\n        } \n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>){ \n            Queue[++rear] = p-&gt;rchild; <span class=\"hljs-comment\">//右子树不为空，则右子树根节点入队 </span>\n        }\n        <span class=\"hljs-keyword\">if</span>(front == last){<span class=\"hljs-comment\">//出队元素和last所指向的最右结点相同时</span>\n            <span class=\"hljs-built_in\">width</span>[++level] = rear - last;<span class=\"hljs-comment\">//该层元素个数等于此时队列的尾指针减去上一层最右结点的位置</span>\n            last = rear;\n        } \n    }\n    <span class=\"hljs-comment\">//最后得到的层数会多一层 </span>\n    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">max</span>=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=level;i++){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">width</span>[i]&gt;<span class=\"hljs-built_in\">max</span>){\n            <span class=\"hljs-built_in\">max</span>=<span class=\"hljs-built_in\">width</span>[i];\n        }\n    } \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>; \n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2017-941\"><a class=\"markdownIt-Anchor\" href=\"#2017-941\"></a> 2017-941</h2>\n<h4 id=\"115分a和b是长度为n的两个数组-设计一个算法该算法输出长度为n的数组c\"><a class=\"markdownIt-Anchor\" href=\"#115分a和b是长度为n的两个数组-设计一个算法该算法输出长度为n的数组c\"></a> 1.（15分）A和B是长度为n的两个数组。设计一个算法，该算法输出长度为n的数组C。</h4>\n<ul>\n<li>要求1：数组C中的每一个元素<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">{</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>≤</mo><mi>B</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mn>1</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>n</mi><mo stretchy=\"false\">}</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">C[i] = ||  \\{ A[j]|A[j]≤B[i],1≤j≤n\\}||</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">}</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||S||</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>表示集合S中的元素个数。例如：下表给出了长度为4的两个数组A和B，以及满足要求的数组C</li>\n<li>要求2：所设计算法的时间复杂性低于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>i</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A[i]</td>\n<td>6</td>\n<td>17</td>\n<td>9</td>\n<td>10</td>\n</tr>\n<tr>\n<td>B[i]</td>\n<td>8</td>\n<td>2</td>\n<td>17</td>\n<td>13</td>\n</tr>\n<tr>\n<td>C[i]</td>\n<td>1</td>\n<td>0</td>\n<td>4</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>（1）描述算法的基本设计思想（3分）；</p>\n<p>C[1]的意思就是，A数组中小于等于B[1]的个数；C[2]就是，A数组中小于等于B[2]的个数。以此类推</p>\n<p>先将A利用快速排序排好顺序，再用b进行折半查找</p>\n<p>（2）用算法描述语言描述算法（8分）；</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-comment\">//折半查找来确定有序序列A中有多少元素不大于x</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>,r = n<span class=\"hljs-number\">-1</span>,m = (l+r)/<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">while</span>(l &lt;= r){\n        <span class=\"hljs-keyword\">if</span>(A[m] &gt; x){\n            r = m - <span class=\"hljs-number\">1</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            l = m + <span class=\"hljs-number\">1</span>;\n        }\n        m = (l+r)/<span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> l;<span class=\"hljs-comment\">//最后l为小于等于x元素的个数</span>\n}\n<span class=\"hljs-comment\">//先采用快速排序排列A数组，时间复杂度（nlogn），要求不能超过n方</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Partition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{     <span class=\"hljs-comment\">//一趟划分</span>\n    <span class=\"hljs-keyword\">int</span> pivot = A[low];                      <span class=\"hljs-comment\">//将当前表中第一个元素设为枢轴，对表进行划分</span>\n    <span class=\"hljs-keyword\">int</span> t = low;\n    <span class=\"hljs-keyword\">while</span>(low&lt;high){\n        low++;\n        <span class=\"hljs-keyword\">while</span>(A[low]&lt;=pivot){                <span class=\"hljs-comment\">//从前往后找到一个比枢轴大的数</span>\n            low++;\n        }\n        <span class=\"hljs-keyword\">while</span>(A[high]&gt;pivot){                <span class=\"hljs-comment\">//从后往前找到一个比枢轴小的数</span>\n            high--;\n        }\n        <span class=\"hljs-keyword\">if</span>(low&lt;high){\n            <span class=\"hljs-keyword\">int</span> w = A[low];                  <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[low] = A[high];                <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[high] = w;                     <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        }\n    }\n    A[t] = A[high];                          <span class=\"hljs-comment\">//找到枢轴的正确位置，交换这两个元素</span>\n    A[high] = pivot;\n    <span class=\"hljs-keyword\">return</span> high;                             <span class=\"hljs-comment\">//返回枢轴正确的位置</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">QuickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> &amp;A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{   <span class=\"hljs-comment\">//开始快排</span>\n    <span class=\"hljs-keyword\">if</span>(low&lt;high){\n        <span class=\"hljs-keyword\">int</span> mid = Partition(A,low,high);\n        QuickSort(A,low,mid<span class=\"hljs-number\">-1</span>);              <span class=\"hljs-comment\">//枢轴左半边继续快排</span>\n        QuickSort(A,mid+<span class=\"hljs-number\">1</span>,high);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getArrayC</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> B[],<span class=\"hljs-keyword\">int</span> C[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    Partition(A,<span class=\"hljs-number\">0</span>,n);<span class=\"hljs-comment\">//快排排序</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i){\n        C[i] = binarySearch(A, n, B[i]);<span class=\"hljs-comment\">//查找</span>\n    }\n}\n</code></pre>\n<p>（3）给出算法的时间复杂性分析（4分）。</p>\n<ul>\n<li>排序时间<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mord\">+</span></span></span></span>查找时间<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，符合要求</li>\n</ul>\n<h4 id=\"210分写出求二叉树宽度的非递归算法\"><a class=\"markdownIt-Anchor\" href=\"#210分写出求二叉树宽度的非递归算法\"></a> 2.（10分）写出求二叉树宽度的非递归算法</h4>\n<ul>\n<li><strong>二叉树的宽度定义为具有结点数最多的那一层上的结点总数。如下图所示，以a为根的二叉树宽度为3。假设二叉树以链接结构存储，指针T指向二叉树的根，树中结点的结构为（left，data，right）</strong></li>\n</ul>\n<p>（1）描述算法的基本设计思想（3分）；</p>\n<ul>\n<li>\n<p>利用主要层次遍历</p>\n</li>\n<li>\n<p>再加上last指针：指向当前层数最右结点</p>\n</li>\n</ul>\n<p>（2）用算法描述语言描述算法（7分）；</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MaxBreadth</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">-1</span>,rear = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//队头尾指针</span>\n    <span class=\"hljs-keyword\">int</span> level =<span class=\"hljs-number\">1</span>,last = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//last指向当前层数最右结点，level为当前层数</span>\n    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span>[];<span class=\"hljs-comment\">//储存每层最大宽度的数组</span>\n    BiTree p = T;<span class=\"hljs-comment\">//用p遍历二叉树</span>\n    Queue[++rear] = p;<span class=\"hljs-comment\">//根结点入队</span>\n    <span class=\"hljs-keyword\">if</span>(p == <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-built_in\">width</span>[level] = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//第一层一个结点</span>\n    <span class=\"hljs-keyword\">while</span>(rear &gt; front){ <span class=\"hljs-comment\">//队列不为空</span>\n        p = Queue[++front];<span class=\"hljs-comment\">//层次遍历，出队元素</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;lchild; <span class=\"hljs-comment\">//左子树不为空，则左子树根结点入队 </span>\n        } \n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>){ \n            Queue[++rear] = p-&gt;rchild; <span class=\"hljs-comment\">//右子树不为空，则右子树根节点入队 </span>\n        }\n        <span class=\"hljs-keyword\">if</span>(front == last){<span class=\"hljs-comment\">//出队元素和last所指向的最右结点相同时</span>\n            <span class=\"hljs-built_in\">width</span>[++level] = rear - last;<span class=\"hljs-comment\">//该层元素个数等于此时队列的尾指针减去上一层最右结点的位置</span>\n            last = rear;\n        } \n    }\n    <span class=\"hljs-comment\">//最后得到的层数会多一层 </span>\n    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">max</span>=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=level;i++){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">width</span>[i]&gt;<span class=\"hljs-built_in\">max</span>){\n            <span class=\"hljs-built_in\">max</span>=<span class=\"hljs-built_in\">width</span>[i];\n        }\n    } \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>; \n}\n</code></pre>\n"},{"title":"2020吉林大学心理学拟录取名单","top":false,"cover":false,"toc":true,"mathjax":true,"summary":"2020心理学录取名单","abbrlink":"a3e2","date":"2020-06-03T12:56:45.000Z","password":null,"_content":"## -2020吉林大学心理学拟录取名单-\n* * *\n| 姓名 | 初试总分 | 报考专业 | 复试成绩 | 总成绩 | 备注           |\n| ------ | -------- | ---------- | -------- | ------ | ---------------- |\n| 王曼玉 | 376      | 基础心理学 | 285      | 81.14  | 　              |\n| 王青 | 371      | 基础心理学 | 286      | 80.54  | 　              |\n| 陈楚浩 | 404      | 应用心理学 | 285      | 85.06  | 　              |\n| 董洁 | 398      | 应用心理学 | 282      | 83.92  | 　              |\n| 杨杭 | 379      | 应用心理学 | 278      | 80.86  | 　              |\n| 任志颖 | 377      | 应用心理学 | 276      | 80.38  | 　              |\n| 张晗 | 364      | 应用心理学 | 278      | 78.76  | 　              |\n| 贾玉洁 | 417      | 应用心理 | 282      | 86.58  | 　              |\n| 卢梦歌 | 415      | 应用心理 | 281      | 86.2   | 　              |\n| 刘云欢 | 397      | 应用心理 | 283      | 83.88  | 　              |\n| 罗光霞 | 391      | 应用心理 | 282      | 82.94  | 　              |\n| 鲍守頔 | 399      | 应用心理 | 270      | 82.86  | 　              |\n| 徐帅 | 385      | 应用心理 | 288      | 82.7   | 　              |\n| 刘力萌 | 389      | 应用心理 | 279      | 82.36  | 　              |\n| 王玉倩 | 387      | 应用心理 | 278      | 81.98  | 　              |\n| 唐紫薇 | 385      | 应用心理 | 277      | 81.6   | 　              |\n| 王贝 | 383      | 应用心理 | 276      | 81.22  | 　              |\n| 吴峰 | 382      | 应用心理 | 277      | 81.18  | 　              |\n| 董维 | 379      | 应用心理 | 275      | 80.56  | 　              |\n| 田飞霜 | 378      | 应用心理 | 275      | 80.42  | 　              |\n| 张彦琪 | 335      | 应用心理 | 273      | 74.2   | 退役大学生计划 |\n| 马莹 | 292      | 应用心理 | 276      | 68.48  | 少数民族骨干计划 |","source":"_posts/2020吉林大学心理学拟录取名单.md","raw":"---\ntitle: 2020吉林大学心理学拟录取名单\ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: 2020心理学录取名单\ntags:\n  - 考研\n  - 心理学\ncategories:\n  - 菁菁\nabbrlink: a3e2\ndate: 2020-06-03 20:56:45\npassword:\n---\n## -2020吉林大学心理学拟录取名单-\n* * *\n| 姓名 | 初试总分 | 报考专业 | 复试成绩 | 总成绩 | 备注           |\n| ------ | -------- | ---------- | -------- | ------ | ---------------- |\n| 王曼玉 | 376      | 基础心理学 | 285      | 81.14  | 　              |\n| 王青 | 371      | 基础心理学 | 286      | 80.54  | 　              |\n| 陈楚浩 | 404      | 应用心理学 | 285      | 85.06  | 　              |\n| 董洁 | 398      | 应用心理学 | 282      | 83.92  | 　              |\n| 杨杭 | 379      | 应用心理学 | 278      | 80.86  | 　              |\n| 任志颖 | 377      | 应用心理学 | 276      | 80.38  | 　              |\n| 张晗 | 364      | 应用心理学 | 278      | 78.76  | 　              |\n| 贾玉洁 | 417      | 应用心理 | 282      | 86.58  | 　              |\n| 卢梦歌 | 415      | 应用心理 | 281      | 86.2   | 　              |\n| 刘云欢 | 397      | 应用心理 | 283      | 83.88  | 　              |\n| 罗光霞 | 391      | 应用心理 | 282      | 82.94  | 　              |\n| 鲍守頔 | 399      | 应用心理 | 270      | 82.86  | 　              |\n| 徐帅 | 385      | 应用心理 | 288      | 82.7   | 　              |\n| 刘力萌 | 389      | 应用心理 | 279      | 82.36  | 　              |\n| 王玉倩 | 387      | 应用心理 | 278      | 81.98  | 　              |\n| 唐紫薇 | 385      | 应用心理 | 277      | 81.6   | 　              |\n| 王贝 | 383      | 应用心理 | 276      | 81.22  | 　              |\n| 吴峰 | 382      | 应用心理 | 277      | 81.18  | 　              |\n| 董维 | 379      | 应用心理 | 275      | 80.56  | 　              |\n| 田飞霜 | 378      | 应用心理 | 275      | 80.42  | 　              |\n| 张彦琪 | 335      | 应用心理 | 273      | 74.2   | 退役大学生计划 |\n| 马莹 | 292      | 应用心理 | 276      | 68.48  | 少数民族骨干计划 |","slug":"2020吉林大学心理学拟录取名单","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi2000lzl9k93pkenpz","content":"<h2 id=\"-2020吉林大学心理学拟录取名单-\"><a class=\"markdownIt-Anchor\" href=\"#-2020吉林大学心理学拟录取名单-\"></a> -2020吉林大学心理学拟录取名单-</h2>\n<hr>\n<table>\n<thead>\n<tr>\n<th>姓名</th>\n<th>初试总分</th>\n<th>报考专业</th>\n<th>复试成绩</th>\n<th>总成绩</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>王曼玉</td>\n<td>376</td>\n<td>基础心理学</td>\n<td>285</td>\n<td>81.14</td>\n<td></td>\n</tr>\n<tr>\n<td>王青</td>\n<td>371</td>\n<td>基础心理学</td>\n<td>286</td>\n<td>80.54</td>\n<td></td>\n</tr>\n<tr>\n<td>陈楚浩</td>\n<td>404</td>\n<td>应用心理学</td>\n<td>285</td>\n<td>85.06</td>\n<td></td>\n</tr>\n<tr>\n<td>董洁</td>\n<td>398</td>\n<td>应用心理学</td>\n<td>282</td>\n<td>83.92</td>\n<td></td>\n</tr>\n<tr>\n<td>杨杭</td>\n<td>379</td>\n<td>应用心理学</td>\n<td>278</td>\n<td>80.86</td>\n<td></td>\n</tr>\n<tr>\n<td>任志颖</td>\n<td>377</td>\n<td>应用心理学</td>\n<td>276</td>\n<td>80.38</td>\n<td></td>\n</tr>\n<tr>\n<td>张晗</td>\n<td>364</td>\n<td>应用心理学</td>\n<td>278</td>\n<td>78.76</td>\n<td></td>\n</tr>\n<tr>\n<td>贾玉洁</td>\n<td>417</td>\n<td>应用心理</td>\n<td>282</td>\n<td>86.58</td>\n<td></td>\n</tr>\n<tr>\n<td>卢梦歌</td>\n<td>415</td>\n<td>应用心理</td>\n<td>281</td>\n<td>86.2</td>\n<td></td>\n</tr>\n<tr>\n<td>刘云欢</td>\n<td>397</td>\n<td>应用心理</td>\n<td>283</td>\n<td>83.88</td>\n<td></td>\n</tr>\n<tr>\n<td>罗光霞</td>\n<td>391</td>\n<td>应用心理</td>\n<td>282</td>\n<td>82.94</td>\n<td></td>\n</tr>\n<tr>\n<td>鲍守頔</td>\n<td>399</td>\n<td>应用心理</td>\n<td>270</td>\n<td>82.86</td>\n<td></td>\n</tr>\n<tr>\n<td>徐帅</td>\n<td>385</td>\n<td>应用心理</td>\n<td>288</td>\n<td>82.7</td>\n<td></td>\n</tr>\n<tr>\n<td>刘力萌</td>\n<td>389</td>\n<td>应用心理</td>\n<td>279</td>\n<td>82.36</td>\n<td></td>\n</tr>\n<tr>\n<td>王玉倩</td>\n<td>387</td>\n<td>应用心理</td>\n<td>278</td>\n<td>81.98</td>\n<td></td>\n</tr>\n<tr>\n<td>唐紫薇</td>\n<td>385</td>\n<td>应用心理</td>\n<td>277</td>\n<td>81.6</td>\n<td></td>\n</tr>\n<tr>\n<td>王贝</td>\n<td>383</td>\n<td>应用心理</td>\n<td>276</td>\n<td>81.22</td>\n<td></td>\n</tr>\n<tr>\n<td>吴峰</td>\n<td>382</td>\n<td>应用心理</td>\n<td>277</td>\n<td>81.18</td>\n<td></td>\n</tr>\n<tr>\n<td>董维</td>\n<td>379</td>\n<td>应用心理</td>\n<td>275</td>\n<td>80.56</td>\n<td></td>\n</tr>\n<tr>\n<td>田飞霜</td>\n<td>378</td>\n<td>应用心理</td>\n<td>275</td>\n<td>80.42</td>\n<td></td>\n</tr>\n<tr>\n<td>张彦琪</td>\n<td>335</td>\n<td>应用心理</td>\n<td>273</td>\n<td>74.2</td>\n<td>退役大学生计划</td>\n</tr>\n<tr>\n<td>马莹</td>\n<td>292</td>\n<td>应用心理</td>\n<td>276</td>\n<td>68.48</td>\n<td>少数民族骨干计划</td>\n</tr>\n</tbody>\n</table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"-2020吉林大学心理学拟录取名单-\"><a class=\"markdownIt-Anchor\" href=\"#-2020吉林大学心理学拟录取名单-\"></a> -2020吉林大学心理学拟录取名单-</h2>\n<hr />\n<table>\n<thead>\n<tr>\n<th>姓名</th>\n<th>初试总分</th>\n<th>报考专业</th>\n<th>复试成绩</th>\n<th>总成绩</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>王曼玉</td>\n<td>376</td>\n<td>基础心理学</td>\n<td>285</td>\n<td>81.14</td>\n<td></td>\n</tr>\n<tr>\n<td>王青</td>\n<td>371</td>\n<td>基础心理学</td>\n<td>286</td>\n<td>80.54</td>\n<td></td>\n</tr>\n<tr>\n<td>陈楚浩</td>\n<td>404</td>\n<td>应用心理学</td>\n<td>285</td>\n<td>85.06</td>\n<td></td>\n</tr>\n<tr>\n<td>董洁</td>\n<td>398</td>\n<td>应用心理学</td>\n<td>282</td>\n<td>83.92</td>\n<td></td>\n</tr>\n<tr>\n<td>杨杭</td>\n<td>379</td>\n<td>应用心理学</td>\n<td>278</td>\n<td>80.86</td>\n<td></td>\n</tr>\n<tr>\n<td>任志颖</td>\n<td>377</td>\n<td>应用心理学</td>\n<td>276</td>\n<td>80.38</td>\n<td></td>\n</tr>\n<tr>\n<td>张晗</td>\n<td>364</td>\n<td>应用心理学</td>\n<td>278</td>\n<td>78.76</td>\n<td></td>\n</tr>\n<tr>\n<td>贾玉洁</td>\n<td>417</td>\n<td>应用心理</td>\n<td>282</td>\n<td>86.58</td>\n<td></td>\n</tr>\n<tr>\n<td>卢梦歌</td>\n<td>415</td>\n<td>应用心理</td>\n<td>281</td>\n<td>86.2</td>\n<td></td>\n</tr>\n<tr>\n<td>刘云欢</td>\n<td>397</td>\n<td>应用心理</td>\n<td>283</td>\n<td>83.88</td>\n<td></td>\n</tr>\n<tr>\n<td>罗光霞</td>\n<td>391</td>\n<td>应用心理</td>\n<td>282</td>\n<td>82.94</td>\n<td></td>\n</tr>\n<tr>\n<td>鲍守頔</td>\n<td>399</td>\n<td>应用心理</td>\n<td>270</td>\n<td>82.86</td>\n<td></td>\n</tr>\n<tr>\n<td>徐帅</td>\n<td>385</td>\n<td>应用心理</td>\n<td>288</td>\n<td>82.7</td>\n<td></td>\n</tr>\n<tr>\n<td>刘力萌</td>\n<td>389</td>\n<td>应用心理</td>\n<td>279</td>\n<td>82.36</td>\n<td></td>\n</tr>\n<tr>\n<td>王玉倩</td>\n<td>387</td>\n<td>应用心理</td>\n<td>278</td>\n<td>81.98</td>\n<td></td>\n</tr>\n<tr>\n<td>唐紫薇</td>\n<td>385</td>\n<td>应用心理</td>\n<td>277</td>\n<td>81.6</td>\n<td></td>\n</tr>\n<tr>\n<td>王贝</td>\n<td>383</td>\n<td>应用心理</td>\n<td>276</td>\n<td>81.22</td>\n<td></td>\n</tr>\n<tr>\n<td>吴峰</td>\n<td>382</td>\n<td>应用心理</td>\n<td>277</td>\n<td>81.18</td>\n<td></td>\n</tr>\n<tr>\n<td>董维</td>\n<td>379</td>\n<td>应用心理</td>\n<td>275</td>\n<td>80.56</td>\n<td></td>\n</tr>\n<tr>\n<td>田飞霜</td>\n<td>378</td>\n<td>应用心理</td>\n<td>275</td>\n<td>80.42</td>\n<td></td>\n</tr>\n<tr>\n<td>张彦琪</td>\n<td>335</td>\n<td>应用心理</td>\n<td>273</td>\n<td>74.2</td>\n<td>退役大学生计划</td>\n</tr>\n<tr>\n<td>马莹</td>\n<td>292</td>\n<td>应用心理</td>\n<td>276</td>\n<td>68.48</td>\n<td>少数民族骨干计划</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"7月份学习计划","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"学习计划","abbrlink":"4cfa","date":"2020-07-01T12:06:05.000Z","password":null,"_content":"<center> <h2>7月份学习计划<h2></center>\n\n| <center>7月份</center> | <center>数学</center>                                        | <center>专业课</center>                                      | <center>英语</center>                                        | <center>政治</center>                       | <center>完成度</center>          |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------- | -------------------------------- |\n| 7.1                    | 1.1000题高数第16讲BC <br>2.看第7章BC组讲解                   | 1.2018年计专数据结构基础题                                   | 1.整理句子<br> 2.背单词                                      | 对立统一                                    | <center>:sun_with_face:</center> |\n| 7.2                    | 1.1000题高数第17讲BC <br>2.看第8章BC组讲解                   | 1.2017年计专数据结构基础题 <br>2.2018计算机学硕两道代码 <br>3.对照常青藤与课本复习计算机网络其余部分 | 1.恋恋有词Unit6 Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词 | 质量互变定律                                | <center>:sun_with_face:</center> |\n| 7.3                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.4                    | 1.1000题高数第18讲25道题<br>2.看第9章BC组讲解                | 1.2016年计专数据结构基础题 <br>2.2017计算机学硕两道代码 <br>3.冲刺讲义数据结构看完4.2和代码讲义链表代码 <br>4.2018学硕计网真题 | 1.恋恋有词Unit7 Lesson1 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词 | 否定之否定定律                              | <center>:frowning:</center>      |\n| 7.5                    | 1.1000题高数第18讲剩余题目<br>2.看第10章BC组讲解             | 1.2015年计专数据结构基础题 <br>2.2018学硕计网真题            | 1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词 | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.6                    | 1.1000题线代第1、2讲BC <br>2.看第11、12章BC组讲解            | 1.2014年计专数据结构基础题 <br>2.冲刺讲义数据结构看完4.2 <br>3.2017学硕计网真题 | 1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词 | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.7                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.8                    | 1.1000题线代第3-1讲 <br>2.看第13章讲解                       | 1.2013年计专数据结构基础题 <br>2.学习2017学硕计网选择题知识点 <br>3.冲刺讲义数据结构看4.3 | 1.做真题2010.3并看李旭相应视频 <br>2.背所学课程单词          | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.9                    | 1.1000题线代第3-2讲 <br>2.看第14章讲解                       | 1.2012年计专数据结构基础题 <br>2.2016学硕计网 <br>3.冲刺讲义数据结构看4.4 | 1.做真题2010.4并看李旭相应视频 <br>2.背所学课程单词          | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.10                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.11                   | 烧烤BBQ                                                      | 烧烤BBQ                                                      | 烧烤BBQ                                                      | 烧烤BBQ                                     | <center>:relaxed:</center>       |\n| 7.12                   | 1.1000题线代第4讲 <br>2.看第15章讲解                         | 1.2011年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5 | 1.做真题2011.1并看李旭相应视频 <br>2.背所学课程单词          | 认识论                                      | <center>:sun_with_face:</center> |\n| 7.13                   | 1.1000题线代第5-1讲 <br>2.看第16章B组讲解                    | 1.2010年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5 | 1.做真题2011.2并看李旭相应视频 <br>2.背所学课程单词          | 认识的本质                                  | <center>:sun_with_face:</center> |\n| 7.14                   | 1.1000题线代第5-2讲 <br>2.看第16章C组讲解                    | 1.2018年软专数据结构基础题 <br>2.2012学硕计网 <br>3.冲刺讲义数据结构看4.5 | 1.做真题2011.3并看李旭相应视频 <br>2.背所学课程单词          | 认识的本质                                  | <center>:sun_with_face:</center> |\n| 7.15                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.16                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.17                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.18                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.19                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.20                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.21                   | 1.1000题线代第6讲 <br>2.看第17章讲解 <br>3.看18讲第一章并blog总结相关知识点 | 1.2017年软专数据结构基础题 <br>2.2010学硕计网 <br>3.冲刺讲义数据结构看4.1 <br>4.冲刺讲义计网基础全部看完 | 1.做真题2011.4并看李旭相应视频 <br>２.背所学课程单词         | 认识的本质                                  | <center>:sun_with_face:</center> |\n| 7.22                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.23                   | 1.1000题线代第7-1讲 <br>2.看第18章讲解 <br>3.看18讲第二章    | 1.2015年软专数据结构基础题 <br>2.整理计网基础第二章blog <br>3.冲刺讲义数据结构看4.2 | 1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词         | 1.徐涛真理与价值 <br>2.做1000题第一、二章题 | <center>:sun_with_face:</center> |\n| 7.24                   | 1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章    | 1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3 | 1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词         | 社会基本矛盾                                | <center>:sun_with_face:</center> |\n| 7.25                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.26                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.27                   | 1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章    | 1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3 <br>4.每日一题 栈 | 1.做真题2014.4并看李旭相应视频 <br>２.背所学课程单词         | 1.社会形态                                  | <center>:sun_with_face:</center> |\n| 7.28                   | 1.1000题线代第8讲 <br>2.看线代第3章讲解 <br>3.看18讲第二章 <br>4.闭关修炼第一章 | 1.2013年软专数据结构基础题 <br>2.整理计网基础第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈 | 1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词         | 1.社会形态 <br>2.做1000剩余第二章单选       | <center>:sun_with_face:</center> |\n| 7.29                   | 1.看线代第3章讲解 <br>2.闭关修炼第一章                       | 1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈 | 1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词         | 1.社会形态 <br>2.做1000剩余第二章单选       |                                  |\n| 7.30                   | 1.1000题线概率第2讲                                          | 1.2011年软专数据结构基础题                                   | 1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词         | 商品的两因素                                |                                  |\n| 7.31                   | 1.1000题线概率第3讲                                          | 1.2010年软专数据结构基础题                                   |                                                              | 价值规律                                    |                                  |\n|                        | 1.1000题线概率第4讲                                          |                                                              |                                                              | 剩余价值生产                                |                                  |\n|                        | 1.1000题线概率第5讲                                          |                                                              |                                                              | 剩余价值流转                                |                                  |\n|                        | 1.1000题线概率第6-1讲                                        |                                                              |                                                              | 垄断资本主义                                |                                  |\n|                        | 1.1000题线概率第6-2讲                                        |                                                              |                                                              | 社会主义                                    |                                  |\n|                        | 1.1000题线概率第6-3讲                                        |                                                              |                                                              | 人生的青春                                  |                                  |\n|                        | 1.1000题线概率第7讲                                          |                                                              |                                                              | 人生理想                                    |                                  |\n|                        | 1.1000题线概率第8讲                                          |                                                              |                                                              |                                             |                                  |\n|                        | 1.1000题线概率第9-1讲                                        |                                                              |                                                              |                                             |                                  |\n|                        | 1.1000题线概率第9-2讲                                        |                                                              |                                                              |                                             |                                  |","source":"_posts/7月份学习计划.md","raw":"---\ntitle: 7月份学习计划\ntop: false\ncover: false\ntoc: false\nmathjax: true\nsummary: 学习计划\ntags:\n  - 考研\n  - 计划\ncategories:\n  - 男男\nabbrlink: 4cfa\ndate: 2020-07-01 20:06:05\npassword:\n---\n<center> <h2>7月份学习计划<h2></center>\n\n| <center>7月份</center> | <center>数学</center>                                        | <center>专业课</center>                                      | <center>英语</center>                                        | <center>政治</center>                       | <center>完成度</center>          |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------- | -------------------------------- |\n| 7.1                    | 1.1000题高数第16讲BC <br>2.看第7章BC组讲解                   | 1.2018年计专数据结构基础题                                   | 1.整理句子<br> 2.背单词                                      | 对立统一                                    | <center>:sun_with_face:</center> |\n| 7.2                    | 1.1000题高数第17讲BC <br>2.看第8章BC组讲解                   | 1.2017年计专数据结构基础题 <br>2.2018计算机学硕两道代码 <br>3.对照常青藤与课本复习计算机网络其余部分 | 1.恋恋有词Unit6 Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词 | 质量互变定律                                | <center>:sun_with_face:</center> |\n| 7.3                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.4                    | 1.1000题高数第18讲25道题<br>2.看第9章BC组讲解                | 1.2016年计专数据结构基础题 <br>2.2017计算机学硕两道代码 <br>3.冲刺讲义数据结构看完4.2和代码讲义链表代码 <br>4.2018学硕计网真题 | 1.恋恋有词Unit7 Lesson1 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词 | 否定之否定定律                              | <center>:frowning:</center>      |\n| 7.5                    | 1.1000题高数第18讲剩余题目<br>2.看第10章BC组讲解             | 1.2015年计专数据结构基础题 <br>2.2018学硕计网真题            | 1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词 | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.6                    | 1.1000题线代第1、2讲BC <br>2.看第11、12章BC组讲解            | 1.2014年计专数据结构基础题 <br>2.冲刺讲义数据结构看完4.2 <br>3.2017学硕计网真题 | 1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词 | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.7                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.8                    | 1.1000题线代第3-1讲 <br>2.看第13章讲解                       | 1.2013年计专数据结构基础题 <br>2.学习2017学硕计网选择题知识点 <br>3.冲刺讲义数据结构看4.3 | 1.做真题2010.3并看李旭相应视频 <br>2.背所学课程单词          | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.9                    | 1.1000题线代第3-2讲 <br>2.看第14章讲解                       | 1.2012年计专数据结构基础题 <br>2.2016学硕计网 <br>3.冲刺讲义数据结构看4.4 | 1.做真题2010.4并看李旭相应视频 <br>2.背所学课程单词          | 否定之否定定律                              | <center>:sun_with_face:</center> |\n| 7.10                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.11                   | 烧烤BBQ                                                      | 烧烤BBQ                                                      | 烧烤BBQ                                                      | 烧烤BBQ                                     | <center>:relaxed:</center>       |\n| 7.12                   | 1.1000题线代第4讲 <br>2.看第15章讲解                         | 1.2011年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5 | 1.做真题2011.1并看李旭相应视频 <br>2.背所学课程单词          | 认识论                                      | <center>:sun_with_face:</center> |\n| 7.13                   | 1.1000题线代第5-1讲 <br>2.看第16章B组讲解                    | 1.2010年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5 | 1.做真题2011.2并看李旭相应视频 <br>2.背所学课程单词          | 认识的本质                                  | <center>:sun_with_face:</center> |\n| 7.14                   | 1.1000题线代第5-2讲 <br>2.看第16章C组讲解                    | 1.2018年软专数据结构基础题 <br>2.2012学硕计网 <br>3.冲刺讲义数据结构看4.5 | 1.做真题2011.3并看李旭相应视频 <br>2.背所学课程单词          | 认识的本质                                  | <center>:sun_with_face:</center> |\n| 7.15                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.16                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.17                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.18                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.19                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.20                   | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                                         | 学习deepin-linux系统                        | <center>:relaxed:</center>       |\n| 7.21                   | 1.1000题线代第6讲 <br>2.看第17章讲解 <br>3.看18讲第一章并blog总结相关知识点 | 1.2017年软专数据结构基础题 <br>2.2010学硕计网 <br>3.冲刺讲义数据结构看4.1 <br>4.冲刺讲义计网基础全部看完 | 1.做真题2011.4并看李旭相应视频 <br>２.背所学课程单词         | 认识的本质                                  | <center>:sun_with_face:</center> |\n| 7.22                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.23                   | 1.1000题线代第7-1讲 <br>2.看第18章讲解 <br>3.看18讲第二章    | 1.2015年软专数据结构基础题 <br>2.整理计网基础第二章blog <br>3.冲刺讲义数据结构看4.2 | 1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词         | 1.徐涛真理与价值 <br>2.做1000题第一、二章题 | <center>:sun_with_face:</center> |\n| 7.24                   | 1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章    | 1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3 | 1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词         | 社会基本矛盾                                | <center>:sun_with_face:</center> |\n| 7.25                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.26                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                                     | 休息一天                                    | <center>:relaxed:</center>       |\n| 7.27                   | 1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章    | 1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3 <br>4.每日一题 栈 | 1.做真题2014.4并看李旭相应视频 <br>２.背所学课程单词         | 1.社会形态                                  | <center>:sun_with_face:</center> |\n| 7.28                   | 1.1000题线代第8讲 <br>2.看线代第3章讲解 <br>3.看18讲第二章 <br>4.闭关修炼第一章 | 1.2013年软专数据结构基础题 <br>2.整理计网基础第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈 | 1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词         | 1.社会形态 <br>2.做1000剩余第二章单选       | <center>:sun_with_face:</center> |\n| 7.29                   | 1.看线代第3章讲解 <br>2.闭关修炼第一章                       | 1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈 | 1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词         | 1.社会形态 <br>2.做1000剩余第二章单选       |                                  |\n| 7.30                   | 1.1000题线概率第2讲                                          | 1.2011年软专数据结构基础题                                   | 1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词         | 商品的两因素                                |                                  |\n| 7.31                   | 1.1000题线概率第3讲                                          | 1.2010年软专数据结构基础题                                   |                                                              | 价值规律                                    |                                  |\n|                        | 1.1000题线概率第4讲                                          |                                                              |                                                              | 剩余价值生产                                |                                  |\n|                        | 1.1000题线概率第5讲                                          |                                                              |                                                              | 剩余价值流转                                |                                  |\n|                        | 1.1000题线概率第6-1讲                                        |                                                              |                                                              | 垄断资本主义                                |                                  |\n|                        | 1.1000题线概率第6-2讲                                        |                                                              |                                                              | 社会主义                                    |                                  |\n|                        | 1.1000题线概率第6-3讲                                        |                                                              |                                                              | 人生的青春                                  |                                  |\n|                        | 1.1000题线概率第7讲                                          |                                                              |                                                              | 人生理想                                    |                                  |\n|                        | 1.1000题线概率第8讲                                          |                                                              |                                                              |                                             |                                  |\n|                        | 1.1000题线概率第9-1讲                                        |                                                              |                                                              |                                             |                                  |\n|                        | 1.1000题线概率第9-2讲                                        |                                                              |                                                              |                                             |                                  |","slug":"7月份学习计划","published":1,"updated":"2020-08-10T10:18:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi3000ozl9k1wtshen0","content":"<center> <h2>7月份学习计划</h2><h2></h2></center>\n<table>\n<thead>\n<tr>\n<th><center>7月份</center></th>\n<th><center>数学</center></th>\n<th><center>专业课</center></th>\n<th><center>英语</center></th>\n<th><center>政治</center></th>\n<th><center>完成度</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7.1</td>\n<td>1.1000题高数第16讲BC <br>2.看第7章BC组讲解</td>\n<td>1.2018年计专数据结构基础题</td>\n<td>1.整理句子<br> 2.背单词</td>\n<td>对立统一</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.2</td>\n<td>1.1000题高数第17讲BC <br>2.看第8章BC组讲解</td>\n<td>1.2017年计专数据结构基础题 <br>2.2018计算机学硕两道代码 <br>3.对照常青藤与课本复习计算机网络其余部分</td>\n<td>1.恋恋有词Unit6 Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词</td>\n<td>质量互变定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.3</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.4</td>\n<td>1.1000题高数第18讲25道题<br>2.看第9章BC组讲解</td>\n<td>1.2016年计专数据结构基础题 <br>2.2017计算机学硕两道代码 <br>3.冲刺讲义数据结构看完4.2和代码讲义链表代码 <br>4.2018学硕计网真题</td>\n<td>1.恋恋有词Unit7 Lesson1 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>7.5</td>\n<td>1.1000题高数第18讲剩余题目<br>2.看第10章BC组讲解</td>\n<td>1.2015年计专数据结构基础题 <br>2.2018学硕计网真题</td>\n<td>1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.6</td>\n<td>1.1000题线代第1、2讲BC <br>2.看第11、12章BC组讲解</td>\n<td>1.2014年计专数据结构基础题 <br>2.冲刺讲义数据结构看完4.2 <br>3.2017学硕计网真题</td>\n<td>1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.7</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.8</td>\n<td>1.1000题线代第3-1讲 <br>2.看第13章讲解</td>\n<td>1.2013年计专数据结构基础题 <br>2.学习2017学硕计网选择题知识点 <br>3.冲刺讲义数据结构看4.3</td>\n<td>1.做真题2010.3并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.9</td>\n<td>1.1000题线代第3-2讲 <br>2.看第14章讲解</td>\n<td>1.2012年计专数据结构基础题 <br>2.2016学硕计网 <br>3.冲刺讲义数据结构看4.4</td>\n<td>1.做真题2010.4并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.10</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.11</td>\n<td>烧烤BBQ</td>\n<td>烧烤BBQ</td>\n<td>烧烤BBQ</td>\n<td>烧烤BBQ</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.12</td>\n<td>1.1000题线代第4讲 <br>2.看第15章讲解</td>\n<td>1.2011年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5</td>\n<td>1.做真题2011.1并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>认识论</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.13</td>\n<td>1.1000题线代第5-1讲 <br>2.看第16章B组讲解</td>\n<td>1.2010年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5</td>\n<td>1.做真题2011.2并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>认识的本质</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.14</td>\n<td>1.1000题线代第5-2讲 <br>2.看第16章C组讲解</td>\n<td>1.2018年软专数据结构基础题 <br>2.2012学硕计网 <br>3.冲刺讲义数据结构看4.5</td>\n<td>1.做真题2011.3并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>认识的本质</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.15</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.16</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.17</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.18</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.19</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.20</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.21</td>\n<td>1.1000题线代第6讲 <br>2.看第17章讲解 <br>3.看18讲第一章并blog总结相关知识点</td>\n<td>1.2017年软专数据结构基础题 <br>2.2010学硕计网 <br>3.冲刺讲义数据结构看4.1 <br>4.冲刺讲义计网基础全部看完</td>\n<td>1.做真题2011.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>认识的本质</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.22</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.23</td>\n<td>1.1000题线代第7-1讲 <br>2.看第18章讲解 <br>3.看18讲第二章</td>\n<td>1.2015年软专数据结构基础题 <br>2.整理计网基础第二章blog <br>3.冲刺讲义数据结构看4.2</td>\n<td>1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.徐涛真理与价值 <br>2.做1000题第一、二章题</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.24</td>\n<td>1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章</td>\n<td>1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3</td>\n<td>1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>社会基本矛盾</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.25</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.26</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.27</td>\n<td>1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章</td>\n<td>1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3 <br>4.每日一题 栈</td>\n<td>1.做真题2014.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.28</td>\n<td>1.1000题线代第8讲 <br>2.看线代第3章讲解 <br>3.看18讲第二章 <br>4.闭关修炼第一章</td>\n<td>1.2013年软专数据结构基础题 <br>2.整理计网基础第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈</td>\n<td>1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态 <br>2.做1000剩余第二章单选</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.29</td>\n<td>1.看线代第3章讲解 <br>2.闭关修炼第一章</td>\n<td>1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈</td>\n<td>1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态 <br>2.做1000剩余第二章单选</td>\n<td></td>\n</tr>\n<tr>\n<td>7.30</td>\n<td>1.1000题线概率第2讲</td>\n<td>1.2011年软专数据结构基础题</td>\n<td>1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>商品的两因素</td>\n<td></td>\n</tr>\n<tr>\n<td>7.31</td>\n<td>1.1000题线概率第3讲</td>\n<td>1.2010年软专数据结构基础题</td>\n<td></td>\n<td>价值规律</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第4讲</td>\n<td></td>\n<td></td>\n<td>剩余价值生产</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第5讲</td>\n<td></td>\n<td></td>\n<td>剩余价值流转</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第6-1讲</td>\n<td></td>\n<td></td>\n<td>垄断资本主义</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第6-2讲</td>\n<td></td>\n<td></td>\n<td>社会主义</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第6-3讲</td>\n<td></td>\n<td></td>\n<td>人生的青春</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第7讲</td>\n<td></td>\n<td></td>\n<td>人生理想</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第8讲</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第9-1讲</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第9-2讲</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<center> <h2>7月份学习计划<h2></center>\n<table>\n<thead>\n<tr>\n<th><center>7月份</center></th>\n<th><center>数学</center></th>\n<th><center>专业课</center></th>\n<th><center>英语</center></th>\n<th><center>政治</center></th>\n<th><center>完成度</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7.1</td>\n<td>1.1000题高数第16讲BC <br>2.看第7章BC组讲解</td>\n<td>1.2018年计专数据结构基础题</td>\n<td>1.整理句子<br> 2.背单词</td>\n<td>对立统一</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.2</td>\n<td>1.1000题高数第17讲BC <br>2.看第8章BC组讲解</td>\n<td>1.2017年计专数据结构基础题 <br>2.2018计算机学硕两道代码 <br>3.对照常青藤与课本复习计算机网络其余部分</td>\n<td>1.恋恋有词Unit6 Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词</td>\n<td>质量互变定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.3</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.4</td>\n<td>1.1000题高数第18讲25道题<br>2.看第9章BC组讲解</td>\n<td>1.2016年计专数据结构基础题 <br>2.2017计算机学硕两道代码 <br>3.冲刺讲义数据结构看完4.2和代码讲义链表代码 <br>4.2018学硕计网真题</td>\n<td>1.恋恋有词Unit7 Lesson1 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>7.5</td>\n<td>1.1000题高数第18讲剩余题目<br>2.看第10章BC组讲解</td>\n<td>1.2015年计专数据结构基础题 <br>2.2018学硕计网真题</td>\n<td>1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.6</td>\n<td>1.1000题线代第1、2讲BC <br>2.看第11、12章BC组讲解</td>\n<td>1.2014年计专数据结构基础题 <br>2.冲刺讲义数据结构看完4.2 <br>3.2017学硕计网真题</td>\n<td>1.恋恋有词Unit7 Lesson2 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.7</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.8</td>\n<td>1.1000题线代第3-1讲 <br>2.看第13章讲解</td>\n<td>1.2013年计专数据结构基础题 <br>2.学习2017学硕计网选择题知识点 <br>3.冲刺讲义数据结构看4.3</td>\n<td>1.做真题2010.3并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.9</td>\n<td>1.1000题线代第3-2讲 <br>2.看第14章讲解</td>\n<td>1.2012年计专数据结构基础题 <br>2.2016学硕计网 <br>3.冲刺讲义数据结构看4.4</td>\n<td>1.做真题2010.4并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.10</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.11</td>\n<td>烧烤BBQ</td>\n<td>烧烤BBQ</td>\n<td>烧烤BBQ</td>\n<td>烧烤BBQ</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.12</td>\n<td>1.1000题线代第4讲 <br>2.看第15章讲解</td>\n<td>1.2011年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5</td>\n<td>1.做真题2011.1并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>认识论</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.13</td>\n<td>1.1000题线代第5-1讲 <br>2.看第16章B组讲解</td>\n<td>1.2010年计专数据结构基础题 <br>2.2015学硕计网 <br>3.冲刺讲义数据结构看4.5</td>\n<td>1.做真题2011.2并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>认识的本质</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.14</td>\n<td>1.1000题线代第5-2讲 <br>2.看第16章C组讲解</td>\n<td>1.2018年软专数据结构基础题 <br>2.2012学硕计网 <br>3.冲刺讲义数据结构看4.5</td>\n<td>1.做真题2011.3并看李旭相应视频 <br>2.背所学课程单词</td>\n<td>认识的本质</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.15</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.16</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.17</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.18</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.19</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.20</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td>学习deepin-linux系统</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.21</td>\n<td>1.1000题线代第6讲 <br>2.看第17章讲解 <br>3.看18讲第一章并blog总结相关知识点</td>\n<td>1.2017年软专数据结构基础题 <br>2.2010学硕计网 <br>3.冲刺讲义数据结构看4.1 <br>4.冲刺讲义计网基础全部看完</td>\n<td>1.做真题2011.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>认识的本质</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.22</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.23</td>\n<td>1.1000题线代第7-1讲 <br>2.看第18章讲解 <br>3.看18讲第二章</td>\n<td>1.2015年软专数据结构基础题 <br>2.整理计网基础第二章blog <br>3.冲刺讲义数据结构看4.2</td>\n<td>1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.徐涛真理与价值 <br>2.做1000题第一、二章题</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.24</td>\n<td>1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章</td>\n<td>1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3</td>\n<td>1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>社会基本矛盾</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.25</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.26</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>7.27</td>\n<td>1.1000题线代第7-2讲 <br>2.看第18章讲解 <br>3.看18讲第二章</td>\n<td>1.2014年软专数据结构基础题 <br>2.整理计网基础第三章blog <br>3.冲刺讲义数据结构看4.3 <br>4.每日一题 栈</td>\n<td>1.做真题2014.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.28</td>\n<td>1.1000题线代第8讲 <br>2.看线代第3章讲解 <br>3.看18讲第二章 <br>4.闭关修炼第一章</td>\n<td>1.2013年软专数据结构基础题 <br>2.整理计网基础第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈</td>\n<td>1.做真题2012.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态 <br>2.做1000剩余第二章单选</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>7.29</td>\n<td>1.看线代第3章讲解 <br>2.闭关修炼第一章</td>\n<td>1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈</td>\n<td>1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态 <br>2.做1000剩余第二章单选</td>\n<td></td>\n</tr>\n<tr>\n<td>7.30</td>\n<td>1.1000题线概率第2讲</td>\n<td>1.2011年软专数据结构基础题</td>\n<td>1.做真题2012.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>商品的两因素</td>\n<td></td>\n</tr>\n<tr>\n<td>7.31</td>\n<td>1.1000题线概率第3讲</td>\n<td>1.2010年软专数据结构基础题</td>\n<td></td>\n<td>价值规律</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第4讲</td>\n<td></td>\n<td></td>\n<td>剩余价值生产</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第5讲</td>\n<td></td>\n<td></td>\n<td>剩余价值流转</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第6-1讲</td>\n<td></td>\n<td></td>\n<td>垄断资本主义</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第6-2讲</td>\n<td></td>\n<td></td>\n<td>社会主义</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第6-3讲</td>\n<td></td>\n<td></td>\n<td>人生的青春</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第7讲</td>\n<td></td>\n<td></td>\n<td>人生理想</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第8讲</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第9-1讲</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>1.1000题线概率第9-2讲</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"2018-979","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"2018-979软学代码题","description":"2018-979软学代码题","summary":"2018-979软学代码题","abbrlink":"6918","date":"2020-10-22T11:39:08.000Z","password":null,"_content":"## 2018-979-软学\n\n#### 1.第一题\n\n- 在Head为头指针的单链表中查找结点DATA域值为K的结点\n- 并将该结点与其前驱结点（如果存在）交换位置\n\n```c\nvoid jiaohuan(LinkList Head,int K){\n    LNode *pre = Head,*p = Head -> next;\n    if(p != NULL && p -> data == K){\n        //如果第一个就对\n        pre -> next = p -> next;\n        p -> next = pre;\n        return true;\n    }\n    p = p -> next;\n    if(p != NULL){\n        //之后的元素\n        if(p -> data == K){\n            pre -> next -> next = p -> next;\n            p -> next = pre -> next;\n            pre -> next = p;\n            return true;\n        }else{\n            p = p -> next;\n            pre = pre -> next;\n        }\n    }\n    return false;\n    \n}\n```\n\n#### 2.第二题\n\n- 给定二叉树的根指针为Root\n- 对二叉树自下而上、自左而右的层次遍历\n\n```c\ntypedef struct BiTNode{\n    int data;                        //数据域\n    struct BiTNode *lchild, *rchild;  //左、右孩子指针\n}BiTNode, *BiTree;\nvoid bianli(BiTree Root){\n    BiTree Stack[MaxSize];\n    int top = -1;//栈初始化\n    BiTree Queue[MaxSize];\n    int front,rear = -1;\n    BiTree p = Root;\n    if(p != NULL){\n        Stack[++top] = p;\n    }\n    while(p != NULL || top != -1){\n        \n        if(p -> lchild != NULL){\n            Stack[++top] = p -> lchild;\n        }\n        if(p -> rchild != NULL){\n            Stack[++top] = p -> rchild;\n        }else{\n            p = Stack[top--];\n            Queue[++rear] = p;\n        }\n        p = p -> lchild;\n    }\n    return Queue;\n}\n```\n\n### 3.第三题\n\n- 长度为n的数组A\n- 已知前$m(m<n)$个元素按升序有序排列，后$n-m$个元素按降序有序排列\n- 编写算法在$O(n)$时间内对数组A的元素按降序排序\n\n```c\nint* Sort(int A[]){\n    int C[];\n    int low = m-1,high = m,i = 0;\n    while(low >= 0 && high < n){\n        if(A[high].data >= A[low.data]){\n            C[i] = A[high];\n            high++;\n            i++;\n        }else{\n            C[i] = A[low];\n            low--;\n            i++;\n        }\n    }\n    while(high < n){\n        C[i] = A[high];\n        high++;\n        i++;\n    }\n    while(low >= 0){\n        C[i] = A[low];\n        low--;\n        i++;\n    }\n    return C;\n}\n```\n","source":"_posts/2018-979.md","raw":"---\ntitle: 2018-979\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\ncategories:\n  - 代码\nkeywords: 2018-979软学代码题\ndescription: 2018-979软学代码题\nsummary: 2018-979软学代码题\nabbrlink: '6918'\ndate: 2020-10-22 19:39:08\npassword:\n---\n## 2018-979-软学\n\n#### 1.第一题\n\n- 在Head为头指针的单链表中查找结点DATA域值为K的结点\n- 并将该结点与其前驱结点（如果存在）交换位置\n\n```c\nvoid jiaohuan(LinkList Head,int K){\n    LNode *pre = Head,*p = Head -> next;\n    if(p != NULL && p -> data == K){\n        //如果第一个就对\n        pre -> next = p -> next;\n        p -> next = pre;\n        return true;\n    }\n    p = p -> next;\n    if(p != NULL){\n        //之后的元素\n        if(p -> data == K){\n            pre -> next -> next = p -> next;\n            p -> next = pre -> next;\n            pre -> next = p;\n            return true;\n        }else{\n            p = p -> next;\n            pre = pre -> next;\n        }\n    }\n    return false;\n    \n}\n```\n\n#### 2.第二题\n\n- 给定二叉树的根指针为Root\n- 对二叉树自下而上、自左而右的层次遍历\n\n```c\ntypedef struct BiTNode{\n    int data;                        //数据域\n    struct BiTNode *lchild, *rchild;  //左、右孩子指针\n}BiTNode, *BiTree;\nvoid bianli(BiTree Root){\n    BiTree Stack[MaxSize];\n    int top = -1;//栈初始化\n    BiTree Queue[MaxSize];\n    int front,rear = -1;\n    BiTree p = Root;\n    if(p != NULL){\n        Stack[++top] = p;\n    }\n    while(p != NULL || top != -1){\n        \n        if(p -> lchild != NULL){\n            Stack[++top] = p -> lchild;\n        }\n        if(p -> rchild != NULL){\n            Stack[++top] = p -> rchild;\n        }else{\n            p = Stack[top--];\n            Queue[++rear] = p;\n        }\n        p = p -> lchild;\n    }\n    return Queue;\n}\n```\n\n### 3.第三题\n\n- 长度为n的数组A\n- 已知前$m(m<n)$个元素按升序有序排列，后$n-m$个元素按降序有序排列\n- 编写算法在$O(n)$时间内对数组A的元素按降序排序\n\n```c\nint* Sort(int A[]){\n    int C[];\n    int low = m-1,high = m,i = 0;\n    while(low >= 0 && high < n){\n        if(A[high].data >= A[low.data]){\n            C[i] = A[high];\n            high++;\n            i++;\n        }else{\n            C[i] = A[low];\n            low--;\n            i++;\n        }\n    }\n    while(high < n){\n        C[i] = A[high];\n        high++;\n        i++;\n    }\n    while(low >= 0){\n        C[i] = A[low];\n        low--;\n        i++;\n    }\n    return C;\n}\n```\n","slug":"2018-979","published":1,"updated":"2021-04-26T09:05:43.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi4000tzl9k351g308h","content":"<h2 id=\"2018-979-软学\"><a class=\"markdownIt-Anchor\" href=\"#2018-979-软学\"></a> 2018-979-软学</h2>\n<h4 id=\"1第一题\"><a class=\"markdownIt-Anchor\" href=\"#1第一题\"></a> 1.第一题</h4>\n<ul>\n<li>在Head为头指针的单链表中查找结点DATA域值为K的结点</li>\n<li>并将该结点与其前驱结点（如果存在）交换位置</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">jiaohuan</span><span class=\"hljs-params\">(LinkList Head,<span class=\"hljs-keyword\">int</span> K)</span></span>{\n    LNode *pre = Head,*p = Head -&gt; next;\n    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span> &amp;&amp; p -&gt; data == K){\n        <span class=\"hljs-comment\">//如果第一个就对</span>\n        pre -&gt; next = p -&gt; next;\n        p -&gt; next = pre;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    p = p -&gt; next;\n    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-comment\">//之后的元素</span>\n        <span class=\"hljs-keyword\">if</span>(p -&gt; data == K){\n            pre -&gt; next -&gt; next = p -&gt; next;\n            p -&gt; next = pre -&gt; next;\n            pre -&gt; next = p;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            p = p -&gt; next;\n            pre = pre -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    \n}\n</code></pre>\n<h4 id=\"2第二题\"><a class=\"markdownIt-Anchor\" href=\"#2第二题\"></a> 2.第二题</h4>\n<ul>\n<li>给定二叉树的根指针为Root</li>\n<li>对二叉树自下而上、自左而右的层次遍历</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data;                        <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>, *<span class=\"hljs-title\">rchild</span>;</span>  <span class=\"hljs-comment\">//左、右孩子指针</span>\n}BiTNode, *BiTree;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bianli</span><span class=\"hljs-params\">(BiTree Root)</span></span>{\n    BiTree Stack[MaxSize];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//栈初始化</span>\n    BiTree Queue[MaxSize];\n    <span class=\"hljs-keyword\">int</span> front,rear = <span class=\"hljs-number\">-1</span>;\n    BiTree p = Root;\n    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span>){\n        Stack[++top] = p;\n    }\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span> || top != <span class=\"hljs-number\">-1</span>){\n        \n        <span class=\"hljs-keyword\">if</span>(p -&gt; lchild != <span class=\"hljs-literal\">NULL</span>){\n            Stack[++top] = p -&gt; lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p -&gt; rchild != <span class=\"hljs-literal\">NULL</span>){\n            Stack[++top] = p -&gt; rchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            p = Stack[top--];\n            Queue[++rear] = p;\n        }\n        p = p -&gt; lchild;\n    }\n    <span class=\"hljs-keyword\">return</span> Queue;\n}\n</code></pre>\n<h3 id=\"3第三题\"><a class=\"markdownIt-Anchor\" href=\"#3第三题\"></a> 3.第三题</h3>\n<ul>\n<li>长度为n的数组A</li>\n<li>已知前<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>&lt;</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m(m&lt;n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>个元素按升序有序排列，后<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n-m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>个元素按降序有序排列</li>\n<li>编写算法在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>时间内对数组A的元素按降序排序</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span>* <span class=\"hljs-title\">Sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[])</span></span>{\n    <span class=\"hljs-keyword\">int</span> C[];\n    <span class=\"hljs-keyword\">int</span> low = m<span class=\"hljs-number\">-1</span>,high = m,i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(low &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; high &lt; n){\n        <span class=\"hljs-keyword\">if</span>(A[high].data &gt;= A[low.data]){\n            C[i] = A[high];\n            high++;\n            i++;\n        }<span class=\"hljs-keyword\">else</span>{\n            C[i] = A[low];\n            low--;\n            i++;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(high &lt; n){\n        C[i] = A[high];\n        high++;\n        i++;\n    }\n    <span class=\"hljs-keyword\">while</span>(low &gt;= <span class=\"hljs-number\">0</span>){\n        C[i] = A[low];\n        low--;\n        i++;\n    }\n    <span class=\"hljs-keyword\">return</span> C;\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"2018-979-软学\"><a class=\"markdownIt-Anchor\" href=\"#2018-979-软学\"></a> 2018-979-软学</h2>\n<h4 id=\"1第一题\"><a class=\"markdownIt-Anchor\" href=\"#1第一题\"></a> 1.第一题</h4>\n<ul>\n<li>在Head为头指针的单链表中查找结点DATA域值为K的结点</li>\n<li>并将该结点与其前驱结点（如果存在）交换位置</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">jiaohuan</span><span class=\"hljs-params\">(LinkList Head,<span class=\"hljs-keyword\">int</span> K)</span></span>{\n    LNode *pre = Head,*p = Head -&gt; next;\n    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span> &amp;&amp; p -&gt; data == K){\n        <span class=\"hljs-comment\">//如果第一个就对</span>\n        pre -&gt; next = p -&gt; next;\n        p -&gt; next = pre;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    p = p -&gt; next;\n    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-comment\">//之后的元素</span>\n        <span class=\"hljs-keyword\">if</span>(p -&gt; data == K){\n            pre -&gt; next -&gt; next = p -&gt; next;\n            p -&gt; next = pre -&gt; next;\n            pre -&gt; next = p;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span>{\n            p = p -&gt; next;\n            pre = pre -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    \n}\n</code></pre>\n<h4 id=\"2第二题\"><a class=\"markdownIt-Anchor\" href=\"#2第二题\"></a> 2.第二题</h4>\n<ul>\n<li>给定二叉树的根指针为Root</li>\n<li>对二叉树自下而上、自左而右的层次遍历</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data;                        <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>, *<span class=\"hljs-title\">rchild</span>;</span>  <span class=\"hljs-comment\">//左、右孩子指针</span>\n}BiTNode, *BiTree;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bianli</span><span class=\"hljs-params\">(BiTree Root)</span></span>{\n    BiTree Stack[MaxSize];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//栈初始化</span>\n    BiTree Queue[MaxSize];\n    <span class=\"hljs-keyword\">int</span> front,rear = <span class=\"hljs-number\">-1</span>;\n    BiTree p = Root;\n    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span>){\n        Stack[++top] = p;\n    }\n    <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span> || top != <span class=\"hljs-number\">-1</span>){\n        \n        <span class=\"hljs-keyword\">if</span>(p -&gt; lchild != <span class=\"hljs-literal\">NULL</span>){\n            Stack[++top] = p -&gt; lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p -&gt; rchild != <span class=\"hljs-literal\">NULL</span>){\n            Stack[++top] = p -&gt; rchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            p = Stack[top--];\n            Queue[++rear] = p;\n        }\n        p = p -&gt; lchild;\n    }\n    <span class=\"hljs-keyword\">return</span> Queue;\n}\n</code></pre>\n<h3 id=\"3第三题\"><a class=\"markdownIt-Anchor\" href=\"#3第三题\"></a> 3.第三题</h3>\n<ul>\n<li>长度为n的数组A</li>\n<li>已知前<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>&lt;</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m(m&lt;n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>个元素按升序有序排列，后<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n-m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>个元素按降序有序排列</li>\n<li>编写算法在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>时间内对数组A的元素按降序排序</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span>* <span class=\"hljs-title\">Sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[])</span></span>{\n    <span class=\"hljs-keyword\">int</span> C[];\n    <span class=\"hljs-keyword\">int</span> low = m<span class=\"hljs-number\">-1</span>,high = m,i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(low &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; high &lt; n){\n        <span class=\"hljs-keyword\">if</span>(A[high].data &gt;= A[low.data]){\n            C[i] = A[high];\n            high++;\n            i++;\n        }<span class=\"hljs-keyword\">else</span>{\n            C[i] = A[low];\n            low--;\n            i++;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(high &lt; n){\n        C[i] = A[high];\n        high++;\n        i++;\n    }\n    <span class=\"hljs-keyword\">while</span>(low &gt;= <span class=\"hljs-number\">0</span>){\n        C[i] = A[low];\n        low--;\n        i++;\n    }\n    <span class=\"hljs-keyword\">return</span> C;\n}\n</code></pre>\n"},{"title":"SimCSE完成情况","top":true,"cover":false,"toc":false,"mathjax":true,"summary":"SimCSE完成情况","abbrlink":"939d","date":"2021-04-27T07:07:14.000Z","password":null,"keywords":null,"description":null,"_content":"<center> <h2>SimCSE完成情况<h2></center>\n\nPS\n\n\n- :sun_with_face:为顺利完成\n\n- :relaxed:为休息一天\n\n- :frowning:为尚未完成\n\n| <center>日期</center> | <center>学习情况</center>                                    | <center>完成度</center>          |\n| --------------------- | ------------------------------------------------------------ | -------------------------------- |\n| 4/27                  | 1.学习拟合，过拟合，欠拟合基础含义以及对应解决方法，误差和Dropout等基础知识<br>2.逐字翻译论文摘要，详细理解摘要内容<br>3.输出两篇整理文章SimCSE（一）和SimCSE（二） | <center>:sun_with_face:</center> |\n| 4/28                  | 1.学习了SimCSE文章中Introduce章节，逐句翻译查看中英文，了解将相同的输入语句传递给预训练的编码器两次获取正对嵌入，使用in-batch  negatives的方式作为负例，还需学习blog开篇知识点<br>     2.看论文Contrastive Representation Learning对比表示学习，《Understanding Contrastive  Representation Learning through Alignment and Uniformity on the  Hypersphere》。还需继续了解Alignment和Uniformity信息 | <center>:sun_with_face:</center> |\n| 4/29                  | 1.学习了SimCSE文章中的Background章节，逐句翻译，     了解了它采用了两个参数x和x+，他两个是语义相关的，     利用h和h+对其训练，用h去表示他们的相关性。     将图像进行两次随机变换得到x和x+，我的理解是x是h计算过后的结果。     Alignment和uniformity是关键属性，一个来计算期望距离，一个来计算均匀分布程度。 | <center>:sun_with_face:</center> |\n| 4/30                  | 1.学习了SimCSE文章中的Unsupervised  SimCSE and supervised SimCSE章节，逐句翻译<br>      2.实验结果很明显的可以看出，SimCSE是远超其余数据增强方法的。传统数据增强的方法是对原始输入直接进行改变，在编码后，增强的数据与原始数据在语义空间的距离是要比直接用dropout的方式要远,所以这样语义度更匹配，而且这种方法它可以让alingnment和uniformity的值逐渐降低，非常nice | <center>:sun_with_face:</center> |\n| 5/1                   | CBA，辽宁队必胜！！！！！                                    | <center>:relaxed:</center>       |\n| 5/2                   | 休息，躺着，玩                                               | <center>:relaxed:</center>       |\n| 5/3                   | 休息，躺着，玩                                               | <center>:relaxed:</center>       |\n| 5/4                   | 1.学习了SimCSE文章中的Connection to  Anisotropy章节，逐句翻译<br>     2.安装pytroch包以及配置conda虚拟环境，以及各种库<br>     3.看论文github代码，啥也不懂。。。。 | <center>:frowning:</center>      |\n| 5/5                   | 1.成功运行SimCSE  GitHub代码，成功运行Evaluation评估代码，并下载好与训练模型 | <center>:sun_with_face:</center> |\n| 5/6                   |                                                              |                                  |\n\n","source":"_posts/SimCSE完成情况.md","raw":"---\ntitle: SimCSE完成情况\ntop: true\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - SimCSE\n  - 计划\ncategories:\n  - 计划\nsummary: SimCSE完成情况\nabbrlink: 939d\ndate: 2021-04-27 15:07:14\npassword:\nkeywords:\ndescription:\n---\n<center> <h2>SimCSE完成情况<h2></center>\n\nPS\n\n\n- :sun_with_face:为顺利完成\n\n- :relaxed:为休息一天\n\n- :frowning:为尚未完成\n\n| <center>日期</center> | <center>学习情况</center>                                    | <center>完成度</center>          |\n| --------------------- | ------------------------------------------------------------ | -------------------------------- |\n| 4/27                  | 1.学习拟合，过拟合，欠拟合基础含义以及对应解决方法，误差和Dropout等基础知识<br>2.逐字翻译论文摘要，详细理解摘要内容<br>3.输出两篇整理文章SimCSE（一）和SimCSE（二） | <center>:sun_with_face:</center> |\n| 4/28                  | 1.学习了SimCSE文章中Introduce章节，逐句翻译查看中英文，了解将相同的输入语句传递给预训练的编码器两次获取正对嵌入，使用in-batch  negatives的方式作为负例，还需学习blog开篇知识点<br>     2.看论文Contrastive Representation Learning对比表示学习，《Understanding Contrastive  Representation Learning through Alignment and Uniformity on the  Hypersphere》。还需继续了解Alignment和Uniformity信息 | <center>:sun_with_face:</center> |\n| 4/29                  | 1.学习了SimCSE文章中的Background章节，逐句翻译，     了解了它采用了两个参数x和x+，他两个是语义相关的，     利用h和h+对其训练，用h去表示他们的相关性。     将图像进行两次随机变换得到x和x+，我的理解是x是h计算过后的结果。     Alignment和uniformity是关键属性，一个来计算期望距离，一个来计算均匀分布程度。 | <center>:sun_with_face:</center> |\n| 4/30                  | 1.学习了SimCSE文章中的Unsupervised  SimCSE and supervised SimCSE章节，逐句翻译<br>      2.实验结果很明显的可以看出，SimCSE是远超其余数据增强方法的。传统数据增强的方法是对原始输入直接进行改变，在编码后，增强的数据与原始数据在语义空间的距离是要比直接用dropout的方式要远,所以这样语义度更匹配，而且这种方法它可以让alingnment和uniformity的值逐渐降低，非常nice | <center>:sun_with_face:</center> |\n| 5/1                   | CBA，辽宁队必胜！！！！！                                    | <center>:relaxed:</center>       |\n| 5/2                   | 休息，躺着，玩                                               | <center>:relaxed:</center>       |\n| 5/3                   | 休息，躺着，玩                                               | <center>:relaxed:</center>       |\n| 5/4                   | 1.学习了SimCSE文章中的Connection to  Anisotropy章节，逐句翻译<br>     2.安装pytroch包以及配置conda虚拟环境，以及各种库<br>     3.看论文github代码，啥也不懂。。。。 | <center>:frowning:</center>      |\n| 5/5                   | 1.成功运行SimCSE  GitHub代码，成功运行Evaluation评估代码，并下载好与训练模型 | <center>:sun_with_face:</center> |\n| 5/6                   |                                                              |                                  |\n\n","slug":"SimCSE完成情况","published":1,"updated":"2021-05-05T07:47:37.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi4000wzl9kbmbo0e50","content":"<center> <h2>SimCSE完成情况</h2><h2></h2></center>\n<p>PS</p>\n<ul>\n<li>\n<p>🌞为顺利完成</p>\n</li>\n<li>\n<p>☺️为休息一天</p>\n</li>\n<li>\n<p>😦为尚未完成</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><center>日期</center></th>\n<th><center>学习情况</center></th>\n<th><center>完成度</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4/27</td>\n<td>1.学习拟合，过拟合，欠拟合基础含义以及对应解决方法，误差和Dropout等基础知识<br>2.逐字翻译论文摘要，详细理解摘要内容<br>3.输出两篇整理文章SimCSE（一）和SimCSE（二）</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>4/28</td>\n<td>1.学习了SimCSE文章中Introduce章节，逐句翻译查看中英文，了解将相同的输入语句传递给预训练的编码器两次获取正对嵌入，使用in-batch  negatives的方式作为负例，还需学习blog开篇知识点<br>     2.看论文Contrastive Representation Learning对比表示学习，《Understanding Contrastive  Representation Learning through Alignment and Uniformity on the  Hypersphere》。还需继续了解Alignment和Uniformity信息</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>4/29</td>\n<td>1.学习了SimCSE文章中的Background章节，逐句翻译，     了解了它采用了两个参数x和x+，他两个是语义相关的，     利用h和h+对其训练，用h去表示他们的相关性。     将图像进行两次随机变换得到x和x+，我的理解是x是h计算过后的结果。     Alignment和uniformity是关键属性，一个来计算期望距离，一个来计算均匀分布程度。</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>4/30</td>\n<td>1.学习了SimCSE文章中的Unsupervised  SimCSE and supervised SimCSE章节，逐句翻译<br>      2.实验结果很明显的可以看出，SimCSE是远超其余数据增强方法的。传统数据增强的方法是对原始输入直接进行改变，在编码后，增强的数据与原始数据在语义空间的距离是要比直接用dropout的方式要远,所以这样语义度更匹配，而且这种方法它可以让alingnment和uniformity的值逐渐降低，非常nice</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>5/1</td>\n<td>CBA，辽宁队必胜！！！！！</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>5/2</td>\n<td>休息，躺着，玩</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>5/3</td>\n<td>休息，躺着，玩</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>5/4</td>\n<td>1.学习了SimCSE文章中的Connection to  Anisotropy章节，逐句翻译<br>     2.安装pytroch包以及配置conda虚拟环境，以及各种库<br>     3.看论文github代码，啥也不懂。。。。</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>5/5</td>\n<td>1.成功运行SimCSE  GitHub代码，成功运行Evaluation评估代码，并下载好与训练模型</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>5/6</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<center> <h2>SimCSE完成情况<h2></center>\n<p>PS</p>\n<ul>\n<li>\n<p>🌞为顺利完成</p>\n</li>\n<li>\n<p>☺️为休息一天</p>\n</li>\n<li>\n<p>😦为尚未完成</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><center>日期</center></th>\n<th><center>学习情况</center></th>\n<th><center>完成度</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4/27</td>\n<td>1.学习拟合，过拟合，欠拟合基础含义以及对应解决方法，误差和Dropout等基础知识<br>2.逐字翻译论文摘要，详细理解摘要内容<br>3.输出两篇整理文章SimCSE（一）和SimCSE（二）</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>4/28</td>\n<td>1.学习了SimCSE文章中Introduce章节，逐句翻译查看中英文，了解将相同的输入语句传递给预训练的编码器两次获取正对嵌入，使用in-batch  negatives的方式作为负例，还需学习blog开篇知识点<br>     2.看论文Contrastive Representation Learning对比表示学习，《Understanding Contrastive  Representation Learning through Alignment and Uniformity on the  Hypersphere》。还需继续了解Alignment和Uniformity信息</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>4/29</td>\n<td>1.学习了SimCSE文章中的Background章节，逐句翻译，     了解了它采用了两个参数x和x+，他两个是语义相关的，     利用h和h+对其训练，用h去表示他们的相关性。     将图像进行两次随机变换得到x和x+，我的理解是x是h计算过后的结果。     Alignment和uniformity是关键属性，一个来计算期望距离，一个来计算均匀分布程度。</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>4/30</td>\n<td>1.学习了SimCSE文章中的Unsupervised  SimCSE and supervised SimCSE章节，逐句翻译<br>      2.实验结果很明显的可以看出，SimCSE是远超其余数据增强方法的。传统数据增强的方法是对原始输入直接进行改变，在编码后，增强的数据与原始数据在语义空间的距离是要比直接用dropout的方式要远,所以这样语义度更匹配，而且这种方法它可以让alingnment和uniformity的值逐渐降低，非常nice</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>5/1</td>\n<td>CBA，辽宁队必胜！！！！！</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>5/2</td>\n<td>休息，躺着，玩</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>5/3</td>\n<td>休息，躺着，玩</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>5/4</td>\n<td>1.学习了SimCSE文章中的Connection to  Anisotropy章节，逐句翻译<br>     2.安装pytroch包以及配置conda虚拟环境，以及各种库<br>     3.看论文github代码，啥也不懂。。。。</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>5/5</td>\n<td>1.成功运行SimCSE  GitHub代码，成功运行Evaluation评估代码，并下载好与训练模型</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>5/6</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"9月8号计划","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"9.8计划","abbrlink":"51cd","date":"2020-09-07T11:51:15.000Z","password":null,"_content":"**1. 计网绪论强化知识点\n2. 图相关代码整理\n3. 政治两课\n4. 数学概率第一章\n5. 英语真题加单词**","source":"_posts/9月8号计划.md","raw":"---\ntitle: 9月8号计划\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 考研\n  - 计划\ncategories:\n  - 男男\nsummary: 9.8计划\nabbrlink: 51cd\ndate: 2020-09-07 19:51:15\npassword:\n---\n**1. 计网绪论强化知识点\n2. 图相关代码整理\n3. 政治两课\n4. 数学概率第一章\n5. 英语真题加单词**","slug":"9月8号计划","published":1,"updated":"2020-09-07T11:54:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi50010zl9k8nj41v13","content":"<p><strong>1. 计网绪论强化知识点<br>\n2. 图相关代码整理<br>\n3. 政治两课<br>\n4. 数学概率第一章<br>\n5. 英语真题加单词</strong></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><strong>1. 计网绪论强化知识点<br />\n2. 图相关代码整理<br />\n3. 政治两课<br />\n4. 数学概率第一章<br />\n5. 英语真题加单词</strong></p>\n"},{"title":"SimCSE（一）","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"SimCSE简介","abbrlink":"5c43","date":"2021-04-26T09:11:43.000Z","password":null,"keywords":null,"description":null,"_content":"## Simple Contrastive Learning of Sentence Embeddings（一）\n\nSimCSE的全称为 *Simple Contrastice  Learning of Sentence Embeddings*。**Sim代表Simple，就是简单**。\n\n他简单的运用了 **<font color = \"red\">dropout</font>** 的方法替换了传统的数据增强方法，将同一个输入dropout两次作为对比学习的正例，而且效果甚好。\n\n------------\n\n**<font color = \"red\">红色：</font>** 名词第一次出现\n\n**<font color = \"#6638F0\">紫色：</font>** 解释专有名词\n\n**<font color = \"#F78AE0\">粉色：</font>** 原因以及解决方法\n\n-------\n\n- **<font color = \"#6638F0\">拟合：</font>** 拟合就是把平面上一系列的点，用一条光滑的曲线连接起来。因为这条曲线有无数种可能，从而有各种拟合方法。拟合的曲线一般可以用函数表示，根据这个函数的不同有不同的拟合名字。\n- **<font color = \"#6638F0\">泛化误差：</font>** 对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为**泛化误差**。\n\n<img src=\"拟合图片.jpeg\" alt=\"拟合图片\" style=\"zoom: 67%;\" />\n\n- 训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络**过度拟合了训练集**，对训练集以外的数据却不work。\n\n<img src=\"拟合对比.png\" alt=\"拟合对比\"  />\n\n- **<font color = \"#6638F0\">欠拟合：</font>** 欠拟合是指模型不能在训练集上获得足够低的误差。换句换说，就是模型复杂度低，模型在训练集上就表现很差，没法学习到数据背后的规律。\n  - **<font color = \"#F78AE0\">如何解决欠拟合：</font>** 欠拟合基本上都会发生在训练刚开始的时候，经过不断训练之后欠拟合应该不怎么考虑了。但是如果真的还是存在的话，可以通过**增加网络复杂度**或者在模型中 **<font color = \"red\">增加特征</font>** ，这些都是很好解决欠拟合的方法。\n  - **<font color = \"#6638F0\">增加特征：</font>** 添加高次多项式，使模型泛化能力更强\n- **<font color = \"#6638F0\">过拟合：</font>** 过拟合是指训练误差和测试误差之间的差距太大。换句换说，就是模型复杂度高于实际问题，**模型在训练集上表现很好，但在测试集上却表现很差**。模型对训练集\"死记硬背\"（记住了不适用于测试集的训练集性质或特点），没有理解数据背后的规律，**泛化能力差**。\n  - **<font color = \"#F78AE0\">造成原因：</font>** **训练数据集样本单一，样本不足**。所以训练样本要尽可能的全面，覆盖所有的数据类型。**训练数据中噪声干扰过大**。噪声指训练数据中的干扰数据。过多的干扰会导致记录了很多噪声特征，忽略了真实输入和输出之间的关系。**模型过于复杂。**模型太复杂，已经能够“死记硬背”记下了训练数据的信息，但是遇到没有见过的数据的时候不能够变通，泛化能力太差。我们希望模型对不同的模型都有稳定的输出。模型太复杂是过拟合的重要因素。\n  - **<font color = \"#F78AE0\">防止过拟合：</font>** 要想解决过拟合问题，就要显著减少测试误差而不过度增加训练误差，从而提高模型的泛化能力。我们可以使用正则化（Regularization）方法。**正则化是指修改学习算法，使其降低泛化误差而非训练误差**。\n  - 常用的正则化方法根据具体的使用策略不同可分为：（1）直接提供正则化约束的参数正则化方法，如L1/L2正则化；（2）通过工程上的技巧来实现更低泛化误差的方法，如提前终止(Early stopping)和 **<font color = \"red\">Dropout</font>** ；（3）不直接提供约束的隐式正则化方法，如数据增强等。 **目前主要学习Dropout方法** 。\n\n-----------\n\n### 1. Dropout简介\n\n#### 1.1 Dropout出现的原因\n\n在机器学习的模型中，如果模型的参数太多，而训练样本又太少，训练出来的模型很容易产生过拟合的现象。在训练神经网络的时候经常会遇到过拟合的问题，过拟合具体表现在：模型在训练数据上损失函数较小，预测准确率较高；但是在测试数据上损失函数比较大，预测准确率较低。\n\n过拟合是很多机器学习的通病。如果模型过拟合，那么得到的模型几乎不能用。为了解决过拟合问题，一般会采用模型集成的方法，即训练多个模型进行组合。此时，训练模型费时就成为一个很大的问题，不仅训练多个模型费时，测试多个模型也是很费时。\n\n综上所述，训练深度神经网络的时候，总是会遇到两大缺点：\n\n（1）容易过拟合\n\n（2）费时\n\nDropout可以比较有效的缓解过拟合的发生，在一定程度上达到 **<font color = \"red\">正则化</font>** 的效果。\n\n- **<font color = \"#6638F0\">正则化</font>** （regularization）是指为解决适定性问题或过拟合而加入额外信息的过程。\n\n#### 1.2 什么是Dropout\n\nDropout可以作为训练深度神经网络的 **<font color = \"red\">一种trick</font>** 供选择。在每个训练批次中，通过 **忽略一半** 的特征检测器（让一半的隐层节点值为0），可以明显地减少过拟合现象。这种方式可以减少特征检测器（隐层节点）间的相互作用，检测器相互作用是指某些检测器依赖其他检测器才能发挥作用。\n\nDropout说的简单一点就是：我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征，如图所示。\n\n<img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\" />\n\n### 2. Dropout工作流程及使用\n\n输入是x输出是y，正常的流程是：我们首先把x通过网络前向传播，然后把误差反向传播以决定如何更新参数让网络进行学习。使用Dropout之后，过程变成如下：\n\n1. 首先随机（临时）删掉网络中一半的隐藏神经元，输入输出神经元保持不变（图3中虚线为部分临时被删除的神经元）\n\n> 还没有搞懂，下次再看到dropout时，再回来对应学习\n\n2. 然后把输入x通过修改后的网络前向传播，然后把得到的损失结果通过修改的网络反向传播。一小批训练样本执行完这个过程后，在没有被删除的神经元上按照随机梯度下降法更新对应的参数（w，b）。\n\n3. 然后继续重复这一过程：\n\n- 恢复被删掉的神经元（此时被删除的神经元保持原样，而没有被删除的神经元已经有所更新）\n- 从隐藏层神经元中随机选择一个一半大小的子集临时删除掉（备份被删除神经元的参数）。\n- 对一小批训练样本，先前向传播然后反向传播损失并根据随机梯度下降法更新参数（w，b） （没有被删除的那一部分参数得到更新，删除的神经元参数保持被删除前的结果）。\n","source":"_posts/SimCSE（一）.md","raw":"---\ntitle: SimCSE（一）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\nsummary: SimCSE简介\nabbrlink: 5c43\ndate: 2021-04-26 17:11:43\npassword:\nkeywords:\ndescription:\n---\n## Simple Contrastive Learning of Sentence Embeddings（一）\n\nSimCSE的全称为 *Simple Contrastice  Learning of Sentence Embeddings*。**Sim代表Simple，就是简单**。\n\n他简单的运用了 **<font color = \"red\">dropout</font>** 的方法替换了传统的数据增强方法，将同一个输入dropout两次作为对比学习的正例，而且效果甚好。\n\n------------\n\n**<font color = \"red\">红色：</font>** 名词第一次出现\n\n**<font color = \"#6638F0\">紫色：</font>** 解释专有名词\n\n**<font color = \"#F78AE0\">粉色：</font>** 原因以及解决方法\n\n-------\n\n- **<font color = \"#6638F0\">拟合：</font>** 拟合就是把平面上一系列的点，用一条光滑的曲线连接起来。因为这条曲线有无数种可能，从而有各种拟合方法。拟合的曲线一般可以用函数表示，根据这个函数的不同有不同的拟合名字。\n- **<font color = \"#6638F0\">泛化误差：</font>** 对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为**泛化误差**。\n\n<img src=\"拟合图片.jpeg\" alt=\"拟合图片\" style=\"zoom: 67%;\" />\n\n- 训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络**过度拟合了训练集**，对训练集以外的数据却不work。\n\n<img src=\"拟合对比.png\" alt=\"拟合对比\"  />\n\n- **<font color = \"#6638F0\">欠拟合：</font>** 欠拟合是指模型不能在训练集上获得足够低的误差。换句换说，就是模型复杂度低，模型在训练集上就表现很差，没法学习到数据背后的规律。\n  - **<font color = \"#F78AE0\">如何解决欠拟合：</font>** 欠拟合基本上都会发生在训练刚开始的时候，经过不断训练之后欠拟合应该不怎么考虑了。但是如果真的还是存在的话，可以通过**增加网络复杂度**或者在模型中 **<font color = \"red\">增加特征</font>** ，这些都是很好解决欠拟合的方法。\n  - **<font color = \"#6638F0\">增加特征：</font>** 添加高次多项式，使模型泛化能力更强\n- **<font color = \"#6638F0\">过拟合：</font>** 过拟合是指训练误差和测试误差之间的差距太大。换句换说，就是模型复杂度高于实际问题，**模型在训练集上表现很好，但在测试集上却表现很差**。模型对训练集\"死记硬背\"（记住了不适用于测试集的训练集性质或特点），没有理解数据背后的规律，**泛化能力差**。\n  - **<font color = \"#F78AE0\">造成原因：</font>** **训练数据集样本单一，样本不足**。所以训练样本要尽可能的全面，覆盖所有的数据类型。**训练数据中噪声干扰过大**。噪声指训练数据中的干扰数据。过多的干扰会导致记录了很多噪声特征，忽略了真实输入和输出之间的关系。**模型过于复杂。**模型太复杂，已经能够“死记硬背”记下了训练数据的信息，但是遇到没有见过的数据的时候不能够变通，泛化能力太差。我们希望模型对不同的模型都有稳定的输出。模型太复杂是过拟合的重要因素。\n  - **<font color = \"#F78AE0\">防止过拟合：</font>** 要想解决过拟合问题，就要显著减少测试误差而不过度增加训练误差，从而提高模型的泛化能力。我们可以使用正则化（Regularization）方法。**正则化是指修改学习算法，使其降低泛化误差而非训练误差**。\n  - 常用的正则化方法根据具体的使用策略不同可分为：（1）直接提供正则化约束的参数正则化方法，如L1/L2正则化；（2）通过工程上的技巧来实现更低泛化误差的方法，如提前终止(Early stopping)和 **<font color = \"red\">Dropout</font>** ；（3）不直接提供约束的隐式正则化方法，如数据增强等。 **目前主要学习Dropout方法** 。\n\n-----------\n\n### 1. Dropout简介\n\n#### 1.1 Dropout出现的原因\n\n在机器学习的模型中，如果模型的参数太多，而训练样本又太少，训练出来的模型很容易产生过拟合的现象。在训练神经网络的时候经常会遇到过拟合的问题，过拟合具体表现在：模型在训练数据上损失函数较小，预测准确率较高；但是在测试数据上损失函数比较大，预测准确率较低。\n\n过拟合是很多机器学习的通病。如果模型过拟合，那么得到的模型几乎不能用。为了解决过拟合问题，一般会采用模型集成的方法，即训练多个模型进行组合。此时，训练模型费时就成为一个很大的问题，不仅训练多个模型费时，测试多个模型也是很费时。\n\n综上所述，训练深度神经网络的时候，总是会遇到两大缺点：\n\n（1）容易过拟合\n\n（2）费时\n\nDropout可以比较有效的缓解过拟合的发生，在一定程度上达到 **<font color = \"red\">正则化</font>** 的效果。\n\n- **<font color = \"#6638F0\">正则化</font>** （regularization）是指为解决适定性问题或过拟合而加入额外信息的过程。\n\n#### 1.2 什么是Dropout\n\nDropout可以作为训练深度神经网络的 **<font color = \"red\">一种trick</font>** 供选择。在每个训练批次中，通过 **忽略一半** 的特征检测器（让一半的隐层节点值为0），可以明显地减少过拟合现象。这种方式可以减少特征检测器（隐层节点）间的相互作用，检测器相互作用是指某些检测器依赖其他检测器才能发挥作用。\n\nDropout说的简单一点就是：我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征，如图所示。\n\n<img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\" />\n\n### 2. Dropout工作流程及使用\n\n输入是x输出是y，正常的流程是：我们首先把x通过网络前向传播，然后把误差反向传播以决定如何更新参数让网络进行学习。使用Dropout之后，过程变成如下：\n\n1. 首先随机（临时）删掉网络中一半的隐藏神经元，输入输出神经元保持不变（图3中虚线为部分临时被删除的神经元）\n\n> 还没有搞懂，下次再看到dropout时，再回来对应学习\n\n2. 然后把输入x通过修改后的网络前向传播，然后把得到的损失结果通过修改的网络反向传播。一小批训练样本执行完这个过程后，在没有被删除的神经元上按照随机梯度下降法更新对应的参数（w，b）。\n\n3. 然后继续重复这一过程：\n\n- 恢复被删掉的神经元（此时被删除的神经元保持原样，而没有被删除的神经元已经有所更新）\n- 从隐藏层神经元中随机选择一个一半大小的子集临时删除掉（备份被删除神经元的参数）。\n- 对一小批训练样本，先前向传播然后反向传播损失并根据随机梯度下降法更新参数（w，b） （没有被删除的那一部分参数得到更新，删除的神经元参数保持被删除前的结果）。\n","slug":"SimCSE（一）","published":1,"updated":"2021-04-28T06:56:47.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi50014zl9kh1y56vl9","content":"<h2 id=\"simple-contrastive-learning-of-sentence-embeddings一\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings一\"></a> Simple Contrastive Learning of Sentence Embeddings（一）</h2>\n<p>SimCSE的全称为 <em>Simple Contrastice  Learning of Sentence Embeddings</em>。<strong>Sim代表Simple，就是简单</strong>。</p>\n<p>他简单的运用了 <strong><font color=\"red\">dropout</font></strong> 的方法替换了传统的数据增强方法，将同一个输入dropout两次作为对比学习的正例，而且效果甚好。</p>\n<hr>\n<p><strong><font color=\"red\">红色：</font></strong> 名词第一次出现</p>\n<p><strong><font color=\"#6638F0\">紫色：</font></strong> 解释专有名词</p>\n<p><strong><font color=\"#F78AE0\">粉色：</font></strong> 原因以及解决方法</p>\n<hr>\n<ul>\n<li><strong><font color=\"#6638F0\">拟合：</font></strong> 拟合就是把平面上一系列的点，用一条光滑的曲线连接起来。因为这条曲线有无数种可能，从而有各种拟合方法。拟合的曲线一般可以用函数表示，根据这个函数的不同有不同的拟合名字。</li>\n<li><strong><font color=\"#6638F0\">泛化误差：</font></strong> 对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为<strong>泛化误差</strong>。</li>\n</ul>\n<img src=\"拟合图片.jpeg\" alt=\"拟合图片\" style=\"zoom: 67%;\">\n<ul>\n<li>训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络<strong>过度拟合了训练集</strong>，对训练集以外的数据却不work。</li>\n</ul>\n<img src=\"拟合对比.png\" alt=\"拟合对比\">\n<ul>\n<li><strong><font color=\"#6638F0\">欠拟合：</font></strong> 欠拟合是指模型不能在训练集上获得足够低的误差。换句换说，就是模型复杂度低，模型在训练集上就表现很差，没法学习到数据背后的规律。\n<ul>\n<li><strong><font color=\"#F78AE0\">如何解决欠拟合：</font></strong> 欠拟合基本上都会发生在训练刚开始的时候，经过不断训练之后欠拟合应该不怎么考虑了。但是如果真的还是存在的话，可以通过<strong>增加网络复杂度</strong>或者在模型中 <strong><font color=\"red\">增加特征</font></strong> ，这些都是很好解决欠拟合的方法。</li>\n<li><strong><font color=\"#6638F0\">增加特征：</font></strong> 添加高次多项式，使模型泛化能力更强</li>\n</ul>\n</li>\n<li><strong><font color=\"#6638F0\">过拟合：</font></strong> 过拟合是指训练误差和测试误差之间的差距太大。换句换说，就是模型复杂度高于实际问题，<strong>模型在训练集上表现很好，但在测试集上却表现很差</strong>。模型对训练集\"死记硬背\"（记住了不适用于测试集的训练集性质或特点），没有理解数据背后的规律，<strong>泛化能力差</strong>。\n<ul>\n<li><strong><font color=\"#F78AE0\">造成原因：</font></strong> <strong>训练数据集样本单一，样本不足</strong>。所以训练样本要尽可能的全面，覆盖所有的数据类型。<strong>训练数据中噪声干扰过大</strong>。噪声指训练数据中的干扰数据。过多的干扰会导致记录了很多噪声特征，忽略了真实输入和输出之间的关系。**模型过于复杂。**模型太复杂，已经能够“死记硬背”记下了训练数据的信息，但是遇到没有见过的数据的时候不能够变通，泛化能力太差。我们希望模型对不同的模型都有稳定的输出。模型太复杂是过拟合的重要因素。</li>\n<li><strong><font color=\"#F78AE0\">防止过拟合：</font></strong> 要想解决过拟合问题，就要显著减少测试误差而不过度增加训练误差，从而提高模型的泛化能力。我们可以使用正则化（Regularization）方法。<strong>正则化是指修改学习算法，使其降低泛化误差而非训练误差</strong>。</li>\n<li>常用的正则化方法根据具体的使用策略不同可分为：（1）直接提供正则化约束的参数正则化方法，如L1/L2正则化；（2）通过工程上的技巧来实现更低泛化误差的方法，如提前终止(Early stopping)和 <strong><font color=\"red\">Dropout</font></strong> ；（3）不直接提供约束的隐式正则化方法，如数据增强等。 <strong>目前主要学习Dropout方法</strong> 。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"1-dropout简介\"><a class=\"markdownIt-Anchor\" href=\"#1-dropout简介\"></a> 1. Dropout简介</h3>\n<h4 id=\"11-dropout出现的原因\"><a class=\"markdownIt-Anchor\" href=\"#11-dropout出现的原因\"></a> 1.1 Dropout出现的原因</h4>\n<p>在机器学习的模型中，如果模型的参数太多，而训练样本又太少，训练出来的模型很容易产生过拟合的现象。在训练神经网络的时候经常会遇到过拟合的问题，过拟合具体表现在：模型在训练数据上损失函数较小，预测准确率较高；但是在测试数据上损失函数比较大，预测准确率较低。</p>\n<p>过拟合是很多机器学习的通病。如果模型过拟合，那么得到的模型几乎不能用。为了解决过拟合问题，一般会采用模型集成的方法，即训练多个模型进行组合。此时，训练模型费时就成为一个很大的问题，不仅训练多个模型费时，测试多个模型也是很费时。</p>\n<p>综上所述，训练深度神经网络的时候，总是会遇到两大缺点：</p>\n<p>（1）容易过拟合</p>\n<p>（2）费时</p>\n<p>Dropout可以比较有效的缓解过拟合的发生，在一定程度上达到 <strong><font color=\"red\">正则化</font></strong> 的效果。</p>\n<ul>\n<li><strong><font color=\"#6638F0\">正则化</font></strong> （regularization）是指为解决适定性问题或过拟合而加入额外信息的过程。</li>\n</ul>\n<h4 id=\"12-什么是dropout\"><a class=\"markdownIt-Anchor\" href=\"#12-什么是dropout\"></a> 1.2 什么是Dropout</h4>\n<p>Dropout可以作为训练深度神经网络的 <strong><font color=\"red\">一种trick</font></strong> 供选择。在每个训练批次中，通过 <strong>忽略一半</strong> 的特征检测器（让一半的隐层节点值为0），可以明显地减少过拟合现象。这种方式可以减少特征检测器（隐层节点）间的相互作用，检测器相互作用是指某些检测器依赖其他检测器才能发挥作用。</p>\n<p>Dropout说的简单一点就是：我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征，如图所示。</p>\n<img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\">\n<h3 id=\"2-dropout工作流程及使用\"><a class=\"markdownIt-Anchor\" href=\"#2-dropout工作流程及使用\"></a> 2. Dropout工作流程及使用</h3>\n<p>输入是x输出是y，正常的流程是：我们首先把x通过网络前向传播，然后把误差反向传播以决定如何更新参数让网络进行学习。使用Dropout之后，过程变成如下：</p>\n<ol>\n<li>首先随机（临时）删掉网络中一半的隐藏神经元，输入输出神经元保持不变（图3中虚线为部分临时被删除的神经元）</li>\n</ol>\n<blockquote>\n<p>还没有搞懂，下次再看到dropout时，再回来对应学习</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>然后把输入x通过修改后的网络前向传播，然后把得到的损失结果通过修改的网络反向传播。一小批训练样本执行完这个过程后，在没有被删除的神经元上按照随机梯度下降法更新对应的参数（w，b）。</p>\n</li>\n<li>\n<p>然后继续重复这一过程：</p>\n</li>\n</ol>\n<ul>\n<li>恢复被删掉的神经元（此时被删除的神经元保持原样，而没有被删除的神经元已经有所更新）</li>\n<li>从隐藏层神经元中随机选择一个一半大小的子集临时删除掉（备份被删除神经元的参数）。</li>\n<li>对一小批训练样本，先前向传播然后反向传播损失并根据随机梯度下降法更新参数（w，b） （没有被删除的那一部分参数得到更新，删除的神经元参数保持被删除前的结果）。</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"simple-contrastive-learning-of-sentence-embeddings一\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings一\"></a> Simple Contrastive Learning of Sentence Embeddings（一）</h2>\n<p>SimCSE的全称为 <em>Simple Contrastice  Learning of Sentence Embeddings</em>。<strong>Sim代表Simple，就是简单</strong>。</p>\n<p>他简单的运用了 <strong><font color = \"red\">dropout</font></strong> 的方法替换了传统的数据增强方法，将同一个输入dropout两次作为对比学习的正例，而且效果甚好。</p>\n<hr />\n<p><strong><font color = \"red\">红色：</font></strong> 名词第一次出现</p>\n<p><strong><font color = \"#6638F0\">紫色：</font></strong> 解释专有名词</p>\n<p><strong><font color = \"#F78AE0\">粉色：</font></strong> 原因以及解决方法</p>\n<hr />\n<ul>\n<li><strong><font color = \"#6638F0\">拟合：</font></strong> 拟合就是把平面上一系列的点，用一条光滑的曲线连接起来。因为这条曲线有无数种可能，从而有各种拟合方法。拟合的曲线一般可以用函数表示，根据这个函数的不同有不同的拟合名字。</li>\n<li><strong><font color = \"#6638F0\">泛化误差：</font></strong> 对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为<strong>泛化误差</strong>。</li>\n</ul>\n<img src=\"拟合图片.jpeg\" alt=\"拟合图片\" style=\"zoom: 67%;\" />\n<ul>\n<li>训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络<strong>过度拟合了训练集</strong>，对训练集以外的数据却不work。</li>\n</ul>\n<img src=\"拟合对比.png\" alt=\"拟合对比\"  />\n<ul>\n<li><strong><font color = \"#6638F0\">欠拟合：</font></strong> 欠拟合是指模型不能在训练集上获得足够低的误差。换句换说，就是模型复杂度低，模型在训练集上就表现很差，没法学习到数据背后的规律。\n<ul>\n<li><strong><font color = \"#F78AE0\">如何解决欠拟合：</font></strong> 欠拟合基本上都会发生在训练刚开始的时候，经过不断训练之后欠拟合应该不怎么考虑了。但是如果真的还是存在的话，可以通过<strong>增加网络复杂度</strong>或者在模型中 <strong><font color = \"red\">增加特征</font></strong> ，这些都是很好解决欠拟合的方法。</li>\n<li><strong><font color = \"#6638F0\">增加特征：</font></strong> 添加高次多项式，使模型泛化能力更强</li>\n</ul>\n</li>\n<li><strong><font color = \"#6638F0\">过拟合：</font></strong> 过拟合是指训练误差和测试误差之间的差距太大。换句换说，就是模型复杂度高于实际问题，<strong>模型在训练集上表现很好，但在测试集上却表现很差</strong>。模型对训练集&quot;死记硬背&quot;（记住了不适用于测试集的训练集性质或特点），没有理解数据背后的规律，<strong>泛化能力差</strong>。\n<ul>\n<li><strong><font color = \"#F78AE0\">造成原因：</font></strong> <strong>训练数据集样本单一，样本不足</strong>。所以训练样本要尽可能的全面，覆盖所有的数据类型。<strong>训练数据中噪声干扰过大</strong>。噪声指训练数据中的干扰数据。过多的干扰会导致记录了很多噪声特征，忽略了真实输入和输出之间的关系。**模型过于复杂。**模型太复杂，已经能够“死记硬背”记下了训练数据的信息，但是遇到没有见过的数据的时候不能够变通，泛化能力太差。我们希望模型对不同的模型都有稳定的输出。模型太复杂是过拟合的重要因素。</li>\n<li><strong><font color = \"#F78AE0\">防止过拟合：</font></strong> 要想解决过拟合问题，就要显著减少测试误差而不过度增加训练误差，从而提高模型的泛化能力。我们可以使用正则化（Regularization）方法。<strong>正则化是指修改学习算法，使其降低泛化误差而非训练误差</strong>。</li>\n<li>常用的正则化方法根据具体的使用策略不同可分为：（1）直接提供正则化约束的参数正则化方法，如L1/L2正则化；（2）通过工程上的技巧来实现更低泛化误差的方法，如提前终止(Early stopping)和 <strong><font color = \"red\">Dropout</font></strong> ；（3）不直接提供约束的隐式正则化方法，如数据增强等。 <strong>目前主要学习Dropout方法</strong> 。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"1-dropout简介\"><a class=\"markdownIt-Anchor\" href=\"#1-dropout简介\"></a> 1. Dropout简介</h3>\n<h4 id=\"11-dropout出现的原因\"><a class=\"markdownIt-Anchor\" href=\"#11-dropout出现的原因\"></a> 1.1 Dropout出现的原因</h4>\n<p>在机器学习的模型中，如果模型的参数太多，而训练样本又太少，训练出来的模型很容易产生过拟合的现象。在训练神经网络的时候经常会遇到过拟合的问题，过拟合具体表现在：模型在训练数据上损失函数较小，预测准确率较高；但是在测试数据上损失函数比较大，预测准确率较低。</p>\n<p>过拟合是很多机器学习的通病。如果模型过拟合，那么得到的模型几乎不能用。为了解决过拟合问题，一般会采用模型集成的方法，即训练多个模型进行组合。此时，训练模型费时就成为一个很大的问题，不仅训练多个模型费时，测试多个模型也是很费时。</p>\n<p>综上所述，训练深度神经网络的时候，总是会遇到两大缺点：</p>\n<p>（1）容易过拟合</p>\n<p>（2）费时</p>\n<p>Dropout可以比较有效的缓解过拟合的发生，在一定程度上达到 <strong><font color = \"red\">正则化</font></strong> 的效果。</p>\n<ul>\n<li><strong><font color = \"#6638F0\">正则化</font></strong> （regularization）是指为解决适定性问题或过拟合而加入额外信息的过程。</li>\n</ul>\n<h4 id=\"12-什么是dropout\"><a class=\"markdownIt-Anchor\" href=\"#12-什么是dropout\"></a> 1.2 什么是Dropout</h4>\n<p>Dropout可以作为训练深度神经网络的 <strong><font color = \"red\">一种trick</font></strong> 供选择。在每个训练批次中，通过 <strong>忽略一半</strong> 的特征检测器（让一半的隐层节点值为0），可以明显地减少过拟合现象。这种方式可以减少特征检测器（隐层节点）间的相互作用，检测器相互作用是指某些检测器依赖其他检测器才能发挥作用。</p>\n<p>Dropout说的简单一点就是：我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征，如图所示。</p>\n<img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\" />\n<h3 id=\"2-dropout工作流程及使用\"><a class=\"markdownIt-Anchor\" href=\"#2-dropout工作流程及使用\"></a> 2. Dropout工作流程及使用</h3>\n<p>输入是x输出是y，正常的流程是：我们首先把x通过网络前向传播，然后把误差反向传播以决定如何更新参数让网络进行学习。使用Dropout之后，过程变成如下：</p>\n<ol>\n<li>首先随机（临时）删掉网络中一半的隐藏神经元，输入输出神经元保持不变（图3中虚线为部分临时被删除的神经元）</li>\n</ol>\n<blockquote>\n<p>还没有搞懂，下次再看到dropout时，再回来对应学习</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>然后把输入x通过修改后的网络前向传播，然后把得到的损失结果通过修改的网络反向传播。一小批训练样本执行完这个过程后，在没有被删除的神经元上按照随机梯度下降法更新对应的参数（w，b）。</p>\n</li>\n<li>\n<p>然后继续重复这一过程：</p>\n</li>\n</ol>\n<ul>\n<li>恢复被删掉的神经元（此时被删除的神经元保持原样，而没有被删除的神经元已经有所更新）</li>\n<li>从隐藏层神经元中随机选择一个一半大小的子集临时删除掉（备份被删除神经元的参数）。</li>\n<li>对一小批训练样本，先前向传播然后反向传播损失并根据随机梯度下降法更新参数（w，b） （没有被删除的那一部分参数得到更新，删除的神经元参数保持被删除前的结果）。</li>\n</ul>\n"},{"title":"SimCSE（七）","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"Connection to Anisotropy","abbrlink":"f664","date":"2021-05-04T07:30:08.000Z","password":null,"keywords":null,"description":null,"_content":"# Simple Contrastive Learning of Sentence Embeddings（七）\n\n### 5 Connection to Anisotropy 各向异性连接\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- anisotropy（各向异性）是什么意思\n- isotropic distribution 各向同性分布\n- 奇异值singular是什么东西\n- 这些公式都要再看一下\n\n---\n\n\n\n> Recent work identifies an anisotropy problem in language representations (Ethayarajh, 2019; Li et al., 2020), i.e., the learned embeddings occupy a narrow cone in the vector space, which largely limits their expressiveness. \n\n- 最近的研究发现了语言表征中的“各向异性”问题，即学习到的嵌入在向量空间中占据了一个狭窄的圆锥体，这在很大程度上限制了它们的表达能力。\n\n> Gao et al. (2019) term it as a *representation degeneration* problem and demonstrate that language models trained with tied input/output embeddings lead to anisotropic word embeddings, and this is further observed by Ethayarajh (2019) in pretrained contextual embeddings. \n\n- Gao将其称为“表征退化”问题，并证明使用捆绑输入/输出嵌入训练的语言模型会导致各向异性的单词嵌入，Ethayarajh在预先训练的上下文嵌入中进一步观察到了这一点。\n\n> Wang et al. (2020) show that the singular values of the word embedding matrix decay drastically. In other words, except for a few dominating singular values, all others are close to zero.\n\n- Wang证明单词嵌入矩阵的奇异值急剧衰减。换言之，除了少数占主导地位的奇异值外，其他所有奇异值都接近于零。\n\n> A simple way to alleviate the problem is postprocessing, either to eliminate the dominant principal components (Arora et al., 2017; Mu and Viswanath, 2018), or to map embeddings to an isotropic distribution (Li et al., 2020; Su et al., 2021). \n\n- 缓解问题的一个简单方法是后处理，即消除主要的主成分，或将嵌入映射到各向同性分布。\n\n> Alternatively, one can add regularization during training (Gao et al., 2019; Wang et al., 2020). \n\n- 或者，可以在训练期间添加正则化。\n\n> In this section, we show that the contrastive objective can inherently “flatten” the singular value distribution of the sentence-embedding matrix.\n\n- 在这一节中，我们证明了对比目标可以内在地“平坦”句子嵌入矩阵的奇异值分布。\n\n> Following Wang and Isola (2020), the asymptotics of the contrastive learning objective can be expressed by the following equation when the number of negative instances approaches infinity (assuming f(x) is normalized):\n\n- 在Wang和Isola的基础上，对比学习目标的渐近性可以用以下等式表示，当负实例的数量接近无穷大时（假设f（x）是标准化的）：\n\n$$\n\\begin{array}{l}\n-\\frac{1}{\\tau} \\underset{\\left(x, x^{+}\\right) \\sim p_{\\mathrm{pos}}}{\\mathbb{E}}\\left[f(x)^{\\top} f\\left(x^{+}\\right)\\right] \n+\\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right]\n\\end{array}\n$$\n\n> where the first term keeps positive instances similar and the second pushes negative pairs apart. When $p_{data}$ is uniform over finite samples $\\{x_i\\}_{i=1}^m$ , with $h_i=f(x)$, we can derive the following formula from the second term with Jensen’s inequality:\n\n- 其中第一项保持正的实例相似，第二项将负的对分开。当$p_{data}$在有限样本$\\{x_i\\}_{i=1}^m$上是一致的，且$h_i=f（x）$，我们可以从第二项和詹森不等式导出以下公式：\n\n$$\n\\begin{aligned}\n& \\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right] \\\\\n=& \\frac{1}{m} \\sum_{i=1}^{m} \\log \\left(\\frac{1}{m} \\sum_{j=1}^{m} e^{\\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j} / \\tau}\\right) \\\\\n\\geq & \\frac{1}{\\tau m^{2}} \\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}\n\\end{aligned}\n$$\n\n> Let $W$ be the sentence embedding matrix corresponding to $\\{x_i\\}_{i=1}^m$, i.e., the i-th row of $W$ is $h_i$. \n\n- 设$W$为$\\{x_i\\}_{i=1}^m$对应的句子嵌入矩阵，即W的第i行为$h_i$。\n\n> Ignoring the constant terms, optimizing the second term in Eq essentially minimizes an upper bound of the summation of all elements in $WW^T$, i.e., $\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}$\n\n- 忽略常量项，优化了等式1中的第二项实质上最小化了$WW^T$中所有元素之和的上限，即$\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}$\n\n\n\n> Since we normalize $h_i$, all elements on the diagonal of $WW^T$ are 1 and then $tr(WW^T)$, also the sum of all eigenvalues, is a constant. \n\n- 因为我们规范化了$h_i$，所以$WW^T$对角线上的所有元素都是1，$tr（WW^T）$，也是所有特征值的总和，是一个常数。\n\n> According to Merikoski (1984), if all elements in $WW^T$ are positive, which is the case in most times from Gao et al. (2019), then $Sum(WW^T)$ is an upper bound for the largest eigenvalue of $WW^T$. \n\n- 根据Merikoski，如果$WW^T$中的所有元素都是正的，这在Gao的大多数情况下都是这样，那么$Sum（WW^T）$是最大特征值$WW^T$的上界。\n\n> Therefore, when minimizing the second term in Eq1, we are reducing the top eigenvalue of $WW^T$ and inherently “flattening” the singular spectrum of the embedding space.\n\n- 因此，当最小化Eq1中的第二项时，我们减少了$WW^T$的顶部特征值，并且固有地“平坦”了嵌入空间的奇异谱。\n\n> Hence contrastive learning can potentially tackle the representation degeneration problem and improve the uniformity.\n\n- 因此，对比学习有可能解决表征退化问题，提高一致性。\n\n> Compared to postprocessing methods in Li et al. (2020); Su et al. (2021), which only aim to encourage isotropic representations, contrastive learning also optimizes for aligning positive pairs by the first term in Eq. 6, which is the key to the success of SimCSE (a quantitative analysis is given in §7).\n\n- 与Li等人（2020）的后处理方法相比；Su等人（2021年）只致力于鼓励各向同性表征，对比学习还优化了等式1中第一项的正对对齐，这是SimCSE成功的关键（定量分析见第七章表1）.\n\n---\n\n\n\n","source":"_posts/SimCSE（七）.md","raw":"---\ntitle: SimCSE（七）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\nsummary: Connection to Anisotropy\nabbrlink: f664\ndate: 2021-05-04 15:30:08\npassword:\nkeywords:\ndescription:\n---\n# Simple Contrastive Learning of Sentence Embeddings（七）\n\n### 5 Connection to Anisotropy 各向异性连接\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- anisotropy（各向异性）是什么意思\n- isotropic distribution 各向同性分布\n- 奇异值singular是什么东西\n- 这些公式都要再看一下\n\n---\n\n\n\n> Recent work identifies an anisotropy problem in language representations (Ethayarajh, 2019; Li et al., 2020), i.e., the learned embeddings occupy a narrow cone in the vector space, which largely limits their expressiveness. \n\n- 最近的研究发现了语言表征中的“各向异性”问题，即学习到的嵌入在向量空间中占据了一个狭窄的圆锥体，这在很大程度上限制了它们的表达能力。\n\n> Gao et al. (2019) term it as a *representation degeneration* problem and demonstrate that language models trained with tied input/output embeddings lead to anisotropic word embeddings, and this is further observed by Ethayarajh (2019) in pretrained contextual embeddings. \n\n- Gao将其称为“表征退化”问题，并证明使用捆绑输入/输出嵌入训练的语言模型会导致各向异性的单词嵌入，Ethayarajh在预先训练的上下文嵌入中进一步观察到了这一点。\n\n> Wang et al. (2020) show that the singular values of the word embedding matrix decay drastically. In other words, except for a few dominating singular values, all others are close to zero.\n\n- Wang证明单词嵌入矩阵的奇异值急剧衰减。换言之，除了少数占主导地位的奇异值外，其他所有奇异值都接近于零。\n\n> A simple way to alleviate the problem is postprocessing, either to eliminate the dominant principal components (Arora et al., 2017; Mu and Viswanath, 2018), or to map embeddings to an isotropic distribution (Li et al., 2020; Su et al., 2021). \n\n- 缓解问题的一个简单方法是后处理，即消除主要的主成分，或将嵌入映射到各向同性分布。\n\n> Alternatively, one can add regularization during training (Gao et al., 2019; Wang et al., 2020). \n\n- 或者，可以在训练期间添加正则化。\n\n> In this section, we show that the contrastive objective can inherently “flatten” the singular value distribution of the sentence-embedding matrix.\n\n- 在这一节中，我们证明了对比目标可以内在地“平坦”句子嵌入矩阵的奇异值分布。\n\n> Following Wang and Isola (2020), the asymptotics of the contrastive learning objective can be expressed by the following equation when the number of negative instances approaches infinity (assuming f(x) is normalized):\n\n- 在Wang和Isola的基础上，对比学习目标的渐近性可以用以下等式表示，当负实例的数量接近无穷大时（假设f（x）是标准化的）：\n\n$$\n\\begin{array}{l}\n-\\frac{1}{\\tau} \\underset{\\left(x, x^{+}\\right) \\sim p_{\\mathrm{pos}}}{\\mathbb{E}}\\left[f(x)^{\\top} f\\left(x^{+}\\right)\\right] \n+\\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right]\n\\end{array}\n$$\n\n> where the first term keeps positive instances similar and the second pushes negative pairs apart. When $p_{data}$ is uniform over finite samples $\\{x_i\\}_{i=1}^m$ , with $h_i=f(x)$, we can derive the following formula from the second term with Jensen’s inequality:\n\n- 其中第一项保持正的实例相似，第二项将负的对分开。当$p_{data}$在有限样本$\\{x_i\\}_{i=1}^m$上是一致的，且$h_i=f（x）$，我们可以从第二项和詹森不等式导出以下公式：\n\n$$\n\\begin{aligned}\n& \\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right] \\\\\n=& \\frac{1}{m} \\sum_{i=1}^{m} \\log \\left(\\frac{1}{m} \\sum_{j=1}^{m} e^{\\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j} / \\tau}\\right) \\\\\n\\geq & \\frac{1}{\\tau m^{2}} \\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}\n\\end{aligned}\n$$\n\n> Let $W$ be the sentence embedding matrix corresponding to $\\{x_i\\}_{i=1}^m$, i.e., the i-th row of $W$ is $h_i$. \n\n- 设$W$为$\\{x_i\\}_{i=1}^m$对应的句子嵌入矩阵，即W的第i行为$h_i$。\n\n> Ignoring the constant terms, optimizing the second term in Eq essentially minimizes an upper bound of the summation of all elements in $WW^T$, i.e., $\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}$\n\n- 忽略常量项，优化了等式1中的第二项实质上最小化了$WW^T$中所有元素之和的上限，即$\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}$\n\n\n\n> Since we normalize $h_i$, all elements on the diagonal of $WW^T$ are 1 and then $tr(WW^T)$, also the sum of all eigenvalues, is a constant. \n\n- 因为我们规范化了$h_i$，所以$WW^T$对角线上的所有元素都是1，$tr（WW^T）$，也是所有特征值的总和，是一个常数。\n\n> According to Merikoski (1984), if all elements in $WW^T$ are positive, which is the case in most times from Gao et al. (2019), then $Sum(WW^T)$ is an upper bound for the largest eigenvalue of $WW^T$. \n\n- 根据Merikoski，如果$WW^T$中的所有元素都是正的，这在Gao的大多数情况下都是这样，那么$Sum（WW^T）$是最大特征值$WW^T$的上界。\n\n> Therefore, when minimizing the second term in Eq1, we are reducing the top eigenvalue of $WW^T$ and inherently “flattening” the singular spectrum of the embedding space.\n\n- 因此，当最小化Eq1中的第二项时，我们减少了$WW^T$的顶部特征值，并且固有地“平坦”了嵌入空间的奇异谱。\n\n> Hence contrastive learning can potentially tackle the representation degeneration problem and improve the uniformity.\n\n- 因此，对比学习有可能解决表征退化问题，提高一致性。\n\n> Compared to postprocessing methods in Li et al. (2020); Su et al. (2021), which only aim to encourage isotropic representations, contrastive learning also optimizes for aligning positive pairs by the first term in Eq. 6, which is the key to the success of SimCSE (a quantitative analysis is given in §7).\n\n- 与Li等人（2020）的后处理方法相比；Su等人（2021年）只致力于鼓励各向同性表征，对比学习还优化了等式1中第一项的正对对齐，这是SimCSE成功的关键（定量分析见第七章表1）.\n\n---\n\n\n\n","slug":"SimCSE（七）","published":1,"updated":"2021-05-04T07:34:27.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi70018zl9kfrdq35rv","content":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings七\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings七\"></a> Simple Contrastive Learning of Sentence Embeddings（七）</h1>\n<h3 id=\"5-connection-to-anisotropy-各向异性连接\"><a class=\"markdownIt-Anchor\" href=\"#5-connection-to-anisotropy-各向异性连接\"></a> 5 Connection to Anisotropy 各向异性连接</h3>\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color=\"red\">还需学习的知识点</font></h4>\n<ul>\n<li>anisotropy（各向异性）是什么意思</li>\n<li>isotropic distribution 各向同性分布</li>\n<li>奇异值singular是什么东西</li>\n<li>这些公式都要再看一下</li>\n</ul>\n<hr>\n<blockquote>\n<p>Recent work identifies an anisotropy problem in language representations (Ethayarajh, 2019; Li et al., 2020), i.e., the learned embeddings occupy a narrow cone in the vector space, which largely limits their expressiveness.</p>\n</blockquote>\n<ul>\n<li>最近的研究发现了语言表征中的“各向异性”问题，即学习到的嵌入在向量空间中占据了一个狭窄的圆锥体，这在很大程度上限制了它们的表达能力。</li>\n</ul>\n<blockquote>\n<p>Gao et al. (2019) term it as a <em>representation degeneration</em> problem and demonstrate that language models trained with tied input/output embeddings lead to anisotropic word embeddings, and this is further observed by Ethayarajh (2019) in pretrained contextual embeddings.</p>\n</blockquote>\n<ul>\n<li>Gao将其称为“表征退化”问题，并证明使用捆绑输入/输出嵌入训练的语言模型会导致各向异性的单词嵌入，Ethayarajh在预先训练的上下文嵌入中进一步观察到了这一点。</li>\n</ul>\n<blockquote>\n<p>Wang et al. (2020) show that the singular values of the word embedding matrix decay drastically. In other words, except for a few dominating singular values, all others are close to zero.</p>\n</blockquote>\n<ul>\n<li>Wang证明单词嵌入矩阵的奇异值急剧衰减。换言之，除了少数占主导地位的奇异值外，其他所有奇异值都接近于零。</li>\n</ul>\n<blockquote>\n<p>A simple way to alleviate the problem is postprocessing, either to eliminate the dominant principal components (Arora et al., 2017; Mu and Viswanath, 2018), or to map embeddings to an isotropic distribution (Li et al., 2020; Su et al., 2021).</p>\n</blockquote>\n<ul>\n<li>缓解问题的一个简单方法是后处理，即消除主要的主成分，或将嵌入映射到各向同性分布。</li>\n</ul>\n<blockquote>\n<p>Alternatively, one can add regularization during training (Gao et al., 2019; Wang et al., 2020).</p>\n</blockquote>\n<ul>\n<li>或者，可以在训练期间添加正则化。</li>\n</ul>\n<blockquote>\n<p>In this section, we show that the contrastive objective can inherently “flatten” the singular value distribution of the sentence-embedding matrix.</p>\n</blockquote>\n<ul>\n<li>在这一节中，我们证明了对比目标可以内在地“平坦”句子嵌入矩阵的奇异值分布。</li>\n</ul>\n<blockquote>\n<p>Following Wang and Isola (2020), the asymptotics of the contrastive learning objective can be expressed by the following equation when the number of negative instances approaches infinity (assuming f(x) is normalized):</p>\n</blockquote>\n<ul>\n<li>在Wang和Isola的基础上，对比学习目标的渐近性可以用以下等式表示，当负实例的数量接近无穷大时（假设f（x）是标准化的）：</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mfrac><mn>1</mn><mi>τ</mi></mfrac><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi></mrow></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">⊤</mi></msup><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">]</mo></mrow><mo>+</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mi>x</mi><mo>∼</mo><msub><mi>p</mi><mtext>data&nbsp;</mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><mi>log</mi><mo>⁡</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><msup><mi>x</mi><mo>−</mo></msup><mo>∼</mo><msub><mi>p</mi><mtext>data&nbsp;</mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><msup><mi>e</mi><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">⊤</mi></msup><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>−</mo></msup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">]</mo></mrow><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{l}\n-\\frac{1}{\\tau} \\underset{\\left(x, x^{+}\\right) \\sim p_{\\mathrm{pos}}}{\\mathbb{E}}\\left[f(x)^{\\top} f\\left(x^{+}\\right)\\right] \n+\\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right]\n\\end{array}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.43832em;vertical-align:-0.9691599999999998em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4691600000000002em;\"><span style=\"top:-3.4691600000000005em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.309em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">(</span></span><span class=\"mord mathdefault mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">)</span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285716em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">p</span><span class=\"mord mathrm mtight\">o</span><span class=\"mord mathrm mtight\">s</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9883199999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">[</span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">]</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.4000000000000004em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.342135em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.893973em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">[</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142858em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">]</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691599999999998em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>where the first term keeps positive instances similar and the second pushes negative pairs apart. When <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is uniform over finite samples <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span> , with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">h_i=f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>, we can derive the following formula from the second term with Jensen’s inequality:</p>\n</blockquote>\n<ul>\n<li>其中第一项保持正的实例相似，第二项将负的对分开。当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>在有限样本<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>上是一致的，且<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>=</mo><mi>f</mi><mi mathvariant=\"normal\">（</mi><mi>x</mi><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">h_i=f（x）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathdefault\">x</span><span class=\"mord cjk_fallback\">）</span></span></span></span>，我们可以从第二项和詹森不等式导出以下公式：</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mi>x</mi><mo>∼</mo><msub><mi>p</mi><mtext>data&nbsp;</mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><mi>log</mi><mo>⁡</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><msup><mi>x</mi><mo>−</mo></msup><mo>∼</mo><msub><mi>p</mi><mtext>data&nbsp;</mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><msup><mi>e</mi><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">⊤</mi></msup><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>−</mo></msup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">]</mo></mrow><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi>log</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mi>e</mi><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mo>≥</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mfrac><mn>1</mn><mrow><mi>τ</mi><msup><mi>m</mi><mn>2</mn></msup></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n&amp; \\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right] \\\\\n=&amp; \\frac{1}{m} \\sum_{i=1}^{m} \\log \\left(\\frac{1}{m} \\sum_{j=1}^{m} e^{\\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j} / \\tau}\\right) \\\\\n\\geq &amp; \\frac{1}{\\tau m^{2}} \\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:9.528981000000002em;vertical-align:-4.514490500000001em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.014490500000001em;\"><span style=\"top:-7.314490500000002em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.314460500000001em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span></span></span><span style=\"top:-0.949286499999999em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mrel\">≥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.514490500000001em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.014490500000001em;\"><span style=\"top:-7.314490500000002em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.4000000000000004em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.342135em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.893973em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">[</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1105em;\"><span style=\"top:-3.4130000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142858em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">]</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span><span style=\"top:-4.314460500000001em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000007em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0619199999999998em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.214em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span></span></span><span style=\"top:-0.949286499999999em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000007em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999998em;\"><span style=\"top:-2.4530000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.514490500000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span> be the sentence embedding matrix corresponding to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>, i.e., the i-th row of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>对应的句子嵌入矩阵，即W的第i行为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>Ignoring the constant terms, optimizing the second term in Eq essentially minimizes an upper bound of the summation of all elements in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>, i.e., <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Sum</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mi mathvariant=\"bold\">W</mi><msup><mi mathvariant=\"bold\">W</mi><mi mathvariant=\"normal\">⊤</mi></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">m</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.284926em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<ul>\n<li>忽略常量项，优化了等式1中的第二项实质上最小化了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>中所有元素之和的上限，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Sum</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mi mathvariant=\"bold\">W</mi><msup><mi mathvariant=\"bold\">W</mi><mi mathvariant=\"normal\">⊤</mi></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">m</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.284926em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<blockquote>\n<p>Since we normalize <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, all elements on the diagonal of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> are 1 and then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">tr(WW^T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, also the sum of all eigenvalues, is a constant.</p>\n</blockquote>\n<ul>\n<li>因为我们规范化了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，所以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>对角线上的所有元素都是1，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi mathvariant=\"normal\">（</mi><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">tr（WW^T）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>，也是所有特征值的总和，是一个常数。</li>\n</ul>\n<blockquote>\n<p>According to Merikoski (1984), if all elements in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> are positive, which is the case in most times from Gao et al. (2019), then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Sum(WW^T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is an upper bound for the largest eigenvalue of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>根据Merikoski，如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>中的所有元素都是正的，这在Gao的大多数情况下都是这样，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mi mathvariant=\"normal\">（</mi><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">Sum（WW^T）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>是最大特征值<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>的上界。</li>\n</ul>\n<blockquote>\n<p>Therefore, when minimizing the second term in Eq1, we are reducing the top eigenvalue of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> and inherently “flattening” the singular spectrum of the embedding space.</p>\n</blockquote>\n<ul>\n<li>因此，当最小化Eq1中的第二项时，我们减少了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>的顶部特征值，并且固有地“平坦”了嵌入空间的奇异谱。</li>\n</ul>\n<blockquote>\n<p>Hence contrastive learning can potentially tackle the representation degeneration problem and improve the uniformity.</p>\n</blockquote>\n<ul>\n<li>因此，对比学习有可能解决表征退化问题，提高一致性。</li>\n</ul>\n<blockquote>\n<p>Compared to postprocessing methods in Li et al. (2020); Su et al. (2021), which only aim to encourage isotropic representations, contrastive learning also optimizes for aligning positive pairs by the first term in Eq. 6, which is the key to the success of SimCSE (a quantitative analysis is given in §7).</p>\n</blockquote>\n<ul>\n<li>与Li等人（2020）的后处理方法相比；Su等人（2021年）只致力于鼓励各向同性表征，对比学习还优化了等式1中第一项的正对对齐，这是SimCSE成功的关键（定量分析见第七章表1）.</li>\n</ul>\n<hr>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings七\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings七\"></a> Simple Contrastive Learning of Sentence Embeddings（七）</h1>\n<h3 id=\"5-connection-to-anisotropy-各向异性连接\"><a class=\"markdownIt-Anchor\" href=\"#5-connection-to-anisotropy-各向异性连接\"></a> 5 Connection to Anisotropy 各向异性连接</h3>\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color = \"red\">还需学习的知识点</font></h4>\n<ul>\n<li>anisotropy（各向异性）是什么意思</li>\n<li>isotropic distribution 各向同性分布</li>\n<li>奇异值singular是什么东西</li>\n<li>这些公式都要再看一下</li>\n</ul>\n<hr />\n<blockquote>\n<p>Recent work identifies an anisotropy problem in language representations (Ethayarajh, 2019; Li et al., 2020), i.e., the learned embeddings occupy a narrow cone in the vector space, which largely limits their expressiveness.</p>\n</blockquote>\n<ul>\n<li>最近的研究发现了语言表征中的“各向异性”问题，即学习到的嵌入在向量空间中占据了一个狭窄的圆锥体，这在很大程度上限制了它们的表达能力。</li>\n</ul>\n<blockquote>\n<p>Gao et al. (2019) term it as a <em>representation degeneration</em> problem and demonstrate that language models trained with tied input/output embeddings lead to anisotropic word embeddings, and this is further observed by Ethayarajh (2019) in pretrained contextual embeddings.</p>\n</blockquote>\n<ul>\n<li>Gao将其称为“表征退化”问题，并证明使用捆绑输入/输出嵌入训练的语言模型会导致各向异性的单词嵌入，Ethayarajh在预先训练的上下文嵌入中进一步观察到了这一点。</li>\n</ul>\n<blockquote>\n<p>Wang et al. (2020) show that the singular values of the word embedding matrix decay drastically. In other words, except for a few dominating singular values, all others are close to zero.</p>\n</blockquote>\n<ul>\n<li>Wang证明单词嵌入矩阵的奇异值急剧衰减。换言之，除了少数占主导地位的奇异值外，其他所有奇异值都接近于零。</li>\n</ul>\n<blockquote>\n<p>A simple way to alleviate the problem is postprocessing, either to eliminate the dominant principal components (Arora et al., 2017; Mu and Viswanath, 2018), or to map embeddings to an isotropic distribution (Li et al., 2020; Su et al., 2021).</p>\n</blockquote>\n<ul>\n<li>缓解问题的一个简单方法是后处理，即消除主要的主成分，或将嵌入映射到各向同性分布。</li>\n</ul>\n<blockquote>\n<p>Alternatively, one can add regularization during training (Gao et al., 2019; Wang et al., 2020).</p>\n</blockquote>\n<ul>\n<li>或者，可以在训练期间添加正则化。</li>\n</ul>\n<blockquote>\n<p>In this section, we show that the contrastive objective can inherently “flatten” the singular value distribution of the sentence-embedding matrix.</p>\n</blockquote>\n<ul>\n<li>在这一节中，我们证明了对比目标可以内在地“平坦”句子嵌入矩阵的奇异值分布。</li>\n</ul>\n<blockquote>\n<p>Following Wang and Isola (2020), the asymptotics of the contrastive learning objective can be expressed by the following equation when the number of negative instances approaches infinity (assuming f(x) is normalized):</p>\n</blockquote>\n<ul>\n<li>在Wang和Isola的基础上，对比学习目标的渐近性可以用以下等式表示，当负实例的数量接近无穷大时（假设f（x）是标准化的）：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mfrac><mn>1</mn><mi>τ</mi></mfrac><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi></mrow></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">⊤</mi></msup><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">]</mo></mrow><mo>+</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mi>x</mi><mo>∼</mo><msub><mi>p</mi><mtext>data </mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><mi>log</mi><mo>⁡</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><msup><mi>x</mi><mo>−</mo></msup><mo>∼</mo><msub><mi>p</mi><mtext>data </mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><msup><mi>e</mi><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">⊤</mi></msup><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>−</mo></msup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">]</mo></mrow><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{l}\n-\\frac{1}{\\tau} \\underset{\\left(x, x^{+}\\right) \\sim p_{\\mathrm{pos}}}{\\mathbb{E}}\\left[f(x)^{\\top} f\\left(x^{+}\\right)\\right] \n+\\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right]\n\\end{array}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.43832em;vertical-align:-0.9691599999999998em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4691600000000002em;\"><span style=\"top:-3.4691600000000005em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.309em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">(</span></span><span class=\"mord mathdefault mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">)</span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285716em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">p</span><span class=\"mord mathrm mtight\">o</span><span class=\"mord mathrm mtight\">s</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9883199999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">[</span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">]</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.4000000000000004em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.342135em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.893973em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">[</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142858em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">]</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691599999999998em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>where the first term keeps positive instances similar and the second pushes negative pairs apart. When <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is uniform over finite samples <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span> , with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">h_i=f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>, we can derive the following formula from the second term with Jensen’s inequality:</p>\n</blockquote>\n<ul>\n<li>其中第一项保持正的实例相似，第二项将负的对分开。当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>在有限样本<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>上是一致的，且<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>=</mo><mi>f</mi><mi mathvariant=\"normal\">（</mi><mi>x</mi><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">h_i=f（x）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathdefault\">x</span><span class=\"mord cjk_fallback\">）</span></span></span></span>，我们可以从第二项和詹森不等式导出以下公式：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mi>x</mi><mo>∼</mo><msub><mi>p</mi><mtext>data </mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><mi>log</mi><mo>⁡</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><msup><mi>x</mi><mo>−</mo></msup><mo>∼</mo><msub><mi>p</mi><mtext>data </mtext></msub></mrow></munder><mrow><mo fence=\"true\">[</mo><msup><mi>e</mi><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">⊤</mi></msup><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>−</mo></msup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">]</mo></mrow><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mo>=</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi>log</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mi>e</mi><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mo>≥</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mfrac><mn>1</mn><mrow><mi>τ</mi><msup><mi>m</mi><mn>2</mn></msup></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n&amp; \\underset{x \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[\\log \\underset{x^{-} \\sim p_{\\text {data }}}{\\mathbb{E}}\\left[e^{f(x)^{\\top} f\\left(x^{-}\\right) / \\tau}\\right]\\right] \\\\\n=&amp; \\frac{1}{m} \\sum_{i=1}^{m} \\log \\left(\\frac{1}{m} \\sum_{j=1}^{m} e^{\\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j} / \\tau}\\right) \\\\\n\\geq &amp; \\frac{1}{\\tau m^{2}} \\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:9.528981000000002em;vertical-align:-4.514490500000001em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.014490500000001em;\"><span style=\"top:-7.314490500000002em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.314460500000001em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span></span></span><span style=\"top:-0.949286499999999em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mrel\">≥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.514490500000001em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.014490500000001em;\"><span style=\"top:-7.314490500000002em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.4000000000000004em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.342135em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.893973em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">[</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1105em;\"><span style=\"top:-3.4130000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142858em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">]</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span><span style=\"top:-4.314460500000001em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000007em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0619199999999998em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.214em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span></span></span><span style=\"top:-0.949286499999999em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000007em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999998em;\"><span style=\"top:-2.4530000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.514490500000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span> be the sentence embedding matrix corresponding to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>, i.e., the i-th row of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{x_i\\}_{i=1}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008664em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>对应的句子嵌入矩阵，即W的第i行为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>Ignoring the constant terms, optimizing the second term in Eq essentially minimizes an upper bound of the summation of all elements in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>, i.e., <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Sum</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mi mathvariant=\"bold\">W</mi><msup><mi mathvariant=\"bold\">W</mi><mi mathvariant=\"normal\">⊤</mi></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">m</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.284926em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<ul>\n<li>忽略常量项，优化了等式1中的第二项实质上最小化了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>中所有元素之和的上限，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Sum</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mi mathvariant=\"bold\">W</mi><msup><mi mathvariant=\"bold\">W</mi><mi mathvariant=\"normal\">⊤</mi></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Sum}\\left(\\mathbf{W} \\mathbf{W}^{\\top}\\right)=\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\mathbf{h}_{i}^{\\top} \\mathbf{h}_{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">m</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">W</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.284926em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<blockquote>\n<p>Since we normalize <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, all elements on the diagonal of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> are 1 and then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">tr(WW^T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, also the sum of all eigenvalues, is a constant.</p>\n</blockquote>\n<ul>\n<li>因为我们规范化了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，所以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>对角线上的所有元素都是1，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi mathvariant=\"normal\">（</mi><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">tr（WW^T）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>，也是所有特征值的总和，是一个常数。</li>\n</ul>\n<blockquote>\n<p>According to Merikoski (1984), if all elements in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> are positive, which is the case in most times from Gao et al. (2019), then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Sum(WW^T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is an upper bound for the largest eigenvalue of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>根据Merikoski，如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>中的所有元素都是正的，这在Gao的大多数情况下都是这样，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mi mathvariant=\"normal\">（</mi><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">Sum（WW^T）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>是最大特征值<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>的上界。</li>\n</ul>\n<blockquote>\n<p>Therefore, when minimizing the second term in Eq1, we are reducing the top eigenvalue of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> and inherently “flattening” the singular spectrum of the embedding space.</p>\n</blockquote>\n<ul>\n<li>因此，当最小化Eq1中的第二项时，我们减少了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><msup><mi>W</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">WW^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>的顶部特征值，并且固有地“平坦”了嵌入空间的奇异谱。</li>\n</ul>\n<blockquote>\n<p>Hence contrastive learning can potentially tackle the representation degeneration problem and improve the uniformity.</p>\n</blockquote>\n<ul>\n<li>因此，对比学习有可能解决表征退化问题，提高一致性。</li>\n</ul>\n<blockquote>\n<p>Compared to postprocessing methods in Li et al. (2020); Su et al. (2021), which only aim to encourage isotropic representations, contrastive learning also optimizes for aligning positive pairs by the first term in Eq. 6, which is the key to the success of SimCSE (a quantitative analysis is given in §7).</p>\n</blockquote>\n<ul>\n<li>与Li等人（2020）的后处理方法相比；Su等人（2021年）只致力于鼓励各向同性表征，对比学习还优化了等式1中第一项的正对对齐，这是SimCSE成功的关键（定量分析见第七章表1）.</li>\n</ul>\n<hr />\n"},{"title":"SimCSE（三）","top":false,"cover":false,"toc":false,"mathjax":true,"abbrlink":"3b4c","date":"2021-04-28T02:31:04.000Z","password":null,"keywords":null,"description":null,"summary":"ICML2020","_content":"## Simple Contrastive Learning of Sentence Embeddings（三）\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- **Alignment**\n- **Uniformity**\n\n------\n\n#### 对比表示学习（Contrastive Representation Learning）\n\n\n对比学习的核心思想是将正样本和负样本在特征空间对比，学习样本的特征表示，难点在于如何构造正负样本。\n\n> **Title**: 《Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere》\n> **Author**:Tongzhou Wang ; Phillip Isola\n\n\n\n[Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere](ICML2020.pdf) （通过超球面上的对齐和一致性理解对比表示学习）指出了Contrastive representation learning的两个重要属性：\n\n- **Alignment（计算正例对之间的向量距离的期望）:** two samples forming a positive pair should be mapped to nearby features, and thus be （mostly） invariant to unneeded noise factors. **Similar samples have similar features.** （正例之间表示保持较近距离）\n  - 越相似的样例之间的alignment程度越高。因为alignment使用距离来衡量，所以距离越小，表示alignment的程度越高。\n- **Uniformity（评估所有数据的向量均匀分布的程度，越均匀，保留的信息越多）:** feature vectors should be roughly uniformly distributed on the unit hypersphere, pre-serving as much information of the data as possible. **Illustration of alignment and uniformity of feature distributions on the output unit hypersphere.** （随机样例的表示应分散在超球面上）\n  - 可以想象任意从表示空间中采样两个数据和, 希望他们的距离比较远。他们的距离越远，证明空间分布越uniform。所以uniformity的值也是越低越好。\n\n![对比表示学习](对比表示学习.webp)\n\nSimCSE也采用这两个指标来衡量生成的句子向量，并证明了文本的语义空间也满足：alignment值越低且uniformity值越低，向量表示的质量越高，在STS任务上的Spearman相关系数越高。\n\n\n- 作者证明了现有的一些对比学习的算法正是较好地满足了这两条性质才取得了不错的效果。\n- 作者提出了一个可优化的 metric (策略方法)来直接量化这两条属性。通过直接优化该loss（损失），也取得了较好的效果。\n\n","source":"_posts/SimCSE（三）.md","raw":"---\ntitle: SimCSE（三）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\nabbrlink: 3b4c\ndate: 2021-04-28 10:31:04\npassword:\nkeywords:\ndescription:\nsummary: ICML2020\n---\n## Simple Contrastive Learning of Sentence Embeddings（三）\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- **Alignment**\n- **Uniformity**\n\n------\n\n#### 对比表示学习（Contrastive Representation Learning）\n\n\n对比学习的核心思想是将正样本和负样本在特征空间对比，学习样本的特征表示，难点在于如何构造正负样本。\n\n> **Title**: 《Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere》\n> **Author**:Tongzhou Wang ; Phillip Isola\n\n\n\n[Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere](ICML2020.pdf) （通过超球面上的对齐和一致性理解对比表示学习）指出了Contrastive representation learning的两个重要属性：\n\n- **Alignment（计算正例对之间的向量距离的期望）:** two samples forming a positive pair should be mapped to nearby features, and thus be （mostly） invariant to unneeded noise factors. **Similar samples have similar features.** （正例之间表示保持较近距离）\n  - 越相似的样例之间的alignment程度越高。因为alignment使用距离来衡量，所以距离越小，表示alignment的程度越高。\n- **Uniformity（评估所有数据的向量均匀分布的程度，越均匀，保留的信息越多）:** feature vectors should be roughly uniformly distributed on the unit hypersphere, pre-serving as much information of the data as possible. **Illustration of alignment and uniformity of feature distributions on the output unit hypersphere.** （随机样例的表示应分散在超球面上）\n  - 可以想象任意从表示空间中采样两个数据和, 希望他们的距离比较远。他们的距离越远，证明空间分布越uniform。所以uniformity的值也是越低越好。\n\n![对比表示学习](对比表示学习.webp)\n\nSimCSE也采用这两个指标来衡量生成的句子向量，并证明了文本的语义空间也满足：alignment值越低且uniformity值越低，向量表示的质量越高，在STS任务上的Spearman相关系数越高。\n\n\n- 作者证明了现有的一些对比学习的算法正是较好地满足了这两条性质才取得了不错的效果。\n- 作者提出了一个可优化的 metric (策略方法)来直接量化这两条属性。通过直接优化该loss（损失），也取得了较好的效果。\n\n","slug":"SimCSE（三）","published":1,"updated":"2021-04-28T06:53:15.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi7001czl9k2iw8htnh","content":"<h2 id=\"simple-contrastive-learning-of-sentence-embeddings三\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings三\"></a> Simple Contrastive Learning of Sentence Embeddings（三）</h2>\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color=\"red\">还需学习的知识点</font></h4>\n<ul>\n<li><strong>Alignment</strong></li>\n<li><strong>Uniformity</strong></li>\n</ul>\n<hr>\n<h4 id=\"对比表示学习contrastive-representation-learning\"><a class=\"markdownIt-Anchor\" href=\"#对比表示学习contrastive-representation-learning\"></a> 对比表示学习（Contrastive Representation Learning）</h4>\n<p>对比学习的核心思想是将正样本和负样本在特征空间对比，学习样本的特征表示，难点在于如何构造正负样本。</p>\n<blockquote>\n<p><strong>Title</strong>: 《Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere》<br>\n<strong>Author</strong>:Tongzhou Wang ; Phillip Isola</p>\n</blockquote>\n<p><a href=\"ICML2020.pdf\">Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere</a> （通过超球面上的对齐和一致性理解对比表示学习）指出了Contrastive representation learning的两个重要属性：</p>\n<ul>\n<li><strong>Alignment（计算正例对之间的向量距离的期望）:</strong> two samples forming a positive pair should be mapped to nearby features, and thus be （mostly） invariant to unneeded noise factors. <strong>Similar samples have similar features.</strong> （正例之间表示保持较近距离）\n<ul>\n<li>越相似的样例之间的alignment程度越高。因为alignment使用距离来衡量，所以距离越小，表示alignment的程度越高。</li>\n</ul>\n</li>\n<li><strong>Uniformity（评估所有数据的向量均匀分布的程度，越均匀，保留的信息越多）:</strong> feature vectors should be roughly uniformly distributed on the unit hypersphere, pre-serving as much information of the data as possible. <strong>Illustration of alignment and uniformity of feature distributions on the output unit hypersphere.</strong> （随机样例的表示应分散在超球面上）\n<ul>\n<li>可以想象任意从表示空间中采样两个数据和, 希望他们的距离比较远。他们的距离越远，证明空间分布越uniform。所以uniformity的值也是越低越好。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E5%AF%B9%E6%AF%94%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0.webp\" alt=\"对比表示学习\"></p>\n<p>SimCSE也采用这两个指标来衡量生成的句子向量，并证明了文本的语义空间也满足：alignment值越低且uniformity值越低，向量表示的质量越高，在STS任务上的Spearman相关系数越高。</p>\n<ul>\n<li>作者证明了现有的一些对比学习的算法正是较好地满足了这两条性质才取得了不错的效果。</li>\n<li>作者提出了一个可优化的 metric (策略方法)来直接量化这两条属性。通过直接优化该loss（损失），也取得了较好的效果。</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"simple-contrastive-learning-of-sentence-embeddings三\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings三\"></a> Simple Contrastive Learning of Sentence Embeddings（三）</h2>\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color = \"red\">还需学习的知识点</font></h4>\n<ul>\n<li><strong>Alignment</strong></li>\n<li><strong>Uniformity</strong></li>\n</ul>\n<hr />\n<h4 id=\"对比表示学习contrastive-representation-learning\"><a class=\"markdownIt-Anchor\" href=\"#对比表示学习contrastive-representation-learning\"></a> 对比表示学习（Contrastive Representation Learning）</h4>\n<p>对比学习的核心思想是将正样本和负样本在特征空间对比，学习样本的特征表示，难点在于如何构造正负样本。</p>\n<blockquote>\n<p><strong>Title</strong>: 《Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere》<br />\n<strong>Author</strong>:Tongzhou Wang ; Phillip Isola</p>\n</blockquote>\n<p><a href=\"ICML2020.pdf\">Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere</a> （通过超球面上的对齐和一致性理解对比表示学习）指出了Contrastive representation learning的两个重要属性：</p>\n<ul>\n<li><strong>Alignment（计算正例对之间的向量距离的期望）:</strong> two samples forming a positive pair should be mapped to nearby features, and thus be （mostly） invariant to unneeded noise factors. <strong>Similar samples have similar features.</strong> （正例之间表示保持较近距离）\n<ul>\n<li>越相似的样例之间的alignment程度越高。因为alignment使用距离来衡量，所以距离越小，表示alignment的程度越高。</li>\n</ul>\n</li>\n<li><strong>Uniformity（评估所有数据的向量均匀分布的程度，越均匀，保留的信息越多）:</strong> feature vectors should be roughly uniformly distributed on the unit hypersphere, pre-serving as much information of the data as possible. <strong>Illustration of alignment and uniformity of feature distributions on the output unit hypersphere.</strong> （随机样例的表示应分散在超球面上）\n<ul>\n<li>可以想象任意从表示空间中采样两个数据和, 希望他们的距离比较远。他们的距离越远，证明空间分布越uniform。所以uniformity的值也是越低越好。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E5%AF%B9%E6%AF%94%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0.webp\" alt=\"对比表示学习\" /></p>\n<p>SimCSE也采用这两个指标来衡量生成的句子向量，并证明了文本的语义空间也满足：alignment值越低且uniformity值越低，向量表示的质量越高，在STS任务上的Spearman相关系数越高。</p>\n<ul>\n<li>作者证明了现有的一些对比学习的算法正是较好地满足了这两条性质才取得了不错的效果。</li>\n<li>作者提出了一个可优化的 metric (策略方法)来直接量化这两条属性。通过直接优化该loss（损失），也取得了较好的效果。</li>\n</ul>\n"},{"title":"SimCSE（二）","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"SimCSE Abstract","abbrlink":"221e","date":"2021-04-27T06:07:32.000Z","password":null,"keywords":null,"description":null,"_content":"## Simple Contrastive Learning of Sentence Embeddings（二）\n\n#### 单词预览\n\n- contrastive，对比\n- state-of-the-art，最先进的\n- unsupervise，无监督\n- predict，预测\n- objective，目标\n- contrastive，对比\n- on par with，与……同一水平\n- represent，代表，表示\n- inspiration，灵感\n- incorporate，包含\n- annotate，注释\n- pairs from，来自\n- entailment，蕴含\n- semantic，语义\n- correlate，有关系的\n- respective，分别，各自\n\n-----\n\n> 两端对齐并调整行间距: style=\"text-align:justify\";line-height:1.8rem\n>\n> html斜体使用i标签\n\n#### 英文摘要Abstract\n\n<div style=\"text-align:justify;line-height:1.8rem\">This paper presents SimCSE, a simple contrastive learning framework that greatly advances the state-of-the-art sentence embeddings. We first describe an unsupervised approach, which takes an input sentence and predicts <i>itself</i> in a contrastive objective, with only standard dropout used as noise. This simple method works surprisingly well, performing on par with previous supervised counterparts. We hypothesize that dropout acts as minimal data augmentation and removing it leads to a representation collapse. Then, we draw inspiration from the recent success of learning sentence embeddings from natural language inference（NLI）datasets and incorporate annotated pairs from NLI datasets into contrastive learning by using “entailment” pairs as pos- itives and “contradiction” pairs as hard negatives. We evaluate SimCSE on standard semantic textual similarity（STS）tasks, and our unsupervised and supervised models using BERTbase achieve an average of 74.5% and 81.6% Spearman’s correlation respectively, a 7.9 and 4.6 points improvement compared to previous best results. We also show that contrastive learning theoretically regularizes pretrained embeddings’ anisotropic space to be more uniform, and it better aligns positive pairs when supervised signals are available.</div>\n\n-----\n\n#### 详细翻译中文摘要\n\n<div style=\"text-align:justify;line-height:1.8rem\">文章主要介绍了SimCSE，一种简单对比学习框架，SimCSE对比学习框架极大的提高了最先进的句子嵌入技术。我们首先描述了一种无监督的方法，这种方法采用一个输入语句，并根据一个对比目标进行预测，仅使用标准的dropout作为噪声。这种简单方法非常好，表现的与以前的可监督方法水平不相上下。我们假设，dropout做为最小的数据增加和删除，它会导致表示崩溃。然后，我们从最近的自然语言推理（NLI）数据集的成功经验获得灵感，将来自NLI数据集中的注释合并到对比学习中，并使用“蕴含”作为正向，“矛盾”作为负向。我们在标准的语义-文本相似度（STS）任务中对SimSCE进行了评估，使用Bear的无监督和有监督模型的相关度平均达到74.5%和81.6%的Spearman相关度，与以前的最佳结果分别提高了7.9和4.6个点。我们也展示了相对学习理论使预训练嵌入的各向异性空间更加均匀，并在有监督信号的情况下可以更好的对其正向嵌入。</div>\n\n","source":"_posts/SimCSE（二）.md","raw":"---\ntitle: SimCSE（二）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\nsummary: SimCSE Abstract\nabbrlink: 221e\ndate: 2021-04-27 14:07:32\npassword:\nkeywords:\ndescription:\n---\n## Simple Contrastive Learning of Sentence Embeddings（二）\n\n#### 单词预览\n\n- contrastive，对比\n- state-of-the-art，最先进的\n- unsupervise，无监督\n- predict，预测\n- objective，目标\n- contrastive，对比\n- on par with，与……同一水平\n- represent，代表，表示\n- inspiration，灵感\n- incorporate，包含\n- annotate，注释\n- pairs from，来自\n- entailment，蕴含\n- semantic，语义\n- correlate，有关系的\n- respective，分别，各自\n\n-----\n\n> 两端对齐并调整行间距: style=\"text-align:justify\";line-height:1.8rem\n>\n> html斜体使用i标签\n\n#### 英文摘要Abstract\n\n<div style=\"text-align:justify;line-height:1.8rem\">This paper presents SimCSE, a simple contrastive learning framework that greatly advances the state-of-the-art sentence embeddings. We first describe an unsupervised approach, which takes an input sentence and predicts <i>itself</i> in a contrastive objective, with only standard dropout used as noise. This simple method works surprisingly well, performing on par with previous supervised counterparts. We hypothesize that dropout acts as minimal data augmentation and removing it leads to a representation collapse. Then, we draw inspiration from the recent success of learning sentence embeddings from natural language inference（NLI）datasets and incorporate annotated pairs from NLI datasets into contrastive learning by using “entailment” pairs as pos- itives and “contradiction” pairs as hard negatives. We evaluate SimCSE on standard semantic textual similarity（STS）tasks, and our unsupervised and supervised models using BERTbase achieve an average of 74.5% and 81.6% Spearman’s correlation respectively, a 7.9 and 4.6 points improvement compared to previous best results. We also show that contrastive learning theoretically regularizes pretrained embeddings’ anisotropic space to be more uniform, and it better aligns positive pairs when supervised signals are available.</div>\n\n-----\n\n#### 详细翻译中文摘要\n\n<div style=\"text-align:justify;line-height:1.8rem\">文章主要介绍了SimCSE，一种简单对比学习框架，SimCSE对比学习框架极大的提高了最先进的句子嵌入技术。我们首先描述了一种无监督的方法，这种方法采用一个输入语句，并根据一个对比目标进行预测，仅使用标准的dropout作为噪声。这种简单方法非常好，表现的与以前的可监督方法水平不相上下。我们假设，dropout做为最小的数据增加和删除，它会导致表示崩溃。然后，我们从最近的自然语言推理（NLI）数据集的成功经验获得灵感，将来自NLI数据集中的注释合并到对比学习中，并使用“蕴含”作为正向，“矛盾”作为负向。我们在标准的语义-文本相似度（STS）任务中对SimSCE进行了评估，使用Bear的无监督和有监督模型的相关度平均达到74.5%和81.6%的Spearman相关度，与以前的最佳结果分别提高了7.9和4.6个点。我们也展示了相对学习理论使预训练嵌入的各向异性空间更加均匀，并在有监督信号的情况下可以更好的对其正向嵌入。</div>\n\n","slug":"SimCSE（二）","published":1,"updated":"2021-04-28T06:57:20.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi8001gzl9kacvj48ms","content":"<h2 id=\"simple-contrastive-learning-of-sentence-embeddings二\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings二\"></a> Simple Contrastive Learning of Sentence Embeddings（二）</h2>\n<h4 id=\"单词预览\"><a class=\"markdownIt-Anchor\" href=\"#单词预览\"></a> 单词预览</h4>\n<ul>\n<li>contrastive，对比</li>\n<li>state-of-the-art，最先进的</li>\n<li>unsupervise，无监督</li>\n<li>predict，预测</li>\n<li>objective，目标</li>\n<li>contrastive，对比</li>\n<li>on par with，与……同一水平</li>\n<li>represent，代表，表示</li>\n<li>inspiration，灵感</li>\n<li>incorporate，包含</li>\n<li>annotate，注释</li>\n<li>pairs from，来自</li>\n<li>entailment，蕴含</li>\n<li>semantic，语义</li>\n<li>correlate，有关系的</li>\n<li>respective，分别，各自</li>\n</ul>\n<hr>\n<blockquote>\n<p>两端对齐并调整行间距: style=“text-align:justify”;line-height:1.8rem</p>\n<p>html斜体使用i标签</p>\n</blockquote>\n<h4 id=\"英文摘要abstract\"><a class=\"markdownIt-Anchor\" href=\"#英文摘要abstract\"></a> 英文摘要Abstract</h4>\n<div style=\"text-align:justify;line-height:1.8rem\">This paper presents SimCSE, a simple contrastive learning framework that greatly advances the state-of-the-art sentence embeddings. We first describe an unsupervised approach, which takes an input sentence and predicts <i>itself</i> in a contrastive objective, with only standard dropout used as noise. This simple method works surprisingly well, performing on par with previous supervised counterparts. We hypothesize that dropout acts as minimal data augmentation and removing it leads to a representation collapse. Then, we draw inspiration from the recent success of learning sentence embeddings from natural language inference（NLI）datasets and incorporate annotated pairs from NLI datasets into contrastive learning by using “entailment” pairs as pos- itives and “contradiction” pairs as hard negatives. We evaluate SimCSE on standard semantic textual similarity（STS）tasks, and our unsupervised and supervised models using BERTbase achieve an average of 74.5% and 81.6% Spearman’s correlation respectively, a 7.9 and 4.6 points improvement compared to previous best results. We also show that contrastive learning theoretically regularizes pretrained embeddings’ anisotropic space to be more uniform, and it better aligns positive pairs when supervised signals are available.</div>\n<hr>\n<h4 id=\"详细翻译中文摘要\"><a class=\"markdownIt-Anchor\" href=\"#详细翻译中文摘要\"></a> 详细翻译中文摘要</h4>\n<div style=\"text-align:justify;line-height:1.8rem\">文章主要介绍了SimCSE，一种简单对比学习框架，SimCSE对比学习框架极大的提高了最先进的句子嵌入技术。我们首先描述了一种无监督的方法，这种方法采用一个输入语句，并根据一个对比目标进行预测，仅使用标准的dropout作为噪声。这种简单方法非常好，表现的与以前的可监督方法水平不相上下。我们假设，dropout做为最小的数据增加和删除，它会导致表示崩溃。然后，我们从最近的自然语言推理（NLI）数据集的成功经验获得灵感，将来自NLI数据集中的注释合并到对比学习中，并使用“蕴含”作为正向，“矛盾”作为负向。我们在标准的语义-文本相似度（STS）任务中对SimSCE进行了评估，使用Bear的无监督和有监督模型的相关度平均达到74.5%和81.6%的Spearman相关度，与以前的最佳结果分别提高了7.9和4.6个点。我们也展示了相对学习理论使预训练嵌入的各向异性空间更加均匀，并在有监督信号的情况下可以更好的对其正向嵌入。</div>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"simple-contrastive-learning-of-sentence-embeddings二\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings二\"></a> Simple Contrastive Learning of Sentence Embeddings（二）</h2>\n<h4 id=\"单词预览\"><a class=\"markdownIt-Anchor\" href=\"#单词预览\"></a> 单词预览</h4>\n<ul>\n<li>contrastive，对比</li>\n<li>state-of-the-art，最先进的</li>\n<li>unsupervise，无监督</li>\n<li>predict，预测</li>\n<li>objective，目标</li>\n<li>contrastive，对比</li>\n<li>on par with，与……同一水平</li>\n<li>represent，代表，表示</li>\n<li>inspiration，灵感</li>\n<li>incorporate，包含</li>\n<li>annotate，注释</li>\n<li>pairs from，来自</li>\n<li>entailment，蕴含</li>\n<li>semantic，语义</li>\n<li>correlate，有关系的</li>\n<li>respective，分别，各自</li>\n</ul>\n<hr />\n<blockquote>\n<p>两端对齐并调整行间距: style=“text-align:justify”;line-height:1.8rem</p>\n<p>html斜体使用i标签</p>\n</blockquote>\n<h4 id=\"英文摘要abstract\"><a class=\"markdownIt-Anchor\" href=\"#英文摘要abstract\"></a> 英文摘要Abstract</h4>\n<div style=\"text-align:justify;line-height:1.8rem\">This paper presents SimCSE, a simple contrastive learning framework that greatly advances the state-of-the-art sentence embeddings. We first describe an unsupervised approach, which takes an input sentence and predicts <i>itself</i> in a contrastive objective, with only standard dropout used as noise. This simple method works surprisingly well, performing on par with previous supervised counterparts. We hypothesize that dropout acts as minimal data augmentation and removing it leads to a representation collapse. Then, we draw inspiration from the recent success of learning sentence embeddings from natural language inference（NLI）datasets and incorporate annotated pairs from NLI datasets into contrastive learning by using “entailment” pairs as pos- itives and “contradiction” pairs as hard negatives. We evaluate SimCSE on standard semantic textual similarity（STS）tasks, and our unsupervised and supervised models using BERTbase achieve an average of 74.5% and 81.6% Spearman’s correlation respectively, a 7.9 and 4.6 points improvement compared to previous best results. We also show that contrastive learning theoretically regularizes pretrained embeddings’ anisotropic space to be more uniform, and it better aligns positive pairs when supervised signals are available.</div>\n<hr />\n<h4 id=\"详细翻译中文摘要\"><a class=\"markdownIt-Anchor\" href=\"#详细翻译中文摘要\"></a> 详细翻译中文摘要</h4>\n<div style=\"text-align:justify;line-height:1.8rem\">文章主要介绍了SimCSE，一种简单对比学习框架，SimCSE对比学习框架极大的提高了最先进的句子嵌入技术。我们首先描述了一种无监督的方法，这种方法采用一个输入语句，并根据一个对比目标进行预测，仅使用标准的dropout作为噪声。这种简单方法非常好，表现的与以前的可监督方法水平不相上下。我们假设，dropout做为最小的数据增加和删除，它会导致表示崩溃。然后，我们从最近的自然语言推理（NLI）数据集的成功经验获得灵感，将来自NLI数据集中的注释合并到对比学习中，并使用“蕴含”作为正向，“矛盾”作为负向。我们在标准的语义-文本相似度（STS）任务中对SimSCE进行了评估，使用Bear的无监督和有监督模型的相关度平均达到74.5%和81.6%的Spearman相关度，与以前的最佳结果分别提高了7.9和4.6个点。我们也展示了相对学习理论使预训练嵌入的各向异性空间更加均匀，并在有监督信号的情况下可以更好的对其正向嵌入。</div>\n"},{"title":"SimCSE（九）","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"初步代码运行","abbrlink":"1e5f","date":"2021-05-05T07:41:25.000Z","password":null,"keywords":null,"description":null,"_content":"# SimCSE运行\n\n# 运行结果\n\n<img src=\"训练结果.png\" alt=\"训练结果\" style=\"zoom:67%;\" />\n\n---\n\n- 先安装好torch和所需库\n\n- 先下载评估数据，并且要安装wegt以便运行bash语句\n\n- ```sh\n  cd SentEval/data/downstream/\n  bash download_dataset.sh\n  ```\n\n- **经向作者发邮件咨询如何运行以及参数调试**\n\n- ```python\n  python evaluation.py --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased\n  ```\n\n- 运行语句设置\n\n- ```python\n  python evaluation.py \\\n      --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased \\\n      --pooler cls \\\n      --task_set sts \\\n      --mode test\n  ```\n\n## Evaluation\n\nArguments for the evaluation script are as follows,\n\n- `--model_name_or_path`: The name or path of a `transformers`-based pre-trained checkpoint. You can directly use the models in the above table, e.g., `princeton-nlp/sup-simcse-bert-base-uncased`.\n- `--pooler`: Pooling method. Now we support\n  - `cls` (default): Use the representation of `[CLS]` token. A linear+activation layer is applied after the representation (it's in the standard BERT implementation). If you use SimCSE, you should use this option.\n  - `cls_before_pooler`: Use the representation of `[CLS]` token without the extra linear+activation.\n  - `avg`: Average embeddings of the last layer. If you use checkpoints of SBERT/SRoBERTa ([paper](https://arxiv.org/abs/1908.10084)), you should use this option.\n  - `avg_top2`: Average embeddings of the last two layers.\n  - `avg_first_last`: Average embeddings of the first and last layers. If you use vanilla BERT or RoBERTa, this works the best.\n- `--mode`: Evaluation mode\n  - `test` (default): The default test mode. To faithfully reproduce our results, you should use this option.\n  - `dev`: Report the development set results. Note that in STS tasks, only `STS-B` and `SICK-R` have development sets, so we only report their numbers. It also takes a fast mode for transfer tasks, so the running time is much shorter than the `test` mode (though numbers are slightly lower).\n  - `fasttest`: It is the same as `test`, but with a fast mode so the running time is much shorter, but the reported numbers may be lower (only for transfer tasks).\n- `--task_set`: What set of tasks to evaluate on (if set, it will override `--tasks`)\n  - `sts` (default): Evaluate on STS tasks, including `STS 12~16`, `STS-B` and `SICK-R`. This is the most commonly-used set of tasks to evaluate the quality of sentence embeddings.\n  - `transfer`: Evaluate on transfer tasks.\n  - `full`: Evaluate on both STS and transfer tasks.\n  - `na`: Manually set tasks by `--tasks`.\n- `--tasks`: Specify which dataset(s) to evaluate on. Will be overridden if `--task_set` is not `na`. See the code for a full list of tasks.\n\n","source":"_posts/SimCSE（九）.md","raw":"---\ntitle: SimCSE（九）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 知识图谱\n  - SimCSE\n  - 代码\ncategories:\n  - 论文\nsummary: 初步代码运行\nabbrlink: 1e5f\ndate: 2021-05-05 15:41:25\npassword:\nkeywords:\ndescription:\n---\n# SimCSE运行\n\n# 运行结果\n\n<img src=\"训练结果.png\" alt=\"训练结果\" style=\"zoom:67%;\" />\n\n---\n\n- 先安装好torch和所需库\n\n- 先下载评估数据，并且要安装wegt以便运行bash语句\n\n- ```sh\n  cd SentEval/data/downstream/\n  bash download_dataset.sh\n  ```\n\n- **经向作者发邮件咨询如何运行以及参数调试**\n\n- ```python\n  python evaluation.py --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased\n  ```\n\n- 运行语句设置\n\n- ```python\n  python evaluation.py \\\n      --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased \\\n      --pooler cls \\\n      --task_set sts \\\n      --mode test\n  ```\n\n## Evaluation\n\nArguments for the evaluation script are as follows,\n\n- `--model_name_or_path`: The name or path of a `transformers`-based pre-trained checkpoint. You can directly use the models in the above table, e.g., `princeton-nlp/sup-simcse-bert-base-uncased`.\n- `--pooler`: Pooling method. Now we support\n  - `cls` (default): Use the representation of `[CLS]` token. A linear+activation layer is applied after the representation (it's in the standard BERT implementation). If you use SimCSE, you should use this option.\n  - `cls_before_pooler`: Use the representation of `[CLS]` token without the extra linear+activation.\n  - `avg`: Average embeddings of the last layer. If you use checkpoints of SBERT/SRoBERTa ([paper](https://arxiv.org/abs/1908.10084)), you should use this option.\n  - `avg_top2`: Average embeddings of the last two layers.\n  - `avg_first_last`: Average embeddings of the first and last layers. If you use vanilla BERT or RoBERTa, this works the best.\n- `--mode`: Evaluation mode\n  - `test` (default): The default test mode. To faithfully reproduce our results, you should use this option.\n  - `dev`: Report the development set results. Note that in STS tasks, only `STS-B` and `SICK-R` have development sets, so we only report their numbers. It also takes a fast mode for transfer tasks, so the running time is much shorter than the `test` mode (though numbers are slightly lower).\n  - `fasttest`: It is the same as `test`, but with a fast mode so the running time is much shorter, but the reported numbers may be lower (only for transfer tasks).\n- `--task_set`: What set of tasks to evaluate on (if set, it will override `--tasks`)\n  - `sts` (default): Evaluate on STS tasks, including `STS 12~16`, `STS-B` and `SICK-R`. This is the most commonly-used set of tasks to evaluate the quality of sentence embeddings.\n  - `transfer`: Evaluate on transfer tasks.\n  - `full`: Evaluate on both STS and transfer tasks.\n  - `na`: Manually set tasks by `--tasks`.\n- `--tasks`: Specify which dataset(s) to evaluate on. Will be overridden if `--task_set` is not `na`. See the code for a full list of tasks.\n\n","slug":"SimCSE（九）","published":1,"updated":"2021-05-05T07:44:17.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi9001kzl9k2waj8h2x","content":"<h1 id=\"simcse运行\"><a class=\"markdownIt-Anchor\" href=\"#simcse运行\"></a> SimCSE运行</h1>\n<h1 id=\"运行结果\"><a class=\"markdownIt-Anchor\" href=\"#运行结果\"></a> 运行结果</h1>\n<img src=\"训练结果.png\" alt=\"训练结果\" style=\"zoom:67%;\">\n<hr>\n<ul>\n<li>\n<p>先安装好torch和所需库</p>\n</li>\n<li>\n<p>先下载评估数据，并且要安装wegt以便运行bash语句</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"sh\"><span class=\"hljs-built_in\">cd</span> SentEval/data/downstream/\nbash download_dataset.sh\n</code></pre>\n</li>\n<li>\n<p><strong>经向作者发邮件咨询如何运行以及参数调试</strong></p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"python\">python evaluation.py --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased\n</code></pre>\n</li>\n<li>\n<p>运行语句设置</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"python\">python evaluation.py \\\n    --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased \\\n    --pooler cls \\\n    --task_set sts \\\n    --mode test\n</code></pre>\n</li>\n</ul>\n<h2 id=\"evaluation\"><a class=\"markdownIt-Anchor\" href=\"#evaluation\"></a> Evaluation</h2>\n<p>Arguments for the evaluation script are as follows,</p>\n<ul>\n<li><code>--model_name_or_path</code>: The name or path of a <code>transformers</code>-based pre-trained checkpoint. You can directly use the models in the above table, e.g., <code>princeton-nlp/sup-simcse-bert-base-uncased</code>.</li>\n<li><code>--pooler</code>: Pooling method. Now we support\n<ul>\n<li><code>cls</code> (default): Use the representation of <code>[CLS]</code> token. A linear+activation layer is applied after the representation (it’s in the standard BERT implementation). If you use SimCSE, you should use this option.</li>\n<li><code>cls_before_pooler</code>: Use the representation of <code>[CLS]</code> token without the extra linear+activation.</li>\n<li><code>avg</code>: Average embeddings of the last layer. If you use checkpoints of SBERT/SRoBERTa (<a href=\"https://arxiv.org/abs/1908.10084\" target=\"_blank\" rel=\"noopener\">paper</a>), you should use this option.</li>\n<li><code>avg_top2</code>: Average embeddings of the last two layers.</li>\n<li><code>avg_first_last</code>: Average embeddings of the first and last layers. If you use vanilla BERT or RoBERTa, this works the best.</li>\n</ul>\n</li>\n<li><code>--mode</code>: Evaluation mode\n<ul>\n<li><code>test</code> (default): The default test mode. To faithfully reproduce our results, you should use this option.</li>\n<li><code>dev</code>: Report the development set results. Note that in STS tasks, only <code>STS-B</code> and <code>SICK-R</code> have development sets, so we only report their numbers. It also takes a fast mode for transfer tasks, so the running time is much shorter than the <code>test</code> mode (though numbers are slightly lower).</li>\n<li><code>fasttest</code>: It is the same as <code>test</code>, but with a fast mode so the running time is much shorter, but the reported numbers may be lower (only for transfer tasks).</li>\n</ul>\n</li>\n<li><code>--task_set</code>: What set of tasks to evaluate on (if set, it will override <code>--tasks</code>)\n<ul>\n<li><code>sts</code> (default): Evaluate on STS tasks, including <code>STS 12~16</code>, <code>STS-B</code> and <code>SICK-R</code>. This is the most commonly-used set of tasks to evaluate the quality of sentence embeddings.</li>\n<li><code>transfer</code>: Evaluate on transfer tasks.</li>\n<li><code>full</code>: Evaluate on both STS and transfer tasks.</li>\n<li><code>na</code>: Manually set tasks by <code>--tasks</code>.</li>\n</ul>\n</li>\n<li><code>--tasks</code>: Specify which dataset(s) to evaluate on. Will be overridden if <code>--task_set</code> is not <code>na</code>. See the code for a full list of tasks.</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"simcse运行\"><a class=\"markdownIt-Anchor\" href=\"#simcse运行\"></a> SimCSE运行</h1>\n<h1 id=\"运行结果\"><a class=\"markdownIt-Anchor\" href=\"#运行结果\"></a> 运行结果</h1>\n<img src=\"训练结果.png\" alt=\"训练结果\" style=\"zoom:67%;\" />\n<hr />\n<ul>\n<li>\n<p>先安装好torch和所需库</p>\n</li>\n<li>\n<p>先下载评估数据，并且要安装wegt以便运行bash语句</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"sh\"><span class=\"hljs-built_in\">cd</span> SentEval/data/downstream/\nbash download_dataset.sh\n</code></pre>\n</li>\n<li>\n<p><strong>经向作者发邮件咨询如何运行以及参数调试</strong></p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"python\">python evaluation.py --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased\n</code></pre>\n</li>\n<li>\n<p>运行语句设置</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"python\">python evaluation.py \\\n    --model_name_or_path princeton-nlp/sup-simcse-bert-base-uncased \\\n    --pooler cls \\\n    --task_set sts \\\n    --mode test\n</code></pre>\n</li>\n</ul>\n<h2 id=\"evaluation\"><a class=\"markdownIt-Anchor\" href=\"#evaluation\"></a> Evaluation</h2>\n<p>Arguments for the evaluation script are as follows,</p>\n<ul>\n<li><code>--model_name_or_path</code>: The name or path of a <code>transformers</code>-based pre-trained checkpoint. You can directly use the models in the above table, e.g., <code>princeton-nlp/sup-simcse-bert-base-uncased</code>.</li>\n<li><code>--pooler</code>: Pooling method. Now we support\n<ul>\n<li><code>cls</code> (default): Use the representation of <code>[CLS]</code> token. A linear+activation layer is applied after the representation (it’s in the standard BERT implementation). If you use SimCSE, you should use this option.</li>\n<li><code>cls_before_pooler</code>: Use the representation of <code>[CLS]</code> token without the extra linear+activation.</li>\n<li><code>avg</code>: Average embeddings of the last layer. If you use checkpoints of SBERT/SRoBERTa (<a href=\"https://arxiv.org/abs/1908.10084\" target=\"_blank\" rel=\"noopener\">paper</a>), you should use this option.</li>\n<li><code>avg_top2</code>: Average embeddings of the last two layers.</li>\n<li><code>avg_first_last</code>: Average embeddings of the first and last layers. If you use vanilla BERT or RoBERTa, this works the best.</li>\n</ul>\n</li>\n<li><code>--mode</code>: Evaluation mode\n<ul>\n<li><code>test</code> (default): The default test mode. To faithfully reproduce our results, you should use this option.</li>\n<li><code>dev</code>: Report the development set results. Note that in STS tasks, only <code>STS-B</code> and <code>SICK-R</code> have development sets, so we only report their numbers. It also takes a fast mode for transfer tasks, so the running time is much shorter than the <code>test</code> mode (though numbers are slightly lower).</li>\n<li><code>fasttest</code>: It is the same as <code>test</code>, but with a fast mode so the running time is much shorter, but the reported numbers may be lower (only for transfer tasks).</li>\n</ul>\n</li>\n<li><code>--task_set</code>: What set of tasks to evaluate on (if set, it will override <code>--tasks</code>)\n<ul>\n<li><code>sts</code> (default): Evaluate on STS tasks, including <code>STS 12~16</code>, <code>STS-B</code> and <code>SICK-R</code>. This is the most commonly-used set of tasks to evaluate the quality of sentence embeddings.</li>\n<li><code>transfer</code>: Evaluate on transfer tasks.</li>\n<li><code>full</code>: Evaluate on both STS and transfer tasks.</li>\n<li><code>na</code>: Manually set tasks by <code>--tasks</code>.</li>\n</ul>\n</li>\n<li><code>--tasks</code>: Specify which dataset(s) to evaluate on. Will be overridden if <code>--task_set</code> is not <code>na</code>. See the code for a full list of tasks.</li>\n</ul>\n"},{"title":"SimCSE（八）","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"代码环境配置","abbrlink":"4201","date":"2021-05-04T07:35:14.000Z","password":null,"keywords":null,"description":null,"_content":"# SimCSE代码Mac配置\n\n- 安装conda虚拟环境https://github.com/conda-forge/miniforge/#download\n\n- ```shell\n  bash Miniforge3-MacOSX-arm64.sh\n  ```\n\n- 配置环境变量\n\n- ```shell\n  vim ~/.bash_profile\n  export PATH=\"/Users/leng/miniforge3/bin:$PATH\"\n  #刷新变量\n  source $HOME/.bash_profile\n  ```\n\n- 创建python虚拟环境\n\n- ```shell\n  conda create -n py38 python=3.8\n  # 激活环境\n  source activate\n  # 打开虚拟环境\n  conda activate py38\n  # 退出环境\n  source deactivate\n  ```\n\n- 创造Virtualenv虚拟环境\n\n- ```shell\n  # 在项目目录下生成venv目录\n  python -m venv venv\n  # 将下载好的安装脚本放在venv同级目录下，安装\n  bash download_and_install.sh\n  # 输入虚拟环境的路径，注意要以venv结尾\n  ```\n\n  \n\n","source":"_posts/SimCSE（八）.md","raw":"---\ntitle: SimCSE（八）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 知识图谱\n  - SimCSE\n  - 代码\ncategories:\n  - 论文\nsummary: 代码环境配置\nabbrlink: '4201'\ndate: 2021-05-04 15:35:14\npassword:\nkeywords:\ndescription:\n---\n# SimCSE代码Mac配置\n\n- 安装conda虚拟环境https://github.com/conda-forge/miniforge/#download\n\n- ```shell\n  bash Miniforge3-MacOSX-arm64.sh\n  ```\n\n- 配置环境变量\n\n- ```shell\n  vim ~/.bash_profile\n  export PATH=\"/Users/leng/miniforge3/bin:$PATH\"\n  #刷新变量\n  source $HOME/.bash_profile\n  ```\n\n- 创建python虚拟环境\n\n- ```shell\n  conda create -n py38 python=3.8\n  # 激活环境\n  source activate\n  # 打开虚拟环境\n  conda activate py38\n  # 退出环境\n  source deactivate\n  ```\n\n- 创造Virtualenv虚拟环境\n\n- ```shell\n  # 在项目目录下生成venv目录\n  python -m venv venv\n  # 将下载好的安装脚本放在venv同级目录下，安装\n  bash download_and_install.sh\n  # 输入虚拟环境的路径，注意要以venv结尾\n  ```\n\n  \n\n","slug":"SimCSE（八）","published":1,"updated":"2021-05-04T07:36:51.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdi9001nzl9k3taze0k9","content":"<h1 id=\"simcse代码mac配置\"><a class=\"markdownIt-Anchor\" href=\"#simcse代码mac配置\"></a> SimCSE代码Mac配置</h1>\n<ul>\n<li>\n<p>安装conda虚拟环境https://github.com/conda-forge/miniforge/#download</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\">bash Miniforge3-MacOSX-arm64.sh\n</code></pre>\n</li>\n<li>\n<p>配置环境变量</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\">vim ~/.bash_profile\nexport PATH=\"/Users/leng/miniforge3/bin:$PATH\"\n<span class=\"hljs-meta\">#</span><span class=\"bash\">刷新变量</span>\nsource $HOME/.bash_profile\n</code></pre>\n</li>\n<li>\n<p>创建python虚拟环境</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\">conda create -n py38 python=3.8\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 激活环境</span>\nsource activate\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 打开虚拟环境</span>\nconda activate py38\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 退出环境</span>\nsource deactivate\n</code></pre>\n</li>\n<li>\n<p>创造Virtualenv虚拟环境</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 在项目目录下生成venv目录</span>\npython -m venv venv\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 将下载好的安装脚本放在venv同级目录下，安装</span>\nbash download_and_install.sh\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 输入虚拟环境的路径，注意要以venv结尾</span>\n</code></pre>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"simcse代码mac配置\"><a class=\"markdownIt-Anchor\" href=\"#simcse代码mac配置\"></a> SimCSE代码Mac配置</h1>\n<ul>\n<li>\n<p>安装conda虚拟环境https://github.com/conda-forge/miniforge/#download</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\">bash Miniforge3-MacOSX-arm64.sh\n</code></pre>\n</li>\n<li>\n<p>配置环境变量</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\">vim ~/.bash_profile\nexport PATH=\"/Users/leng/miniforge3/bin:$PATH\"\n<span class=\"hljs-meta\">#</span><span class=\"bash\">刷新变量</span>\nsource $HOME/.bash_profile\n</code></pre>\n</li>\n<li>\n<p>创建python虚拟环境</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\">conda create -n py38 python=3.8\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 激活环境</span>\nsource activate\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 打开虚拟环境</span>\nconda activate py38\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 退出环境</span>\nsource deactivate\n</code></pre>\n</li>\n<li>\n<p>创造Virtualenv虚拟环境</p>\n</li>\n<li>\n<pre class=\"highlight\"><code class=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 在项目目录下生成venv目录</span>\npython -m venv venv\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 将下载好的安装脚本放在venv同级目录下，安装</span>\nbash download_and_install.sh\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 输入虚拟环境的路径，注意要以venv结尾</span>\n</code></pre>\n</li>\n</ul>\n"},{"title":"SimCSE（十）","top":false,"cover":false,"toc":false,"mathjax":true,"date":"2021-05-06T12:47:14.000Z","password":null,"keywords":null,"description":null,"summary":"SimCSE归纳总结","_content":"# SimCSE归纳总结\n\n1. SimCSE，运用了dropout的方法替换了原有的数据增强方法，将输入两次dropout产生的结果当作学习的正例\n\n   - 为什么要进行数据增强：在深度学习中，一般要求样本的数量要充足，样本数量越多，训练出来的模型效果越好，模型的泛化能力越强。但是实际中，样本数量不足或者样本质量不够好，这就要对样本做数据增强，来提高样本质量\n\n   - 传统数据增强方法：\n     - 图片：如果数据集都是图片类，可以运用翻转，旋转，缩放，剪裁，平移，添加噪声\n     - 文本：数据是文本类的，可以使用回译，替换同义词，随机插入一个词语，随机交换词语，p概率删除一个词语\n\n2. 用**自然语言推理NLI**的数据用于有监督的对比学习：自然语言推理研究一个假设是否可以从一个前提中推断出来，假设和前提都是文本序列。换句话说，自然语言推理决定了一对文本序列之间的逻辑关系。这种关系通常分为三类：       \n\n   - 蕴涵：假设可以从前提中推断出来。       \n\n   - 矛盾：假设的否定可以从前提推断出来。       \n\n   - 中立：所有其情况。       \n\n自然语言推理也被称为识别文本蕴涵任务。例如，下面的一对会被标记为蕴涵，因为假设中的“示爱”可以从前提中的“拥抱”中推断出来。       \n\n前提：两个女人互相拥抱。       \n\n假设：两个女人在表达爱意。       \n\n下面是一个矛盾的例子，因为“运行代码”表示“不睡觉”而不是“睡眠”。       \n\n前提：一个男人正在运行一个代码示例\n\n假设：这个人正在睡觉。       \n\n第三个例子显示了一种中立关系，因为“为演出”的事实不能推断出“著名”和“不出名”。       \n\n前提：音乐家正在表演。       \n\n假设：音乐家是有名的。       \n\n3. 有监督学习(supervised learning)和无监督学习(unsupervised learning)\n\n   - supervised learning：通过已有的样本去群里安处一个最优模型，再利用这个模型将就可以将其他的未知数据输入，得到已知的分类。就像小时候父母告诉我们这个是苹果，这个是狗，这就是已构建好的模型和函数以及分类，当身边没有大人时，当我们看到类似的东西时，也可以分辨出其他的水果以及动物。经典有监督学习（KNN，SVM以后学习一下）\n   - unsupervised learning：我们没有任何训练样本，直接利用已有数据进行建模。比如我们去参观一个画展，我们完全对艺术一无所知，但是欣赏完多幅作品之后，我们也能把它们分成不同的派别（比如哪些更朦胧一点，哪些更写实一些，即使我们不知道什么叫做朦胧派，什么叫做写实派，但是至少我们能把他们分为两个类）。无监督学习里典型的例子就是聚类了。聚类的目的在于把相似的东西聚在一起，而我们并不关心这一类是什么。因此，一个聚类算法通常只需要知道如何计算相似度就可以开始工作了。\n   - 有训练样本就用有监督学习，没有训练样本肯定用不了有监督学习。但现实中，在没有训练样本的情况下，我们可以通过人工标注一些样本，然后去用有监督的方法去做\n\n4. 泛化误差：对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为**泛化误差**。\n\n   - 训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络**过度拟合了训练集**，对训练集以外的数据却不work。\n\n   <img src=\"拟合对比.png\" alt=\"拟合对比\"  />\n\n   - 具体过拟合欠拟合等解决办法见http://blog.bangbangbangbang.top/posts/5c43.html/\n\n5. Dropout：是一种防止过拟合的方法，处理过后也可作为新数据加入数据集中，增加数据集的多样性。\n\n   - 在每次训练中，减少每个相关元素之间一半的关联，就可以明显减少过拟合现象。通过这种方法，可以减少相关元素之间的相互作用，可以使模型的泛化能力更强，因为不会过于依赖某些局部特征\n\n   <img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\" />\n\n6. 对比表示学习（Contrastive Representation Learning）\n   - 主要是要**构建正样本$x^+$和负样本$x^-$**，正例就是与x相似的数据，负例就是与x不同的数据\n   - 在论文[Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere](http://blog.bangbangbangbang.top/posts/3b4c.html/ICML2020.pdf)中指出了对比学习的两个指标\n   - **Alignment**对齐性，针对正例：计算正例对之间的向量距离的期望，越相似的正例对之间的alignment程度越高，距离越小。\n   - **Uniformity**均匀性，针对负例：所有数据的向量分布越均匀，保留的信息越多。最极端的反例，所有数据都映射到单位超球面的同一点上，这就极度违背了uniformity原则，这代表数据的所有信息都没了，只有一个点的信息了。负例对之间，距离越远愈好\n   - 这篇论文也采用这两个指标来衡量生成的句子向量，alignment和uniformity越低，向量的质量越高，在STS任务上的Spearman相关系数越高。spearman是一种相关系数方法\n\n7. 论文中的SimCSE方法\n\n   - Unsupervised SimCSE：引入dropout给输入加入噪声，假设加入噪声后的输入与原始输入在语义空间上距离相近。然后将相同的语句输入两次给预训练模型，得到一个正例对。因为dropout每次是以p概率隐去一半的相关性，所以相同输入所传出的值每次都是不同的，可以用作正例。\n\n   - supervised SimCSE：利用标注数据来构造对比学习的正负例子，最终选择NLI作为数据集\n\n8. 熵entropy\n   - 熵**(Entropy)**：可以表示一个事件A的自信息量，也就是A包含多少信息。\n   - KL散度**(Kullback-Leibler Divergence)**：可以用来表示从事件A的角度来看，事件B有多大不同。\n   - 交叉熵**(Cross Entropy)**：可以用来表示从事件A的角度来看，如何描述事件B。\n   - **KL散度可以被用于计算代价，而在特定情况下最小化KL散度等价于最小化交叉熵。而交叉熵的运算更简单，所以用交叉熵来当做代价**。","source":"_posts/SimCSE（十）.md","raw":"---\ntitle: SimCSE（十）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\ndate: 2021-05-06 20:47:14\npassword:\nkeywords:\ndescription:\nsummary: SimCSE归纳总结\n---\n# SimCSE归纳总结\n\n1. SimCSE，运用了dropout的方法替换了原有的数据增强方法，将输入两次dropout产生的结果当作学习的正例\n\n   - 为什么要进行数据增强：在深度学习中，一般要求样本的数量要充足，样本数量越多，训练出来的模型效果越好，模型的泛化能力越强。但是实际中，样本数量不足或者样本质量不够好，这就要对样本做数据增强，来提高样本质量\n\n   - 传统数据增强方法：\n     - 图片：如果数据集都是图片类，可以运用翻转，旋转，缩放，剪裁，平移，添加噪声\n     - 文本：数据是文本类的，可以使用回译，替换同义词，随机插入一个词语，随机交换词语，p概率删除一个词语\n\n2. 用**自然语言推理NLI**的数据用于有监督的对比学习：自然语言推理研究一个假设是否可以从一个前提中推断出来，假设和前提都是文本序列。换句话说，自然语言推理决定了一对文本序列之间的逻辑关系。这种关系通常分为三类：       \n\n   - 蕴涵：假设可以从前提中推断出来。       \n\n   - 矛盾：假设的否定可以从前提推断出来。       \n\n   - 中立：所有其情况。       \n\n自然语言推理也被称为识别文本蕴涵任务。例如，下面的一对会被标记为蕴涵，因为假设中的“示爱”可以从前提中的“拥抱”中推断出来。       \n\n前提：两个女人互相拥抱。       \n\n假设：两个女人在表达爱意。       \n\n下面是一个矛盾的例子，因为“运行代码”表示“不睡觉”而不是“睡眠”。       \n\n前提：一个男人正在运行一个代码示例\n\n假设：这个人正在睡觉。       \n\n第三个例子显示了一种中立关系，因为“为演出”的事实不能推断出“著名”和“不出名”。       \n\n前提：音乐家正在表演。       \n\n假设：音乐家是有名的。       \n\n3. 有监督学习(supervised learning)和无监督学习(unsupervised learning)\n\n   - supervised learning：通过已有的样本去群里安处一个最优模型，再利用这个模型将就可以将其他的未知数据输入，得到已知的分类。就像小时候父母告诉我们这个是苹果，这个是狗，这就是已构建好的模型和函数以及分类，当身边没有大人时，当我们看到类似的东西时，也可以分辨出其他的水果以及动物。经典有监督学习（KNN，SVM以后学习一下）\n   - unsupervised learning：我们没有任何训练样本，直接利用已有数据进行建模。比如我们去参观一个画展，我们完全对艺术一无所知，但是欣赏完多幅作品之后，我们也能把它们分成不同的派别（比如哪些更朦胧一点，哪些更写实一些，即使我们不知道什么叫做朦胧派，什么叫做写实派，但是至少我们能把他们分为两个类）。无监督学习里典型的例子就是聚类了。聚类的目的在于把相似的东西聚在一起，而我们并不关心这一类是什么。因此，一个聚类算法通常只需要知道如何计算相似度就可以开始工作了。\n   - 有训练样本就用有监督学习，没有训练样本肯定用不了有监督学习。但现实中，在没有训练样本的情况下，我们可以通过人工标注一些样本，然后去用有监督的方法去做\n\n4. 泛化误差：对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为**泛化误差**。\n\n   - 训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络**过度拟合了训练集**，对训练集以外的数据却不work。\n\n   <img src=\"拟合对比.png\" alt=\"拟合对比\"  />\n\n   - 具体过拟合欠拟合等解决办法见http://blog.bangbangbangbang.top/posts/5c43.html/\n\n5. Dropout：是一种防止过拟合的方法，处理过后也可作为新数据加入数据集中，增加数据集的多样性。\n\n   - 在每次训练中，减少每个相关元素之间一半的关联，就可以明显减少过拟合现象。通过这种方法，可以减少相关元素之间的相互作用，可以使模型的泛化能力更强，因为不会过于依赖某些局部特征\n\n   <img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\" />\n\n6. 对比表示学习（Contrastive Representation Learning）\n   - 主要是要**构建正样本$x^+$和负样本$x^-$**，正例就是与x相似的数据，负例就是与x不同的数据\n   - 在论文[Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere](http://blog.bangbangbangbang.top/posts/3b4c.html/ICML2020.pdf)中指出了对比学习的两个指标\n   - **Alignment**对齐性，针对正例：计算正例对之间的向量距离的期望，越相似的正例对之间的alignment程度越高，距离越小。\n   - **Uniformity**均匀性，针对负例：所有数据的向量分布越均匀，保留的信息越多。最极端的反例，所有数据都映射到单位超球面的同一点上，这就极度违背了uniformity原则，这代表数据的所有信息都没了，只有一个点的信息了。负例对之间，距离越远愈好\n   - 这篇论文也采用这两个指标来衡量生成的句子向量，alignment和uniformity越低，向量的质量越高，在STS任务上的Spearman相关系数越高。spearman是一种相关系数方法\n\n7. 论文中的SimCSE方法\n\n   - Unsupervised SimCSE：引入dropout给输入加入噪声，假设加入噪声后的输入与原始输入在语义空间上距离相近。然后将相同的语句输入两次给预训练模型，得到一个正例对。因为dropout每次是以p概率隐去一半的相关性，所以相同输入所传出的值每次都是不同的，可以用作正例。\n\n   - supervised SimCSE：利用标注数据来构造对比学习的正负例子，最终选择NLI作为数据集\n\n8. 熵entropy\n   - 熵**(Entropy)**：可以表示一个事件A的自信息量，也就是A包含多少信息。\n   - KL散度**(Kullback-Leibler Divergence)**：可以用来表示从事件A的角度来看，事件B有多大不同。\n   - 交叉熵**(Cross Entropy)**：可以用来表示从事件A的角度来看，如何描述事件B。\n   - **KL散度可以被用于计算代价，而在特定情况下最小化KL散度等价于最小化交叉熵。而交叉熵的运算更简单，所以用交叉熵来当做代价**。","slug":"SimCSE（十）","published":1,"updated":"2021-05-06T12:49:23.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdia001rzl9kgsxd9tak","content":"<h1 id=\"simcse归纳总结\"><a class=\"markdownIt-Anchor\" href=\"#simcse归纳总结\"></a> SimCSE归纳总结</h1>\n<ol>\n<li>\n<p>SimCSE，运用了dropout的方法替换了原有的数据增强方法，将输入两次dropout产生的结果当作学习的正例</p>\n<ul>\n<li>\n<p>为什么要进行数据增强：在深度学习中，一般要求样本的数量要充足，样本数量越多，训练出来的模型效果越好，模型的泛化能力越强。但是实际中，样本数量不足或者样本质量不够好，这就要对样本做数据增强，来提高样本质量</p>\n</li>\n<li>\n<p>传统数据增强方法：</p>\n<ul>\n<li>图片：如果数据集都是图片类，可以运用翻转，旋转，缩放，剪裁，平移，添加噪声</li>\n<li>文本：数据是文本类的，可以使用回译，替换同义词，随机插入一个词语，随机交换词语，p概率删除一个词语</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>用<strong>自然语言推理NLI</strong>的数据用于有监督的对比学习：自然语言推理研究一个假设是否可以从一个前提中推断出来，假设和前提都是文本序列。换句话说，自然语言推理决定了一对文本序列之间的逻辑关系。这种关系通常分为三类：</p>\n<ul>\n<li>\n<p>蕴涵：假设可以从前提中推断出来。</p>\n</li>\n<li>\n<p>矛盾：假设的否定可以从前提推断出来。</p>\n</li>\n<li>\n<p>中立：所有其情况。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>自然语言推理也被称为识别文本蕴涵任务。例如，下面的一对会被标记为蕴涵，因为假设中的“示爱”可以从前提中的“拥抱”中推断出来。</p>\n<p>前提：两个女人互相拥抱。</p>\n<p>假设：两个女人在表达爱意。</p>\n<p>下面是一个矛盾的例子，因为“运行代码”表示“不睡觉”而不是“睡眠”。</p>\n<p>前提：一个男人正在运行一个代码示例</p>\n<p>假设：这个人正在睡觉。</p>\n<p>第三个例子显示了一种中立关系，因为“为演出”的事实不能推断出“著名”和“不出名”。</p>\n<p>前提：音乐家正在表演。</p>\n<p>假设：音乐家是有名的。</p>\n<ol start=\"3\">\n<li>\n<p>有监督学习(supervised learning)和无监督学习(unsupervised learning)</p>\n<ul>\n<li>supervised learning：通过已有的样本去群里安处一个最优模型，再利用这个模型将就可以将其他的未知数据输入，得到已知的分类。就像小时候父母告诉我们这个是苹果，这个是狗，这就是已构建好的模型和函数以及分类，当身边没有大人时，当我们看到类似的东西时，也可以分辨出其他的水果以及动物。经典有监督学习（KNN，SVM以后学习一下）</li>\n<li>unsupervised learning：我们没有任何训练样本，直接利用已有数据进行建模。比如我们去参观一个画展，我们完全对艺术一无所知，但是欣赏完多幅作品之后，我们也能把它们分成不同的派别（比如哪些更朦胧一点，哪些更写实一些，即使我们不知道什么叫做朦胧派，什么叫做写实派，但是至少我们能把他们分为两个类）。无监督学习里典型的例子就是聚类了。聚类的目的在于把相似的东西聚在一起，而我们并不关心这一类是什么。因此，一个聚类算法通常只需要知道如何计算相似度就可以开始工作了。</li>\n<li>有训练样本就用有监督学习，没有训练样本肯定用不了有监督学习。但现实中，在没有训练样本的情况下，我们可以通过人工标注一些样本，然后去用有监督的方法去做</li>\n</ul>\n</li>\n<li>\n<p>泛化误差：对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为<strong>泛化误差</strong>。</p>\n<ul>\n<li>训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络<strong>过度拟合了训练集</strong>，对训练集以外的数据却不work。</li>\n</ul>\n<img src=\"拟合对比.png\" alt=\"拟合对比\">\n<ul>\n<li>具体过拟合欠拟合等解决办法见http://blog.bangbangbangbang.top/posts/5c43.html/</li>\n</ul>\n</li>\n<li>\n<p>Dropout：是一种防止过拟合的方法，处理过后也可作为新数据加入数据集中，增加数据集的多样性。</p>\n<ul>\n<li>在每次训练中，减少每个相关元素之间一半的关联，就可以明显减少过拟合现象。通过这种方法，可以减少相关元素之间的相互作用，可以使模型的泛化能力更强，因为不会过于依赖某些局部特征</li>\n</ul>\n<img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\">\n</li>\n<li>\n<p>对比表示学习（Contrastive Representation Learning）</p>\n<ul>\n<li>主要是要<strong>构建正样本<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>和负样本<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mo>−</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span></span></span></span></span></span></span></span></strong>，正例就是与x相似的数据，负例就是与x不同的数据</li>\n<li>在论文<a href=\"http://blog.bangbangbangbang.top/posts/3b4c.html/ICML2020.pdf\">Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere</a>中指出了对比学习的两个指标</li>\n<li><strong>Alignment</strong>对齐性，针对正例：计算正例对之间的向量距离的期望，越相似的正例对之间的alignment程度越高，距离越小。</li>\n<li><strong>Uniformity</strong>均匀性，针对负例：所有数据的向量分布越均匀，保留的信息越多。最极端的反例，所有数据都映射到单位超球面的同一点上，这就极度违背了uniformity原则，这代表数据的所有信息都没了，只有一个点的信息了。负例对之间，距离越远愈好</li>\n<li>这篇论文也采用这两个指标来衡量生成的句子向量，alignment和uniformity越低，向量的质量越高，在STS任务上的Spearman相关系数越高。spearman是一种相关系数方法</li>\n</ul>\n</li>\n<li>\n<p>论文中的SimCSE方法</p>\n<ul>\n<li>\n<p>Unsupervised SimCSE：引入dropout给输入加入噪声，假设加入噪声后的输入与原始输入在语义空间上距离相近。然后将相同的语句输入两次给预训练模型，得到一个正例对。因为dropout每次是以p概率隐去一半的相关性，所以相同输入所传出的值每次都是不同的，可以用作正例。</p>\n</li>\n<li>\n<p>supervised SimCSE：利用标注数据来构造对比学习的正负例子，最终选择NLI作为数据集</p>\n</li>\n</ul>\n</li>\n<li>\n<p>熵entropy</p>\n<ul>\n<li>熵**(Entropy)**：可以表示一个事件A的自信息量，也就是A包含多少信息。</li>\n<li>KL散度**(Kullback-Leibler Divergence)**：可以用来表示从事件A的角度来看，事件B有多大不同。</li>\n<li>交叉熵**(Cross Entropy)**：可以用来表示从事件A的角度来看，如何描述事件B。</li>\n<li><strong>KL散度可以被用于计算代价，而在特定情况下最小化KL散度等价于最小化交叉熵。而交叉熵的运算更简单，所以用交叉熵来当做代价</strong>。</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"abbrlink":"9be8","excerpt":"","more":"<h1 id=\"simcse归纳总结\"><a class=\"markdownIt-Anchor\" href=\"#simcse归纳总结\"></a> SimCSE归纳总结</h1>\n<ol>\n<li>\n<p>SimCSE，运用了dropout的方法替换了原有的数据增强方法，将输入两次dropout产生的结果当作学习的正例</p>\n<ul>\n<li>\n<p>为什么要进行数据增强：在深度学习中，一般要求样本的数量要充足，样本数量越多，训练出来的模型效果越好，模型的泛化能力越强。但是实际中，样本数量不足或者样本质量不够好，这就要对样本做数据增强，来提高样本质量</p>\n</li>\n<li>\n<p>传统数据增强方法：</p>\n<ul>\n<li>图片：如果数据集都是图片类，可以运用翻转，旋转，缩放，剪裁，平移，添加噪声</li>\n<li>文本：数据是文本类的，可以使用回译，替换同义词，随机插入一个词语，随机交换词语，p概率删除一个词语</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>用<strong>自然语言推理NLI</strong>的数据用于有监督的对比学习：自然语言推理研究一个假设是否可以从一个前提中推断出来，假设和前提都是文本序列。换句话说，自然语言推理决定了一对文本序列之间的逻辑关系。这种关系通常分为三类：</p>\n<ul>\n<li>\n<p>蕴涵：假设可以从前提中推断出来。</p>\n</li>\n<li>\n<p>矛盾：假设的否定可以从前提推断出来。</p>\n</li>\n<li>\n<p>中立：所有其情况。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>自然语言推理也被称为识别文本蕴涵任务。例如，下面的一对会被标记为蕴涵，因为假设中的“示爱”可以从前提中的“拥抱”中推断出来。</p>\n<p>前提：两个女人互相拥抱。</p>\n<p>假设：两个女人在表达爱意。</p>\n<p>下面是一个矛盾的例子，因为“运行代码”表示“不睡觉”而不是“睡眠”。</p>\n<p>前提：一个男人正在运行一个代码示例</p>\n<p>假设：这个人正在睡觉。</p>\n<p>第三个例子显示了一种中立关系，因为“为演出”的事实不能推断出“著名”和“不出名”。</p>\n<p>前提：音乐家正在表演。</p>\n<p>假设：音乐家是有名的。</p>\n<ol start=\"3\">\n<li>\n<p>有监督学习(supervised learning)和无监督学习(unsupervised learning)</p>\n<ul>\n<li>supervised learning：通过已有的样本去群里安处一个最优模型，再利用这个模型将就可以将其他的未知数据输入，得到已知的分类。就像小时候父母告诉我们这个是苹果，这个是狗，这就是已构建好的模型和函数以及分类，当身边没有大人时，当我们看到类似的东西时，也可以分辨出其他的水果以及动物。经典有监督学习（KNN，SVM以后学习一下）</li>\n<li>unsupervised learning：我们没有任何训练样本，直接利用已有数据进行建模。比如我们去参观一个画展，我们完全对艺术一无所知，但是欣赏完多幅作品之后，我们也能把它们分成不同的派别（比如哪些更朦胧一点，哪些更写实一些，即使我们不知道什么叫做朦胧派，什么叫做写实派，但是至少我们能把他们分为两个类）。无监督学习里典型的例子就是聚类了。聚类的目的在于把相似的东西聚在一起，而我们并不关心这一类是什么。因此，一个聚类算法通常只需要知道如何计算相似度就可以开始工作了。</li>\n<li>有训练样本就用有监督学习，没有训练样本肯定用不了有监督学习。但现实中，在没有训练样本的情况下，我们可以通过人工标注一些样本，然后去用有监督的方法去做</li>\n</ul>\n</li>\n<li>\n<p>泛化误差：对于深度学习或机器学习模型而言，我们不仅要求它对训练数据集有很好的拟合（训练误差），同时也希望它可以对未知数据集（测试集）有很好的拟合结果（泛化能力），所产生的测试误差被称为<strong>泛化误差</strong>。</p>\n<ul>\n<li>训练刚开始的时候，模型还在学习过程中，处于欠拟合区域。随着训练的进行，训练误差和测试误差都下降。在到达一个临界点之后，训练集的误差下降，测试集的误差上升了，这个时候就进入了过拟合区域——由于训练出来的网络<strong>过度拟合了训练集</strong>，对训练集以外的数据却不work。</li>\n</ul>\n<img src=\"拟合对比.png\" alt=\"拟合对比\"  />\n<ul>\n<li>具体过拟合欠拟合等解决办法见http://blog.bangbangbangbang.top/posts/5c43.html/</li>\n</ul>\n</li>\n<li>\n<p>Dropout：是一种防止过拟合的方法，处理过后也可作为新数据加入数据集中，增加数据集的多样性。</p>\n<ul>\n<li>在每次训练中，减少每个相关元素之间一半的关联，就可以明显减少过拟合现象。通过这种方法，可以减少相关元素之间的相互作用，可以使模型的泛化能力更强，因为不会过于依赖某些局部特征</li>\n</ul>\n<img src=\"dropout.jpeg\" alt=\"dropout\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>对比表示学习（Contrastive Representation Learning）</p>\n<ul>\n<li>主要是要<strong>构建正样本<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>和负样本<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mo>−</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span></span></span></span></span></span></span></span></strong>，正例就是与x相似的数据，负例就是与x不同的数据</li>\n<li>在论文<a href=\"http://blog.bangbangbangbang.top/posts/3b4c.html/ICML2020.pdf\">Understanding Contrastive Representation Learning through Alignment and Uniformity on the Hypersphere</a>中指出了对比学习的两个指标</li>\n<li><strong>Alignment</strong>对齐性，针对正例：计算正例对之间的向量距离的期望，越相似的正例对之间的alignment程度越高，距离越小。</li>\n<li><strong>Uniformity</strong>均匀性，针对负例：所有数据的向量分布越均匀，保留的信息越多。最极端的反例，所有数据都映射到单位超球面的同一点上，这就极度违背了uniformity原则，这代表数据的所有信息都没了，只有一个点的信息了。负例对之间，距离越远愈好</li>\n<li>这篇论文也采用这两个指标来衡量生成的句子向量，alignment和uniformity越低，向量的质量越高，在STS任务上的Spearman相关系数越高。spearman是一种相关系数方法</li>\n</ul>\n</li>\n<li>\n<p>论文中的SimCSE方法</p>\n<ul>\n<li>\n<p>Unsupervised SimCSE：引入dropout给输入加入噪声，假设加入噪声后的输入与原始输入在语义空间上距离相近。然后将相同的语句输入两次给预训练模型，得到一个正例对。因为dropout每次是以p概率隐去一半的相关性，所以相同输入所传出的值每次都是不同的，可以用作正例。</p>\n</li>\n<li>\n<p>supervised SimCSE：利用标注数据来构造对比学习的正负例子，最终选择NLI作为数据集</p>\n</li>\n</ul>\n</li>\n<li>\n<p>熵entropy</p>\n<ul>\n<li>熵**(Entropy)**：可以表示一个事件A的自信息量，也就是A包含多少信息。</li>\n<li>KL散度**(Kullback-Leibler Divergence)**：可以用来表示从事件A的角度来看，事件B有多大不同。</li>\n<li>交叉熵**(Cross Entropy)**：可以用来表示从事件A的角度来看，如何描述事件B。</li>\n<li><strong>KL散度可以被用于计算代价，而在特定情况下最小化KL散度等价于最小化交叉熵。而交叉熵的运算更简单，所以用交叉熵来当做代价</strong>。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"SimCSE（五）","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"SimCSE Background","abbrlink":"8218","date":"2021-04-29T06:59:06.000Z","password":null,"keywords":null,"description":null,"_content":"# Simple Contrastive Learning of Sentence Embeddings（五）\n\n### 2 Background: Contrastive Learning\n\n----\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- 交叉熵（cross-entropy）https://www.zhihu.com/question/65288314\n\n- 批次内负采样 （in-batch negatives）\n\n- 博客中的公式显示问题，以后都改为图片引用，不使用代码操作\n\n---\n\n> Contrastive learning aims to learn effective representation by pulling semantically close neighbors together and pushing apart non-neighbors. \n\n- 对比学习的目的是通过把语义相近的邻域拉近在一起，把非邻域分开来学习有效的表达。\n\n> It assumes a set of paired examples $ \\mathcal{D}=\\left\\{\\left(x_{i}, x_{i}^{+}\\right)\\right\\}_{i=1}^{m} $ , where $x_i$ and $x_{i}^{+}$ are semantically related. \n\n- 它假设一组成对的例子$\\mathcal{D}=\\left\\{\\left(x_{i}, x_{i}^{+}\\right)\\right\\}_{i=1}^{m}$，$x_i$和$x_{i}^{+}$ 是语义相关的\n\n> We follow the contrastive framework in Chen and take a cross-entropy objective with in-batch negatives : \n\n- 取一个批次内负采样 (in-batch negatives)作为的交叉熵（cross-entropy）目标\n\n> let $h_i$ and $h_{i}^{+}$ denote the representations of $x_i$ and $x_{i}^{+}$, for a mini-batch with N pairs, the training objective for ($x_i,x_{i}^{+}$) is:\n\n- 假设$h{i}$和$h{i}^{+}$表示$x{i}$和$x{i}^{+}$，对于N对的小批量， $(x_i,x_{i}^{+})$ 的训练目标是：\n\n$$\n\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n$$\n\n> where $\\mathcal{T}$ is a temperature hyperparameter and sim$(h_1,h_2)$ is the cosine similarity $\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}$. \n\n- 其中$\\mathcal{T}$是温度超参数,sim$(h_1，h_2)$是余弦相似性$\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}$\n\n> In this work, we encode input sentences using a pre-trained language model such as BERT (Devlin et al., 2019) or RoBERTa (Liu et al., 2019): $\\mathbf{h}=f_{\\theta}(x)$, \n\n- 在这项工作中，我们使用预先训练的语言模型（如BERT或RoBERTa）对输入句子进行编码：$\\mathbf{h}=f_{\\theta}(x)$\n\n> and then fine-tune all the parameters using the contrastive learning objective (Eq. 1).\n\n- 然后使用对比学习目标（等式1）微调所有参数。\n\n---\n\n#### Positive instances 正例\n\n> One critical question in contrastive learning is how to construct  ($x_i,x_{i}^{+}$)  pairs. \n\n- 对比学习中的一个关键问题是如何构建（$x_i，x_{i}^{+}$）对。\n\n> In visual representations, an effective solution is to take two random transformations of the same image (e.g., cropping, flipping, distortion and rotation) as $x_i$ and $x_{i}^{+}$.\n\n- 在视觉表示中，一个有效的解决方案是对同一个图像进行两次随机变换（例如，裁剪、翻转、失真和旋转），分别为$x_i$和$x_{i}^{+}$。\n\n> A similar approach has been recently adopted in language representations (Wu et al., 2020; Meng et al., 2021), by applying augmentation techniques such as word deletion, reordering, and substitution.\n\n- 最近在语言表征中也采用了类似的方法，通过应用增广技术，如单词删除，重新排序和替代。\n\n> However, data augmentation in NLP is inherently difficult because of its discrete nature.\n\n- 然而，NLP中的数据扩充由于其离散性而具有固有的困难性。\n\n> As we will see in §3, using standard dropout on intermediate representations outperforms these discrete operators.\n\n- 我们将在§3中看到.在中间表示上使用dropout优于这些离散运算符。\n\n> In NLP, a similar contrastive learning objective has been also explored in different contexts. \n\n- 在自然语言处理中，在不同的语境中也探讨了类似的对比学习目标。\n\n> In these cases,$(x_i，x_{i}^{+})$are collected from supervised datasets such as mention-entity, or question-passage pairs. \n\n- 在这些情况下，$（x_i，x_{i}^{+}）$是从有监督的数据集（如提及实体或问题通道对）收集的。\n\n> Because of the distinct nature of $x_i$ and $x_{i}^{+}$ by definition, these approaches always use a dual- encoder framework, i.e., using two independent encoders $f_{\\theta_{1}}$ and $f_{\\theta_{2}}$ for $x_i$ and $x_{i}^{+}$. \n\n- 由于定义上$x_{i}$和$x_{i}^{+}$的不同性质，这些方法总是使用双编码器框架，即使用两个独立的编码器$f{\\theta{1}}$和$f{\\theta{2}}$来表示$x_{i}$和$x_{i}^{+}$。\n\n> For sentence embeddings, Logeswaran and Lee (2018) also use contrastive learning with a dual-encoder approach, by forming (current sentence, next sentence) as $（x_i，x_{i}^{+}）$. \n\n- 对于句子嵌入，Logeswaran和Lee（2018）也使用了双编码器方法的对比学习，将（当前句子，下一个句子）形成$（x_i，x_{i}^{+}）$。\n\n> Zhang et al. (2020) consider global sentence representations and local token representations of the same sentence as positive instances.\n\n- Zhang将同一句子的整体句子表征和局部标记表征视为正例。\n\n#### Alignment and uniformity 对齐性和一致性\n\n> Recently, Wang and Isola (2020) identify two key properties related to contrastive learning: alignment and uniformity and propose metrics to measure the quality of representations. \n\n- 最近，Wang和Isola确定了与对比学习相关的两个关键属性：对齐性和一致性并提出了衡量表征质量的指标。\n\n> Given a distribution of positive pairs $p_{pos}$, alignment calculates expected distance between embeddings of the paired instances (assuming representations are already normalized),\n\n- 给定正对分布$p_{pos}$，alignment计算成对实例的嵌入之间的预期距离（假设表示已经规范化），\n\n$$\n\\ell_{\\text {align }} \\triangleq \\underset{\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}}{\\mathbb{E}}\\left\\|f(x)-f\\left(x^{+}\\right)\\right\\|^{2}\n$$\n\n> On the other hand, uniformity measures how well the embeddings are uniformly distributed:\n\n- 另一方面，uniformity衡量嵌入物均匀分布的程度：\n\n$$\n\\ell_{\\text {uniform }} \\triangleq \\log \\quad \\underset{\\quad x, y^\\stackrel{i . i . d .}{\\sim}p_{data}}{\\mathbb{E}} e^{-2\\|f(x)-f(y)\\|^{2}}\n$$\n\n> where $p_{data}$ denotes the data distribution. These two metrics are well aligned with the objective of contrastive learning: positive instances should stay close and embeddings for random instances should scatter on the hypersphere.\n\n- 其中，$p_{data}$表示数据分布。这两个指标很好地符合对比学习的目标：正例应该保持紧密，随机实例的嵌入应该分散在超球体上。\n\n> In the following sections, we will also use the two metrics to justify the inner workings of our approaches.\n\n- 在下面的部分中，我们还将使用这两个度量来证明我们的方法的内部工作。\n\n\n\n\n\n\n\n","source":"_posts/SimCSE（五）.md","raw":"---\ntitle: SimCSE（五）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\nsummary: SimCSE Background\nabbrlink: '8218'\ndate: 2021-04-29 14:59:06\npassword:\nkeywords:\ndescription:\n---\n# Simple Contrastive Learning of Sentence Embeddings（五）\n\n### 2 Background: Contrastive Learning\n\n----\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- 交叉熵（cross-entropy）https://www.zhihu.com/question/65288314\n\n- 批次内负采样 （in-batch negatives）\n\n- 博客中的公式显示问题，以后都改为图片引用，不使用代码操作\n\n---\n\n> Contrastive learning aims to learn effective representation by pulling semantically close neighbors together and pushing apart non-neighbors. \n\n- 对比学习的目的是通过把语义相近的邻域拉近在一起，把非邻域分开来学习有效的表达。\n\n> It assumes a set of paired examples $ \\mathcal{D}=\\left\\{\\left(x_{i}, x_{i}^{+}\\right)\\right\\}_{i=1}^{m} $ , where $x_i$ and $x_{i}^{+}$ are semantically related. \n\n- 它假设一组成对的例子$\\mathcal{D}=\\left\\{\\left(x_{i}, x_{i}^{+}\\right)\\right\\}_{i=1}^{m}$，$x_i$和$x_{i}^{+}$ 是语义相关的\n\n> We follow the contrastive framework in Chen and take a cross-entropy objective with in-batch negatives : \n\n- 取一个批次内负采样 (in-batch negatives)作为的交叉熵（cross-entropy）目标\n\n> let $h_i$ and $h_{i}^{+}$ denote the representations of $x_i$ and $x_{i}^{+}$, for a mini-batch with N pairs, the training objective for ($x_i,x_{i}^{+}$) is:\n\n- 假设$h{i}$和$h{i}^{+}$表示$x{i}$和$x{i}^{+}$，对于N对的小批量， $(x_i,x_{i}^{+})$ 的训练目标是：\n\n$$\n\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n$$\n\n> where $\\mathcal{T}$ is a temperature hyperparameter and sim$(h_1,h_2)$ is the cosine similarity $\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}$. \n\n- 其中$\\mathcal{T}$是温度超参数,sim$(h_1，h_2)$是余弦相似性$\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}$\n\n> In this work, we encode input sentences using a pre-trained language model such as BERT (Devlin et al., 2019) or RoBERTa (Liu et al., 2019): $\\mathbf{h}=f_{\\theta}(x)$, \n\n- 在这项工作中，我们使用预先训练的语言模型（如BERT或RoBERTa）对输入句子进行编码：$\\mathbf{h}=f_{\\theta}(x)$\n\n> and then fine-tune all the parameters using the contrastive learning objective (Eq. 1).\n\n- 然后使用对比学习目标（等式1）微调所有参数。\n\n---\n\n#### Positive instances 正例\n\n> One critical question in contrastive learning is how to construct  ($x_i,x_{i}^{+}$)  pairs. \n\n- 对比学习中的一个关键问题是如何构建（$x_i，x_{i}^{+}$）对。\n\n> In visual representations, an effective solution is to take two random transformations of the same image (e.g., cropping, flipping, distortion and rotation) as $x_i$ and $x_{i}^{+}$.\n\n- 在视觉表示中，一个有效的解决方案是对同一个图像进行两次随机变换（例如，裁剪、翻转、失真和旋转），分别为$x_i$和$x_{i}^{+}$。\n\n> A similar approach has been recently adopted in language representations (Wu et al., 2020; Meng et al., 2021), by applying augmentation techniques such as word deletion, reordering, and substitution.\n\n- 最近在语言表征中也采用了类似的方法，通过应用增广技术，如单词删除，重新排序和替代。\n\n> However, data augmentation in NLP is inherently difficult because of its discrete nature.\n\n- 然而，NLP中的数据扩充由于其离散性而具有固有的困难性。\n\n> As we will see in §3, using standard dropout on intermediate representations outperforms these discrete operators.\n\n- 我们将在§3中看到.在中间表示上使用dropout优于这些离散运算符。\n\n> In NLP, a similar contrastive learning objective has been also explored in different contexts. \n\n- 在自然语言处理中，在不同的语境中也探讨了类似的对比学习目标。\n\n> In these cases,$(x_i，x_{i}^{+})$are collected from supervised datasets such as mention-entity, or question-passage pairs. \n\n- 在这些情况下，$（x_i，x_{i}^{+}）$是从有监督的数据集（如提及实体或问题通道对）收集的。\n\n> Because of the distinct nature of $x_i$ and $x_{i}^{+}$ by definition, these approaches always use a dual- encoder framework, i.e., using two independent encoders $f_{\\theta_{1}}$ and $f_{\\theta_{2}}$ for $x_i$ and $x_{i}^{+}$. \n\n- 由于定义上$x_{i}$和$x_{i}^{+}$的不同性质，这些方法总是使用双编码器框架，即使用两个独立的编码器$f{\\theta{1}}$和$f{\\theta{2}}$来表示$x_{i}$和$x_{i}^{+}$。\n\n> For sentence embeddings, Logeswaran and Lee (2018) also use contrastive learning with a dual-encoder approach, by forming (current sentence, next sentence) as $（x_i，x_{i}^{+}）$. \n\n- 对于句子嵌入，Logeswaran和Lee（2018）也使用了双编码器方法的对比学习，将（当前句子，下一个句子）形成$（x_i，x_{i}^{+}）$。\n\n> Zhang et al. (2020) consider global sentence representations and local token representations of the same sentence as positive instances.\n\n- Zhang将同一句子的整体句子表征和局部标记表征视为正例。\n\n#### Alignment and uniformity 对齐性和一致性\n\n> Recently, Wang and Isola (2020) identify two key properties related to contrastive learning: alignment and uniformity and propose metrics to measure the quality of representations. \n\n- 最近，Wang和Isola确定了与对比学习相关的两个关键属性：对齐性和一致性并提出了衡量表征质量的指标。\n\n> Given a distribution of positive pairs $p_{pos}$, alignment calculates expected distance between embeddings of the paired instances (assuming representations are already normalized),\n\n- 给定正对分布$p_{pos}$，alignment计算成对实例的嵌入之间的预期距离（假设表示已经规范化），\n\n$$\n\\ell_{\\text {align }} \\triangleq \\underset{\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}}{\\mathbb{E}}\\left\\|f(x)-f\\left(x^{+}\\right)\\right\\|^{2}\n$$\n\n> On the other hand, uniformity measures how well the embeddings are uniformly distributed:\n\n- 另一方面，uniformity衡量嵌入物均匀分布的程度：\n\n$$\n\\ell_{\\text {uniform }} \\triangleq \\log \\quad \\underset{\\quad x, y^\\stackrel{i . i . d .}{\\sim}p_{data}}{\\mathbb{E}} e^{-2\\|f(x)-f(y)\\|^{2}}\n$$\n\n> where $p_{data}$ denotes the data distribution. These two metrics are well aligned with the objective of contrastive learning: positive instances should stay close and embeddings for random instances should scatter on the hypersphere.\n\n- 其中，$p_{data}$表示数据分布。这两个指标很好地符合对比学习的目标：正例应该保持紧密，随机实例的嵌入应该分散在超球体上。\n\n> In the following sections, we will also use the two metrics to justify the inner workings of our approaches.\n\n- 在下面的部分中，我们还将使用这两个度量来证明我们的方法的内部工作。\n\n\n\n\n\n\n\n","slug":"SimCSE（五）","published":1,"updated":"2021-04-29T07:39:08.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdia001uzl9kg9ip0a7y","content":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings五\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings五\"></a> Simple Contrastive Learning of Sentence Embeddings（五）</h1>\n<h3 id=\"2-background-contrastive-learning\"><a class=\"markdownIt-Anchor\" href=\"#2-background-contrastive-learning\"></a> 2 Background: Contrastive Learning</h3>\n<hr>\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color=\"red\">还需学习的知识点</font></h4>\n<ul>\n<li>\n<p>交叉熵（cross-entropy）<a href=\"https://www.zhihu.com/question/65288314\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/65288314</a></p>\n</li>\n<li>\n<p>批次内负采样 （in-batch negatives）</p>\n</li>\n<li>\n<p>博客中的公式显示问题，以后都改为图片引用，不使用代码操作</p>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>Contrastive learning aims to learn effective representation by pulling semantically close neighbors together and pushing apart non-neighbors.</p>\n</blockquote>\n<ul>\n<li>对比学习的目的是通过把语义相近的邻域拉近在一起，把非邻域分开来学习有效的表达。</li>\n</ul>\n<blockquote>\n<p>It assumes a set of paired examples $ \\mathcal{D}=\\left{\\left(x_{i}, x_{i}<sup>{+}\\right)\\right}_{i=1}</sup>{m} $ , where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> are semantically related.</p>\n</blockquote>\n<ul>\n<li>它假设一组成对的例子<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"script\">D</mi><mo>=</mo><msubsup><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathcal{D}=\\left\\{\\left(x_{i}, x_{i}^{+}\\right)\\right\\}_{i=1}^{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.304002em;vertical-align:-0.39971em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">{</span></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">}</span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.904292em;\"><span style=\"top:-2.3002900000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39971em;\"><span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> 是语义相关的</li>\n</ul>\n<blockquote>\n<p>We follow the contrastive framework in Chen and take a cross-entropy objective with in-batch negatives :</p>\n</blockquote>\n<ul>\n<li>取一个批次内负采样 (in-batch negatives)作为的交叉熵（cross-entropy）目标</li>\n</ul>\n<blockquote>\n<p>let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>h</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">h_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> denote the representations of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>, for a mini-batch with N pairs, the training objective for (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i,x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>) is:</p>\n</blockquote>\n<ul>\n<li>假设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">h{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi><msup><mi>i</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">h{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span></span></span></span>表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">x{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><msup><mi>i</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">x{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span></span></span></span>，对于N对的小批量， <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_{i}^{+})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的训练目标是：</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></msub><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.238638em;vertical-align:-1.4538879999999998em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.78475em;\"><span style=\"top:-2.1100000000000003em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.35807em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.80507em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142855em;\"><span style=\"top:-2.204392857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29560714285714285em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4538879999999998em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<blockquote>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"script\">T</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{T}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.25417em;\">T</span></span></span></span></span> is a temperature hyperparameter and sim<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(h_1,h_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is the cosine similarity <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mn>1</mn><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub></mrow><mrow><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>1</mn></msub><mo fence=\"true\">∥</mo></mrow><mo>⋅</mo><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub><mo fence=\"true\">∥</mo></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.6791199999999997em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1591199999999997em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span><span class=\"mbin mtight\">⋅</span><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.5102em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.214em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"script\">T</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{T}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.25417em;\">T</span></span></span></span></span>是温度超参数,sim<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>h</mi><mn>1</mn></msub><mi mathvariant=\"normal\">，</mi><msub><mi>h</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(h_1，h_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>是余弦相似性<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mn>1</mn><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub></mrow><mrow><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>1</mn></msub><mo fence=\"true\">∥</mo></mrow><mo>⋅</mo><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub><mo fence=\"true\">∥</mo></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.6791199999999997em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1591199999999997em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span><span class=\"mbin mtight\">⋅</span><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.5102em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.214em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ul>\n<blockquote>\n<p>In this work, we encode input sentences using a pre-trained language model such as BERT (Devlin et al., 2019) or RoBERTa (Liu et al., 2019): <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>,</p>\n</blockquote>\n<ul>\n<li>在这项工作中，我们使用预先训练的语言模型（如BERT或RoBERTa）对输入句子进行编码：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<blockquote>\n<p>and then fine-tune all the parameters using the contrastive learning objective (Eq. 1).</p>\n</blockquote>\n<ul>\n<li>然后使用对比学习目标（等式1）微调所有参数。</li>\n</ul>\n<hr>\n<h4 id=\"positive-instances-正例\"><a class=\"markdownIt-Anchor\" href=\"#positive-instances-正例\"></a> Positive instances 正例</h4>\n<blockquote>\n<p>One critical question in contrastive learning is how to construct  (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i,x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>)  pairs.</p>\n</blockquote>\n<ul>\n<li>对比学习中的一个关键问题是如何构建（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i，x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>）对。</li>\n</ul>\n<blockquote>\n<p>In visual representations, an effective solution is to take two random transformations of the same image (e.g., cropping, flipping, distortion and rotation) as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>在视觉表示中，一个有效的解决方案是对同一个图像进行两次随机变换（例如，裁剪、翻转、失真和旋转），分别为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>A similar approach has been recently adopted in language representations (Wu et al., 2020; Meng et al., 2021), by applying augmentation techniques such as word deletion, reordering, and substitution.</p>\n</blockquote>\n<ul>\n<li>最近在语言表征中也采用了类似的方法，通过应用增广技术，如单词删除，重新排序和替代。</li>\n</ul>\n<blockquote>\n<p>However, data augmentation in NLP is inherently difficult because of its discrete nature.</p>\n</blockquote>\n<ul>\n<li>然而，NLP中的数据扩充由于其离散性而具有固有的困难性。</li>\n</ul>\n<blockquote>\n<p>As we will see in §3, using standard dropout on intermediate representations outperforms these discrete operators.</p>\n</blockquote>\n<ul>\n<li>我们将在§3中看到.在中间表示上使用dropout优于这些离散运算符。</li>\n</ul>\n<blockquote>\n<p>In NLP, a similar contrastive learning objective has been also explored in different contexts.</p>\n</blockquote>\n<ul>\n<li>在自然语言处理中，在不同的语境中也探讨了类似的对比学习目标。</li>\n</ul>\n<blockquote>\n<p>In these cases,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i，x_{i}^{+})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>are collected from supervised datasets such as mention-entity, or question-passage pairs.</p>\n</blockquote>\n<ul>\n<li>在这些情况下，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_{i}^{+}）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>是从有监督的数据集（如提及实体或问题通道对）收集的。</li>\n</ul>\n<blockquote>\n<p>Because of the distinct nature of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> by definition, these approaches always use a dual- encoder framework, i.e., using two independent encoders <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><msub><mi>θ</mi><mn>1</mn></msub></msub></mrow><annotation encoding=\"application/x-tex\">f_{\\theta_{1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9445399999999999em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><msub><mi>θ</mi><mn>2</mn></msub></msub></mrow><annotation encoding=\"application/x-tex\">f_{\\theta_{2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9445399999999999em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>由于定义上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>的不同性质，这些方法总是使用双编码器框架，即使用两个独立的编码器<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mrow><mi>θ</mi><mn>1</mn></mrow></mrow><annotation encoding=\"application/x-tex\">f{\\theta{1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mrow><mi>θ</mi><mn>2</mn></mrow></mrow><annotation encoding=\"application/x-tex\">f{\\theta{2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord\"><span class=\"mord\">2</span></span></span></span></span></span>来表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>For sentence embeddings, Logeswaran and Lee (2018) also use contrastive learning with a dual-encoder approach, by forming (current sentence, next sentence) as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_{i}^{+}）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>对于句子嵌入，Logeswaran和Lee（2018）也使用了双编码器方法的对比学习，将（当前句子，下一个句子）形成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_{i}^{+}）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>Zhang et al. (2020) consider global sentence representations and local token representations of the same sentence as positive instances.</p>\n</blockquote>\n<ul>\n<li>Zhang将同一句子的整体句子表征和局部标记表征视为正例。</li>\n</ul>\n<h4 id=\"alignment-and-uniformity-对齐性和一致性\"><a class=\"markdownIt-Anchor\" href=\"#alignment-and-uniformity-对齐性和一致性\"></a> Alignment and uniformity 对齐性和一致性</h4>\n<blockquote>\n<p>Recently, Wang and Isola (2020) identify two key properties related to contrastive learning: alignment and uniformity and propose metrics to measure the quality of representations.</p>\n</blockquote>\n<ul>\n<li>最近，Wang和Isola确定了与对比学习相关的两个关键属性：对齐性和一致性并提出了衡量表征质量的指标。</li>\n</ul>\n<blockquote>\n<p>Given a distribution of positive pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{pos}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>, alignment calculates expected distance between embeddings of the paired instances (assuming representations are already normalized),</p>\n</blockquote>\n<ul>\n<li>给定正对分布<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{pos}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>，alignment计算成对实例的嵌入之间的预期距离（假设表示已经规范化），</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mtext>align&nbsp;</mtext></msub><mo>≜</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mtext>pos&nbsp;</mtext></msub></mrow></munder><msup><mrow><mo fence=\"true\">∥</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">∥</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\ell_{\\text {align }} \\triangleq \\underset{\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}}{\\mathbb{E}}\\left\\|f(x)-f\\left(x^{+}\\right)\\right\\|^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202778em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">align&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≜</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.054318em;vertical-align:-0.9883199999999999em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.309em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">(</span></span><span class=\"mord mathdefault mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">)</span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285716em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">pos&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9883199999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.86199em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86199em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.821331em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.86199em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86199em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.065998em;\"><span style=\"top:-3.31489em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>On the other hand, uniformity measures how well the embeddings are uniformly distributed:</p>\n</blockquote>\n<ul>\n<li>另一方面，uniformity衡量嵌入物均匀分布的程度：</li>\n</ul>\n<p class=\"katex-block katex-error\" title=\"ParseError: KaTeX parse error: Got function '\\stackrel' with no arguments as superscript at position 68: …set{\\quad x, y^\\̲s̲t̲a̲c̲k̲r̲e̲l̲{i . i . d .}{\\…\">\\ell_{\\text {uniform }} \\triangleq \\log \\quad \\underset{\\quad x, y^\\stackrel{i . i . d .}{\\sim}p_{data}}{\\mathbb{E}} e^{-2\\|f(x)-f(y)\\|^{2}}\n</p>\n<blockquote>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes the data distribution. These two metrics are well aligned with the objective of contrastive learning: positive instances should stay close and embeddings for random instances should scatter on the hypersphere.</p>\n</blockquote>\n<ul>\n<li>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>表示数据分布。这两个指标很好地符合对比学习的目标：正例应该保持紧密，随机实例的嵌入应该分散在超球体上。</li>\n</ul>\n<blockquote>\n<p>In the following sections, we will also use the two metrics to justify the inner workings of our approaches.</p>\n</blockquote>\n<ul>\n<li>在下面的部分中，我们还将使用这两个度量来证明我们的方法的内部工作。</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings五\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings五\"></a> Simple Contrastive Learning of Sentence Embeddings（五）</h1>\n<h3 id=\"2-background-contrastive-learning\"><a class=\"markdownIt-Anchor\" href=\"#2-background-contrastive-learning\"></a> 2 Background: Contrastive Learning</h3>\n<hr />\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color = \"red\">还需学习的知识点</font></h4>\n<ul>\n<li>\n<p>交叉熵（cross-entropy）<a href=\"https://www.zhihu.com/question/65288314\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/65288314</a></p>\n</li>\n<li>\n<p>批次内负采样 （in-batch negatives）</p>\n</li>\n<li>\n<p>博客中的公式显示问题，以后都改为图片引用，不使用代码操作</p>\n</li>\n</ul>\n<hr />\n<blockquote>\n<p>Contrastive learning aims to learn effective representation by pulling semantically close neighbors together and pushing apart non-neighbors.</p>\n</blockquote>\n<ul>\n<li>对比学习的目的是通过把语义相近的邻域拉近在一起，把非邻域分开来学习有效的表达。</li>\n</ul>\n<blockquote>\n<p>It assumes a set of paired examples $ \\mathcal{D}=\\left{\\left(x_{i}, x_{i}<sup>{+}\\right)\\right}_{i=1}</sup>{m} $ , where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> are semantically related.</p>\n</blockquote>\n<ul>\n<li>它假设一组成对的例子<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"script\">D</mi><mo>=</mo><msubsup><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathcal{D}=\\left\\{\\left(x_{i}, x_{i}^{+}\\right)\\right\\}_{i=1}^{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.304002em;vertical-align:-0.39971em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">{</span></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">}</span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.904292em;\"><span style=\"top:-2.3002900000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39971em;\"><span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> 是语义相关的</li>\n</ul>\n<blockquote>\n<p>We follow the contrastive framework in Chen and take a cross-entropy objective with in-batch negatives :</p>\n</blockquote>\n<ul>\n<li>取一个批次内负采样 (in-batch negatives)作为的交叉熵（cross-entropy）目标</li>\n</ul>\n<blockquote>\n<p>let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>h</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">h_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> denote the representations of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>, for a mini-batch with N pairs, the training objective for (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i,x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>) is:</p>\n</blockquote>\n<ul>\n<li>假设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">h{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi><msup><mi>i</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">h{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span></span></span></span>表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">x{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><msup><mi>i</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">x{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span></span></span></span>，对于N对的小批量， <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_{i}^{+})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的训练目标是：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></msub><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.238638em;vertical-align:-1.4538879999999998em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.78475em;\"><span style=\"top:-2.1100000000000003em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.35807em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.80507em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142855em;\"><span style=\"top:-2.204392857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29560714285714285em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4538879999999998em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<blockquote>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"script\">T</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{T}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.25417em;\">T</span></span></span></span></span> is a temperature hyperparameter and sim<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(h_1,h_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is the cosine similarity <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mn>1</mn><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub></mrow><mrow><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>1</mn></msub><mo fence=\"true\">∥</mo></mrow><mo>⋅</mo><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub><mo fence=\"true\">∥</mo></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.6791199999999997em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1591199999999997em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span><span class=\"mbin mtight\">⋅</span><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.5102em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.214em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"script\">T</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{T}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.25417em;\">T</span></span></span></span></span>是温度超参数,sim<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>h</mi><mn>1</mn></msub><mi mathvariant=\"normal\">，</mi><msub><mi>h</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(h_1，h_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>是余弦相似性<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mn>1</mn><mi mathvariant=\"normal\">⊤</mi></msubsup><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub></mrow><mrow><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>1</mn></msub><mo fence=\"true\">∥</mo></mrow><mo>⋅</mo><mrow><mo fence=\"true\">∥</mo><msub><mi mathvariant=\"bold\">h</mi><mn>2</mn></msub><mo fence=\"true\">∥</mo></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\mathbf{h}_{1}^{\\top} \\mathbf{h}_{2}}{\\left\\|\\mathbf{h}_{1}\\right\\| \\cdot\\left\\|\\mathbf{h}_{2}\\right\\|}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.6791199999999997em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1591199999999997em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span><span class=\"mbin mtight\">⋅</span><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">∥</span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.5102em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9270285714285713em;\"><span style=\"top:-2.214em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ul>\n<blockquote>\n<p>In this work, we encode input sentences using a pre-trained language model such as BERT (Devlin et al., 2019) or RoBERTa (Liu et al., 2019): <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>,</p>\n</blockquote>\n<ul>\n<li>在这项工作中，我们使用预先训练的语言模型（如BERT或RoBERTa）对输入句子进行编码：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<blockquote>\n<p>and then fine-tune all the parameters using the contrastive learning objective (Eq. 1).</p>\n</blockquote>\n<ul>\n<li>然后使用对比学习目标（等式1）微调所有参数。</li>\n</ul>\n<hr />\n<h4 id=\"positive-instances-正例\"><a class=\"markdownIt-Anchor\" href=\"#positive-instances-正例\"></a> Positive instances 正例</h4>\n<blockquote>\n<p>One critical question in contrastive learning is how to construct  (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i,x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>)  pairs.</p>\n</blockquote>\n<ul>\n<li>对比学习中的一个关键问题是如何构建（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i，x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>）对。</li>\n</ul>\n<blockquote>\n<p>In visual representations, an effective solution is to take two random transformations of the same image (e.g., cropping, flipping, distortion and rotation) as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>在视觉表示中，一个有效的解决方案是对同一个图像进行两次随机变换（例如，裁剪、翻转、失真和旋转），分别为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>A similar approach has been recently adopted in language representations (Wu et al., 2020; Meng et al., 2021), by applying augmentation techniques such as word deletion, reordering, and substitution.</p>\n</blockquote>\n<ul>\n<li>最近在语言表征中也采用了类似的方法，通过应用增广技术，如单词删除，重新排序和替代。</li>\n</ul>\n<blockquote>\n<p>However, data augmentation in NLP is inherently difficult because of its discrete nature.</p>\n</blockquote>\n<ul>\n<li>然而，NLP中的数据扩充由于其离散性而具有固有的困难性。</li>\n</ul>\n<blockquote>\n<p>As we will see in §3, using standard dropout on intermediate representations outperforms these discrete operators.</p>\n</blockquote>\n<ul>\n<li>我们将在§3中看到.在中间表示上使用dropout优于这些离散运算符。</li>\n</ul>\n<blockquote>\n<p>In NLP, a similar contrastive learning objective has been also explored in different contexts.</p>\n</blockquote>\n<ul>\n<li>在自然语言处理中，在不同的语境中也探讨了类似的对比学习目标。</li>\n</ul>\n<blockquote>\n<p>In these cases,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i，x_{i}^{+})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>are collected from supervised datasets such as mention-entity, or question-passage pairs.</p>\n</blockquote>\n<ul>\n<li>在这些情况下，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_{i}^{+}）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>是从有监督的数据集（如提及实体或问题通道对）收集的。</li>\n</ul>\n<blockquote>\n<p>Because of the distinct nature of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> by definition, these approaches always use a dual- encoder framework, i.e., using two independent encoders <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><msub><mi>θ</mi><mn>1</mn></msub></msub></mrow><annotation encoding=\"application/x-tex\">f_{\\theta_{1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9445399999999999em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><msub><mi>θ</mi><mn>2</mn></msub></msub></mrow><annotation encoding=\"application/x-tex\">f_{\\theta_{2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9445399999999999em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>由于定义上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>的不同性质，这些方法总是使用双编码器框架，即使用两个独立的编码器<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mrow><mi>θ</mi><mn>1</mn></mrow></mrow><annotation encoding=\"application/x-tex\">f{\\theta{1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mrow><mi>θ</mi><mn>2</mn></mrow></mrow><annotation encoding=\"application/x-tex\">f{\\theta{2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord\"><span class=\"mord\">2</span></span></span></span></span></span>来表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_{i}^{+}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>For sentence embeddings, Logeswaran and Lee (2018) also use contrastive learning with a dual-encoder approach, by forming (current sentence, next sentence) as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_{i}^{+}）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>对于句子嵌入，Logeswaran和Lee（2018）也使用了双编码器方法的对比学习，将（当前句子，下一个句子）形成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_{i}^{+}）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>Zhang et al. (2020) consider global sentence representations and local token representations of the same sentence as positive instances.</p>\n</blockquote>\n<ul>\n<li>Zhang将同一句子的整体句子表征和局部标记表征视为正例。</li>\n</ul>\n<h4 id=\"alignment-and-uniformity-对齐性和一致性\"><a class=\"markdownIt-Anchor\" href=\"#alignment-and-uniformity-对齐性和一致性\"></a> Alignment and uniformity 对齐性和一致性</h4>\n<blockquote>\n<p>Recently, Wang and Isola (2020) identify two key properties related to contrastive learning: alignment and uniformity and propose metrics to measure the quality of representations.</p>\n</blockquote>\n<ul>\n<li>最近，Wang和Isola确定了与对比学习相关的两个关键属性：对齐性和一致性并提出了衡量表征质量的指标。</li>\n</ul>\n<blockquote>\n<p>Given a distribution of positive pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{pos}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>, alignment calculates expected distance between embeddings of the paired instances (assuming representations are already normalized),</p>\n</blockquote>\n<ul>\n<li>给定正对分布<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{pos}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>，alignment计算成对实例的嵌入之间的预期距离（假设表示已经规范化），</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mtext>align </mtext></msub><mo>≜</mo><munder><mo><mi mathvariant=\"double-struck\">E</mi></mo><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mtext>pos </mtext></msub></mrow></munder><msup><mrow><mo fence=\"true\">∥</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>f</mi><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">∥</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\ell_{\\text {align }} \\triangleq \\underset{\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}}{\\mathbb{E}}\\left\\|f(x)-f\\left(x^{+}\\right)\\right\\|^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202778em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">align </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≜</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.054318em;vertical-align:-0.9883199999999999em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68889em;\"><span style=\"top:-2.309em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"minner mtight\"><span class=\"mopen mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">(</span></span><span class=\"mord mathdefault mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose mtight delimcenter\" style=\"top:0em;\"><span class=\"mtight\">)</span></span></span><span class=\"mrel mtight\">∼</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285716em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">pos </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mord\"><span class=\"mord mathbb\">E</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9883199999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.86199em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86199em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.821331em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.86199em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86199em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.065998em;\"><span style=\"top:-3.31489em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>On the other hand, uniformity measures how well the embeddings are uniformly distributed:</p>\n</blockquote>\n<ul>\n<li>另一方面，uniformity衡量嵌入物均匀分布的程度：</li>\n</ul>\n<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Got function &#039;\\stackrel&#039; with no arguments as superscript at position 68: …set{\\quad x, y^\\̲s̲t̲a̲c̲k̲r̲e̲l̲{i . i . d .}{\\…'>\\ell_{\\text {uniform }} \\triangleq \\log \\quad \\underset{\\quad x, y^\\stackrel{i . i . d .}{\\sim}p_{data}}{\\mathbb{E}} e^{-2\\|f(x)-f(y)\\|^{2}}\n</p>\n<blockquote>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes the data distribution. These two metrics are well aligned with the objective of contrastive learning: positive instances should stay close and embeddings for random instances should scatter on the hypersphere.</p>\n</blockquote>\n<ul>\n<li>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">p_{data}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>表示数据分布。这两个指标很好地符合对比学习的目标：正例应该保持紧密，随机实例的嵌入应该分散在超球体上。</li>\n</ul>\n<blockquote>\n<p>In the following sections, we will also use the two metrics to justify the inner workings of our approaches.</p>\n</blockquote>\n<ul>\n<li>在下面的部分中，我们还将使用这两个度量来证明我们的方法的内部工作。</li>\n</ul>\n"},{"title":"SimCSE（六）","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"Unsupervised and supervised SimCSE","abbrlink":"ca01","date":"2021-04-30T05:39:24.000Z","password":null,"keywords":null,"description":null,"_content":"# Simple Contrastive Learning of Sentence Embeddings（六）\n\n### 3 Unsupervised SimCSE and supervised SimCSE\n\n---\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- dropout mask，mask是什么意思\n- STS-B（Semantic Textual Similarity Benchmark）：语义文本相似度基准\n\n- write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction). \n\n---\n\n> In this section, we describe our unsupervised SimCSE model. \n\n- 在本节中，我们将介绍我们的无监督SimCSE模型。\n\n> The idea is extremely simple: we take a collection of sentences $\\left\\{x_{i}\\right\\}_{i=1}^{m}$ and use $x_i^+=x_i$. \n\n- 这个想法非常简单：我们取一组句子$\\left\\{x_{i}\\right\\}_{i=1}^{m}$，然后使$x_i^+=x_i$。\n\n> The key ingredient to get this to work with identical positive pairs is through the use of independently sampled *dropout masks*. \n\n- 关键的因素是通过使用独立取样的“dropout masks”，使这项工作与相同的正对。\n\n> In standard training of Transformers (Vaswani et al., 2017), there is a dropout mask placed on fully-connected layers as well as attention probabilities (default p = 0.1). \n\n- 在Transformers的标准训练中，在完全连接的层上以及注意概率（默认p=0.1）上放置了一个dropout mask。\n\n> We denote $\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)$ where $z$ is a random mask for dropout. \n\n- 我们用$\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)$表示，$z$是一个随机的dropout mask\n\n> We simply feed the same input to the encoder twice by applying different dropout masks  $z, z^{\\prime}$ and the training objective becomes:\n\n- 我们只需通过应用不同的dropout mask，$z，z^{\\prime}$将相同的输入输入输入编码器两次，训练目标就变成：\n\n> for a mini-batch with N sentences. \n\n- 对于少量的句子N\n\n> Note that z is just the standard dropout mask in Transformers and we do not add any additional dropout.\n\n- 注意，z只是转变中的标准dropout mask，我们没有添加任何额外的dropout。\n\n#### Dropout noise as data augmentation 作为数据增强的dropout噪声\n\n> We view this approach as a minimal form of data augmentation: the positive pair takes exactly the same sentence, and their embeddings only differ in dropout masks. \n\n- 我们将这种方法视为数据扩充的一种最小形式：正例对采用完全相同的句子，它们的嵌入只在dropout mask上有所不同。\n\n> We compare this approach to common augmentation techniques and other training objectives on the STS-B development set (Cer et al., 2017).\n\n- 我们将这种方法与常见的增强技术和STS-B开发集上的其他训练目标进行了比较。\n\n> We use $N=512$ and $m = 10^6$ sentences randomly drawn from English Wikipedia in these experiments. \n\n在这些实验中，我们使用从英文维基百科中随机抽取的$N=512$ 和 $m = 10^6$ 个句子。\n\n> **Table 2** compares our approach to common data augmentation techniques such as crop, word deletion and replacement, which can be viewed as $\\mathbf{h}=f_{\\theta}(g(x), z)$ and $g$ is a (random) discrete operator on $x$. \n\n- **表2**将我们的方法与常见的数据扩充技术（如裁剪、字删除和替换）进行了比较，这些技术可以看作是$\\mathbf{h}=f_{\\theta}(g(x), z)$ ，而$g$是$x$上的（随机）离散运算符。\n\n  <img src=\"Table 2.png\" alt=\"Table 2\" style=\"zoom:50%;\" />\n\n\n\n> We find that even deleting one word would hurt performance and none of the discrete augmentations outperforms basic dropout noise.\n\n- 我们发现，即使删除一个单词也会影响性能，并且没有一个离散增强比基本的丢失噪声更好。\n\n> We also compare this self-prediction training objective to next-sentence objective used in Logeswaran and Lee (2018), taking either one encoder or two independent encoders. \n\n- 我们还将这个自我预测训练目标与Logeswaran和Lee中使用的下一个句子目标进行比较，选择一个编码器或两个独立的编码器。\n\n> As shown in Table 3, we find that SimCSE performs much better than the next-sentence objectives (79.1 vs 69.7 on STS-B) and using one encoder instead of two makes a significant difference in our approach.\n\n- 如表3所示，我们发现SimCSE比下一个句子目标（79.1 vs STS-B为69.7）的表现要好得多，并且使用一个编码器而不是两个编码器使我们的方法有显著的不同。\n\n  <img src=\"Table 3.png\" alt=\"Table 3\" style=\"zoom:50%;\" />\n\n---\n\n#### Why does it work?\n\n> To further understand the role of dropout noise in unsupervised SimCSE, we try out different dropout rates in Table 4 and observe that all the variants underperform the default dropout probability p = 0.1 from Transformers. \n\n- 为了进一步了解在无监督SimCSE中丢失噪声的作用，我们在表4中尝试了不同的丢失率，并观察到所有变体都低于Transformers的默认丢失概率p=0.1。\n\n<img src=\"Table 4.png\" alt=\"Table 4\" style=\"zoom:50%;\" />\n\n> We find two extreme cases particularly interesting: “no dropout” (p = 0) and “fixed 0.1” (using default dropout p = 0.1 but the same dropout masks for the pair).\n\n- 我们发现两个极端的情况特别有趣：“无dropout”（p=0）和“固定0.1”（使用默认的dropoutp=0.1，但对这两种情况使用相同的dropout mask）。\n\n\n\n\n\n In both cases, the resulting embeddings for the pair are exactly the same, and it leads to a dramatic performance degradation. \n\n- 在这两种情况下，生成的嵌入对完全相同，这会导致性能急剧下降。\n\n> We take the checkpoints of these models every 10 steps during training and visualize the alignment and uniformity metrics2 in Figure 2, along with a simple data augmentation model “delete one word”. \n\n- 在训练过程中，我们每10步对这些模型进行一次检查点检查，并在图2中可视化对齐和一致性度量2，以及一个简单的数据处理模型“删除一个单词”。\n\n<img src=\"Figure 2.png\" alt=\"Figure 2\" style=\"zoom:50%;\" />\n\n> As is clearly shown, all models largely improve the uniformity. \n\n- 如图所示，所有模型在很大程度上改善了均匀性。\n\n> However, the alignment of the two special variants also degrades drastically, while our unsupervised SimCSE keeps a steady alignment, thanks to the use of dropout noise. \n\n- 然而，这两种特殊变体的对齐也会急剧下降，而我们的无监督SimCSE由于使用了衰减噪声，保持了稳定的对齐。\n\n> On the other hand, although “delete one word” slightly improves the alignment, it has a smaller gain on the uniformity, and eventually underperforms unsupervised SimCSE.\n\n- 另一方面，虽然“删除一个单词”稍微提高了对齐度，但它在一致性方面的增益较小，最终表现不如无监督SimCSE。\n\n------\n\n### 4 Supervised SimCSE\n\n> We have demonstrated that adding dropout noise is able to learn a good alignment for positive pairs $\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}$. \n\n- 我们已经证明，对于正对$\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}$，添加dropout噪声能够学习良好的对齐性。\n\n> In this section, we study whether we can leverage supervised datasets to provide better training signals for improving alignment of our approach.\n\n- 在本节中，我们将研究是否可以利用监督数据集来提供更好的训练信号，以改进方法的一致性。\n\n> Prior work (Conneau et al., 2017; Reimers and Gurevych, 2019) has demonstrated that supervised natural language inference (NLI) datasets (Bowman et al., 2015; Williams et al., 2018) are effective for learning sentence embeddings, by predicting whether the relationship between two sentences is *entailment*, *neutral* or *contradiction*. \n\n- 前期工作已经证明了有监督的自然语言推理（NLI）数据集通过预测两个句子之间的关系是蕴涵、中性还是矛盾，来有效地学习句子嵌入。\n\n> In our contrastive learning framework, we instead directly take $(x_i,x_i^+)$pairs from supervised datasets and use them to optimize Eq. 1.\n\n- 在我们的对比学习框架中，我们直接从有监督的数据集中提取$(x_i,x_i^+)$对，并使用它们来优化等式1。\n\n$$\n\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n$$\n\n---\n\n#### Exploiting supervised data利用监督数据\n\n> We first explore which annotated datasets are especially suitable for constructing positive pairs $(x_i,x_i^+)$. \n\n- 我们首先探讨哪些带注释的数据集特别适合于构造正对$(x_i,x_i^+)$。\n\n> We exiperiment with a number of datasets with sentence-pair examples, including QQP4: Quora question pairs; Flickr30k (Young et al., 2014): each image is annotated with 5 human-written captions and we consider any two captions of the same image as a positive pair; ParaNMT (Wieting and Gimpel, 2018): a large-scale back-translation paraphrase dataset; and finally NLI datasets: SNLI (Bowman et al., 2015) and MNLI (Williams et al., 2018).\n\n- 我们用一些句子对的例子进行了实验，包括QQP问题对；Flickr：每幅图像都有5个人类书写的字幕注释，我们将同一幅图像的任意两个字幕视为正对；ParaNMT：大规模反译释义数据集；最后是NLI数据集：SNLI和MNLI。\n\n> We train the contrastive learning model (Eq. 1) with different datasets and compare the results in Table 5 （for a fair comparison, we also run experiments with the same # of training pairs）. \n\n- 我们用不同的数据集训练对比学习模型（等式1），并比较表5中的结果（为了公平比较，我们还用相同的训练对进行实验）。\n\n<img src=\"Table 5.png\" alt=\"Table 5\" style=\"zoom:50%;\" />\n\n> We find that most of these models using supervised datasets outperform our unsupervised approach, showing a clear benefit from supervised signals. \n\n- 我们发现，大多数使用监督数据集的模型都比我们的无监督方法有更好的性能，显示出监督信号的明显优势。\n\n> Among all the options, using entailment pairs from the NLI (SNLI + MNLI) datasets perform the best. \n\n在所有选项中，使用NLI（SNLI+MNLI）数据集entailment对表现最好。\n\n> We think this is reasonable, as the NLI datasets consist of high-quality and crowd-sourced pairs, and human annotators are expected to write the hypotheses manually based on the premises, and hence two sentences tend to have less lexical overlap. \n\n- 我们认为这是合理的，因为NLI数据集由高质量和众包的成对数据组成，并且人类注释者需要根据前提手工编写假设，因此两句话的词汇重叠较少。\n\n> For instance, we find that the lexical overlap (F1 measured between two bags of words) for the entailment pairs (SNLI + MNLI) is 39%, while they are 60% and 55% for QQP and ParaNMT.\n\n- 例如，我们发现蕴涵对（SNLI+MNLI）的词汇重叠（两袋词之间的F1）为39%，而QQP和ParaNMT分别为60%和55%。\n\n---\n\n#### Contradiction as hard negatives否定的矛盾\n\n> Finally, we further take the advantage of the NLI datasets by using its contradiction pairs as hard negatives. \n\n- 最后，我们进一步利用NLI数据集的矛盾对作为硬否定。\n\n> In NLI datasets, given one premise, annotators are required to manually write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction). \n\n- 在NLI数据集中，给定一个前提，注释者需要手动编写一个绝对正确的句子（蕴涵），一个可能正确的句子（中性），一个绝对错误的句子（矛盾）。\n\n> Thus for each premise and its entailment hypothesis, there is an accompanying contradiction hypothesis7 (see Figure 1 for an example).\n\n- 因此，对于每个前提及其蕴涵假设，都有一个伴随的矛盾假设（参见图1中的示例）。\n\n> Formally, we extend $(x_i,x_i^+)$ to $(x_i,x_i^+,x_i^-)$ where $x_i$ is the premise, $x_i^+$and $x_i^-$ are entailment and contradiction hypotheses. \n\n- 形式上，我们将$（x_i，x_i^+）$扩展到$(x_i,x_i^+,x_i^-)$，其中$x_i$是前提，$x_i^+$和$x_i^-$是蕴涵和矛盾假设\n\n> The training objective $\\ell_{i}$ is then defined by (N is the mini-batch size):\n\n- 训练目标$\\ell{i}$由（N是最小批量大小）定义：\n\n$$\n-\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N}\\left(e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}+e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{-}\\right) / \\tau}\\right)}\n$$\n\n> As shown in Table 5, adding hard negatives can further improve performance (84.9 $\\rightarrow$ 86.2) and this is our final supervised SimCSE. \n\n- 如表5所示，添加消极可以进一步提高性能（84.9$\\rightarrow$86.2），这是我们的最终有监督SimCSE。\n\n> We also tried to add the ANLI dataset (Nie et al., 2020) or combine it with our unsupervised SimCSE approach, but didn’t find a meaningful improvement. \n\n- 我们还尝试添加ANLI数据集或将其与我们的无监督SimCSE方法相结合，但没有发现有意义的改进。\n\n> We also considered a dual encoder framework in supervised SimCSE and it hurt performance (86.2$\\rightarrow$ 84.2).\n\n- 我们还考虑了监督SimCSE中的双编码器框架，它会影响性能（86.2$\\rightarrow$84.2）。\n\n","source":"_posts/SimCSE（六）.md","raw":"---\ntitle: SimCSE（六）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\nsummary: Unsupervised and supervised SimCSE\nabbrlink: ca01\ndate: 2021-04-30 13:39:24\npassword:\nkeywords:\ndescription:\n---\n# Simple Contrastive Learning of Sentence Embeddings（六）\n\n### 3 Unsupervised SimCSE and supervised SimCSE\n\n---\n\n#### <font color = \"red\">还需学习的知识点</font>\n\n- dropout mask，mask是什么意思\n- STS-B（Semantic Textual Similarity Benchmark）：语义文本相似度基准\n\n- write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction). \n\n---\n\n> In this section, we describe our unsupervised SimCSE model. \n\n- 在本节中，我们将介绍我们的无监督SimCSE模型。\n\n> The idea is extremely simple: we take a collection of sentences $\\left\\{x_{i}\\right\\}_{i=1}^{m}$ and use $x_i^+=x_i$. \n\n- 这个想法非常简单：我们取一组句子$\\left\\{x_{i}\\right\\}_{i=1}^{m}$，然后使$x_i^+=x_i$。\n\n> The key ingredient to get this to work with identical positive pairs is through the use of independently sampled *dropout masks*. \n\n- 关键的因素是通过使用独立取样的“dropout masks”，使这项工作与相同的正对。\n\n> In standard training of Transformers (Vaswani et al., 2017), there is a dropout mask placed on fully-connected layers as well as attention probabilities (default p = 0.1). \n\n- 在Transformers的标准训练中，在完全连接的层上以及注意概率（默认p=0.1）上放置了一个dropout mask。\n\n> We denote $\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)$ where $z$ is a random mask for dropout. \n\n- 我们用$\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)$表示，$z$是一个随机的dropout mask\n\n> We simply feed the same input to the encoder twice by applying different dropout masks  $z, z^{\\prime}$ and the training objective becomes:\n\n- 我们只需通过应用不同的dropout mask，$z，z^{\\prime}$将相同的输入输入输入编码器两次，训练目标就变成：\n\n> for a mini-batch with N sentences. \n\n- 对于少量的句子N\n\n> Note that z is just the standard dropout mask in Transformers and we do not add any additional dropout.\n\n- 注意，z只是转变中的标准dropout mask，我们没有添加任何额外的dropout。\n\n#### Dropout noise as data augmentation 作为数据增强的dropout噪声\n\n> We view this approach as a minimal form of data augmentation: the positive pair takes exactly the same sentence, and their embeddings only differ in dropout masks. \n\n- 我们将这种方法视为数据扩充的一种最小形式：正例对采用完全相同的句子，它们的嵌入只在dropout mask上有所不同。\n\n> We compare this approach to common augmentation techniques and other training objectives on the STS-B development set (Cer et al., 2017).\n\n- 我们将这种方法与常见的增强技术和STS-B开发集上的其他训练目标进行了比较。\n\n> We use $N=512$ and $m = 10^6$ sentences randomly drawn from English Wikipedia in these experiments. \n\n在这些实验中，我们使用从英文维基百科中随机抽取的$N=512$ 和 $m = 10^6$ 个句子。\n\n> **Table 2** compares our approach to common data augmentation techniques such as crop, word deletion and replacement, which can be viewed as $\\mathbf{h}=f_{\\theta}(g(x), z)$ and $g$ is a (random) discrete operator on $x$. \n\n- **表2**将我们的方法与常见的数据扩充技术（如裁剪、字删除和替换）进行了比较，这些技术可以看作是$\\mathbf{h}=f_{\\theta}(g(x), z)$ ，而$g$是$x$上的（随机）离散运算符。\n\n  <img src=\"Table 2.png\" alt=\"Table 2\" style=\"zoom:50%;\" />\n\n\n\n> We find that even deleting one word would hurt performance and none of the discrete augmentations outperforms basic dropout noise.\n\n- 我们发现，即使删除一个单词也会影响性能，并且没有一个离散增强比基本的丢失噪声更好。\n\n> We also compare this self-prediction training objective to next-sentence objective used in Logeswaran and Lee (2018), taking either one encoder or two independent encoders. \n\n- 我们还将这个自我预测训练目标与Logeswaran和Lee中使用的下一个句子目标进行比较，选择一个编码器或两个独立的编码器。\n\n> As shown in Table 3, we find that SimCSE performs much better than the next-sentence objectives (79.1 vs 69.7 on STS-B) and using one encoder instead of two makes a significant difference in our approach.\n\n- 如表3所示，我们发现SimCSE比下一个句子目标（79.1 vs STS-B为69.7）的表现要好得多，并且使用一个编码器而不是两个编码器使我们的方法有显著的不同。\n\n  <img src=\"Table 3.png\" alt=\"Table 3\" style=\"zoom:50%;\" />\n\n---\n\n#### Why does it work?\n\n> To further understand the role of dropout noise in unsupervised SimCSE, we try out different dropout rates in Table 4 and observe that all the variants underperform the default dropout probability p = 0.1 from Transformers. \n\n- 为了进一步了解在无监督SimCSE中丢失噪声的作用，我们在表4中尝试了不同的丢失率，并观察到所有变体都低于Transformers的默认丢失概率p=0.1。\n\n<img src=\"Table 4.png\" alt=\"Table 4\" style=\"zoom:50%;\" />\n\n> We find two extreme cases particularly interesting: “no dropout” (p = 0) and “fixed 0.1” (using default dropout p = 0.1 but the same dropout masks for the pair).\n\n- 我们发现两个极端的情况特别有趣：“无dropout”（p=0）和“固定0.1”（使用默认的dropoutp=0.1，但对这两种情况使用相同的dropout mask）。\n\n\n\n\n\n In both cases, the resulting embeddings for the pair are exactly the same, and it leads to a dramatic performance degradation. \n\n- 在这两种情况下，生成的嵌入对完全相同，这会导致性能急剧下降。\n\n> We take the checkpoints of these models every 10 steps during training and visualize the alignment and uniformity metrics2 in Figure 2, along with a simple data augmentation model “delete one word”. \n\n- 在训练过程中，我们每10步对这些模型进行一次检查点检查，并在图2中可视化对齐和一致性度量2，以及一个简单的数据处理模型“删除一个单词”。\n\n<img src=\"Figure 2.png\" alt=\"Figure 2\" style=\"zoom:50%;\" />\n\n> As is clearly shown, all models largely improve the uniformity. \n\n- 如图所示，所有模型在很大程度上改善了均匀性。\n\n> However, the alignment of the two special variants also degrades drastically, while our unsupervised SimCSE keeps a steady alignment, thanks to the use of dropout noise. \n\n- 然而，这两种特殊变体的对齐也会急剧下降，而我们的无监督SimCSE由于使用了衰减噪声，保持了稳定的对齐。\n\n> On the other hand, although “delete one word” slightly improves the alignment, it has a smaller gain on the uniformity, and eventually underperforms unsupervised SimCSE.\n\n- 另一方面，虽然“删除一个单词”稍微提高了对齐度，但它在一致性方面的增益较小，最终表现不如无监督SimCSE。\n\n------\n\n### 4 Supervised SimCSE\n\n> We have demonstrated that adding dropout noise is able to learn a good alignment for positive pairs $\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}$. \n\n- 我们已经证明，对于正对$\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}$，添加dropout噪声能够学习良好的对齐性。\n\n> In this section, we study whether we can leverage supervised datasets to provide better training signals for improving alignment of our approach.\n\n- 在本节中，我们将研究是否可以利用监督数据集来提供更好的训练信号，以改进方法的一致性。\n\n> Prior work (Conneau et al., 2017; Reimers and Gurevych, 2019) has demonstrated that supervised natural language inference (NLI) datasets (Bowman et al., 2015; Williams et al., 2018) are effective for learning sentence embeddings, by predicting whether the relationship between two sentences is *entailment*, *neutral* or *contradiction*. \n\n- 前期工作已经证明了有监督的自然语言推理（NLI）数据集通过预测两个句子之间的关系是蕴涵、中性还是矛盾，来有效地学习句子嵌入。\n\n> In our contrastive learning framework, we instead directly take $(x_i,x_i^+)$pairs from supervised datasets and use them to optimize Eq. 1.\n\n- 在我们的对比学习框架中，我们直接从有监督的数据集中提取$(x_i,x_i^+)$对，并使用它们来优化等式1。\n\n$$\n\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n$$\n\n---\n\n#### Exploiting supervised data利用监督数据\n\n> We first explore which annotated datasets are especially suitable for constructing positive pairs $(x_i,x_i^+)$. \n\n- 我们首先探讨哪些带注释的数据集特别适合于构造正对$(x_i,x_i^+)$。\n\n> We exiperiment with a number of datasets with sentence-pair examples, including QQP4: Quora question pairs; Flickr30k (Young et al., 2014): each image is annotated with 5 human-written captions and we consider any two captions of the same image as a positive pair; ParaNMT (Wieting and Gimpel, 2018): a large-scale back-translation paraphrase dataset; and finally NLI datasets: SNLI (Bowman et al., 2015) and MNLI (Williams et al., 2018).\n\n- 我们用一些句子对的例子进行了实验，包括QQP问题对；Flickr：每幅图像都有5个人类书写的字幕注释，我们将同一幅图像的任意两个字幕视为正对；ParaNMT：大规模反译释义数据集；最后是NLI数据集：SNLI和MNLI。\n\n> We train the contrastive learning model (Eq. 1) with different datasets and compare the results in Table 5 （for a fair comparison, we also run experiments with the same # of training pairs）. \n\n- 我们用不同的数据集训练对比学习模型（等式1），并比较表5中的结果（为了公平比较，我们还用相同的训练对进行实验）。\n\n<img src=\"Table 5.png\" alt=\"Table 5\" style=\"zoom:50%;\" />\n\n> We find that most of these models using supervised datasets outperform our unsupervised approach, showing a clear benefit from supervised signals. \n\n- 我们发现，大多数使用监督数据集的模型都比我们的无监督方法有更好的性能，显示出监督信号的明显优势。\n\n> Among all the options, using entailment pairs from the NLI (SNLI + MNLI) datasets perform the best. \n\n在所有选项中，使用NLI（SNLI+MNLI）数据集entailment对表现最好。\n\n> We think this is reasonable, as the NLI datasets consist of high-quality and crowd-sourced pairs, and human annotators are expected to write the hypotheses manually based on the premises, and hence two sentences tend to have less lexical overlap. \n\n- 我们认为这是合理的，因为NLI数据集由高质量和众包的成对数据组成，并且人类注释者需要根据前提手工编写假设，因此两句话的词汇重叠较少。\n\n> For instance, we find that the lexical overlap (F1 measured between two bags of words) for the entailment pairs (SNLI + MNLI) is 39%, while they are 60% and 55% for QQP and ParaNMT.\n\n- 例如，我们发现蕴涵对（SNLI+MNLI）的词汇重叠（两袋词之间的F1）为39%，而QQP和ParaNMT分别为60%和55%。\n\n---\n\n#### Contradiction as hard negatives否定的矛盾\n\n> Finally, we further take the advantage of the NLI datasets by using its contradiction pairs as hard negatives. \n\n- 最后，我们进一步利用NLI数据集的矛盾对作为硬否定。\n\n> In NLI datasets, given one premise, annotators are required to manually write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction). \n\n- 在NLI数据集中，给定一个前提，注释者需要手动编写一个绝对正确的句子（蕴涵），一个可能正确的句子（中性），一个绝对错误的句子（矛盾）。\n\n> Thus for each premise and its entailment hypothesis, there is an accompanying contradiction hypothesis7 (see Figure 1 for an example).\n\n- 因此，对于每个前提及其蕴涵假设，都有一个伴随的矛盾假设（参见图1中的示例）。\n\n> Formally, we extend $(x_i,x_i^+)$ to $(x_i,x_i^+,x_i^-)$ where $x_i$ is the premise, $x_i^+$and $x_i^-$ are entailment and contradiction hypotheses. \n\n- 形式上，我们将$（x_i，x_i^+）$扩展到$(x_i,x_i^+,x_i^-)$，其中$x_i$是前提，$x_i^+$和$x_i^-$是蕴涵和矛盾假设\n\n> The training objective $\\ell_{i}$ is then defined by (N is the mini-batch size):\n\n- 训练目标$\\ell{i}$由（N是最小批量大小）定义：\n\n$$\n-\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N}\\left(e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}+e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{-}\\right) / \\tau}\\right)}\n$$\n\n> As shown in Table 5, adding hard negatives can further improve performance (84.9 $\\rightarrow$ 86.2) and this is our final supervised SimCSE. \n\n- 如表5所示，添加消极可以进一步提高性能（84.9$\\rightarrow$86.2），这是我们的最终有监督SimCSE。\n\n> We also tried to add the ANLI dataset (Nie et al., 2020) or combine it with our unsupervised SimCSE approach, but didn’t find a meaningful improvement. \n\n- 我们还尝试添加ANLI数据集或将其与我们的无监督SimCSE方法相结合，但没有发现有意义的改进。\n\n> We also considered a dual encoder framework in supervised SimCSE and it hurt performance (86.2$\\rightarrow$ 84.2).\n\n- 我们还考虑了监督SimCSE中的双编码器框架，它会影响性能（86.2$\\rightarrow$84.2）。\n\n","slug":"SimCSE（六）","published":1,"updated":"2021-04-30T06:13:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdib001yzl9kfop94nni","content":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings六\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings六\"></a> Simple Contrastive Learning of Sentence Embeddings（六）</h1>\n<h3 id=\"3-unsupervised-simcse-and-supervised-simcse\"><a class=\"markdownIt-Anchor\" href=\"#3-unsupervised-simcse-and-supervised-simcse\"></a> 3 Unsupervised SimCSE and supervised SimCSE</h3>\n<hr>\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color=\"red\">还需学习的知识点</font></h4>\n<ul>\n<li>\n<p>dropout mask，mask是什么意思</p>\n</li>\n<li>\n<p>STS-B（Semantic Textual Similarity Benchmark）：语义文本相似度基准</p>\n</li>\n<li>\n<p>write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction).</p>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>In this section, we describe our unsupervised SimCSE model.</p>\n</blockquote>\n<ul>\n<li>在本节中，我们将介绍我们的无监督SimCSE模型。</li>\n</ul>\n<blockquote>\n<p>The idea is extremely simple: we take a collection of sentences <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mrow><mo fence=\"true\">{</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence=\"true\">}</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\left\\{x_{i}\\right\\}_{i=1}^{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1039919999999999em;vertical-align:-0.29969999999999997em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.4003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29969999999999997em;\"><span></span></span></span></span></span></span></span></span></span> and use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i^+=x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>这个想法非常简单：我们取一组句子<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mrow><mo fence=\"true\">{</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence=\"true\">}</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\left\\{x_{i}\\right\\}_{i=1}^{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1039919999999999em;vertical-align:-0.29969999999999997em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.4003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29969999999999997em;\"><span></span></span></span></span></span></span></span></span></span>，然后使<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i^+=x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>The key ingredient to get this to work with identical positive pairs is through the use of independently sampled <em>dropout masks</em>.</p>\n</blockquote>\n<ul>\n<li>关键的因素是通过使用独立取样的“dropout masks”，使这项工作与相同的正对。</li>\n</ul>\n<blockquote>\n<p>In standard training of Transformers (Vaswani et al., 2017), there is a dropout mask placed on fully-connected layers as well as attention probabilities (default p = 0.1).</p>\n</blockquote>\n<ul>\n<li>在Transformers的标准训练中，在完全连接的层上以及注意概率（默认p=0.1）上放置了一个dropout mask。</li>\n</ul>\n<blockquote>\n<p>We denote <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi>z</mi></msubsup><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>z</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.953104em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> is a random mask for dropout.</p>\n</blockquote>\n<ul>\n<li>我们用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi>z</mi></msubsup><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>z</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.953104em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span>表示，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span>是一个随机的dropout mask</li>\n</ul>\n<blockquote>\n<p>We simply feed the same input to the encoder twice by applying different dropout masks  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mo separator=\"true\">,</mo><msup><mi>z</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">z, z^{\\prime}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and the training objective becomes:</p>\n</blockquote>\n<ul>\n<li>我们只需通过应用不同的dropout mask，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mi mathvariant=\"normal\">，</mi><msup><mi>z</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">z，z^{\\prime}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>将相同的输入输入输入编码器两次，训练目标就变成：</li>\n</ul>\n<blockquote>\n<p>for a mini-batch with N sentences.</p>\n</blockquote>\n<ul>\n<li>对于少量的句子N</li>\n</ul>\n<blockquote>\n<p>Note that z is just the standard dropout mask in Transformers and we do not add any additional dropout.</p>\n</blockquote>\n<ul>\n<li>注意，z只是转变中的标准dropout mask，我们没有添加任何额外的dropout。</li>\n</ul>\n<h4 id=\"dropout-noise-as-data-augmentation-作为数据增强的dropout噪声\"><a class=\"markdownIt-Anchor\" href=\"#dropout-noise-as-data-augmentation-作为数据增强的dropout噪声\"></a> Dropout noise as data augmentation 作为数据增强的dropout噪声</h4>\n<blockquote>\n<p>We view this approach as a minimal form of data augmentation: the positive pair takes exactly the same sentence, and their embeddings only differ in dropout masks.</p>\n</blockquote>\n<ul>\n<li>我们将这种方法视为数据扩充的一种最小形式：正例对采用完全相同的句子，它们的嵌入只在dropout mask上有所不同。</li>\n</ul>\n<blockquote>\n<p>We compare this approach to common augmentation techniques and other training objectives on the STS-B development set (Cer et al., 2017).</p>\n</blockquote>\n<ul>\n<li>我们将这种方法与常见的增强技术和STS-B开发集上的其他训练目标进行了比较。</li>\n</ul>\n<blockquote>\n<p>We use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">N=512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">m = 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span> sentences randomly drawn from English Wikipedia in these experiments.</p>\n</blockquote>\n<p>在这些实验中，我们使用从英文维基百科中随机抽取的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">N=512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">m = 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span> 个句子。</p>\n<blockquote>\n<p><strong>Table 2</strong> compares our approach to common data augmentation techniques such as crop, word deletion and replacement, which can be viewed as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(g(x), z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is a (random) discrete operator on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>表2</strong>将我们的方法与常见的数据扩充技术（如裁剪、字删除和替换）进行了比较，这些技术可以看作是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(g(x), z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> ，而<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>上的（随机）离散运算符。</p>\n<img src=\"Table 2.png\" alt=\"Table 2\" style=\"zoom:50%;\">\n</li>\n</ul>\n<blockquote>\n<p>We find that even deleting one word would hurt performance and none of the discrete augmentations outperforms basic dropout noise.</p>\n</blockquote>\n<ul>\n<li>我们发现，即使删除一个单词也会影响性能，并且没有一个离散增强比基本的丢失噪声更好。</li>\n</ul>\n<blockquote>\n<p>We also compare this self-prediction training objective to next-sentence objective used in Logeswaran and Lee (2018), taking either one encoder or two independent encoders.</p>\n</blockquote>\n<ul>\n<li>我们还将这个自我预测训练目标与Logeswaran和Lee中使用的下一个句子目标进行比较，选择一个编码器或两个独立的编码器。</li>\n</ul>\n<blockquote>\n<p>As shown in Table 3, we find that SimCSE performs much better than the next-sentence objectives (79.1 vs 69.7 on STS-B) and using one encoder instead of two makes a significant difference in our approach.</p>\n</blockquote>\n<ul>\n<li>\n<p>如表3所示，我们发现SimCSE比下一个句子目标（79.1 vs STS-B为69.7）的表现要好得多，并且使用一个编码器而不是两个编码器使我们的方法有显著的不同。</p>\n<img src=\"Table 3.png\" alt=\"Table 3\" style=\"zoom:50%;\">\n</li>\n</ul>\n<hr>\n<h4 id=\"why-does-it-work\"><a class=\"markdownIt-Anchor\" href=\"#why-does-it-work\"></a> Why does it work?</h4>\n<blockquote>\n<p>To further understand the role of dropout noise in unsupervised SimCSE, we try out different dropout rates in Table 4 and observe that all the variants underperform the default dropout probability p = 0.1 from Transformers.</p>\n</blockquote>\n<ul>\n<li>为了进一步了解在无监督SimCSE中丢失噪声的作用，我们在表4中尝试了不同的丢失率，并观察到所有变体都低于Transformers的默认丢失概率p=0.1。</li>\n</ul>\n<img src=\"Table 4.png\" alt=\"Table 4\" style=\"zoom:50%;\">\n<blockquote>\n<p>We find two extreme cases particularly interesting: “no dropout” (p = 0) and “fixed 0.1” (using default dropout p = 0.1 but the same dropout masks for the pair).</p>\n</blockquote>\n<ul>\n<li>我们发现两个极端的情况特别有趣：“无dropout”（p=0）和“固定0.1”（使用默认的dropoutp=0.1，但对这两种情况使用相同的dropout mask）。</li>\n</ul>\n<p>In both cases, the resulting embeddings for the pair are exactly the same, and it leads to a dramatic performance degradation.</p>\n<ul>\n<li>在这两种情况下，生成的嵌入对完全相同，这会导致性能急剧下降。</li>\n</ul>\n<blockquote>\n<p>We take the checkpoints of these models every 10 steps during training and visualize the alignment and uniformity metrics2 in Figure 2, along with a simple data augmentation model “delete one word”.</p>\n</blockquote>\n<ul>\n<li>在训练过程中，我们每10步对这些模型进行一次检查点检查，并在图2中可视化对齐和一致性度量2，以及一个简单的数据处理模型“删除一个单词”。</li>\n</ul>\n<img src=\"Figure 2.png\" alt=\"Figure 2\" style=\"zoom:50%;\">\n<blockquote>\n<p>As is clearly shown, all models largely improve the uniformity.</p>\n</blockquote>\n<ul>\n<li>如图所示，所有模型在很大程度上改善了均匀性。</li>\n</ul>\n<blockquote>\n<p>However, the alignment of the two special variants also degrades drastically, while our unsupervised SimCSE keeps a steady alignment, thanks to the use of dropout noise.</p>\n</blockquote>\n<ul>\n<li>然而，这两种特殊变体的对齐也会急剧下降，而我们的无监督SimCSE由于使用了衰减噪声，保持了稳定的对齐。</li>\n</ul>\n<blockquote>\n<p>On the other hand, although “delete one word” slightly improves the alignment, it has a smaller gain on the uniformity, and eventually underperforms unsupervised SimCSE.</p>\n</blockquote>\n<ul>\n<li>另一方面，虽然“删除一个单词”稍微提高了对齐度，但它在一致性方面的增益较小，最终表现不如无监督SimCSE。</li>\n</ul>\n<hr>\n<h3 id=\"4-supervised-simcse\"><a class=\"markdownIt-Anchor\" href=\"#4-supervised-simcse\"></a> 4 Supervised SimCSE</h3>\n<blockquote>\n<p>We have demonstrated that adding dropout noise is able to learn a good alignment for positive pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mtext>pos&nbsp;</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">pos&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>我们已经证明，对于正对<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mtext>pos&nbsp;</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">pos&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>，添加dropout噪声能够学习良好的对齐性。</li>\n</ul>\n<blockquote>\n<p>In this section, we study whether we can leverage supervised datasets to provide better training signals for improving alignment of our approach.</p>\n</blockquote>\n<ul>\n<li>在本节中，我们将研究是否可以利用监督数据集来提供更好的训练信号，以改进方法的一致性。</li>\n</ul>\n<blockquote>\n<p>Prior work (Conneau et al., 2017; Reimers and Gurevych, 2019) has demonstrated that supervised natural language inference (NLI) datasets (Bowman et al., 2015; Williams et al., 2018) are effective for learning sentence embeddings, by predicting whether the relationship between two sentences is <em>entailment</em>, <em>neutral</em> or <em>contradiction</em>.</p>\n</blockquote>\n<ul>\n<li>前期工作已经证明了有监督的自然语言推理（NLI）数据集通过预测两个句子之间的关系是蕴涵、中性还是矛盾，来有效地学习句子嵌入。</li>\n</ul>\n<blockquote>\n<p>In our contrastive learning framework, we instead directly take <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>pairs from supervised datasets and use them to optimize Eq. 1.</p>\n</blockquote>\n<ul>\n<li>在我们的对比学习框架中，我们直接从有监督的数据集中提取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>对，并使用它们来优化等式1。</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></msub><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.238638em;vertical-align:-1.4538879999999998em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.78475em;\"><span style=\"top:-2.1100000000000003em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.35807em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.80507em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142855em;\"><span style=\"top:-2.204392857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29560714285714285em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4538879999999998em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<hr>\n<h4 id=\"exploiting-supervised-data利用监督数据\"><a class=\"markdownIt-Anchor\" href=\"#exploiting-supervised-data利用监督数据\"></a> Exploiting supervised data利用监督数据</h4>\n<blockquote>\n<p>We first explore which annotated datasets are especially suitable for constructing positive pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>我们首先探讨哪些带注释的数据集特别适合于构造正对<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>We exiperiment with a number of datasets with sentence-pair examples, including QQP4: Quora question pairs; Flickr30k (Young et al., 2014): each image is annotated with 5 human-written captions and we consider any two captions of the same image as a positive pair; ParaNMT (Wieting and Gimpel, 2018): a large-scale back-translation paraphrase dataset; and finally NLI datasets: SNLI (Bowman et al., 2015) and MNLI (Williams et al., 2018).</p>\n</blockquote>\n<ul>\n<li>我们用一些句子对的例子进行了实验，包括QQP问题对；Flickr：每幅图像都有5个人类书写的字幕注释，我们将同一幅图像的任意两个字幕视为正对；ParaNMT：大规模反译释义数据集；最后是NLI数据集：SNLI和MNLI。</li>\n</ul>\n<blockquote>\n<p>We train the contrastive learning model (Eq. 1) with different datasets and compare the results in Table 5 （for a fair comparison, we also run experiments with the same # of training pairs）.</p>\n</blockquote>\n<ul>\n<li>我们用不同的数据集训练对比学习模型（等式1），并比较表5中的结果（为了公平比较，我们还用相同的训练对进行实验）。</li>\n</ul>\n<img src=\"Table 5.png\" alt=\"Table 5\" style=\"zoom:50%;\">\n<blockquote>\n<p>We find that most of these models using supervised datasets outperform our unsupervised approach, showing a clear benefit from supervised signals.</p>\n</blockquote>\n<ul>\n<li>我们发现，大多数使用监督数据集的模型都比我们的无监督方法有更好的性能，显示出监督信号的明显优势。</li>\n</ul>\n<blockquote>\n<p>Among all the options, using entailment pairs from the NLI (SNLI + MNLI) datasets perform the best.</p>\n</blockquote>\n<p>在所有选项中，使用NLI（SNLI+MNLI）数据集entailment对表现最好。</p>\n<blockquote>\n<p>We think this is reasonable, as the NLI datasets consist of high-quality and crowd-sourced pairs, and human annotators are expected to write the hypotheses manually based on the premises, and hence two sentences tend to have less lexical overlap.</p>\n</blockquote>\n<ul>\n<li>我们认为这是合理的，因为NLI数据集由高质量和众包的成对数据组成，并且人类注释者需要根据前提手工编写假设，因此两句话的词汇重叠较少。</li>\n</ul>\n<blockquote>\n<p>For instance, we find that the lexical overlap (F1 measured between two bags of words) for the entailment pairs (SNLI + MNLI) is 39%, while they are 60% and 55% for QQP and ParaNMT.</p>\n</blockquote>\n<ul>\n<li>例如，我们发现蕴涵对（SNLI+MNLI）的词汇重叠（两袋词之间的F1）为39%，而QQP和ParaNMT分别为60%和55%。</li>\n</ul>\n<hr>\n<h4 id=\"contradiction-as-hard-negatives否定的矛盾\"><a class=\"markdownIt-Anchor\" href=\"#contradiction-as-hard-negatives否定的矛盾\"></a> Contradiction as hard negatives否定的矛盾</h4>\n<blockquote>\n<p>Finally, we further take the advantage of the NLI datasets by using its contradiction pairs as hard negatives.</p>\n</blockquote>\n<ul>\n<li>最后，我们进一步利用NLI数据集的矛盾对作为硬否定。</li>\n</ul>\n<blockquote>\n<p>In NLI datasets, given one premise, annotators are required to manually write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction).</p>\n</blockquote>\n<ul>\n<li>在NLI数据集中，给定一个前提，注释者需要手动编写一个绝对正确的句子（蕴涵），一个可能正确的句子（中性），一个绝对错误的句子（矛盾）。</li>\n</ul>\n<blockquote>\n<p>Thus for each premise and its entailment hypothesis, there is an accompanying contradiction hypothesis7 (see Figure 1 for an example).</p>\n</blockquote>\n<ul>\n<li>因此，对于每个前提及其蕴涵假设，都有一个伴随的矛盾假设（参见图1中的示例）。</li>\n</ul>\n<blockquote>\n<p>Formally, we extend <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+,x_i^-)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the premise, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> are entailment and contradiction hypotheses.</p>\n</blockquote>\n<ul>\n<li>形式上，我们将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_i^+）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>扩展到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+,x_i^-)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是前提，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>是蕴涵和矛盾假设</li>\n</ul>\n<blockquote>\n<p>The training objective <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\ell_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is then defined by (N is the mini-batch size):</p>\n</blockquote>\n<ul>\n<li>训练目标<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">\\ell{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">ℓ</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span></span></span>由（N是最小批量大小）定义：</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mfrac><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mrow><mo fence=\"true\">(</mo><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo>+</mo><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>−</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">-\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N}\\left(e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}+e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{-}\\right) / \\tau}\\right)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.4747700000000004em;vertical-align:-1.69002em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.78475em;\"><span style=\"top:-2.11em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span><span style=\"top:-3.38em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.827em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142855em;\"><span style=\"top:-2.204392857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29560714285714285em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69002em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<blockquote>\n<p>As shown in Table 5, adding hard negatives can further improve performance (84.9 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 86.2) and this is our final supervised SimCSE.</p>\n</blockquote>\n<ul>\n<li>如表5所示，添加消极可以进一步提高性能（84.9$\\rightarrow$86.2），这是我们的最终有监督SimCSE。</li>\n</ul>\n<blockquote>\n<p>We also tried to add the ANLI dataset (Nie et al., 2020) or combine it with our unsupervised SimCSE approach, but didn’t find a meaningful improvement.</p>\n</blockquote>\n<ul>\n<li>我们还尝试添加ANLI数据集或将其与我们的无监督SimCSE方法相结合，但没有发现有意义的改进。</li>\n</ul>\n<blockquote>\n<p>We also considered a dual encoder framework in supervised SimCSE and it hurt performance (86.2<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 84.2).</p>\n</blockquote>\n<ul>\n<li>我们还考虑了监督SimCSE中的双编码器框架，它会影响性能（86.2$\\rightarrow$84.2）。</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings六\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings六\"></a> Simple Contrastive Learning of Sentence Embeddings（六）</h1>\n<h3 id=\"3-unsupervised-simcse-and-supervised-simcse\"><a class=\"markdownIt-Anchor\" href=\"#3-unsupervised-simcse-and-supervised-simcse\"></a> 3 Unsupervised SimCSE and supervised SimCSE</h3>\n<hr />\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color = \"red\">还需学习的知识点</font></h4>\n<ul>\n<li>\n<p>dropout mask，mask是什么意思</p>\n</li>\n<li>\n<p>STS-B（Semantic Textual Similarity Benchmark）：语义文本相似度基准</p>\n</li>\n<li>\n<p>write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction).</p>\n</li>\n</ul>\n<hr />\n<blockquote>\n<p>In this section, we describe our unsupervised SimCSE model.</p>\n</blockquote>\n<ul>\n<li>在本节中，我们将介绍我们的无监督SimCSE模型。</li>\n</ul>\n<blockquote>\n<p>The idea is extremely simple: we take a collection of sentences <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mrow><mo fence=\"true\">{</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence=\"true\">}</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\left\\{x_{i}\\right\\}_{i=1}^{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1039919999999999em;vertical-align:-0.29969999999999997em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.4003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29969999999999997em;\"><span></span></span></span></span></span></span></span></span></span> and use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i^+=x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>这个想法非常简单：我们取一组句子<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mrow><mo fence=\"true\">{</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence=\"true\">}</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\left\\{x_{i}\\right\\}_{i=1}^{m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1039919999999999em;vertical-align:-0.29969999999999997em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.4003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29969999999999997em;\"><span></span></span></span></span></span></span></span></span></span>，然后使<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i^+=x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>The key ingredient to get this to work with identical positive pairs is through the use of independently sampled <em>dropout masks</em>.</p>\n</blockquote>\n<ul>\n<li>关键的因素是通过使用独立取样的“dropout masks”，使这项工作与相同的正对。</li>\n</ul>\n<blockquote>\n<p>In standard training of Transformers (Vaswani et al., 2017), there is a dropout mask placed on fully-connected layers as well as attention probabilities (default p = 0.1).</p>\n</blockquote>\n<ul>\n<li>在Transformers的标准训练中，在完全连接的层上以及注意概率（默认p=0.1）上放置了一个dropout mask。</li>\n</ul>\n<blockquote>\n<p>We denote <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi>z</mi></msubsup><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>z</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.953104em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> is a random mask for dropout.</p>\n</blockquote>\n<ul>\n<li>我们用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mi>z</mi></msubsup><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>z</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}_{i}^{z}=f_{\\theta}\\left(x_{i}, z\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.953104em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span>表示，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span>是一个随机的dropout mask</li>\n</ul>\n<blockquote>\n<p>We simply feed the same input to the encoder twice by applying different dropout masks  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mo separator=\"true\">,</mo><msup><mi>z</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">z, z^{\\prime}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and the training objective becomes:</p>\n</blockquote>\n<ul>\n<li>我们只需通过应用不同的dropout mask，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mi mathvariant=\"normal\">，</mi><msup><mi>z</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">z，z^{\\prime}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>将相同的输入输入输入编码器两次，训练目标就变成：</li>\n</ul>\n<blockquote>\n<p>for a mini-batch with N sentences.</p>\n</blockquote>\n<ul>\n<li>对于少量的句子N</li>\n</ul>\n<blockquote>\n<p>Note that z is just the standard dropout mask in Transformers and we do not add any additional dropout.</p>\n</blockquote>\n<ul>\n<li>注意，z只是转变中的标准dropout mask，我们没有添加任何额外的dropout。</li>\n</ul>\n<h4 id=\"dropout-noise-as-data-augmentation-作为数据增强的dropout噪声\"><a class=\"markdownIt-Anchor\" href=\"#dropout-noise-as-data-augmentation-作为数据增强的dropout噪声\"></a> Dropout noise as data augmentation 作为数据增强的dropout噪声</h4>\n<blockquote>\n<p>We view this approach as a minimal form of data augmentation: the positive pair takes exactly the same sentence, and their embeddings only differ in dropout masks.</p>\n</blockquote>\n<ul>\n<li>我们将这种方法视为数据扩充的一种最小形式：正例对采用完全相同的句子，它们的嵌入只在dropout mask上有所不同。</li>\n</ul>\n<blockquote>\n<p>We compare this approach to common augmentation techniques and other training objectives on the STS-B development set (Cer et al., 2017).</p>\n</blockquote>\n<ul>\n<li>我们将这种方法与常见的增强技术和STS-B开发集上的其他训练目标进行了比较。</li>\n</ul>\n<blockquote>\n<p>We use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">N=512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">m = 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span> sentences randomly drawn from English Wikipedia in these experiments.</p>\n</blockquote>\n<p>在这些实验中，我们使用从英文维基百科中随机抽取的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">N=512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">m = 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span> 个句子。</p>\n<blockquote>\n<p><strong>Table 2</strong> compares our approach to common data augmentation techniques such as crop, word deletion and replacement, which can be viewed as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(g(x), z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is a (random) discrete operator on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>表2</strong>将我们的方法与常见的数据扩充技术（如裁剪、字删除和替换）进行了比较，这些技术可以看作是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"bold\">h</mi><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{h}=f_{\\theta}(g(x), z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">h</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> ，而<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>上的（随机）离散运算符。</p>\n<img src=\"Table 2.png\" alt=\"Table 2\" style=\"zoom:50%;\" />\n</li>\n</ul>\n<blockquote>\n<p>We find that even deleting one word would hurt performance and none of the discrete augmentations outperforms basic dropout noise.</p>\n</blockquote>\n<ul>\n<li>我们发现，即使删除一个单词也会影响性能，并且没有一个离散增强比基本的丢失噪声更好。</li>\n</ul>\n<blockquote>\n<p>We also compare this self-prediction training objective to next-sentence objective used in Logeswaran and Lee (2018), taking either one encoder or two independent encoders.</p>\n</blockquote>\n<ul>\n<li>我们还将这个自我预测训练目标与Logeswaran和Lee中使用的下一个句子目标进行比较，选择一个编码器或两个独立的编码器。</li>\n</ul>\n<blockquote>\n<p>As shown in Table 3, we find that SimCSE performs much better than the next-sentence objectives (79.1 vs 69.7 on STS-B) and using one encoder instead of two makes a significant difference in our approach.</p>\n</blockquote>\n<ul>\n<li>\n<p>如表3所示，我们发现SimCSE比下一个句子目标（79.1 vs STS-B为69.7）的表现要好得多，并且使用一个编码器而不是两个编码器使我们的方法有显著的不同。</p>\n<img src=\"Table 3.png\" alt=\"Table 3\" style=\"zoom:50%;\" />\n</li>\n</ul>\n<hr />\n<h4 id=\"why-does-it-work\"><a class=\"markdownIt-Anchor\" href=\"#why-does-it-work\"></a> Why does it work?</h4>\n<blockquote>\n<p>To further understand the role of dropout noise in unsupervised SimCSE, we try out different dropout rates in Table 4 and observe that all the variants underperform the default dropout probability p = 0.1 from Transformers.</p>\n</blockquote>\n<ul>\n<li>为了进一步了解在无监督SimCSE中丢失噪声的作用，我们在表4中尝试了不同的丢失率，并观察到所有变体都低于Transformers的默认丢失概率p=0.1。</li>\n</ul>\n<img src=\"Table 4.png\" alt=\"Table 4\" style=\"zoom:50%;\" />\n<blockquote>\n<p>We find two extreme cases particularly interesting: “no dropout” (p = 0) and “fixed 0.1” (using default dropout p = 0.1 but the same dropout masks for the pair).</p>\n</blockquote>\n<ul>\n<li>我们发现两个极端的情况特别有趣：“无dropout”（p=0）和“固定0.1”（使用默认的dropoutp=0.1，但对这两种情况使用相同的dropout mask）。</li>\n</ul>\n<p>In both cases, the resulting embeddings for the pair are exactly the same, and it leads to a dramatic performance degradation.</p>\n<ul>\n<li>在这两种情况下，生成的嵌入对完全相同，这会导致性能急剧下降。</li>\n</ul>\n<blockquote>\n<p>We take the checkpoints of these models every 10 steps during training and visualize the alignment and uniformity metrics2 in Figure 2, along with a simple data augmentation model “delete one word”.</p>\n</blockquote>\n<ul>\n<li>在训练过程中，我们每10步对这些模型进行一次检查点检查，并在图2中可视化对齐和一致性度量2，以及一个简单的数据处理模型“删除一个单词”。</li>\n</ul>\n<img src=\"Figure 2.png\" alt=\"Figure 2\" style=\"zoom:50%;\" />\n<blockquote>\n<p>As is clearly shown, all models largely improve the uniformity.</p>\n</blockquote>\n<ul>\n<li>如图所示，所有模型在很大程度上改善了均匀性。</li>\n</ul>\n<blockquote>\n<p>However, the alignment of the two special variants also degrades drastically, while our unsupervised SimCSE keeps a steady alignment, thanks to the use of dropout noise.</p>\n</blockquote>\n<ul>\n<li>然而，这两种特殊变体的对齐也会急剧下降，而我们的无监督SimCSE由于使用了衰减噪声，保持了稳定的对齐。</li>\n</ul>\n<blockquote>\n<p>On the other hand, although “delete one word” slightly improves the alignment, it has a smaller gain on the uniformity, and eventually underperforms unsupervised SimCSE.</p>\n</blockquote>\n<ul>\n<li>另一方面，虽然“删除一个单词”稍微提高了对齐度，但它在一致性方面的增益较小，最终表现不如无监督SimCSE。</li>\n</ul>\n<hr />\n<h3 id=\"4-supervised-simcse\"><a class=\"markdownIt-Anchor\" href=\"#4-supervised-simcse\"></a> 4 Supervised SimCSE</h3>\n<blockquote>\n<p>We have demonstrated that adding dropout noise is able to learn a good alignment for positive pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mtext>pos </mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">pos </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>我们已经证明，对于正对<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>x</mi><mo>+</mo></msup><mo fence=\"true\">)</mo></mrow><mo>∼</mo><msub><mi>p</mi><mtext>pos </mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\left(x, x^{+}\\right) \\sim p_{\\text {pos }}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">pos </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>，添加dropout噪声能够学习良好的对齐性。</li>\n</ul>\n<blockquote>\n<p>In this section, we study whether we can leverage supervised datasets to provide better training signals for improving alignment of our approach.</p>\n</blockquote>\n<ul>\n<li>在本节中，我们将研究是否可以利用监督数据集来提供更好的训练信号，以改进方法的一致性。</li>\n</ul>\n<blockquote>\n<p>Prior work (Conneau et al., 2017; Reimers and Gurevych, 2019) has demonstrated that supervised natural language inference (NLI) datasets (Bowman et al., 2015; Williams et al., 2018) are effective for learning sentence embeddings, by predicting whether the relationship between two sentences is <em>entailment</em>, <em>neutral</em> or <em>contradiction</em>.</p>\n</blockquote>\n<ul>\n<li>前期工作已经证明了有监督的自然语言推理（NLI）数据集通过预测两个句子之间的关系是蕴涵、中性还是矛盾，来有效地学习句子嵌入。</li>\n</ul>\n<blockquote>\n<p>In our contrastive learning framework, we instead directly take <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>pairs from supervised datasets and use them to optimize Eq. 1.</p>\n</blockquote>\n<ul>\n<li>在我们的对比学习框架中，我们直接从有监督的数据集中提取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>对，并使用它们来优化等式1。</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></msub><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\ell_{i}=\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N} e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.238638em;vertical-align:-1.4538879999999998em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.78475em;\"><span style=\"top:-2.1100000000000003em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.35807em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.80507em;\"><span class=\"pstrut\" style=\"height:3.12807em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142855em;\"><span style=\"top:-2.204392857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29560714285714285em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4538879999999998em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<hr />\n<h4 id=\"exploiting-supervised-data利用监督数据\"><a class=\"markdownIt-Anchor\" href=\"#exploiting-supervised-data利用监督数据\"></a> Exploiting supervised data利用监督数据</h4>\n<blockquote>\n<p>We first explore which annotated datasets are especially suitable for constructing positive pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n</blockquote>\n<ul>\n<li>我们首先探讨哪些带注释的数据集特别适合于构造正对<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<blockquote>\n<p>We exiperiment with a number of datasets with sentence-pair examples, including QQP4: Quora question pairs; Flickr30k (Young et al., 2014): each image is annotated with 5 human-written captions and we consider any two captions of the same image as a positive pair; ParaNMT (Wieting and Gimpel, 2018): a large-scale back-translation paraphrase dataset; and finally NLI datasets: SNLI (Bowman et al., 2015) and MNLI (Williams et al., 2018).</p>\n</blockquote>\n<ul>\n<li>我们用一些句子对的例子进行了实验，包括QQP问题对；Flickr：每幅图像都有5个人类书写的字幕注释，我们将同一幅图像的任意两个字幕视为正对；ParaNMT：大规模反译释义数据集；最后是NLI数据集：SNLI和MNLI。</li>\n</ul>\n<blockquote>\n<p>We train the contrastive learning model (Eq. 1) with different datasets and compare the results in Table 5 （for a fair comparison, we also run experiments with the same # of training pairs）.</p>\n</blockquote>\n<ul>\n<li>我们用不同的数据集训练对比学习模型（等式1），并比较表5中的结果（为了公平比较，我们还用相同的训练对进行实验）。</li>\n</ul>\n<img src=\"Table 5.png\" alt=\"Table 5\" style=\"zoom:50%;\" />\n<blockquote>\n<p>We find that most of these models using supervised datasets outperform our unsupervised approach, showing a clear benefit from supervised signals.</p>\n</blockquote>\n<ul>\n<li>我们发现，大多数使用监督数据集的模型都比我们的无监督方法有更好的性能，显示出监督信号的明显优势。</li>\n</ul>\n<blockquote>\n<p>Among all the options, using entailment pairs from the NLI (SNLI + MNLI) datasets perform the best.</p>\n</blockquote>\n<p>在所有选项中，使用NLI（SNLI+MNLI）数据集entailment对表现最好。</p>\n<blockquote>\n<p>We think this is reasonable, as the NLI datasets consist of high-quality and crowd-sourced pairs, and human annotators are expected to write the hypotheses manually based on the premises, and hence two sentences tend to have less lexical overlap.</p>\n</blockquote>\n<ul>\n<li>我们认为这是合理的，因为NLI数据集由高质量和众包的成对数据组成，并且人类注释者需要根据前提手工编写假设，因此两句话的词汇重叠较少。</li>\n</ul>\n<blockquote>\n<p>For instance, we find that the lexical overlap (F1 measured between two bags of words) for the entailment pairs (SNLI + MNLI) is 39%, while they are 60% and 55% for QQP and ParaNMT.</p>\n</blockquote>\n<ul>\n<li>例如，我们发现蕴涵对（SNLI+MNLI）的词汇重叠（两袋词之间的F1）为39%，而QQP和ParaNMT分别为60%和55%。</li>\n</ul>\n<hr />\n<h4 id=\"contradiction-as-hard-negatives否定的矛盾\"><a class=\"markdownIt-Anchor\" href=\"#contradiction-as-hard-negatives否定的矛盾\"></a> Contradiction as hard negatives否定的矛盾</h4>\n<blockquote>\n<p>Finally, we further take the advantage of the NLI datasets by using its contradiction pairs as hard negatives.</p>\n</blockquote>\n<ul>\n<li>最后，我们进一步利用NLI数据集的矛盾对作为硬否定。</li>\n</ul>\n<blockquote>\n<p>In NLI datasets, given one premise, annotators are required to manually write one sentence that is absolutely true (entailment), one that might be true (neutral), and one that is definitely false (contradiction).</p>\n</blockquote>\n<ul>\n<li>在NLI数据集中，给定一个前提，注释者需要手动编写一个绝对正确的句子（蕴涵），一个可能正确的句子（中性），一个绝对错误的句子（矛盾）。</li>\n</ul>\n<blockquote>\n<p>Thus for each premise and its entailment hypothesis, there is an accompanying contradiction hypothesis7 (see Figure 1 for an example).</p>\n</blockquote>\n<ul>\n<li>因此，对于每个前提及其蕴涵假设，都有一个伴随的矛盾假设（参见图1中的示例）。</li>\n</ul>\n<blockquote>\n<p>Formally, we extend <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+,x_i^-)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the premise, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> are entailment and contradiction hypotheses.</p>\n</blockquote>\n<ul>\n<li>形式上，我们将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">（</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">，</mi><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">（x_i，x_i^+）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">）</span></span></span></span>扩展到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup><mo separator=\"true\">,</mo><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i,x_i^+,x_i^-)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是前提，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>x</mi><mi>i</mi><mo>−</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x_i^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.088326em;vertical-align:-0.276864em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.811462em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span>是蕴涵和矛盾假设</li>\n</ul>\n<blockquote>\n<p>The training objective <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\ell_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is then defined by (N is the mini-batch size):</p>\n</blockquote>\n<ul>\n<li>训练目标<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">\\ell{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">ℓ</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span></span></span>由（N是最小批量大小）定义：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mfrac><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>i</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mrow><mo fence=\"true\">(</mo><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>+</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo>+</mo><msup><mi>e</mi><mrow><mi mathvariant=\"normal\">sim</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi mathvariant=\"bold\">h</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msubsup><mi mathvariant=\"bold\">h</mi><mi>j</mi><mo>−</mo></msubsup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">/</mi><mi>τ</mi></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">-\\log \\frac{e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{i}^{+}\\right) / \\tau}}{\\sum_{j=1}^{N}\\left(e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{+}\\right) / \\tau}+e^{\\operatorname{sim}\\left(\\mathbf{h}_{i}, \\mathbf{h}_{j}^{-}\\right) / \\tau}\\right)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.4747700000000004em;vertical-align:-1.69002em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.78475em;\"><span style=\"top:-2.11em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.12807em;\"><span style=\"top:-3.4305700000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8209857142857142em;\"><span style=\"top:-2.177714285714286em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-2.9043214285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46117142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span><span style=\"top:-3.38em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.827em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10775em;\"><span style=\"top:-3.4102500000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">m</span></span><span class=\"minner mtight\"><span class=\"mopen sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">(</span></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">h</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8476642857142855em;\"><span style=\"top:-2.204392857142857em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29560714285714285em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size3 size6 mtight delimcenter\" style=\"top:0.07500000000000001em;\"><span class=\"mtight\">)</span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.1132em;\">τ</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69002em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<blockquote>\n<p>As shown in Table 5, adding hard negatives can further improve performance (84.9 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 86.2) and this is our final supervised SimCSE.</p>\n</blockquote>\n<ul>\n<li>如表5所示，添加消极可以进一步提高性能（84.9$\\rightarrow$86.2），这是我们的最终有监督SimCSE。</li>\n</ul>\n<blockquote>\n<p>We also tried to add the ANLI dataset (Nie et al., 2020) or combine it with our unsupervised SimCSE approach, but didn’t find a meaningful improvement.</p>\n</blockquote>\n<ul>\n<li>我们还尝试添加ANLI数据集或将其与我们的无监督SimCSE方法相结合，但没有发现有意义的改进。</li>\n</ul>\n<blockquote>\n<p>We also considered a dual encoder framework in supervised SimCSE and it hurt performance (86.2<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 84.2).</p>\n</blockquote>\n<ul>\n<li>我们还考虑了监督SimCSE中的双编码器框架，它会影响性能（86.2$\\rightarrow$84.2）。</li>\n</ul>\n"},{"title":"SimCSE（四）","top":false,"cover":false,"toc":false,"mathjax":true,"abbrlink":"40a6","date":"2021-04-28T04:38:25.000Z","password":null,"keywords":null,"description":null,"summary":"SimCSE Introduction","_content":"\n# Simple Contrastive Learning of Sentence Embeddings（四）\n\n**SimCSE**有两个变体：**Unsupervised SimCSE**和**Supervised SimCSE**，主要不同在于对比学习的正负例的构造。下面详细介绍下他们的构造方式。\n\n----\n\n####  <font color = \"red\">还需学习的知识点</font>\n\n- **in-batch和negatives方法还不懂，需要学习**\n\n- **正例和负例具体指什么数据**\n\n- **自然语言推理（NLI）数据集**\n\n- **句子嵌入是什么意思以及如何实现**\n\n- **有监督和无监督是什么意思**\n\n-----\n\n## 无监督SimCSE\n\n> Learning universal sentence embeddings is a fundamental problem in natural language processing and has been studied extensively in the literature.\n\n- 通用句嵌入的学习是自然语言处理中的一个基本问题，已有文献对此进行了广泛的研究。\n\n> In this work, we advance state-of-the-art sentence embedding methods and demonstrate that a contrastive objective can be extremely effective in learning sentence embeddings, coupled with pre-trained language models such as BERT and RoBERTa. \n\n- 在这项工作中，我们提出了最先进的句子嵌入方法，并证明对比目标在学习句子嵌入时是非常有效的，再加上预先训练的语言模型，如BERT和RoBERTa。\n\n> We present SimCSE, a simple contrastive sentence embedding framework, which can be used to produce superior sentence embeddings, from either unlabeled or labeled data.\n\n- 我们提出了一个简单的对比句子嵌入框架SimCSE，它可以用来从未标记或标记的数据中产生更好的句子嵌入。\n\n\n\n> Our *unsupervised* SimCSE simply predicts the input sentence itself, with only *dropout* (Srivastava et al., 2014) used as noise （Figure 1（a））.\n\n- 我们的无监督SimCSE只是预测输入句子本身，只有*dropout*用作噪声（图1（a））。\n\n<img src=\"Unsupervised SimCSE.png\" alt=\"Unsupervised SimCSE\" style=\"zoom:50%;\" />\n\n> In other words, we pass the same input sentence to the pretrained encoder twice and obtain two embeddings as “positive pairs”, by applying independently sampled dropout masks. \n\n- 换言之，我们将相同的输入语句传递给预训练的编码器两次，并通过应用独立采样的dropout掩码获得两个作为“正对”的嵌入。\n\n- 对于**Unsupervised SimCSE**，核心在于如何生成dropout mask。因为BERT内部每次dropout都随机会生成一个不同的dropout mask。所以SimCSL不需要改变原始BERT，只需要将同一个句子喂给模型两次，得到的两个向量就是应用两次不同dropout mask的结果。然后将两个向量作为正例对。（真的simple）\n\n> Although it may appear strikingly simple, we find that this approach largely outperforms training objectives such as predicting next sentences and common data augmentation techniques, e.g., word deletion and replacement.\n\n- 虽然它看起来非常简单，但是我们发现这种方法在很大程度上优于训练目标，例如预测下一句话和常用的数据增强技术，例如单词删除和替换。\n\n> More surprisingly, this unsupervised embedding method already matches all the previous supervised approaches. \n\n- 更令人惊讶的是，这种无监督的嵌入方法已经匹配了所有以前的监督方法。\n\n> Through careful analysis, we find that dropout essentially acts as minimal data augmentation, while removing it leads to a representation collapse.\n\n- 通过仔细的分析，我们发现退dropout本质上是作为最小的数据扩充，而删除它会导致表示崩溃。\n\n**Unsupervised SimCSE** 引入dropout给输入加噪声，假设加噪后的输入仍与原始输入在语义空间距离相近。其正负例的构造方式如下：\n\n> 正例：给定输入，用预训练语言模型编码两次得到的两个向量和作为正例对。我理解的正例就是大于平均值的数据，负例就是低于平均值的数据\n\n> 负例：使用in-batch negatives的方式，即随机采样一个batch中另一个输入作为的负例。\n\n----\n\n## 有监督SimCSE\n\n**Supervised SimCSE**，利用标注数据来构造对比学习的正负例子。为探究哪种标注数据更有利于句子向量的学习，文中在多种数据集上做了实验，最后发现NLI数据最有利于学习句子表示。下面以NLI数据为例介绍Supervised SimCSE的流程。\n\nSupervised SimCSE 引入了NLI任务来监督对比学习过程。该模型假设如果两个句子存在蕴含关系，那么它们之间的句子向量距离应该较近；如果两个句子存在矛盾关系，那么它们的距离应该较远。因此NLI中的蕴含句对和矛盾句对分别对应对比学习中的正例对和负例对。所以在Supervised SimCSE中，正负例的构造方式如下:\n\n> 正例：NLI中entailment关系样例对。负例：a) in-batch negatives b)NLI中关系为contradiction的样例对。\n\n---\n\n> In our *supervised* SimCSE, we build upon the recent success of leveraging natural language inference （NLI） datasets for sentence embeddings （Conneau et al., 2017; Reimers and Gurevych, 2019） and incorporate supervised sentence pairs in contrastive learning （Figure 1(b)）. \n\n- 在我们的有监督SimCSE中，我们建立在利用自然语言推理（NLI）数据集进行句子嵌入的最新成功基础上，并将有监督句对纳入对比学习（图1（b））。\n\n<img src=\"Supervised SimCSE.png\" alt=\"Supervised SimCSE\" style=\"zoom:50%;\" />\n\n> Unlike previous work that casts it as a 3-way classification task （entailment/neutral/contradiction）, we take advantage of the fact that **entailment** pairs can be naturally used as positive instances.\n\n- 与以前的工作不同的是，我们将它作为一个三向分类任务（蕴涵/中立/矛盾），我们利用了蕴涵对可以自然地用作正实例这一事实。\n\n\n\n> We also find that adding corresponding contradiction pairs as hard negatives further improves performance. \n\n- 我们还发现，添加相应的矛盾对作为硬否定进一步提高了性能。\n\n\n\n> This simple use of NLI datasets achieves a greater performance compared to prior methods using the same datasets. \n\n- 与以前使用相同数据集的方法相比，NLI数据集的这种简单使用实现了更高的性能。\n\n> We also compare to other (annotated) sentence-pair datasets and find that NLI datasets are especially effective for learning sentence embeddings.\n\n- 我们还比较了其他（带注释的）句子对数据集，发现NLI数据集对于学习句子嵌入特别有效。\n\n\n\n\n\n> To better understand the superior performance of SimCSE, we borrow the analysis tool from Wang and Isola (2020), which takes *alignment* between semantically-related positive pairs and *uniformity* of the whole representation space to measure the quality of learned embeddings. \n\n- 为了更好地理解SimCSE的优越性能，我们借用了Wang和Isola（2020）的分析工具，它采用语义相关正对之间的对齐度和整个表示空间的一致度来衡量学习嵌入的质量。\n\n\n\n> We prove that theoretically the contrastive learning objective “flattens” the singular value distribution of the sentence embedding space, hence improving the uniformity. \n\n- 我们从理论上证明了对比学习目标“平坦”了句子嵌入空间的奇异值分布，从而提高了一致性。\n\n\n\n\n\n> We also draw a connection to the recent findings that pre-trained word embeddings suffer from anisotropy (Ethayarajh, 2019; Li et al., 2020).\n\n- 我们还与最近的研究结果相联系，即预先训练的单词嵌入会受到各向异性的影响。\n\n\n\n\n\n> We find that our unsupervised SimCSE essentially improves uniformity while avoiding degenerated alignment via dropout noise, thus greatly improves the expressiveness of the representations. \n\n- 我们发现，我们的无监督SimCSE本质上改善了一致性，同时避免了通过丢失噪声退化对齐，从而大大提高了表示的表达能力。\n\n\n\n> We also demonstrate that the NLI training signal can further improve alignment between positive pairs and hence produce better sentence embeddings.\n\n- 我们还证明，NLI训练信号可以进一步改善正对之间的对齐，从而产生更好的句子嵌入。\n\n\n\n\n\n\n\n第三段\n\n\n\n> We conduct a comprehensive evaluation of SimCSE, along with previous state-of-the-art models on 7 semantic textual similarity (STS) tasks and 7 transfer tasks.\n\n- 我们对SimCSE进行了综合评价，并对7个语义-文本相似度（STS）任务和7个迁移任务进行了分析。\n\n\n\n> On STS tasks, we show that our unsupervised and supervised models achieve a 74.5% and 81.6% averaged Spearman’s correlation respectively using BERTbase , largely outperforming previous best (Table 1). \n\n- 在STS任务中，我们发现我们的无监督和有监督模型使用BERTbase分别达到了74.5%和81.6%的平均Spearman相关性，在很大程度上优于以前的最佳（表1）。\n\n\n\n> We also achieve competitive performance on the transfer tasks. Additionally, we identify an incoherent evaluation issue in existing work and consolidate results of different evaluation settings for future research.\n\n- 我们在转移任务上也取得了有竞争力的表现。此外，我们在现有工作中发现了一个不连贯的评估问题，并将不同评估设置的结果进行了整合，以备将来研究之用。\n\n\n\n\n------\n\n\n\n","source":"_posts/SimCSE（四）.md","raw":"---\ntitle: SimCSE（四）\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 论文\n  - 研究生\n  - 知识图谱\n  - SimCSE\ncategories:\n  - 论文\nabbrlink: 40a6\ndate: 2021-04-28 12:38:25\npassword:\nkeywords:\ndescription:\nsummary: SimCSE Introduction\n---\n\n# Simple Contrastive Learning of Sentence Embeddings（四）\n\n**SimCSE**有两个变体：**Unsupervised SimCSE**和**Supervised SimCSE**，主要不同在于对比学习的正负例的构造。下面详细介绍下他们的构造方式。\n\n----\n\n####  <font color = \"red\">还需学习的知识点</font>\n\n- **in-batch和negatives方法还不懂，需要学习**\n\n- **正例和负例具体指什么数据**\n\n- **自然语言推理（NLI）数据集**\n\n- **句子嵌入是什么意思以及如何实现**\n\n- **有监督和无监督是什么意思**\n\n-----\n\n## 无监督SimCSE\n\n> Learning universal sentence embeddings is a fundamental problem in natural language processing and has been studied extensively in the literature.\n\n- 通用句嵌入的学习是自然语言处理中的一个基本问题，已有文献对此进行了广泛的研究。\n\n> In this work, we advance state-of-the-art sentence embedding methods and demonstrate that a contrastive objective can be extremely effective in learning sentence embeddings, coupled with pre-trained language models such as BERT and RoBERTa. \n\n- 在这项工作中，我们提出了最先进的句子嵌入方法，并证明对比目标在学习句子嵌入时是非常有效的，再加上预先训练的语言模型，如BERT和RoBERTa。\n\n> We present SimCSE, a simple contrastive sentence embedding framework, which can be used to produce superior sentence embeddings, from either unlabeled or labeled data.\n\n- 我们提出了一个简单的对比句子嵌入框架SimCSE，它可以用来从未标记或标记的数据中产生更好的句子嵌入。\n\n\n\n> Our *unsupervised* SimCSE simply predicts the input sentence itself, with only *dropout* (Srivastava et al., 2014) used as noise （Figure 1（a））.\n\n- 我们的无监督SimCSE只是预测输入句子本身，只有*dropout*用作噪声（图1（a））。\n\n<img src=\"Unsupervised SimCSE.png\" alt=\"Unsupervised SimCSE\" style=\"zoom:50%;\" />\n\n> In other words, we pass the same input sentence to the pretrained encoder twice and obtain two embeddings as “positive pairs”, by applying independently sampled dropout masks. \n\n- 换言之，我们将相同的输入语句传递给预训练的编码器两次，并通过应用独立采样的dropout掩码获得两个作为“正对”的嵌入。\n\n- 对于**Unsupervised SimCSE**，核心在于如何生成dropout mask。因为BERT内部每次dropout都随机会生成一个不同的dropout mask。所以SimCSL不需要改变原始BERT，只需要将同一个句子喂给模型两次，得到的两个向量就是应用两次不同dropout mask的结果。然后将两个向量作为正例对。（真的simple）\n\n> Although it may appear strikingly simple, we find that this approach largely outperforms training objectives such as predicting next sentences and common data augmentation techniques, e.g., word deletion and replacement.\n\n- 虽然它看起来非常简单，但是我们发现这种方法在很大程度上优于训练目标，例如预测下一句话和常用的数据增强技术，例如单词删除和替换。\n\n> More surprisingly, this unsupervised embedding method already matches all the previous supervised approaches. \n\n- 更令人惊讶的是，这种无监督的嵌入方法已经匹配了所有以前的监督方法。\n\n> Through careful analysis, we find that dropout essentially acts as minimal data augmentation, while removing it leads to a representation collapse.\n\n- 通过仔细的分析，我们发现退dropout本质上是作为最小的数据扩充，而删除它会导致表示崩溃。\n\n**Unsupervised SimCSE** 引入dropout给输入加噪声，假设加噪后的输入仍与原始输入在语义空间距离相近。其正负例的构造方式如下：\n\n> 正例：给定输入，用预训练语言模型编码两次得到的两个向量和作为正例对。我理解的正例就是大于平均值的数据，负例就是低于平均值的数据\n\n> 负例：使用in-batch negatives的方式，即随机采样一个batch中另一个输入作为的负例。\n\n----\n\n## 有监督SimCSE\n\n**Supervised SimCSE**，利用标注数据来构造对比学习的正负例子。为探究哪种标注数据更有利于句子向量的学习，文中在多种数据集上做了实验，最后发现NLI数据最有利于学习句子表示。下面以NLI数据为例介绍Supervised SimCSE的流程。\n\nSupervised SimCSE 引入了NLI任务来监督对比学习过程。该模型假设如果两个句子存在蕴含关系，那么它们之间的句子向量距离应该较近；如果两个句子存在矛盾关系，那么它们的距离应该较远。因此NLI中的蕴含句对和矛盾句对分别对应对比学习中的正例对和负例对。所以在Supervised SimCSE中，正负例的构造方式如下:\n\n> 正例：NLI中entailment关系样例对。负例：a) in-batch negatives b)NLI中关系为contradiction的样例对。\n\n---\n\n> In our *supervised* SimCSE, we build upon the recent success of leveraging natural language inference （NLI） datasets for sentence embeddings （Conneau et al., 2017; Reimers and Gurevych, 2019） and incorporate supervised sentence pairs in contrastive learning （Figure 1(b)）. \n\n- 在我们的有监督SimCSE中，我们建立在利用自然语言推理（NLI）数据集进行句子嵌入的最新成功基础上，并将有监督句对纳入对比学习（图1（b））。\n\n<img src=\"Supervised SimCSE.png\" alt=\"Supervised SimCSE\" style=\"zoom:50%;\" />\n\n> Unlike previous work that casts it as a 3-way classification task （entailment/neutral/contradiction）, we take advantage of the fact that **entailment** pairs can be naturally used as positive instances.\n\n- 与以前的工作不同的是，我们将它作为一个三向分类任务（蕴涵/中立/矛盾），我们利用了蕴涵对可以自然地用作正实例这一事实。\n\n\n\n> We also find that adding corresponding contradiction pairs as hard negatives further improves performance. \n\n- 我们还发现，添加相应的矛盾对作为硬否定进一步提高了性能。\n\n\n\n> This simple use of NLI datasets achieves a greater performance compared to prior methods using the same datasets. \n\n- 与以前使用相同数据集的方法相比，NLI数据集的这种简单使用实现了更高的性能。\n\n> We also compare to other (annotated) sentence-pair datasets and find that NLI datasets are especially effective for learning sentence embeddings.\n\n- 我们还比较了其他（带注释的）句子对数据集，发现NLI数据集对于学习句子嵌入特别有效。\n\n\n\n\n\n> To better understand the superior performance of SimCSE, we borrow the analysis tool from Wang and Isola (2020), which takes *alignment* between semantically-related positive pairs and *uniformity* of the whole representation space to measure the quality of learned embeddings. \n\n- 为了更好地理解SimCSE的优越性能，我们借用了Wang和Isola（2020）的分析工具，它采用语义相关正对之间的对齐度和整个表示空间的一致度来衡量学习嵌入的质量。\n\n\n\n> We prove that theoretically the contrastive learning objective “flattens” the singular value distribution of the sentence embedding space, hence improving the uniformity. \n\n- 我们从理论上证明了对比学习目标“平坦”了句子嵌入空间的奇异值分布，从而提高了一致性。\n\n\n\n\n\n> We also draw a connection to the recent findings that pre-trained word embeddings suffer from anisotropy (Ethayarajh, 2019; Li et al., 2020).\n\n- 我们还与最近的研究结果相联系，即预先训练的单词嵌入会受到各向异性的影响。\n\n\n\n\n\n> We find that our unsupervised SimCSE essentially improves uniformity while avoiding degenerated alignment via dropout noise, thus greatly improves the expressiveness of the representations. \n\n- 我们发现，我们的无监督SimCSE本质上改善了一致性，同时避免了通过丢失噪声退化对齐，从而大大提高了表示的表达能力。\n\n\n\n> We also demonstrate that the NLI training signal can further improve alignment between positive pairs and hence produce better sentence embeddings.\n\n- 我们还证明，NLI训练信号可以进一步改善正对之间的对齐，从而产生更好的句子嵌入。\n\n\n\n\n\n\n\n第三段\n\n\n\n> We conduct a comprehensive evaluation of SimCSE, along with previous state-of-the-art models on 7 semantic textual similarity (STS) tasks and 7 transfer tasks.\n\n- 我们对SimCSE进行了综合评价，并对7个语义-文本相似度（STS）任务和7个迁移任务进行了分析。\n\n\n\n> On STS tasks, we show that our unsupervised and supervised models achieve a 74.5% and 81.6% averaged Spearman’s correlation respectively using BERTbase , largely outperforming previous best (Table 1). \n\n- 在STS任务中，我们发现我们的无监督和有监督模型使用BERTbase分别达到了74.5%和81.6%的平均Spearman相关性，在很大程度上优于以前的最佳（表1）。\n\n\n\n> We also achieve competitive performance on the transfer tasks. Additionally, we identify an incoherent evaluation issue in existing work and consolidate results of different evaluation settings for future research.\n\n- 我们在转移任务上也取得了有竞争力的表现。此外，我们在现有工作中发现了一个不连贯的评估问题，并将不同评估设置的结果进行了整合，以备将来研究之用。\n\n\n\n\n------\n\n\n\n","slug":"SimCSE（四）","published":1,"updated":"2021-04-28T06:46:13.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdib0021zl9k1v8y60hr","content":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings四\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings四\"></a> Simple Contrastive Learning of Sentence Embeddings（四）</h1>\n<p><strong>SimCSE</strong>有两个变体：<strong>Unsupervised SimCSE</strong>和<strong>Supervised SimCSE</strong>，主要不同在于对比学习的正负例的构造。下面详细介绍下他们的构造方式。</p>\n<hr>\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color=\"red\">还需学习的知识点</font></h4>\n<ul>\n<li>\n<p><strong>in-batch和negatives方法还不懂，需要学习</strong></p>\n</li>\n<li>\n<p><strong>正例和负例具体指什么数据</strong></p>\n</li>\n<li>\n<p><strong>自然语言推理（NLI）数据集</strong></p>\n</li>\n<li>\n<p><strong>句子嵌入是什么意思以及如何实现</strong></p>\n</li>\n<li>\n<p><strong>有监督和无监督是什么意思</strong></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"无监督simcse\"><a class=\"markdownIt-Anchor\" href=\"#无监督simcse\"></a> 无监督SimCSE</h2>\n<blockquote>\n<p>Learning universal sentence embeddings is a fundamental problem in natural language processing and has been studied extensively in the literature.</p>\n</blockquote>\n<ul>\n<li>通用句嵌入的学习是自然语言处理中的一个基本问题，已有文献对此进行了广泛的研究。</li>\n</ul>\n<blockquote>\n<p>In this work, we advance state-of-the-art sentence embedding methods and demonstrate that a contrastive objective can be extremely effective in learning sentence embeddings, coupled with pre-trained language models such as BERT and RoBERTa.</p>\n</blockquote>\n<ul>\n<li>在这项工作中，我们提出了最先进的句子嵌入方法，并证明对比目标在学习句子嵌入时是非常有效的，再加上预先训练的语言模型，如BERT和RoBERTa。</li>\n</ul>\n<blockquote>\n<p>We present SimCSE, a simple contrastive sentence embedding framework, which can be used to produce superior sentence embeddings, from either unlabeled or labeled data.</p>\n</blockquote>\n<ul>\n<li>我们提出了一个简单的对比句子嵌入框架SimCSE，它可以用来从未标记或标记的数据中产生更好的句子嵌入。</li>\n</ul>\n<blockquote>\n<p>Our <em>unsupervised</em> SimCSE simply predicts the input sentence itself, with only <em>dropout</em> (Srivastava et al., 2014) used as noise （Figure 1（a））.</p>\n</blockquote>\n<ul>\n<li>我们的无监督SimCSE只是预测输入句子本身，只有<em>dropout</em>用作噪声（图1（a））。</li>\n</ul>\n<img src=\"Unsupervised SimCSE.png\" alt=\"Unsupervised SimCSE\" style=\"zoom:50%;\">\n<blockquote>\n<p>In other words, we pass the same input sentence to the pretrained encoder twice and obtain two embeddings as “positive pairs”, by applying independently sampled dropout masks.</p>\n</blockquote>\n<ul>\n<li>\n<p>换言之，我们将相同的输入语句传递给预训练的编码器两次，并通过应用独立采样的dropout掩码获得两个作为“正对”的嵌入。</p>\n</li>\n<li>\n<p>对于<strong>Unsupervised SimCSE</strong>，核心在于如何生成dropout mask。因为BERT内部每次dropout都随机会生成一个不同的dropout mask。所以SimCSL不需要改变原始BERT，只需要将同一个句子喂给模型两次，得到的两个向量就是应用两次不同dropout mask的结果。然后将两个向量作为正例对。（真的simple）</p>\n</li>\n</ul>\n<blockquote>\n<p>Although it may appear strikingly simple, we find that this approach largely outperforms training objectives such as predicting next sentences and common data augmentation techniques, e.g., word deletion and replacement.</p>\n</blockquote>\n<ul>\n<li>虽然它看起来非常简单，但是我们发现这种方法在很大程度上优于训练目标，例如预测下一句话和常用的数据增强技术，例如单词删除和替换。</li>\n</ul>\n<blockquote>\n<p>More surprisingly, this unsupervised embedding method already matches all the previous supervised approaches.</p>\n</blockquote>\n<ul>\n<li>更令人惊讶的是，这种无监督的嵌入方法已经匹配了所有以前的监督方法。</li>\n</ul>\n<blockquote>\n<p>Through careful analysis, we find that dropout essentially acts as minimal data augmentation, while removing it leads to a representation collapse.</p>\n</blockquote>\n<ul>\n<li>通过仔细的分析，我们发现退dropout本质上是作为最小的数据扩充，而删除它会导致表示崩溃。</li>\n</ul>\n<p><strong>Unsupervised SimCSE</strong> 引入dropout给输入加噪声，假设加噪后的输入仍与原始输入在语义空间距离相近。其正负例的构造方式如下：</p>\n<blockquote>\n<p>正例：给定输入，用预训练语言模型编码两次得到的两个向量和作为正例对。我理解的正例就是大于平均值的数据，负例就是低于平均值的数据</p>\n</blockquote>\n<blockquote>\n<p>负例：使用in-batch negatives的方式，即随机采样一个batch中另一个输入作为的负例。</p>\n</blockquote>\n<hr>\n<h2 id=\"有监督simcse\"><a class=\"markdownIt-Anchor\" href=\"#有监督simcse\"></a> 有监督SimCSE</h2>\n<p><strong>Supervised SimCSE</strong>，利用标注数据来构造对比学习的正负例子。为探究哪种标注数据更有利于句子向量的学习，文中在多种数据集上做了实验，最后发现NLI数据最有利于学习句子表示。下面以NLI数据为例介绍Supervised SimCSE的流程。</p>\n<p>Supervised SimCSE 引入了NLI任务来监督对比学习过程。该模型假设如果两个句子存在蕴含关系，那么它们之间的句子向量距离应该较近；如果两个句子存在矛盾关系，那么它们的距离应该较远。因此NLI中的蕴含句对和矛盾句对分别对应对比学习中的正例对和负例对。所以在Supervised SimCSE中，正负例的构造方式如下:</p>\n<blockquote>\n<p>正例：NLI中entailment关系样例对。负例：a) in-batch negatives b)NLI中关系为contradiction的样例对。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>In our <em>supervised</em> SimCSE, we build upon the recent success of leveraging natural language inference （NLI） datasets for sentence embeddings （Conneau et al., 2017; Reimers and Gurevych, 2019） and incorporate supervised sentence pairs in contrastive learning （Figure 1(b)）.</p>\n</blockquote>\n<ul>\n<li>在我们的有监督SimCSE中，我们建立在利用自然语言推理（NLI）数据集进行句子嵌入的最新成功基础上，并将有监督句对纳入对比学习（图1（b））。</li>\n</ul>\n<img src=\"Supervised SimCSE.png\" alt=\"Supervised SimCSE\" style=\"zoom:50%;\">\n<blockquote>\n<p>Unlike previous work that casts it as a 3-way classification task （entailment/neutral/contradiction）, we take advantage of the fact that <strong>entailment</strong> pairs can be naturally used as positive instances.</p>\n</blockquote>\n<ul>\n<li>与以前的工作不同的是，我们将它作为一个三向分类任务（蕴涵/中立/矛盾），我们利用了蕴涵对可以自然地用作正实例这一事实。</li>\n</ul>\n<blockquote>\n<p>We also find that adding corresponding contradiction pairs as hard negatives further improves performance.</p>\n</blockquote>\n<ul>\n<li>我们还发现，添加相应的矛盾对作为硬否定进一步提高了性能。</li>\n</ul>\n<blockquote>\n<p>This simple use of NLI datasets achieves a greater performance compared to prior methods using the same datasets.</p>\n</blockquote>\n<ul>\n<li>与以前使用相同数据集的方法相比，NLI数据集的这种简单使用实现了更高的性能。</li>\n</ul>\n<blockquote>\n<p>We also compare to other (annotated) sentence-pair datasets and find that NLI datasets are especially effective for learning sentence embeddings.</p>\n</blockquote>\n<ul>\n<li>我们还比较了其他（带注释的）句子对数据集，发现NLI数据集对于学习句子嵌入特别有效。</li>\n</ul>\n<blockquote>\n<p>To better understand the superior performance of SimCSE, we borrow the analysis tool from Wang and Isola (2020), which takes <em>alignment</em> between semantically-related positive pairs and <em>uniformity</em> of the whole representation space to measure the quality of learned embeddings.</p>\n</blockquote>\n<ul>\n<li>为了更好地理解SimCSE的优越性能，我们借用了Wang和Isola（2020）的分析工具，它采用语义相关正对之间的对齐度和整个表示空间的一致度来衡量学习嵌入的质量。</li>\n</ul>\n<blockquote>\n<p>We prove that theoretically the contrastive learning objective “flattens” the singular value distribution of the sentence embedding space, hence improving the uniformity.</p>\n</blockquote>\n<ul>\n<li>我们从理论上证明了对比学习目标“平坦”了句子嵌入空间的奇异值分布，从而提高了一致性。</li>\n</ul>\n<blockquote>\n<p>We also draw a connection to the recent findings that pre-trained word embeddings suffer from anisotropy (Ethayarajh, 2019; Li et al., 2020).</p>\n</blockquote>\n<ul>\n<li>我们还与最近的研究结果相联系，即预先训练的单词嵌入会受到各向异性的影响。</li>\n</ul>\n<blockquote>\n<p>We find that our unsupervised SimCSE essentially improves uniformity while avoiding degenerated alignment via dropout noise, thus greatly improves the expressiveness of the representations.</p>\n</blockquote>\n<ul>\n<li>我们发现，我们的无监督SimCSE本质上改善了一致性，同时避免了通过丢失噪声退化对齐，从而大大提高了表示的表达能力。</li>\n</ul>\n<blockquote>\n<p>We also demonstrate that the NLI training signal can further improve alignment between positive pairs and hence produce better sentence embeddings.</p>\n</blockquote>\n<ul>\n<li>我们还证明，NLI训练信号可以进一步改善正对之间的对齐，从而产生更好的句子嵌入。</li>\n</ul>\n<p>第三段</p>\n<blockquote>\n<p>We conduct a comprehensive evaluation of SimCSE, along with previous state-of-the-art models on 7 semantic textual similarity (STS) tasks and 7 transfer tasks.</p>\n</blockquote>\n<ul>\n<li>我们对SimCSE进行了综合评价，并对7个语义-文本相似度（STS）任务和7个迁移任务进行了分析。</li>\n</ul>\n<blockquote>\n<p>On STS tasks, we show that our unsupervised and supervised models achieve a 74.5% and 81.6% averaged Spearman’s correlation respectively using BERTbase , largely outperforming previous best (Table 1).</p>\n</blockquote>\n<ul>\n<li>在STS任务中，我们发现我们的无监督和有监督模型使用BERTbase分别达到了74.5%和81.6%的平均Spearman相关性，在很大程度上优于以前的最佳（表1）。</li>\n</ul>\n<blockquote>\n<p>We also achieve competitive performance on the transfer tasks. Additionally, we identify an incoherent evaluation issue in existing work and consolidate results of different evaluation settings for future research.</p>\n</blockquote>\n<ul>\n<li>我们在转移任务上也取得了有竞争力的表现。此外，我们在现有工作中发现了一个不连贯的评估问题，并将不同评估设置的结果进行了整合，以备将来研究之用。</li>\n</ul>\n<hr>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"simple-contrastive-learning-of-sentence-embeddings四\"><a class=\"markdownIt-Anchor\" href=\"#simple-contrastive-learning-of-sentence-embeddings四\"></a> Simple Contrastive Learning of Sentence Embeddings（四）</h1>\n<p><strong>SimCSE</strong>有两个变体：<strong>Unsupervised SimCSE</strong>和<strong>Supervised SimCSE</strong>，主要不同在于对比学习的正负例的构造。下面详细介绍下他们的构造方式。</p>\n<hr />\n<h4 id=\"font-color-red还需学习的知识点font\"><a class=\"markdownIt-Anchor\" href=\"#font-color-red还需学习的知识点font\"></a> <font color = \"red\">还需学习的知识点</font></h4>\n<ul>\n<li>\n<p><strong>in-batch和negatives方法还不懂，需要学习</strong></p>\n</li>\n<li>\n<p><strong>正例和负例具体指什么数据</strong></p>\n</li>\n<li>\n<p><strong>自然语言推理（NLI）数据集</strong></p>\n</li>\n<li>\n<p><strong>句子嵌入是什么意思以及如何实现</strong></p>\n</li>\n<li>\n<p><strong>有监督和无监督是什么意思</strong></p>\n</li>\n</ul>\n<hr />\n<h2 id=\"无监督simcse\"><a class=\"markdownIt-Anchor\" href=\"#无监督simcse\"></a> 无监督SimCSE</h2>\n<blockquote>\n<p>Learning universal sentence embeddings is a fundamental problem in natural language processing and has been studied extensively in the literature.</p>\n</blockquote>\n<ul>\n<li>通用句嵌入的学习是自然语言处理中的一个基本问题，已有文献对此进行了广泛的研究。</li>\n</ul>\n<blockquote>\n<p>In this work, we advance state-of-the-art sentence embedding methods and demonstrate that a contrastive objective can be extremely effective in learning sentence embeddings, coupled with pre-trained language models such as BERT and RoBERTa.</p>\n</blockquote>\n<ul>\n<li>在这项工作中，我们提出了最先进的句子嵌入方法，并证明对比目标在学习句子嵌入时是非常有效的，再加上预先训练的语言模型，如BERT和RoBERTa。</li>\n</ul>\n<blockquote>\n<p>We present SimCSE, a simple contrastive sentence embedding framework, which can be used to produce superior sentence embeddings, from either unlabeled or labeled data.</p>\n</blockquote>\n<ul>\n<li>我们提出了一个简单的对比句子嵌入框架SimCSE，它可以用来从未标记或标记的数据中产生更好的句子嵌入。</li>\n</ul>\n<blockquote>\n<p>Our <em>unsupervised</em> SimCSE simply predicts the input sentence itself, with only <em>dropout</em> (Srivastava et al., 2014) used as noise （Figure 1（a））.</p>\n</blockquote>\n<ul>\n<li>我们的无监督SimCSE只是预测输入句子本身，只有<em>dropout</em>用作噪声（图1（a））。</li>\n</ul>\n<img src=\"Unsupervised SimCSE.png\" alt=\"Unsupervised SimCSE\" style=\"zoom:50%;\" />\n<blockquote>\n<p>In other words, we pass the same input sentence to the pretrained encoder twice and obtain two embeddings as “positive pairs”, by applying independently sampled dropout masks.</p>\n</blockquote>\n<ul>\n<li>\n<p>换言之，我们将相同的输入语句传递给预训练的编码器两次，并通过应用独立采样的dropout掩码获得两个作为“正对”的嵌入。</p>\n</li>\n<li>\n<p>对于<strong>Unsupervised SimCSE</strong>，核心在于如何生成dropout mask。因为BERT内部每次dropout都随机会生成一个不同的dropout mask。所以SimCSL不需要改变原始BERT，只需要将同一个句子喂给模型两次，得到的两个向量就是应用两次不同dropout mask的结果。然后将两个向量作为正例对。（真的simple）</p>\n</li>\n</ul>\n<blockquote>\n<p>Although it may appear strikingly simple, we find that this approach largely outperforms training objectives such as predicting next sentences and common data augmentation techniques, e.g., word deletion and replacement.</p>\n</blockquote>\n<ul>\n<li>虽然它看起来非常简单，但是我们发现这种方法在很大程度上优于训练目标，例如预测下一句话和常用的数据增强技术，例如单词删除和替换。</li>\n</ul>\n<blockquote>\n<p>More surprisingly, this unsupervised embedding method already matches all the previous supervised approaches.</p>\n</blockquote>\n<ul>\n<li>更令人惊讶的是，这种无监督的嵌入方法已经匹配了所有以前的监督方法。</li>\n</ul>\n<blockquote>\n<p>Through careful analysis, we find that dropout essentially acts as minimal data augmentation, while removing it leads to a representation collapse.</p>\n</blockquote>\n<ul>\n<li>通过仔细的分析，我们发现退dropout本质上是作为最小的数据扩充，而删除它会导致表示崩溃。</li>\n</ul>\n<p><strong>Unsupervised SimCSE</strong> 引入dropout给输入加噪声，假设加噪后的输入仍与原始输入在语义空间距离相近。其正负例的构造方式如下：</p>\n<blockquote>\n<p>正例：给定输入，用预训练语言模型编码两次得到的两个向量和作为正例对。我理解的正例就是大于平均值的数据，负例就是低于平均值的数据</p>\n</blockquote>\n<blockquote>\n<p>负例：使用in-batch negatives的方式，即随机采样一个batch中另一个输入作为的负例。</p>\n</blockquote>\n<hr />\n<h2 id=\"有监督simcse\"><a class=\"markdownIt-Anchor\" href=\"#有监督simcse\"></a> 有监督SimCSE</h2>\n<p><strong>Supervised SimCSE</strong>，利用标注数据来构造对比学习的正负例子。为探究哪种标注数据更有利于句子向量的学习，文中在多种数据集上做了实验，最后发现NLI数据最有利于学习句子表示。下面以NLI数据为例介绍Supervised SimCSE的流程。</p>\n<p>Supervised SimCSE 引入了NLI任务来监督对比学习过程。该模型假设如果两个句子存在蕴含关系，那么它们之间的句子向量距离应该较近；如果两个句子存在矛盾关系，那么它们的距离应该较远。因此NLI中的蕴含句对和矛盾句对分别对应对比学习中的正例对和负例对。所以在Supervised SimCSE中，正负例的构造方式如下:</p>\n<blockquote>\n<p>正例：NLI中entailment关系样例对。负例：a) in-batch negatives b)NLI中关系为contradiction的样例对。</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>In our <em>supervised</em> SimCSE, we build upon the recent success of leveraging natural language inference （NLI） datasets for sentence embeddings （Conneau et al., 2017; Reimers and Gurevych, 2019） and incorporate supervised sentence pairs in contrastive learning （Figure 1(b)）.</p>\n</blockquote>\n<ul>\n<li>在我们的有监督SimCSE中，我们建立在利用自然语言推理（NLI）数据集进行句子嵌入的最新成功基础上，并将有监督句对纳入对比学习（图1（b））。</li>\n</ul>\n<img src=\"Supervised SimCSE.png\" alt=\"Supervised SimCSE\" style=\"zoom:50%;\" />\n<blockquote>\n<p>Unlike previous work that casts it as a 3-way classification task （entailment/neutral/contradiction）, we take advantage of the fact that <strong>entailment</strong> pairs can be naturally used as positive instances.</p>\n</blockquote>\n<ul>\n<li>与以前的工作不同的是，我们将它作为一个三向分类任务（蕴涵/中立/矛盾），我们利用了蕴涵对可以自然地用作正实例这一事实。</li>\n</ul>\n<blockquote>\n<p>We also find that adding corresponding contradiction pairs as hard negatives further improves performance.</p>\n</blockquote>\n<ul>\n<li>我们还发现，添加相应的矛盾对作为硬否定进一步提高了性能。</li>\n</ul>\n<blockquote>\n<p>This simple use of NLI datasets achieves a greater performance compared to prior methods using the same datasets.</p>\n</blockquote>\n<ul>\n<li>与以前使用相同数据集的方法相比，NLI数据集的这种简单使用实现了更高的性能。</li>\n</ul>\n<blockquote>\n<p>We also compare to other (annotated) sentence-pair datasets and find that NLI datasets are especially effective for learning sentence embeddings.</p>\n</blockquote>\n<ul>\n<li>我们还比较了其他（带注释的）句子对数据集，发现NLI数据集对于学习句子嵌入特别有效。</li>\n</ul>\n<blockquote>\n<p>To better understand the superior performance of SimCSE, we borrow the analysis tool from Wang and Isola (2020), which takes <em>alignment</em> between semantically-related positive pairs and <em>uniformity</em> of the whole representation space to measure the quality of learned embeddings.</p>\n</blockquote>\n<ul>\n<li>为了更好地理解SimCSE的优越性能，我们借用了Wang和Isola（2020）的分析工具，它采用语义相关正对之间的对齐度和整个表示空间的一致度来衡量学习嵌入的质量。</li>\n</ul>\n<blockquote>\n<p>We prove that theoretically the contrastive learning objective “flattens” the singular value distribution of the sentence embedding space, hence improving the uniformity.</p>\n</blockquote>\n<ul>\n<li>我们从理论上证明了对比学习目标“平坦”了句子嵌入空间的奇异值分布，从而提高了一致性。</li>\n</ul>\n<blockquote>\n<p>We also draw a connection to the recent findings that pre-trained word embeddings suffer from anisotropy (Ethayarajh, 2019; Li et al., 2020).</p>\n</blockquote>\n<ul>\n<li>我们还与最近的研究结果相联系，即预先训练的单词嵌入会受到各向异性的影响。</li>\n</ul>\n<blockquote>\n<p>We find that our unsupervised SimCSE essentially improves uniformity while avoiding degenerated alignment via dropout noise, thus greatly improves the expressiveness of the representations.</p>\n</blockquote>\n<ul>\n<li>我们发现，我们的无监督SimCSE本质上改善了一致性，同时避免了通过丢失噪声退化对齐，从而大大提高了表示的表达能力。</li>\n</ul>\n<blockquote>\n<p>We also demonstrate that the NLI training signal can further improve alignment between positive pairs and hence produce better sentence embeddings.</p>\n</blockquote>\n<ul>\n<li>我们还证明，NLI训练信号可以进一步改善正对之间的对齐，从而产生更好的句子嵌入。</li>\n</ul>\n<p>第三段</p>\n<blockquote>\n<p>We conduct a comprehensive evaluation of SimCSE, along with previous state-of-the-art models on 7 semantic textual similarity (STS) tasks and 7 transfer tasks.</p>\n</blockquote>\n<ul>\n<li>我们对SimCSE进行了综合评价，并对7个语义-文本相似度（STS）任务和7个迁移任务进行了分析。</li>\n</ul>\n<blockquote>\n<p>On STS tasks, we show that our unsupervised and supervised models achieve a 74.5% and 81.6% averaged Spearman’s correlation respectively using BERTbase , largely outperforming previous best (Table 1).</p>\n</blockquote>\n<ul>\n<li>在STS任务中，我们发现我们的无监督和有监督模型使用BERTbase分别达到了74.5%和81.6%的平均Spearman相关性，在很大程度上优于以前的最佳（表1）。</li>\n</ul>\n<blockquote>\n<p>We also achieve competitive performance on the transfer tasks. Additionally, we identify an incoherent evaluation issue in existing work and consolidate results of different evaluation settings for future research.</p>\n</blockquote>\n<ul>\n<li>我们在转移任务上也取得了有竞争力的表现。此外，我们在现有工作中发现了一个不连贯的评估问题，并将不同评估设置的结果进行了整合，以备将来研究之用。</li>\n</ul>\n<hr />\n"},{"title":"8月份学习计划","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"学习计划","abbrlink":"b074","date":"2020-08-10T10:17:59.000Z","password":null,"_content":"<center> <h2>8月份学习计划<h2></center>\n\n| <center>8月份</center> | <center>数学</center>                                        | <center>专业课</center>                                      | <center>英语</center>                                | <center>政治</center>                         | <center>完成度</center>          |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---------------------------------------------------- | --------------------------------------------- | -------------------------------- |\n| 8.1                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.2                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.3                    | 1.看线代第3章讲解 <br>2.闭关修炼第一章                       | 1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈 | 1.做真题2015.4并看李旭相应视频 <br>２.背所学课程单词 | 1.社会形态 <br>2.做1000剩余第二章单选         | <center>:sun_with_face:</center> |\n| 8.4                    | 1.看线代第4章讲解 <br>2.闭关修炼第二章 <br>3.18讲第三讲      | 1.2012年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈 | 1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词 | 社会的基本矛盾                                | <center>:frowning:</center>      |\n| 8.5                    | 玩耍                                                         | 玩耍                                                         | 玩耍                                                 | 玩耍                                          | <center>:relaxed:</center>       |\n| 8.6                    | 1.看线代第五章前三课讲解 <br>2.闭关修炼第三章                | 1.2011年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈 | 1.做真题2012.4并看李旭相应视频 <br>２.背所学课程单词 | 1.社会的基本矛盾 <br>2.1000第二章单选对答案   | <center>:sun_with_face:</center> |\n| 8.7                    | 1.看线代第五章后两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲 | 1.2010年软专数据结构基础题 <br>2.整理计网基础第六章blog <br>3.冲刺讲义数据结构看4.6 <br>4.每日一题 栈 | 1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词 | 1.社会形态-1 <br>2.1000第二章单选对答案       | <center>:sun_with_face:</center> |\n| 8.8                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.9                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.10                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.11                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.12                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.13                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.14                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.15                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.16                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.17                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.18                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.19                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.20                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.21                   | 1.线代第六章前两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲 | 1.整理计网基础第七章blog <br>2.算法讲义1页blog整理理解       | 1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词 | 1.社会形态-1                                  | <center>:sun_with_face:</center> |\n| 8.22                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.23                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.24                   | 1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲 | 1.整理计网基础第八章blog <br>2.算法讲义1、2、3页blog整理理解 | 1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词 | 1.马原第五章 <br>2.1000第二章单选对答案       | <center>:frowning:</center>      |\n| 8.25                   | 1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲 | 1.整理计网基础第八章blog剩余部分 <br>2.算法讲义顺序表blog整理 | 1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词 | 1.马原第四章 <br>2.1000第二章单选对答案       | <center>:sun_with_face:</center> |\n| 8.26                   | 1.线代第七章一二课讲解 <br>2.18讲第六讲34课 <br>3.闭关修炼第六章 | 1.整理计网强化部分 <br>2.算法讲义链表blog整理理解            | 1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词 | 1.马原商品的二因素 <br>2.1000第二章单选对答案 | <center>:frowning:</center>      |\n| 8.27                   | 1.线代第七章C组讲解 <br>2.18讲第7讲12课 <br>3.闭关修炼第七章 | 1.整理计网强化部分 <br>2.算法讲义链表剩余blog整理理解        | 1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词 | 1.马原商品的二因素 <br>2.1000第二章单选对答案 |                                  |\n| 8.28                   |                                                              |                                                              |                                                      |                                               |                                  |\n| 8.29                   |                                                              |                                                              |                                                      |                                               |                                  |\n| 8.30                   |                                                              |                                                              |                                                      |                                               |                                  |","source":"_posts/八月份学习计划.md","raw":"---\ntitle: 8月份学习计划\ntop: false\ncover: false\ntoc: false\nmathjax: true\nsummary: 学习计划\ntags:\n  - 考研\n  - 计划\ncategories:\n  - 男男\nabbrlink: b074\ndate: 2020-08-10 18:17:59\npassword:\n---\n<center> <h2>8月份学习计划<h2></center>\n\n| <center>8月份</center> | <center>数学</center>                                        | <center>专业课</center>                                      | <center>英语</center>                                | <center>政治</center>                         | <center>完成度</center>          |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---------------------------------------------------- | --------------------------------------------- | -------------------------------- |\n| 8.1                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.2                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.3                    | 1.看线代第3章讲解 <br>2.闭关修炼第一章                       | 1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈 | 1.做真题2015.4并看李旭相应视频 <br>２.背所学课程单词 | 1.社会形态 <br>2.做1000剩余第二章单选         | <center>:sun_with_face:</center> |\n| 8.4                    | 1.看线代第4章讲解 <br>2.闭关修炼第二章 <br>3.18讲第三讲      | 1.2012年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈 | 1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词 | 社会的基本矛盾                                | <center>:frowning:</center>      |\n| 8.5                    | 玩耍                                                         | 玩耍                                                         | 玩耍                                                 | 玩耍                                          | <center>:relaxed:</center>       |\n| 8.6                    | 1.看线代第五章前三课讲解 <br>2.闭关修炼第三章                | 1.2011年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈 | 1.做真题2012.4并看李旭相应视频 <br>２.背所学课程单词 | 1.社会的基本矛盾 <br>2.1000第二章单选对答案   | <center>:sun_with_face:</center> |\n| 8.7                    | 1.看线代第五章后两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲 | 1.2010年软专数据结构基础题 <br>2.整理计网基础第六章blog <br>3.冲刺讲义数据结构看4.6 <br>4.每日一题 栈 | 1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词 | 1.社会形态-1 <br>2.1000第二章单选对答案       | <center>:sun_with_face:</center> |\n| 8.8                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.9                    | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.10                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.11                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.12                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.13                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.14                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.15                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.16                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.17                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.18                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.19                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.20                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.21                   | 1.线代第六章前两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲 | 1.整理计网基础第七章blog <br>2.算法讲义1页blog整理理解       | 1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词 | 1.社会形态-1                                  | <center>:sun_with_face:</center> |\n| 8.22                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.23                   | 休息一天                                                     | 休息一天                                                     | 休息一天                                             | 休息一天                                      | <center>:relaxed:</center>       |\n| 8.24                   | 1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲 | 1.整理计网基础第八章blog <br>2.算法讲义1、2、3页blog整理理解 | 1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词 | 1.马原第五章 <br>2.1000第二章单选对答案       | <center>:frowning:</center>      |\n| 8.25                   | 1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲 | 1.整理计网基础第八章blog剩余部分 <br>2.算法讲义顺序表blog整理 | 1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词 | 1.马原第四章 <br>2.1000第二章单选对答案       | <center>:sun_with_face:</center> |\n| 8.26                   | 1.线代第七章一二课讲解 <br>2.18讲第六讲34课 <br>3.闭关修炼第六章 | 1.整理计网强化部分 <br>2.算法讲义链表blog整理理解            | 1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词 | 1.马原商品的二因素 <br>2.1000第二章单选对答案 | <center>:frowning:</center>      |\n| 8.27                   | 1.线代第七章C组讲解 <br>2.18讲第7讲12课 <br>3.闭关修炼第七章 | 1.整理计网强化部分 <br>2.算法讲义链表剩余blog整理理解        | 1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词 | 1.马原商品的二因素 <br>2.1000第二章单选对答案 |                                  |\n| 8.28                   |                                                              |                                                              |                                                      |                                               |                                  |\n| 8.29                   |                                                              |                                                              |                                                      |                                               |                                  |\n| 8.30                   |                                                              |                                                              |                                                      |                                               |                                  |","slug":"八月份学习计划","published":1,"updated":"2020-09-19T13:35:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdic0025zl9k2xxbhq0u","content":"<center> <h2>8月份学习计划</h2><h2></h2></center>\n<table>\n<thead>\n<tr>\n<th><center>8月份</center></th>\n<th><center>数学</center></th>\n<th><center>专业课</center></th>\n<th><center>英语</center></th>\n<th><center>政治</center></th>\n<th><center>完成度</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8.1</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.2</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.3</td>\n<td>1.看线代第3章讲解 <br>2.闭关修炼第一章</td>\n<td>1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈</td>\n<td>1.做真题2015.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态 <br>2.做1000剩余第二章单选</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.4</td>\n<td>1.看线代第4章讲解 <br>2.闭关修炼第二章 <br>3.18讲第三讲</td>\n<td>1.2012年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈</td>\n<td>1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>社会的基本矛盾</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>8.5</td>\n<td>玩耍</td>\n<td>玩耍</td>\n<td>玩耍</td>\n<td>玩耍</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.6</td>\n<td>1.看线代第五章前三课讲解 <br>2.闭关修炼第三章</td>\n<td>1.2011年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈</td>\n<td>1.做真题2012.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会的基本矛盾 <br>2.1000第二章单选对答案</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.7</td>\n<td>1.看线代第五章后两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲</td>\n<td>1.2010年软专数据结构基础题 <br>2.整理计网基础第六章blog <br>3.冲刺讲义数据结构看4.6 <br>4.每日一题 栈</td>\n<td>1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态-1 <br>2.1000第二章单选对答案</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.8</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.9</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.10</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.11</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.12</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.13</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.14</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.15</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.16</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.17</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.18</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.19</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.20</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.21</td>\n<td>1.线代第六章前两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲</td>\n<td>1.整理计网基础第七章blog <br>2.算法讲义1页blog整理理解</td>\n<td>1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态-1</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.22</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.23</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.24</td>\n<td>1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲</td>\n<td>1.整理计网基础第八章blog <br>2.算法讲义1、2、3页blog整理理解</td>\n<td>1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原第五章 <br>2.1000第二章单选对答案</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>8.25</td>\n<td>1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲</td>\n<td>1.整理计网基础第八章blog剩余部分 <br>2.算法讲义顺序表blog整理</td>\n<td>1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原第四章 <br>2.1000第二章单选对答案</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.26</td>\n<td>1.线代第七章一二课讲解 <br>2.18讲第六讲34课 <br>3.闭关修炼第六章</td>\n<td>1.整理计网强化部分 <br>2.算法讲义链表blog整理理解</td>\n<td>1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原商品的二因素 <br>2.1000第二章单选对答案</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>8.27</td>\n<td>1.线代第七章C组讲解 <br>2.18讲第7讲12课 <br>3.闭关修炼第七章</td>\n<td>1.整理计网强化部分 <br>2.算法讲义链表剩余blog整理理解</td>\n<td>1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原商品的二因素 <br>2.1000第二章单选对答案</td>\n<td></td>\n</tr>\n<tr>\n<td>8.28</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.29</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.30</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<center> <h2>8月份学习计划<h2></center>\n<table>\n<thead>\n<tr>\n<th><center>8月份</center></th>\n<th><center>数学</center></th>\n<th><center>专业课</center></th>\n<th><center>英语</center></th>\n<th><center>政治</center></th>\n<th><center>完成度</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8.1</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.2</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.3</td>\n<td>1.看线代第3章讲解 <br>2.闭关修炼第一章</td>\n<td>1.2013年软专数据结构基础题 <br>2.整理计网基础剩余第四章blog <br>3.冲刺讲义数据结构看4.4 <br>4.每日一题 栈</td>\n<td>1.做真题2015.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态 <br>2.做1000剩余第二章单选</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.4</td>\n<td>1.看线代第4章讲解 <br>2.闭关修炼第二章 <br>3.18讲第三讲</td>\n<td>1.2012年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈</td>\n<td>1.做真题2012.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>社会的基本矛盾</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>8.5</td>\n<td>玩耍</td>\n<td>玩耍</td>\n<td>玩耍</td>\n<td>玩耍</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.6</td>\n<td>1.看线代第五章前三课讲解 <br>2.闭关修炼第三章</td>\n<td>1.2011年软专数据结构基础题 <br>2.整理计网基础第五章blog <br>3.冲刺讲义数据结构看4.5 <br>4.每日一题 栈</td>\n<td>1.做真题2012.4并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会的基本矛盾 <br>2.1000第二章单选对答案</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.7</td>\n<td>1.看线代第五章后两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲</td>\n<td>1.2010年软专数据结构基础题 <br>2.整理计网基础第六章blog <br>3.冲刺讲义数据结构看4.6 <br>4.每日一题 栈</td>\n<td>1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态-1 <br>2.1000第二章单选对答案</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.8</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.9</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.10</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.11</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.12</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.13</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.14</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.15</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.16</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.17</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.18</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.19</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.20</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.21</td>\n<td>1.线代第六章前两课讲解 <br>2.闭关修炼第四章 <br>3.18讲第四讲</td>\n<td>1.整理计网基础第七章blog <br>2.算法讲义1页blog整理理解</td>\n<td>1.做真题2013.1并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.社会形态-1</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.22</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.23</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><center>☺️</center></td>\n</tr>\n<tr>\n<td>8.24</td>\n<td>1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲</td>\n<td>1.整理计网基础第八章blog <br>2.算法讲义1、2、3页blog整理理解</td>\n<td>1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原第五章 <br>2.1000第二章单选对答案</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>8.25</td>\n<td>1.线代第六章三四课讲解 <br>2.闭关修炼第五章 <br>3.18讲第五讲</td>\n<td>1.整理计网基础第八章blog剩余部分 <br>2.算法讲义顺序表blog整理</td>\n<td>1.做真题2013.2并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原第四章 <br>2.1000第二章单选对答案</td>\n<td><center>🌞</center></td>\n</tr>\n<tr>\n<td>8.26</td>\n<td>1.线代第七章一二课讲解 <br>2.18讲第六讲34课 <br>3.闭关修炼第六章</td>\n<td>1.整理计网强化部分 <br>2.算法讲义链表blog整理理解</td>\n<td>1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原商品的二因素 <br>2.1000第二章单选对答案</td>\n<td><center>😦</center></td>\n</tr>\n<tr>\n<td>8.27</td>\n<td>1.线代第七章C组讲解 <br>2.18讲第7讲12课 <br>3.闭关修炼第七章</td>\n<td>1.整理计网强化部分 <br>2.算法讲义链表剩余blog整理理解</td>\n<td>1.做真题2013.3并看李旭相应视频 <br>２.背所学课程单词</td>\n<td>1.马原商品的二因素 <br>2.1000第二章单选对答案</td>\n<td></td>\n</tr>\n<tr>\n<td>8.28</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.29</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.30</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"图相关代码","top":false,"cover":false,"toc":false,"mathjax":false,"summary":"图代码整理","abbrlink":"ad5b","date":"2020-09-08T12:24:21.000Z","password":null,"_content":"## 图相关代码\n\n> #### 1.邻接矩阵存储结构定义\n\n```c\n#define MaxVertexNum 100                   //顶点数目的最大值\ntypedef char VertexType;                   //顶点的数据类型\ntypedef int EdgeType;                      //带权图中边上权值的数据类型\ntypedef struct{\n    char Vex[MaxVertexNum];                //顶点表\n    int Edge[MaxVertexNum][MaxVertexNum];  //邻接矩阵，边表\n    int vexnum,arcnum;                     //图的当前顶点数和弧数\n}MGraph;\n```\n\n> #### 2.邻接表存储结构定义\n\n```c\n#define MaxVertexNum 100                   //顶点数目的最大值\ntypedef struct ArcNode{                    //边表结点\n    int adjvex;                            //邻接顶点\n    struct ArcNode *nextarc;                  //指向下一条边\n    //InfoType info;                       //网的边权值\n}ArcNode;//邻接表的边类型\ntypedef struct VNode{                      //顶点表结点\n    char data;                             //顶点信息\n    ArcNode *firstarc;                        //指向第一条邻接边的指针\n}VNode;//邻接表的顶点类型\ntypedef struct{\n    VNode vexset[MaxSize];   //顶点集，每个顶点都有指向第一条边的指针，所以不用定义边集\n    int vexnum,arcnum;                     //顶点数和边数\n}ALGraph;                                  //ALGraph是以邻接表存储的图类型\n```\n\n> #### 3.广度优先搜索（BFS）\n\n```c\nbool visited[MAX_VERTEX_NUM];        //标记访问数组\nvoid BFSTraverse(Graph G){           //对图G进行广度优先遍历\n    for(i=0;i<G.vexnum;++i){\n        visited[i] = FALSE;          //访问标记数组初始化\n    }\n    InitQueue(Q);                    //初始化辅助队列Q\n    for(i=0;i<G.vexnum;==i){         //从0号顶点开始遍历\n        if(!visited[i]){             //对每个连通分量调用一次BFS\n            BFS(G,i);                //vi从未被访问过，从vi开始BFS\n        }\n    }\n}\nvoid BFS(Graph G,int v){             //从定点v出发，广度优先遍历图G\n    visit(v);                        //访问初始顶点v\n    visited[v] = TRUE;               //对v做已访问标记\n    Enqueue(Q,v);                    //顶点v入队列Q\n    while(!IsEmpty(Q)){\n        Dequeue(Q,v);                //顶点v出队列\n        for(w=FirstNeighbor(G,v);w>=0;w=NextNeighbor(G,v,w)){\n                                     //检测v所有邻接点\n            if(!visited[w]){         //w为v的尚未访问的邻接结点\n                visit(w);            //访问顶点w\n                visited[w] = TRUE;   //对w做已访问标记\n                Enqueue(Q,w);        //顶点w入队列\n            }//if\n        }\n    }//while\n}\n```\n\n> #### 4.BFS算法求解单元最短路径\n\n```c\nvoid BFS_MIN_Distance(Graph G,int u){\n    int d[G.vexnum];\n    //d[i]表示从u到i的最短路径\n    for(int i=0;i<G.vexnum;i++){\n        d[i] = 1000000;              //初始化路径长度\n    }\n    visited[u] = TRUE;\n    d[u] = 0;\n    EnQueue(Q,u);\n    while(!IsEmpty(Q)){              //BFS算法主过程\n        Dequeue(Q,u);                //对头元素u出队\n        for(w=FirstNeighbor(G,u);w>=0;w=NextNeighbor(G,u,w)){\n                                     //检测u所有邻接点\n            if(!visited[w]){         //w为u的尚未访问的邻接结点\n                visit(w);            //访问顶点w\n                visited[w] = TRUE;   //对w做已访问标记\n                d[w] = d[u] + 1;     //路径长度加1\n                Enqueue(Q,w);        //顶点w入队列\n            }//if\n        }\n    }//while\n}\n```\n\n> #### 5.深度优先搜索（DFS）递归\n\n```c\nbool visited[MAX_VERTEX_NUM];        //标记访问数组\nvoid DFSTraverse(Graph G){           //对图G进行广度优先遍历\n    for(v=0;v<G.vexnum;++v){\n        visited[v] = FALSE;          //访问标记数组初始化\n    }\n    for(v=0;v<G.vexnum;++v){         //从0号顶点开始遍历\n        if(!visited[i]){             //对每个连通分量调用一次BFS\n            DFS(G,i);                //vi从未被访问过，从vi开始BFS\n        }\n    }\n}\nvoid DFS(Graph G,int v){\n    visit(v);                        //访问顶点v\n    visited[v] = TRUE;               //设已访问标记\n    for(w=FirstNeighbor(G,v);w>=0;w=NextNeighbor(G,v,w)){\n                                     //检测v所有邻接点\n            if(!visited[w]){         //w为v的尚未访问的邻接结点\n                DFS(G,w);\n            }//if\n        }\n}\n```\n\n> #### 6.深度优先搜索（DFS）非递归\n\n- 因为使用了栈，使得遍历的方式从右到左进行，但仍然是深度优先遍历\n\n```c\nvoid DFS_Non_Rc(Graph G,int v){\n    //从顶点v开始进行深度优先搜索，一次遍历一个连通分量的所有顶点\n    int w;                             //顶点序号\n    InitStack(S);                      //初始化栈S\n    for(int i=0;i<G.vexnum;i++){\n        visited[i] = FALSE;            //初始化visited\n    }\n    push(S,v);                         //v入栈\n    visited[v] = TRUE;                 //并且置visited[v]为真\n    while(!IsEmpty(S)){\n        k = Pop(S);                    //栈中退出一个顶点\n        visit(k);                      //先访问，再将其子结点入栈\n        for(w=FirstNeighbor(G,k);w>=0;w=NextNeighbor(G,k,w)){\n                                       //检测k所有邻接点\n            if(!visited[w]){           //w为k的尚未访问的邻接结点\n                Push(S,w);             //访问顶点w\n                visited[w] = TRUE;     //对w做已访问标记\n            }//if\n        }\n    }//while\n}//DFS_Non_Rc\n```\n\n> #### 7.判断图是否为一棵树\n\n- 如果有环，则失败，不是一棵树\n\n```c\nbool BFS(Graph G,int v){\n    visit(v);//\n    visited[v] = TRUE;//\n    Enqueue(Q,v);//\n    while(!IsEmpty(Q)){\n        Dequeue(Q,v);//\n        for(w=FirstNeighbor(G,v);w>=0;w=NextNeighbor(G,v,w)){\n                                       //检测k所有邻接点\n            if(!visited[w]){           //w为k的尚未访问的邻接结点\n                visited[w] = TRUE;     //对w做已访问标记\n                Enqueue(Q,w);//\n            }else{\n                return false;\n            }\n        }\n    }//while\n    return true;\n}\n```\n\n> #### 8.找出u结点到v结点的所有路径\n\n- 基于深度优先遍历算法，从结点u出发，递归深度优先遍历图中结点，若访问到结点v，则输出该搜索路径上的结点。\n- 为此，设置一个path数组来存放路径上的结点（初始为空），d表示路径长度（初始为-1）。\n\n```c\nvoid FindPath(Graph G,int u,int v,int path[],int d){\n    int w,i;\n    ArcNode *p;                   //邻接表定义方法\n    d++;                          //路径长度加一\n    path[d] = u;                  //写入路径数组\n    visited[u] = 1;               //已访问过标记\n    if(u == v){\n        print(path[]);            //输出路径\n    }\n    p = G->adjlist[u].firstarc;   //找到相邻接点\n    while(p!=NULL){\n        w = p->adjvex;            //w未被访问，则递归访问\n        if(visited[w] == 0){\n            FindPath(G,w,V,path,d);\n        }\n        p = p->nextarc;           //指向u的下一个结点\n    }\n    visited[u] = 0;               //恢复环境，使该顶点可重新使用\n    \n}\n```\n\n","source":"_posts/图相关代码.md","raw":"---\ntitle: 图相关代码\ntop: false\ncover: false\ntoc: false\nmathjax: false\ntags:\n  - 代码\n  - 考研\n  - 图\ncategories:\n  - 代码\nsummary: 图代码整理\nabbrlink: ad5b\ndate: 2020-09-08 20:24:21\npassword:\n---\n## 图相关代码\n\n> #### 1.邻接矩阵存储结构定义\n\n```c\n#define MaxVertexNum 100                   //顶点数目的最大值\ntypedef char VertexType;                   //顶点的数据类型\ntypedef int EdgeType;                      //带权图中边上权值的数据类型\ntypedef struct{\n    char Vex[MaxVertexNum];                //顶点表\n    int Edge[MaxVertexNum][MaxVertexNum];  //邻接矩阵，边表\n    int vexnum,arcnum;                     //图的当前顶点数和弧数\n}MGraph;\n```\n\n> #### 2.邻接表存储结构定义\n\n```c\n#define MaxVertexNum 100                   //顶点数目的最大值\ntypedef struct ArcNode{                    //边表结点\n    int adjvex;                            //邻接顶点\n    struct ArcNode *nextarc;                  //指向下一条边\n    //InfoType info;                       //网的边权值\n}ArcNode;//邻接表的边类型\ntypedef struct VNode{                      //顶点表结点\n    char data;                             //顶点信息\n    ArcNode *firstarc;                        //指向第一条邻接边的指针\n}VNode;//邻接表的顶点类型\ntypedef struct{\n    VNode vexset[MaxSize];   //顶点集，每个顶点都有指向第一条边的指针，所以不用定义边集\n    int vexnum,arcnum;                     //顶点数和边数\n}ALGraph;                                  //ALGraph是以邻接表存储的图类型\n```\n\n> #### 3.广度优先搜索（BFS）\n\n```c\nbool visited[MAX_VERTEX_NUM];        //标记访问数组\nvoid BFSTraverse(Graph G){           //对图G进行广度优先遍历\n    for(i=0;i<G.vexnum;++i){\n        visited[i] = FALSE;          //访问标记数组初始化\n    }\n    InitQueue(Q);                    //初始化辅助队列Q\n    for(i=0;i<G.vexnum;==i){         //从0号顶点开始遍历\n        if(!visited[i]){             //对每个连通分量调用一次BFS\n            BFS(G,i);                //vi从未被访问过，从vi开始BFS\n        }\n    }\n}\nvoid BFS(Graph G,int v){             //从定点v出发，广度优先遍历图G\n    visit(v);                        //访问初始顶点v\n    visited[v] = TRUE;               //对v做已访问标记\n    Enqueue(Q,v);                    //顶点v入队列Q\n    while(!IsEmpty(Q)){\n        Dequeue(Q,v);                //顶点v出队列\n        for(w=FirstNeighbor(G,v);w>=0;w=NextNeighbor(G,v,w)){\n                                     //检测v所有邻接点\n            if(!visited[w]){         //w为v的尚未访问的邻接结点\n                visit(w);            //访问顶点w\n                visited[w] = TRUE;   //对w做已访问标记\n                Enqueue(Q,w);        //顶点w入队列\n            }//if\n        }\n    }//while\n}\n```\n\n> #### 4.BFS算法求解单元最短路径\n\n```c\nvoid BFS_MIN_Distance(Graph G,int u){\n    int d[G.vexnum];\n    //d[i]表示从u到i的最短路径\n    for(int i=0;i<G.vexnum;i++){\n        d[i] = 1000000;              //初始化路径长度\n    }\n    visited[u] = TRUE;\n    d[u] = 0;\n    EnQueue(Q,u);\n    while(!IsEmpty(Q)){              //BFS算法主过程\n        Dequeue(Q,u);                //对头元素u出队\n        for(w=FirstNeighbor(G,u);w>=0;w=NextNeighbor(G,u,w)){\n                                     //检测u所有邻接点\n            if(!visited[w]){         //w为u的尚未访问的邻接结点\n                visit(w);            //访问顶点w\n                visited[w] = TRUE;   //对w做已访问标记\n                d[w] = d[u] + 1;     //路径长度加1\n                Enqueue(Q,w);        //顶点w入队列\n            }//if\n        }\n    }//while\n}\n```\n\n> #### 5.深度优先搜索（DFS）递归\n\n```c\nbool visited[MAX_VERTEX_NUM];        //标记访问数组\nvoid DFSTraverse(Graph G){           //对图G进行广度优先遍历\n    for(v=0;v<G.vexnum;++v){\n        visited[v] = FALSE;          //访问标记数组初始化\n    }\n    for(v=0;v<G.vexnum;++v){         //从0号顶点开始遍历\n        if(!visited[i]){             //对每个连通分量调用一次BFS\n            DFS(G,i);                //vi从未被访问过，从vi开始BFS\n        }\n    }\n}\nvoid DFS(Graph G,int v){\n    visit(v);                        //访问顶点v\n    visited[v] = TRUE;               //设已访问标记\n    for(w=FirstNeighbor(G,v);w>=0;w=NextNeighbor(G,v,w)){\n                                     //检测v所有邻接点\n            if(!visited[w]){         //w为v的尚未访问的邻接结点\n                DFS(G,w);\n            }//if\n        }\n}\n```\n\n> #### 6.深度优先搜索（DFS）非递归\n\n- 因为使用了栈，使得遍历的方式从右到左进行，但仍然是深度优先遍历\n\n```c\nvoid DFS_Non_Rc(Graph G,int v){\n    //从顶点v开始进行深度优先搜索，一次遍历一个连通分量的所有顶点\n    int w;                             //顶点序号\n    InitStack(S);                      //初始化栈S\n    for(int i=0;i<G.vexnum;i++){\n        visited[i] = FALSE;            //初始化visited\n    }\n    push(S,v);                         //v入栈\n    visited[v] = TRUE;                 //并且置visited[v]为真\n    while(!IsEmpty(S)){\n        k = Pop(S);                    //栈中退出一个顶点\n        visit(k);                      //先访问，再将其子结点入栈\n        for(w=FirstNeighbor(G,k);w>=0;w=NextNeighbor(G,k,w)){\n                                       //检测k所有邻接点\n            if(!visited[w]){           //w为k的尚未访问的邻接结点\n                Push(S,w);             //访问顶点w\n                visited[w] = TRUE;     //对w做已访问标记\n            }//if\n        }\n    }//while\n}//DFS_Non_Rc\n```\n\n> #### 7.判断图是否为一棵树\n\n- 如果有环，则失败，不是一棵树\n\n```c\nbool BFS(Graph G,int v){\n    visit(v);//\n    visited[v] = TRUE;//\n    Enqueue(Q,v);//\n    while(!IsEmpty(Q)){\n        Dequeue(Q,v);//\n        for(w=FirstNeighbor(G,v);w>=0;w=NextNeighbor(G,v,w)){\n                                       //检测k所有邻接点\n            if(!visited[w]){           //w为k的尚未访问的邻接结点\n                visited[w] = TRUE;     //对w做已访问标记\n                Enqueue(Q,w);//\n            }else{\n                return false;\n            }\n        }\n    }//while\n    return true;\n}\n```\n\n> #### 8.找出u结点到v结点的所有路径\n\n- 基于深度优先遍历算法，从结点u出发，递归深度优先遍历图中结点，若访问到结点v，则输出该搜索路径上的结点。\n- 为此，设置一个path数组来存放路径上的结点（初始为空），d表示路径长度（初始为-1）。\n\n```c\nvoid FindPath(Graph G,int u,int v,int path[],int d){\n    int w,i;\n    ArcNode *p;                   //邻接表定义方法\n    d++;                          //路径长度加一\n    path[d] = u;                  //写入路径数组\n    visited[u] = 1;               //已访问过标记\n    if(u == v){\n        print(path[]);            //输出路径\n    }\n    p = G->adjlist[u].firstarc;   //找到相邻接点\n    while(p!=NULL){\n        w = p->adjvex;            //w未被访问，则递归访问\n        if(visited[w] == 0){\n            FindPath(G,w,V,path,d);\n        }\n        p = p->nextarc;           //指向u的下一个结点\n    }\n    visited[u] = 0;               //恢复环境，使该顶点可重新使用\n    \n}\n```\n\n","slug":"图相关代码","published":1,"updated":"2020-10-07T11:12:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdid0029zl9k947b69ij","content":"<h2 id=\"图相关代码\"><a class=\"markdownIt-Anchor\" href=\"#图相关代码\"></a> 图相关代码</h2>\n<blockquote>\n<h4 id=\"1邻接矩阵存储结构定义\"><a class=\"markdownIt-Anchor\" href=\"#1邻接矩阵存储结构定义\"></a> 1.邻接矩阵存储结构定义</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100                   <span class=\"hljs-comment\">//顶点数目的最大值</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">char</span> VertexType;                   <span class=\"hljs-comment\">//顶点的数据类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> EdgeType;                      <span class=\"hljs-comment\">//带权图中边上权值的数据类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>{</span>\n    <span class=\"hljs-keyword\">char</span> Vex[MaxVertexNum];                <span class=\"hljs-comment\">//顶点表</span>\n    <span class=\"hljs-keyword\">int</span> Edge[MaxVertexNum][MaxVertexNum];  <span class=\"hljs-comment\">//邻接矩阵，边表</span>\n    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;                     <span class=\"hljs-comment\">//图的当前顶点数和弧数</span>\n}MGraph;\n</code></pre>\n<blockquote>\n<h4 id=\"2邻接表存储结构定义\"><a class=\"markdownIt-Anchor\" href=\"#2邻接表存储结构定义\"></a> 2.邻接表存储结构定义</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100                   <span class=\"hljs-comment\">//顶点数目的最大值</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span>{</span>                    <span class=\"hljs-comment\">//边表结点</span>\n    <span class=\"hljs-keyword\">int</span> adjvex;                            <span class=\"hljs-comment\">//邻接顶点</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span> *<span class=\"hljs-title\">nextarc</span>;</span>                  <span class=\"hljs-comment\">//指向下一条边</span>\n    <span class=\"hljs-comment\">//InfoType info;                       //网的边权值</span>\n}ArcNode;<span class=\"hljs-comment\">//邻接表的边类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VNode</span>{</span>                      <span class=\"hljs-comment\">//顶点表结点</span>\n    <span class=\"hljs-keyword\">char</span> data;                             <span class=\"hljs-comment\">//顶点信息</span>\n    ArcNode *firstarc;                        <span class=\"hljs-comment\">//指向第一条邻接边的指针</span>\n}VNode;<span class=\"hljs-comment\">//邻接表的顶点类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>{</span>\n    VNode vexset[MaxSize];   <span class=\"hljs-comment\">//顶点集，每个顶点都有指向第一条边的指针，所以不用定义边集</span>\n    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;                     <span class=\"hljs-comment\">//顶点数和边数</span>\n}ALGraph;                                  <span class=\"hljs-comment\">//ALGraph是以邻接表存储的图类型</span>\n</code></pre>\n<blockquote>\n<h4 id=\"3广度优先搜索bfs\"><a class=\"markdownIt-Anchor\" href=\"#3广度优先搜索bfs\"></a> 3.广度优先搜索（BFS）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">bool</span> visited[MAX_VERTEX_NUM];        <span class=\"hljs-comment\">//标记访问数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BFSTraverse</span><span class=\"hljs-params\">(Graph G)</span></span>{           <span class=\"hljs-comment\">//对图G进行广度优先遍历</span>\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;++i){\n        visited[i] = FALSE;          <span class=\"hljs-comment\">//访问标记数组初始化</span>\n    }\n    InitQueue(Q);                    <span class=\"hljs-comment\">//初始化辅助队列Q</span>\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;==i){         <span class=\"hljs-comment\">//从0号顶点开始遍历</span>\n        <span class=\"hljs-keyword\">if</span>(!visited[i]){             <span class=\"hljs-comment\">//对每个连通分量调用一次BFS</span>\n            BFS(G,i);                <span class=\"hljs-comment\">//vi从未被访问过，从vi开始BFS</span>\n        }\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BFS</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{             <span class=\"hljs-comment\">//从定点v出发，广度优先遍历图G</span>\n    visit(v);                        <span class=\"hljs-comment\">//访问初始顶点v</span>\n    visited[v] = TRUE;               <span class=\"hljs-comment\">//对v做已访问标记</span>\n    Enqueue(Q,v);                    <span class=\"hljs-comment\">//顶点v入队列Q</span>\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(Q)){\n        Dequeue(Q,v);                <span class=\"hljs-comment\">//顶点v出队列</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,v,w)){\n                                     <span class=\"hljs-comment\">//检测v所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){         <span class=\"hljs-comment\">//w为v的尚未访问的邻接结点</span>\n                visit(w);            <span class=\"hljs-comment\">//访问顶点w</span>\n                visited[w] = TRUE;   <span class=\"hljs-comment\">//对w做已访问标记</span>\n                Enqueue(Q,w);        <span class=\"hljs-comment\">//顶点w入队列</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4bfs算法求解单元最短路径\"><a class=\"markdownIt-Anchor\" href=\"#4bfs算法求解单元最短路径\"></a> 4.BFS算法求解单元最短路径</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BFS_MIN_Distance</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> u)</span></span>{\n    <span class=\"hljs-keyword\">int</span> d[G.vexnum];\n    <span class=\"hljs-comment\">//d[i]表示从u到i的最短路径</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;i++){\n        d[i] = <span class=\"hljs-number\">1000000</span>;              <span class=\"hljs-comment\">//初始化路径长度</span>\n    }\n    visited[u] = TRUE;\n    d[u] = <span class=\"hljs-number\">0</span>;\n    EnQueue(Q,u);\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(Q)){              <span class=\"hljs-comment\">//BFS算法主过程</span>\n        Dequeue(Q,u);                <span class=\"hljs-comment\">//对头元素u出队</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,u);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,u,w)){\n                                     <span class=\"hljs-comment\">//检测u所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){         <span class=\"hljs-comment\">//w为u的尚未访问的邻接结点</span>\n                visit(w);            <span class=\"hljs-comment\">//访问顶点w</span>\n                visited[w] = TRUE;   <span class=\"hljs-comment\">//对w做已访问标记</span>\n                d[w] = d[u] + <span class=\"hljs-number\">1</span>;     <span class=\"hljs-comment\">//路径长度加1</span>\n                Enqueue(Q,w);        <span class=\"hljs-comment\">//顶点w入队列</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5深度优先搜索dfs递归\"><a class=\"markdownIt-Anchor\" href=\"#5深度优先搜索dfs递归\"></a> 5.深度优先搜索（DFS）递归</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">bool</span> visited[MAX_VERTEX_NUM];        <span class=\"hljs-comment\">//标记访问数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DFSTraverse</span><span class=\"hljs-params\">(Graph G)</span></span>{           <span class=\"hljs-comment\">//对图G进行广度优先遍历</span>\n    <span class=\"hljs-keyword\">for</span>(v=<span class=\"hljs-number\">0</span>;v&lt;G.vexnum;++v){\n        visited[v] = FALSE;          <span class=\"hljs-comment\">//访问标记数组初始化</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(v=<span class=\"hljs-number\">0</span>;v&lt;G.vexnum;++v){         <span class=\"hljs-comment\">//从0号顶点开始遍历</span>\n        <span class=\"hljs-keyword\">if</span>(!visited[i]){             <span class=\"hljs-comment\">//对每个连通分量调用一次BFS</span>\n            DFS(G,i);                <span class=\"hljs-comment\">//vi从未被访问过，从vi开始BFS</span>\n        }\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DFS</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    visit(v);                        <span class=\"hljs-comment\">//访问顶点v</span>\n    visited[v] = TRUE;               <span class=\"hljs-comment\">//设已访问标记</span>\n    <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,v,w)){\n                                     <span class=\"hljs-comment\">//检测v所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){         <span class=\"hljs-comment\">//w为v的尚未访问的邻接结点</span>\n                DFS(G,w);\n            }<span class=\"hljs-comment\">//if</span>\n        }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"6深度优先搜索dfs非递归\"><a class=\"markdownIt-Anchor\" href=\"#6深度优先搜索dfs非递归\"></a> 6.深度优先搜索（DFS）非递归</h4>\n</blockquote>\n<ul>\n<li>因为使用了栈，使得遍历的方式从右到左进行，但仍然是深度优先遍历</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DFS_Non_Rc</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    <span class=\"hljs-comment\">//从顶点v开始进行深度优先搜索，一次遍历一个连通分量的所有顶点</span>\n    <span class=\"hljs-keyword\">int</span> w;                             <span class=\"hljs-comment\">//顶点序号</span>\n    InitStack(S);                      <span class=\"hljs-comment\">//初始化栈S</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;i++){\n        visited[i] = FALSE;            <span class=\"hljs-comment\">//初始化visited</span>\n    }\n    push(S,v);                         <span class=\"hljs-comment\">//v入栈</span>\n    visited[v] = TRUE;                 <span class=\"hljs-comment\">//并且置visited[v]为真</span>\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(S)){\n        k = Pop(S);                    <span class=\"hljs-comment\">//栈中退出一个顶点</span>\n        visit(k);                      <span class=\"hljs-comment\">//先访问，再将其子结点入栈</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,k);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,k,w)){\n                                       <span class=\"hljs-comment\">//检测k所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){           <span class=\"hljs-comment\">//w为k的尚未访问的邻接结点</span>\n                Push(S,w);             <span class=\"hljs-comment\">//访问顶点w</span>\n                visited[w] = TRUE;     <span class=\"hljs-comment\">//对w做已访问标记</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }<span class=\"hljs-comment\">//while</span>\n}<span class=\"hljs-comment\">//DFS_Non_Rc</span>\n</code></pre>\n<blockquote>\n<h4 id=\"7判断图是否为一棵树\"><a class=\"markdownIt-Anchor\" href=\"#7判断图是否为一棵树\"></a> 7.判断图是否为一棵树</h4>\n</blockquote>\n<ul>\n<li>如果有环，则失败，不是一棵树</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">BFS</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    visit(v);<span class=\"hljs-comment\">//</span>\n    visited[v] = TRUE;<span class=\"hljs-comment\">//</span>\n    Enqueue(Q,v);<span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(Q)){\n        Dequeue(Q,v);<span class=\"hljs-comment\">//</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,v,w)){\n                                       <span class=\"hljs-comment\">//检测k所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){           <span class=\"hljs-comment\">//w为k的尚未访问的邻接结点</span>\n                visited[w] = TRUE;     <span class=\"hljs-comment\">//对w做已访问标记</span>\n                Enqueue(Q,w);<span class=\"hljs-comment\">//</span>\n            }<span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }<span class=\"hljs-comment\">//while</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"8找出u结点到v结点的所有路径\"><a class=\"markdownIt-Anchor\" href=\"#8找出u结点到v结点的所有路径\"></a> 8.找出u结点到v结点的所有路径</h4>\n</blockquote>\n<ul>\n<li>基于深度优先遍历算法，从结点u出发，递归深度优先遍历图中结点，若访问到结点v，则输出该搜索路径上的结点。</li>\n<li>为此，设置一个path数组来存放路径上的结点（初始为空），d表示路径长度（初始为-1）。</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">FindPath</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v,<span class=\"hljs-keyword\">int</span> path[],<span class=\"hljs-keyword\">int</span> d)</span></span>{\n    <span class=\"hljs-keyword\">int</span> w,i;\n    ArcNode *p;                   <span class=\"hljs-comment\">//邻接表定义方法</span>\n    d++;                          <span class=\"hljs-comment\">//路径长度加一</span>\n    path[d] = u;                  <span class=\"hljs-comment\">//写入路径数组</span>\n    visited[u] = <span class=\"hljs-number\">1</span>;               <span class=\"hljs-comment\">//已访问过标记</span>\n    <span class=\"hljs-keyword\">if</span>(u == v){\n        <span class=\"hljs-built_in\">print</span>(path[]);            <span class=\"hljs-comment\">//输出路径</span>\n    }\n    p = G-&gt;adjlist[u].firstarc;   <span class=\"hljs-comment\">//找到相邻接点</span>\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n        w = p-&gt;adjvex;            <span class=\"hljs-comment\">//w未被访问，则递归访问</span>\n        <span class=\"hljs-keyword\">if</span>(visited[w] == <span class=\"hljs-number\">0</span>){\n            FindPath(G,w,V,path,d);\n        }\n        p = p-&gt;nextarc;           <span class=\"hljs-comment\">//指向u的下一个结点</span>\n    }\n    visited[u] = <span class=\"hljs-number\">0</span>;               <span class=\"hljs-comment\">//恢复环境，使该顶点可重新使用</span>\n    \n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"图相关代码\"><a class=\"markdownIt-Anchor\" href=\"#图相关代码\"></a> 图相关代码</h2>\n<blockquote>\n<h4 id=\"1邻接矩阵存储结构定义\"><a class=\"markdownIt-Anchor\" href=\"#1邻接矩阵存储结构定义\"></a> 1.邻接矩阵存储结构定义</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100                   <span class=\"hljs-comment\">//顶点数目的最大值</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">char</span> VertexType;                   <span class=\"hljs-comment\">//顶点的数据类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> EdgeType;                      <span class=\"hljs-comment\">//带权图中边上权值的数据类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>{</span>\n    <span class=\"hljs-keyword\">char</span> Vex[MaxVertexNum];                <span class=\"hljs-comment\">//顶点表</span>\n    <span class=\"hljs-keyword\">int</span> Edge[MaxVertexNum][MaxVertexNum];  <span class=\"hljs-comment\">//邻接矩阵，边表</span>\n    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;                     <span class=\"hljs-comment\">//图的当前顶点数和弧数</span>\n}MGraph;\n</code></pre>\n<blockquote>\n<h4 id=\"2邻接表存储结构定义\"><a class=\"markdownIt-Anchor\" href=\"#2邻接表存储结构定义\"></a> 2.邻接表存储结构定义</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100                   <span class=\"hljs-comment\">//顶点数目的最大值</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span>{</span>                    <span class=\"hljs-comment\">//边表结点</span>\n    <span class=\"hljs-keyword\">int</span> adjvex;                            <span class=\"hljs-comment\">//邻接顶点</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span> *<span class=\"hljs-title\">nextarc</span>;</span>                  <span class=\"hljs-comment\">//指向下一条边</span>\n    <span class=\"hljs-comment\">//InfoType info;                       //网的边权值</span>\n}ArcNode;<span class=\"hljs-comment\">//邻接表的边类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VNode</span>{</span>                      <span class=\"hljs-comment\">//顶点表结点</span>\n    <span class=\"hljs-keyword\">char</span> data;                             <span class=\"hljs-comment\">//顶点信息</span>\n    ArcNode *firstarc;                        <span class=\"hljs-comment\">//指向第一条邻接边的指针</span>\n}VNode;<span class=\"hljs-comment\">//邻接表的顶点类型</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>{</span>\n    VNode vexset[MaxSize];   <span class=\"hljs-comment\">//顶点集，每个顶点都有指向第一条边的指针，所以不用定义边集</span>\n    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;                     <span class=\"hljs-comment\">//顶点数和边数</span>\n}ALGraph;                                  <span class=\"hljs-comment\">//ALGraph是以邻接表存储的图类型</span>\n</code></pre>\n<blockquote>\n<h4 id=\"3广度优先搜索bfs\"><a class=\"markdownIt-Anchor\" href=\"#3广度优先搜索bfs\"></a> 3.广度优先搜索（BFS）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">bool</span> visited[MAX_VERTEX_NUM];        <span class=\"hljs-comment\">//标记访问数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BFSTraverse</span><span class=\"hljs-params\">(Graph G)</span></span>{           <span class=\"hljs-comment\">//对图G进行广度优先遍历</span>\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;++i){\n        visited[i] = FALSE;          <span class=\"hljs-comment\">//访问标记数组初始化</span>\n    }\n    InitQueue(Q);                    <span class=\"hljs-comment\">//初始化辅助队列Q</span>\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;==i){         <span class=\"hljs-comment\">//从0号顶点开始遍历</span>\n        <span class=\"hljs-keyword\">if</span>(!visited[i]){             <span class=\"hljs-comment\">//对每个连通分量调用一次BFS</span>\n            BFS(G,i);                <span class=\"hljs-comment\">//vi从未被访问过，从vi开始BFS</span>\n        }\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BFS</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{             <span class=\"hljs-comment\">//从定点v出发，广度优先遍历图G</span>\n    visit(v);                        <span class=\"hljs-comment\">//访问初始顶点v</span>\n    visited[v] = TRUE;               <span class=\"hljs-comment\">//对v做已访问标记</span>\n    Enqueue(Q,v);                    <span class=\"hljs-comment\">//顶点v入队列Q</span>\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(Q)){\n        Dequeue(Q,v);                <span class=\"hljs-comment\">//顶点v出队列</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,v,w)){\n                                     <span class=\"hljs-comment\">//检测v所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){         <span class=\"hljs-comment\">//w为v的尚未访问的邻接结点</span>\n                visit(w);            <span class=\"hljs-comment\">//访问顶点w</span>\n                visited[w] = TRUE;   <span class=\"hljs-comment\">//对w做已访问标记</span>\n                Enqueue(Q,w);        <span class=\"hljs-comment\">//顶点w入队列</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4bfs算法求解单元最短路径\"><a class=\"markdownIt-Anchor\" href=\"#4bfs算法求解单元最短路径\"></a> 4.BFS算法求解单元最短路径</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BFS_MIN_Distance</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> u)</span></span>{\n    <span class=\"hljs-keyword\">int</span> d[G.vexnum];\n    <span class=\"hljs-comment\">//d[i]表示从u到i的最短路径</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;i++){\n        d[i] = <span class=\"hljs-number\">1000000</span>;              <span class=\"hljs-comment\">//初始化路径长度</span>\n    }\n    visited[u] = TRUE;\n    d[u] = <span class=\"hljs-number\">0</span>;\n    EnQueue(Q,u);\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(Q)){              <span class=\"hljs-comment\">//BFS算法主过程</span>\n        Dequeue(Q,u);                <span class=\"hljs-comment\">//对头元素u出队</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,u);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,u,w)){\n                                     <span class=\"hljs-comment\">//检测u所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){         <span class=\"hljs-comment\">//w为u的尚未访问的邻接结点</span>\n                visit(w);            <span class=\"hljs-comment\">//访问顶点w</span>\n                visited[w] = TRUE;   <span class=\"hljs-comment\">//对w做已访问标记</span>\n                d[w] = d[u] + <span class=\"hljs-number\">1</span>;     <span class=\"hljs-comment\">//路径长度加1</span>\n                Enqueue(Q,w);        <span class=\"hljs-comment\">//顶点w入队列</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5深度优先搜索dfs递归\"><a class=\"markdownIt-Anchor\" href=\"#5深度优先搜索dfs递归\"></a> 5.深度优先搜索（DFS）递归</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">bool</span> visited[MAX_VERTEX_NUM];        <span class=\"hljs-comment\">//标记访问数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DFSTraverse</span><span class=\"hljs-params\">(Graph G)</span></span>{           <span class=\"hljs-comment\">//对图G进行广度优先遍历</span>\n    <span class=\"hljs-keyword\">for</span>(v=<span class=\"hljs-number\">0</span>;v&lt;G.vexnum;++v){\n        visited[v] = FALSE;          <span class=\"hljs-comment\">//访问标记数组初始化</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(v=<span class=\"hljs-number\">0</span>;v&lt;G.vexnum;++v){         <span class=\"hljs-comment\">//从0号顶点开始遍历</span>\n        <span class=\"hljs-keyword\">if</span>(!visited[i]){             <span class=\"hljs-comment\">//对每个连通分量调用一次BFS</span>\n            DFS(G,i);                <span class=\"hljs-comment\">//vi从未被访问过，从vi开始BFS</span>\n        }\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DFS</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    visit(v);                        <span class=\"hljs-comment\">//访问顶点v</span>\n    visited[v] = TRUE;               <span class=\"hljs-comment\">//设已访问标记</span>\n    <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,v,w)){\n                                     <span class=\"hljs-comment\">//检测v所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){         <span class=\"hljs-comment\">//w为v的尚未访问的邻接结点</span>\n                DFS(G,w);\n            }<span class=\"hljs-comment\">//if</span>\n        }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"6深度优先搜索dfs非递归\"><a class=\"markdownIt-Anchor\" href=\"#6深度优先搜索dfs非递归\"></a> 6.深度优先搜索（DFS）非递归</h4>\n</blockquote>\n<ul>\n<li>因为使用了栈，使得遍历的方式从右到左进行，但仍然是深度优先遍历</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DFS_Non_Rc</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    <span class=\"hljs-comment\">//从顶点v开始进行深度优先搜索，一次遍历一个连通分量的所有顶点</span>\n    <span class=\"hljs-keyword\">int</span> w;                             <span class=\"hljs-comment\">//顶点序号</span>\n    InitStack(S);                      <span class=\"hljs-comment\">//初始化栈S</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;G.vexnum;i++){\n        visited[i] = FALSE;            <span class=\"hljs-comment\">//初始化visited</span>\n    }\n    push(S,v);                         <span class=\"hljs-comment\">//v入栈</span>\n    visited[v] = TRUE;                 <span class=\"hljs-comment\">//并且置visited[v]为真</span>\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(S)){\n        k = Pop(S);                    <span class=\"hljs-comment\">//栈中退出一个顶点</span>\n        visit(k);                      <span class=\"hljs-comment\">//先访问，再将其子结点入栈</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,k);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,k,w)){\n                                       <span class=\"hljs-comment\">//检测k所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){           <span class=\"hljs-comment\">//w为k的尚未访问的邻接结点</span>\n                Push(S,w);             <span class=\"hljs-comment\">//访问顶点w</span>\n                visited[w] = TRUE;     <span class=\"hljs-comment\">//对w做已访问标记</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }<span class=\"hljs-comment\">//while</span>\n}<span class=\"hljs-comment\">//DFS_Non_Rc</span>\n</code></pre>\n<blockquote>\n<h4 id=\"7判断图是否为一棵树\"><a class=\"markdownIt-Anchor\" href=\"#7判断图是否为一棵树\"></a> 7.判断图是否为一棵树</h4>\n</blockquote>\n<ul>\n<li>如果有环，则失败，不是一棵树</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">BFS</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> v)</span></span>{\n    visit(v);<span class=\"hljs-comment\">//</span>\n    visited[v] = TRUE;<span class=\"hljs-comment\">//</span>\n    Enqueue(Q,v);<span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-keyword\">while</span>(!IsEmpty(Q)){\n        Dequeue(Q,v);<span class=\"hljs-comment\">//</span>\n        <span class=\"hljs-keyword\">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class=\"hljs-number\">0</span>;w=NextNeighbor(G,v,w)){\n                                       <span class=\"hljs-comment\">//检测k所有邻接点</span>\n            <span class=\"hljs-keyword\">if</span>(!visited[w]){           <span class=\"hljs-comment\">//w为k的尚未访问的邻接结点</span>\n                visited[w] = TRUE;     <span class=\"hljs-comment\">//对w做已访问标记</span>\n                Enqueue(Q,w);<span class=\"hljs-comment\">//</span>\n            }<span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }<span class=\"hljs-comment\">//while</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"8找出u结点到v结点的所有路径\"><a class=\"markdownIt-Anchor\" href=\"#8找出u结点到v结点的所有路径\"></a> 8.找出u结点到v结点的所有路径</h4>\n</blockquote>\n<ul>\n<li>基于深度优先遍历算法，从结点u出发，递归深度优先遍历图中结点，若访问到结点v，则输出该搜索路径上的结点。</li>\n<li>为此，设置一个path数组来存放路径上的结点（初始为空），d表示路径长度（初始为-1）。</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">FindPath</span><span class=\"hljs-params\">(Graph G,<span class=\"hljs-keyword\">int</span> u,<span class=\"hljs-keyword\">int</span> v,<span class=\"hljs-keyword\">int</span> path[],<span class=\"hljs-keyword\">int</span> d)</span></span>{\n    <span class=\"hljs-keyword\">int</span> w,i;\n    ArcNode *p;                   <span class=\"hljs-comment\">//邻接表定义方法</span>\n    d++;                          <span class=\"hljs-comment\">//路径长度加一</span>\n    path[d] = u;                  <span class=\"hljs-comment\">//写入路径数组</span>\n    visited[u] = <span class=\"hljs-number\">1</span>;               <span class=\"hljs-comment\">//已访问过标记</span>\n    <span class=\"hljs-keyword\">if</span>(u == v){\n        <span class=\"hljs-built_in\">print</span>(path[]);            <span class=\"hljs-comment\">//输出路径</span>\n    }\n    p = G-&gt;adjlist[u].firstarc;   <span class=\"hljs-comment\">//找到相邻接点</span>\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n        w = p-&gt;adjvex;            <span class=\"hljs-comment\">//w未被访问，则递归访问</span>\n        <span class=\"hljs-keyword\">if</span>(visited[w] == <span class=\"hljs-number\">0</span>){\n            FindPath(G,w,V,path,d);\n        }\n        p = p-&gt;nextarc;           <span class=\"hljs-comment\">//指向u的下一个结点</span>\n    }\n    visited[u] = <span class=\"hljs-number\">0</span>;               <span class=\"hljs-comment\">//恢复环境，使该顶点可重新使用</span>\n    \n}\n</code></pre>\n"},{"title":"吉林大学2019年招生目录","top":false,"cover":false,"toc":true,"mathjax":true,"summary":"2019招生目录","abbrlink":"2e9c","date":"2020-06-03T13:22:56.000Z","password":null,"_content":"## - 吉林大学2019年全日制硕士研究生招生专业目录 - \n### - 哲学社会学院 -\n***\n#### 学硕\n![](学硕.png)\n#### 专硕\n![](专硕.png)\n***\n### - 计算机科学与技术学院 -\n***\n#### 学硕\n![](计算机学硕1.png)\n![](计算机学硕2.png)\n#### 专硕\n![](计算机专硕.png)\n***","source":"_posts/吉林大学招生简章.md","raw":"---\ntitle: 吉林大学2019年招生目录\ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: 2019招生目录\ntags:\n  - 考研\n  - 心理学\n  - 计算机\ncategories:\n  - 吉林大学\nabbrlink: 2e9c\ndate: 2020-06-03 21:22:56\npassword:\n---\n## - 吉林大学2019年全日制硕士研究生招生专业目录 - \n### - 哲学社会学院 -\n***\n#### 学硕\n![](学硕.png)\n#### 专硕\n![](专硕.png)\n***\n### - 计算机科学与技术学院 -\n***\n#### 学硕\n![](计算机学硕1.png)\n![](计算机学硕2.png)\n#### 专硕\n![](计算机专硕.png)\n***","slug":"吉林大学招生简章","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdid002dzl9ke86t2cpf","content":"<h2 id=\"-吉林大学2019年全日制硕士研究生招生专业目录-\"><a class=\"markdownIt-Anchor\" href=\"#-吉林大学2019年全日制硕士研究生招生专业目录-\"></a> - 吉林大学2019年全日制硕士研究生招生专业目录 -</h2>\n<h3 id=\"-哲学社会学院-\"><a class=\"markdownIt-Anchor\" href=\"#-哲学社会学院-\"></a> - 哲学社会学院 -</h3>\n<hr>\n<h4 id=\"学硕\"><a class=\"markdownIt-Anchor\" href=\"#学硕\"></a> 学硕</h4>\n<p><img src=\"%E5%AD%A6%E7%A1%95.png\" alt=\"\"></p>\n<h4 id=\"专硕\"><a class=\"markdownIt-Anchor\" href=\"#专硕\"></a> 专硕</h4>\n<p><img src=\"%E4%B8%93%E7%A1%95.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"-计算机科学与技术学院-\"><a class=\"markdownIt-Anchor\" href=\"#-计算机科学与技术学院-\"></a> - 计算机科学与技术学院 -</h3>\n<hr>\n<h4 id=\"学硕-2\"><a class=\"markdownIt-Anchor\" href=\"#学硕-2\"></a> 学硕</h4>\n<p><img src=\"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A1%951.png\" alt=\"\"><br>\n<img src=\"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A1%952.png\" alt=\"\"></p>\n<h4 id=\"专硕-2\"><a class=\"markdownIt-Anchor\" href=\"#专硕-2\"></a> 专硕</h4>\n<p><img src=\"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E7%A1%95.png\" alt=\"\"></p>\n<hr>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"-吉林大学2019年全日制硕士研究生招生专业目录-\"><a class=\"markdownIt-Anchor\" href=\"#-吉林大学2019年全日制硕士研究生招生专业目录-\"></a> - 吉林大学2019年全日制硕士研究生招生专业目录 -</h2>\n<h3 id=\"-哲学社会学院-\"><a class=\"markdownIt-Anchor\" href=\"#-哲学社会学院-\"></a> - 哲学社会学院 -</h3>\n<hr />\n<h4 id=\"学硕\"><a class=\"markdownIt-Anchor\" href=\"#学硕\"></a> 学硕</h4>\n<p><img src=\"%E5%AD%A6%E7%A1%95.png\" alt=\"\" /></p>\n<h4 id=\"专硕\"><a class=\"markdownIt-Anchor\" href=\"#专硕\"></a> 专硕</h4>\n<p><img src=\"%E4%B8%93%E7%A1%95.png\" alt=\"\" /></p>\n<hr />\n<h3 id=\"-计算机科学与技术学院-\"><a class=\"markdownIt-Anchor\" href=\"#-计算机科学与技术学院-\"></a> - 计算机科学与技术学院 -</h3>\n<hr />\n<h4 id=\"学硕-2\"><a class=\"markdownIt-Anchor\" href=\"#学硕-2\"></a> 学硕</h4>\n<p><img src=\"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A1%951.png\" alt=\"\" /><br />\n<img src=\"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A1%952.png\" alt=\"\" /></p>\n<h4 id=\"专硕-2\"><a class=\"markdownIt-Anchor\" href=\"#专硕-2\"></a> 专硕</h4>\n<p><img src=\"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E7%A1%95.png\" alt=\"\" /></p>\n<hr />\n"},{"title":"计网第二章 数据基础通信","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"第二章 数据通信基础","abbrlink":"6b05","date":"2020-07-23T11:36:00.000Z","password":null,"_content":"## 第二章　数据通信基础\n\n1. 数据通信系统的组成：[信源、发送设备]（源系统）、传输系统、[接收设备和信宿]（目的系统）\n2. 比特间隙：发送一比特所用时间\n3. 比特率：每秒发送的比特数（单位：bps），与比特间隙的关系为**倒数关系**\n4. 数字编码\n   - 单极性编码：高电平代表1，低电平代表0\n   - 极化编码\n     - 非归零编码：高电平是1，低电平是0\n     - 非归零反向编码：电平翻转是1，电平不变是0\n     - 双相位编码\n       - 曼彻斯特编码：负电平到正电平为1，正电平到负电平为0\n       \n       - 差分曼彻斯特编码：每个比特的间隙，有跳变为0，没有跳变为1\n       \n\n5. 传输模式\n   - 单工通信：通信是单向的，只有一个可以进行传输，另一个只能接收\n   - 半双工通信：每个站点都可以发送和接收数据，但是不能同时发送和接收数据\n   - 全双工通信：两个站点可以同时发送和接收数据\n   \n6. 并行和串行\n   - 并行：可以同时发送多个比特，每个比特使用单独的一条线路，一次8位，价格贵，距离短\n   - 串行：一次一位传输，速度慢，价格便宜\n\n7. 多路复用技术\n\n   - 频分多路复用FDM：用于模拟信号\n\n   - 时分多路复用TDM：用于数字信号\n\n   - 波分多路复用WDM：光的频分多路复用，用于模拟信号\n\n   - **码分多路复用CDM**：也称码分多址复用CDMA\n\n    - 每个比特被分为m个码片，每个站点被指定一个唯一指定的m位码片（码型）。当发送比特1时，就发送其码片。想发送0时，就发送码片的反码\n  \n    - 所有码片是正交的\n  \n    - 任何码片序列与自己的标乘积为1\n  \n    - 多个站点同时传输，信号线性加强\n  \n    - 要从信号还原站点比特流，通过计算站点码片和信息码片的内标识\n\n8. 数据交换技术\n   - 电路交换：再两个设备之间创建一条临时的物理连接。步骤为电路建立、数据传输和电路拆除\n   - 报文交换：又称存储转发或消息交换。原理为在报文传输过程中，网络的中间节点先将报文暂时储存起来，检查正确性和完整性，然后再发往下一个结点。报文交换技术已被淘汰\n   - 分组交换：又称包交换，可以在中间节点存储，只要信息包到达后就可以转发，不用等到全部报文到达，缩短了信息传输过程的延时时间。**可工作于广播和多播的方式**\n     - 数据报：每个包都独立于其他包处理，任何一条链路可以同时为多对设备之间的通信服务。一次传输的数据报可能不是有次序的到达。重新排序的任务由传输层来完成\n     - 虚电路：路径在数据传输的开始之前就已经确定。仅在建立虚电路时需要目的地址，在数据传送时，每个包不需要携带完整的目的地址，仅需要一个虚电路的号码标志\n\n9. 错误检测和控制\n   - 循环冗余校验码：在待发送信息后加上多项式最高阶个0，用这个数字除以多项式**（同0异1）**，最终余数为多项式最高阶数位，即为循环校验码","source":"_posts/基础通信.md","raw":"---\ntitle: 计网第二章 数据基础通信\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 计网\n  - 总结\n  - 考研\n  - 男男\ncategories:\n  - 计网\nsummary: 第二章 数据通信基础\nabbrlink: 6b05\ndate: 2020-07-23 19:36:00\npassword:\n---\n## 第二章　数据通信基础\n\n1. 数据通信系统的组成：[信源、发送设备]（源系统）、传输系统、[接收设备和信宿]（目的系统）\n2. 比特间隙：发送一比特所用时间\n3. 比特率：每秒发送的比特数（单位：bps），与比特间隙的关系为**倒数关系**\n4. 数字编码\n   - 单极性编码：高电平代表1，低电平代表0\n   - 极化编码\n     - 非归零编码：高电平是1，低电平是0\n     - 非归零反向编码：电平翻转是1，电平不变是0\n     - 双相位编码\n       - 曼彻斯特编码：负电平到正电平为1，正电平到负电平为0\n       \n       - 差分曼彻斯特编码：每个比特的间隙，有跳变为0，没有跳变为1\n       \n\n5. 传输模式\n   - 单工通信：通信是单向的，只有一个可以进行传输，另一个只能接收\n   - 半双工通信：每个站点都可以发送和接收数据，但是不能同时发送和接收数据\n   - 全双工通信：两个站点可以同时发送和接收数据\n   \n6. 并行和串行\n   - 并行：可以同时发送多个比特，每个比特使用单独的一条线路，一次8位，价格贵，距离短\n   - 串行：一次一位传输，速度慢，价格便宜\n\n7. 多路复用技术\n\n   - 频分多路复用FDM：用于模拟信号\n\n   - 时分多路复用TDM：用于数字信号\n\n   - 波分多路复用WDM：光的频分多路复用，用于模拟信号\n\n   - **码分多路复用CDM**：也称码分多址复用CDMA\n\n    - 每个比特被分为m个码片，每个站点被指定一个唯一指定的m位码片（码型）。当发送比特1时，就发送其码片。想发送0时，就发送码片的反码\n  \n    - 所有码片是正交的\n  \n    - 任何码片序列与自己的标乘积为1\n  \n    - 多个站点同时传输，信号线性加强\n  \n    - 要从信号还原站点比特流，通过计算站点码片和信息码片的内标识\n\n8. 数据交换技术\n   - 电路交换：再两个设备之间创建一条临时的物理连接。步骤为电路建立、数据传输和电路拆除\n   - 报文交换：又称存储转发或消息交换。原理为在报文传输过程中，网络的中间节点先将报文暂时储存起来，检查正确性和完整性，然后再发往下一个结点。报文交换技术已被淘汰\n   - 分组交换：又称包交换，可以在中间节点存储，只要信息包到达后就可以转发，不用等到全部报文到达，缩短了信息传输过程的延时时间。**可工作于广播和多播的方式**\n     - 数据报：每个包都独立于其他包处理，任何一条链路可以同时为多对设备之间的通信服务。一次传输的数据报可能不是有次序的到达。重新排序的任务由传输层来完成\n     - 虚电路：路径在数据传输的开始之前就已经确定。仅在建立虚电路时需要目的地址，在数据传送时，每个包不需要携带完整的目的地址，仅需要一个虚电路的号码标志\n\n9. 错误检测和控制\n   - 循环冗余校验码：在待发送信息后加上多项式最高阶个0，用这个数字除以多项式**（同0异1）**，最终余数为多项式最高阶数位，即为循环校验码","slug":"基础通信","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdie002gzl9kdj7ygyet","content":"<h2 id=\"第二章-数据通信基础\"><a class=\"markdownIt-Anchor\" href=\"#第二章-数据通信基础\"></a> 第二章　数据通信基础</h2>\n<ol>\n<li>\n<p>数据通信系统的组成：[信源、发送设备]（源系统）、传输系统、[接收设备和信宿]（目的系统）</p>\n</li>\n<li>\n<p>比特间隙：发送一比特所用时间</p>\n</li>\n<li>\n<p>比特率：每秒发送的比特数（单位：bps），与比特间隙的关系为<strong>倒数关系</strong></p>\n</li>\n<li>\n<p>数字编码</p>\n<ul>\n<li>单极性编码：高电平代表1，低电平代表0</li>\n<li>极化编码\n<ul>\n<li>非归零编码：高电平是1，低电平是0</li>\n<li>非归零反向编码：电平翻转是1，电平不变是0</li>\n<li>双相位编码\n<ul>\n<li>\n<p>曼彻斯特编码：负电平到正电平为1，正电平到负电平为0</p>\n</li>\n<li>\n<p>差分曼彻斯特编码：每个比特的间隙，有跳变为0，没有跳变为1</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>传输模式</p>\n<ul>\n<li>单工通信：通信是单向的，只有一个可以进行传输，另一个只能接收</li>\n<li>半双工通信：每个站点都可以发送和接收数据，但是不能同时发送和接收数据</li>\n<li>全双工通信：两个站点可以同时发送和接收数据</li>\n</ul>\n</li>\n<li>\n<p>并行和串行</p>\n<ul>\n<li>并行：可以同时发送多个比特，每个比特使用单独的一条线路，一次8位，价格贵，距离短</li>\n<li>串行：一次一位传输，速度慢，价格便宜</li>\n</ul>\n</li>\n<li>\n<p>多路复用技术</p>\n<ul>\n<li>\n<p>频分多路复用FDM：用于模拟信号</p>\n</li>\n<li>\n<p>时分多路复用TDM：用于数字信号</p>\n</li>\n<li>\n<p>波分多路复用WDM：光的频分多路复用，用于模拟信号</p>\n</li>\n<li>\n<p><strong>码分多路复用CDM</strong>：也称码分多址复用CDMA</p>\n</li>\n<li>\n<p>每个比特被分为m个码片，每个站点被指定一个唯一指定的m位码片（码型）。当发送比特1时，就发送其码片。想发送0时，就发送码片的反码</p>\n</li>\n<li>\n<p>所有码片是正交的</p>\n</li>\n<li>\n<p>任何码片序列与自己的标乘积为1</p>\n</li>\n<li>\n<p>多个站点同时传输，信号线性加强</p>\n</li>\n<li>\n<p>要从信号还原站点比特流，通过计算站点码片和信息码片的内标识</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据交换技术</p>\n<ul>\n<li>电路交换：再两个设备之间创建一条临时的物理连接。步骤为电路建立、数据传输和电路拆除</li>\n<li>报文交换：又称存储转发或消息交换。原理为在报文传输过程中，网络的中间节点先将报文暂时储存起来，检查正确性和完整性，然后再发往下一个结点。报文交换技术已被淘汰</li>\n<li>分组交换：又称包交换，可以在中间节点存储，只要信息包到达后就可以转发，不用等到全部报文到达，缩短了信息传输过程的延时时间。<strong>可工作于广播和多播的方式</strong>\n<ul>\n<li>数据报：每个包都独立于其他包处理，任何一条链路可以同时为多对设备之间的通信服务。一次传输的数据报可能不是有次序的到达。重新排序的任务由传输层来完成</li>\n<li>虚电路：路径在数据传输的开始之前就已经确定。仅在建立虚电路时需要目的地址，在数据传送时，每个包不需要携带完整的目的地址，仅需要一个虚电路的号码标志</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>错误检测和控制</p>\n<ul>\n<li>循环冗余校验码：在待发送信息后加上多项式最高阶个0，用这个数字除以多项式**（同0异1）**，最终余数为多项式最高阶数位，即为循环校验码</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第二章-数据通信基础\"><a class=\"markdownIt-Anchor\" href=\"#第二章-数据通信基础\"></a> 第二章　数据通信基础</h2>\n<ol>\n<li>\n<p>数据通信系统的组成：[信源、发送设备]（源系统）、传输系统、[接收设备和信宿]（目的系统）</p>\n</li>\n<li>\n<p>比特间隙：发送一比特所用时间</p>\n</li>\n<li>\n<p>比特率：每秒发送的比特数（单位：bps），与比特间隙的关系为<strong>倒数关系</strong></p>\n</li>\n<li>\n<p>数字编码</p>\n<ul>\n<li>单极性编码：高电平代表1，低电平代表0</li>\n<li>极化编码\n<ul>\n<li>非归零编码：高电平是1，低电平是0</li>\n<li>非归零反向编码：电平翻转是1，电平不变是0</li>\n<li>双相位编码\n<ul>\n<li>\n<p>曼彻斯特编码：负电平到正电平为1，正电平到负电平为0</p>\n</li>\n<li>\n<p>差分曼彻斯特编码：每个比特的间隙，有跳变为0，没有跳变为1</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>传输模式</p>\n<ul>\n<li>单工通信：通信是单向的，只有一个可以进行传输，另一个只能接收</li>\n<li>半双工通信：每个站点都可以发送和接收数据，但是不能同时发送和接收数据</li>\n<li>全双工通信：两个站点可以同时发送和接收数据</li>\n</ul>\n</li>\n<li>\n<p>并行和串行</p>\n<ul>\n<li>并行：可以同时发送多个比特，每个比特使用单独的一条线路，一次8位，价格贵，距离短</li>\n<li>串行：一次一位传输，速度慢，价格便宜</li>\n</ul>\n</li>\n<li>\n<p>多路复用技术</p>\n<ul>\n<li>\n<p>频分多路复用FDM：用于模拟信号</p>\n</li>\n<li>\n<p>时分多路复用TDM：用于数字信号</p>\n</li>\n<li>\n<p>波分多路复用WDM：光的频分多路复用，用于模拟信号</p>\n</li>\n<li>\n<p><strong>码分多路复用CDM</strong>：也称码分多址复用CDMA</p>\n</li>\n<li>\n<p>每个比特被分为m个码片，每个站点被指定一个唯一指定的m位码片（码型）。当发送比特1时，就发送其码片。想发送0时，就发送码片的反码</p>\n</li>\n<li>\n<p>所有码片是正交的</p>\n</li>\n<li>\n<p>任何码片序列与自己的标乘积为1</p>\n</li>\n<li>\n<p>多个站点同时传输，信号线性加强</p>\n</li>\n<li>\n<p>要从信号还原站点比特流，通过计算站点码片和信息码片的内标识</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据交换技术</p>\n<ul>\n<li>电路交换：再两个设备之间创建一条临时的物理连接。步骤为电路建立、数据传输和电路拆除</li>\n<li>报文交换：又称存储转发或消息交换。原理为在报文传输过程中，网络的中间节点先将报文暂时储存起来，检查正确性和完整性，然后再发往下一个结点。报文交换技术已被淘汰</li>\n<li>分组交换：又称包交换，可以在中间节点存储，只要信息包到达后就可以转发，不用等到全部报文到达，缩短了信息传输过程的延时时间。<strong>可工作于广播和多播的方式</strong>\n<ul>\n<li>数据报：每个包都独立于其他包处理，任何一条链路可以同时为多对设备之间的通信服务。一次传输的数据报可能不是有次序的到达。重新排序的任务由传输层来完成</li>\n<li>虚电路：路径在数据传输的开始之前就已经确定。仅在建立虚电路时需要目的地址，在数据传送时，每个包不需要携带完整的目的地址，仅需要一个虚电路的号码标志</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>错误检测和控制</p>\n<ul>\n<li>循环冗余校验码：在待发送信息后加上多项式最高阶个0，用这个数字除以多项式**（同0异1）**，最终余数为多项式最高阶数位，即为循环校验码</li>\n</ul>\n</li>\n</ol>\n"},{"title":"6月份学习计划","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"学习计划","abbrlink":"b0c7","date":"2020-06-04T02:51:50.000Z","password":null,"_content":"<center> <h2>6月份学习计划<h2></center>\n\n| 6月份 | 数学                                                 | 专业课                                                       | 英语                                                         | 政治            | 完成度                           |\n| ----- | ---------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | --------------- | -------------------------------- |\n| 6.9   | 1000题高数第8讲BC                                    | 1.2016年数据结构真题   <br>2.计算机网络王道第五章传输层      | 1.恋恋有词Unit5   Lesson2 <br>2.田静、长难句、特殊句式 <br>3.背所学课程单词 | 导论            | **完成**                         |\n| 6.10  | 1000题高数第9讲BC                                    | 1.2015年数据结构真题                                         | 1.恋恋有词Unit5   Lesson3 <br>2.田静、长难句分析、标点与连接词 <br>3.背所学课程单词 | 唯物论          | **数学未完成**                   |\n| 6.11  | 休息一天                                             | 休息一天                                                     | 休息一天                                                     | 休息一天        | **休息一天**                     |\n| 6.12  | 剩余第9讲BC题                                        | 1.2014年数据结构真题                                         | 1.恋恋有词Unit5   Lesson4 <br>2.田静、长难句分析、分析主谓 <br>3.背所学课程单词 | 唯物论-物质观   | **完成**                         |\n| 6.13  | 1000题高数第10讲BC                                   | 1.2013年数据结构真题      <br>2.计算机网络常青藤5、6章对照书复习 | 1.恋恋有词Unit5   Lesson5 <br>2.田静、长难句分析、简化长难句 <br>3.背恋恋有词Unit01单词表   <br>4.背所学课程单词 | 唯物论-意识观   | **完成**                         |\n| 6.14  | 1000题高数第11、12讲BC                               | 1.2012年数据结构真题      <br>2.重点对照常青藤和课本复习计算机网络第五章 | 1.恋恋有词Unit6   Lesson1 <br>2.田静、长难句分析、分裂结构 <br>3.背所学课程单词 | 辩证法两大特征  | **完成**                         |\n| 6.15  | 1.1000题高数第13讲BC                                 | 1.2011年数据结构真题                                         | 1.恋恋有词Unit6   Lesson2 <br>2.田静、长难句分析、嵌套结构 <br>3.背所学课程单词 | 辩证法五对范畴1 | **政治少看一课、恋恋有词未完成** |\n| 6.16  | 1.1000题高数剩余第13讲BC      <br>2.看第四章BC组讲解 | 1.2009年计学数据结构                                         | 1.恋恋有词Unit6   Lesson3 <br>2.田静、长难句分析、平行结构 <br>3.背所学课程单词 | 辩证法五对范畴2 | **完成**                         |\n| 6.17  | 1.1000题高数第14讲BC      <br>2.看第五章BC组讲解     | 1.2008年计学数据结构      <br>2.2018计算机学硕两道代码      <br>3.对照常青藤复习计算机网络第七、八章 | 1.恋恋有词Unit6   Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词 | 对立统一        |                                  |\n| 6.18  | 1.1000题高数第15讲BC                                 | 1.2018年软学数据结构                                         | 1.恋恋有词Unit7   Lesson1 <br>2.李旭、阅读基础、论点论据题 <br>3.背所学课程单词 | 质量互变定律    |                                  |\n| 6.19  | 1.1000题高数第16讲BC                                 | 1.2017年软学数据结构                                         | 1.恋恋有词Unit7   Lesson2 <br>2.李旭、阅读基础、文章续写题 <br>3.背所学课程单词 | 否定之否定定律  |                                  |\n| 6.20  | 1.1000题高数第17讲BC                                 | 1.2018年计专数据结构                                         | 1.恋恋有词Unit7   Lesson3 <br>2.李旭、阅读基础、总结点睛 <br>3.背所学课程单词 | 认识论          |                                  |\n| 6.21  | 1.1000题线代第1、2讲BC                               | 1.2017年计专数据结构                                         | 1.恋恋有词Unit7   Lesson4 <br>2.做真题2010.1并看李旭相应视频 <br>3.背所学课程单词 | 认识的本质      |                                  |\n| 6.22  | 1000题线代第3讲BC                                    | 1.2016年计专数据结构                                         | 1.恋恋有词Unit7   Lesson5 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词 | 真理与价值      |                                  |\n| 6.23  | 1000题线代第4讲BC                                    | 1.2015年计专数据结构                                         | 1.恋恋有词Unit8   Lesson1 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词 | 社会基本矛盾    |                                  |\n| 6.24  | 1000题线代第5讲BC                                    | 1.2014年计专数据结构                                         | 1.恋恋有词Unit8   Lesson2 <br>2.做真题2010.4并看李旭相应视频 <br>3.背所学课程单词 | 社会形态        |                                  |\n| 6.25  | 1000题线代第6讲BC                                    | 1.2013年计专数据结构                                         | 1.恋恋有词Unit8   Lesson3 <br>2.做真题2011.1并看李旭相应视频 <br>3.背所学课程单词 | 商品的两因素    |                                  |\n| 6.26  | 1000题线代第7讲BC                                    | 1.2012年计专数据结构                                         | 1.恋恋有词Unit8   Lesson4 <br>2.做真题2011.2并看李旭相应视频 <br>3.背所学课程单词 | 价值规律        |                                  |\n| 6.27  | 1000题线代第8讲BC                                    | 1.2011年计专数据结构                                         | 1.恋恋有词Unit9   Lesson1 <br>2.做真题2011.3并看李旭相应视频 <br>3.背所学课程单词 | 剩余价值生产    |                                  |\n| 6.28  | 1000题线代第9讲BC                                    | 1.2018年软专数据结构                                         | 1.恋恋有词Unit9   Lesson2 <br>2.做真题2011.4并看李旭相应视频 <br>3.背所学课程单词 | 剩余价值流转    |                                  |\n| 6.29  | 1000题概率第1讲BC                                    | 1.2017年软专数据结构                                         | 1.恋恋有词Unit9   Lesson3 <br>2.做真题2012.1并看李旭相应视频 <br>3.背所学课程单词 | 垄断资本主义    |                                  |\n| 6.30  | 1000题概率第2讲BC                                    | 1.2016年软专数据结构                                         | 1.恋恋有词Unit9   Lesson4 <br>2.做真题2012.2并看李旭相应视频 <br>3.背所学课程单词 | 社会主义        |                                  |\n| 6.31  | 1000题概率第3讲BC                                    | 2018-2007软专                                                | 1.恋恋有词Unit10   Lesson1 <br>2.做真题2012.3并看李旭相应视频 <br>3.背所学课程单词 | 人生的青春      |                                  |\n| 7.1   | 1000题概率第4讲BC                                    |                                                              |                                                              | 人生理想        |                                  |","source":"_posts/学习计划.md","raw":"---\ntitle: 6月份学习计划\ntop: false\ncover: false\ntoc: false\nmathjax: true\nsummary: 学习计划\ntags:\n  - 考研\n  - 计划\ncategories:\n  - 男男\nabbrlink: b0c7\ndate: 2020-06-04 10:51:50\npassword:\n---\n<center> <h2>6月份学习计划<h2></center>\n\n| 6月份 | 数学                                                 | 专业课                                                       | 英语                                                         | 政治            | 完成度                           |\n| ----- | ---------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | --------------- | -------------------------------- |\n| 6.9   | 1000题高数第8讲BC                                    | 1.2016年数据结构真题   <br>2.计算机网络王道第五章传输层      | 1.恋恋有词Unit5   Lesson2 <br>2.田静、长难句、特殊句式 <br>3.背所学课程单词 | 导论            | **完成**                         |\n| 6.10  | 1000题高数第9讲BC                                    | 1.2015年数据结构真题                                         | 1.恋恋有词Unit5   Lesson3 <br>2.田静、长难句分析、标点与连接词 <br>3.背所学课程单词 | 唯物论          | **数学未完成**                   |\n| 6.11  | 休息一天                                             | 休息一天                                                     | 休息一天                                                     | 休息一天        | **休息一天**                     |\n| 6.12  | 剩余第9讲BC题                                        | 1.2014年数据结构真题                                         | 1.恋恋有词Unit5   Lesson4 <br>2.田静、长难句分析、分析主谓 <br>3.背所学课程单词 | 唯物论-物质观   | **完成**                         |\n| 6.13  | 1000题高数第10讲BC                                   | 1.2013年数据结构真题      <br>2.计算机网络常青藤5、6章对照书复习 | 1.恋恋有词Unit5   Lesson5 <br>2.田静、长难句分析、简化长难句 <br>3.背恋恋有词Unit01单词表   <br>4.背所学课程单词 | 唯物论-意识观   | **完成**                         |\n| 6.14  | 1000题高数第11、12讲BC                               | 1.2012年数据结构真题      <br>2.重点对照常青藤和课本复习计算机网络第五章 | 1.恋恋有词Unit6   Lesson1 <br>2.田静、长难句分析、分裂结构 <br>3.背所学课程单词 | 辩证法两大特征  | **完成**                         |\n| 6.15  | 1.1000题高数第13讲BC                                 | 1.2011年数据结构真题                                         | 1.恋恋有词Unit6   Lesson2 <br>2.田静、长难句分析、嵌套结构 <br>3.背所学课程单词 | 辩证法五对范畴1 | **政治少看一课、恋恋有词未完成** |\n| 6.16  | 1.1000题高数剩余第13讲BC      <br>2.看第四章BC组讲解 | 1.2009年计学数据结构                                         | 1.恋恋有词Unit6   Lesson3 <br>2.田静、长难句分析、平行结构 <br>3.背所学课程单词 | 辩证法五对范畴2 | **完成**                         |\n| 6.17  | 1.1000题高数第14讲BC      <br>2.看第五章BC组讲解     | 1.2008年计学数据结构      <br>2.2018计算机学硕两道代码      <br>3.对照常青藤复习计算机网络第七、八章 | 1.恋恋有词Unit6   Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词 | 对立统一        |                                  |\n| 6.18  | 1.1000题高数第15讲BC                                 | 1.2018年软学数据结构                                         | 1.恋恋有词Unit7   Lesson1 <br>2.李旭、阅读基础、论点论据题 <br>3.背所学课程单词 | 质量互变定律    |                                  |\n| 6.19  | 1.1000题高数第16讲BC                                 | 1.2017年软学数据结构                                         | 1.恋恋有词Unit7   Lesson2 <br>2.李旭、阅读基础、文章续写题 <br>3.背所学课程单词 | 否定之否定定律  |                                  |\n| 6.20  | 1.1000题高数第17讲BC                                 | 1.2018年计专数据结构                                         | 1.恋恋有词Unit7   Lesson3 <br>2.李旭、阅读基础、总结点睛 <br>3.背所学课程单词 | 认识论          |                                  |\n| 6.21  | 1.1000题线代第1、2讲BC                               | 1.2017年计专数据结构                                         | 1.恋恋有词Unit7   Lesson4 <br>2.做真题2010.1并看李旭相应视频 <br>3.背所学课程单词 | 认识的本质      |                                  |\n| 6.22  | 1000题线代第3讲BC                                    | 1.2016年计专数据结构                                         | 1.恋恋有词Unit7   Lesson5 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词 | 真理与价值      |                                  |\n| 6.23  | 1000题线代第4讲BC                                    | 1.2015年计专数据结构                                         | 1.恋恋有词Unit8   Lesson1 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词 | 社会基本矛盾    |                                  |\n| 6.24  | 1000题线代第5讲BC                                    | 1.2014年计专数据结构                                         | 1.恋恋有词Unit8   Lesson2 <br>2.做真题2010.4并看李旭相应视频 <br>3.背所学课程单词 | 社会形态        |                                  |\n| 6.25  | 1000题线代第6讲BC                                    | 1.2013年计专数据结构                                         | 1.恋恋有词Unit8   Lesson3 <br>2.做真题2011.1并看李旭相应视频 <br>3.背所学课程单词 | 商品的两因素    |                                  |\n| 6.26  | 1000题线代第7讲BC                                    | 1.2012年计专数据结构                                         | 1.恋恋有词Unit8   Lesson4 <br>2.做真题2011.2并看李旭相应视频 <br>3.背所学课程单词 | 价值规律        |                                  |\n| 6.27  | 1000题线代第8讲BC                                    | 1.2011年计专数据结构                                         | 1.恋恋有词Unit9   Lesson1 <br>2.做真题2011.3并看李旭相应视频 <br>3.背所学课程单词 | 剩余价值生产    |                                  |\n| 6.28  | 1000题线代第9讲BC                                    | 1.2018年软专数据结构                                         | 1.恋恋有词Unit9   Lesson2 <br>2.做真题2011.4并看李旭相应视频 <br>3.背所学课程单词 | 剩余价值流转    |                                  |\n| 6.29  | 1000题概率第1讲BC                                    | 1.2017年软专数据结构                                         | 1.恋恋有词Unit9   Lesson3 <br>2.做真题2012.1并看李旭相应视频 <br>3.背所学课程单词 | 垄断资本主义    |                                  |\n| 6.30  | 1000题概率第2讲BC                                    | 1.2016年软专数据结构                                         | 1.恋恋有词Unit9   Lesson4 <br>2.做真题2012.2并看李旭相应视频 <br>3.背所学课程单词 | 社会主义        |                                  |\n| 6.31  | 1000题概率第3讲BC                                    | 2018-2007软专                                                | 1.恋恋有词Unit10   Lesson1 <br>2.做真题2012.3并看李旭相应视频 <br>3.背所学课程单词 | 人生的青春      |                                  |\n| 7.1   | 1000题概率第4讲BC                                    |                                                              |                                                              | 人生理想        |                                  |","slug":"学习计划","published":1,"updated":"2020-08-10T12:34:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdie002lzl9kfm7h6aj1","content":"<center> <h2>6月份学习计划</h2><h2></h2></center>\n<table>\n<thead>\n<tr>\n<th>6月份</th>\n<th>数学</th>\n<th>专业课</th>\n<th>英语</th>\n<th>政治</th>\n<th>完成度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6.9</td>\n<td>1000题高数第8讲BC</td>\n<td>1.2016年数据结构真题   <br>2.计算机网络王道第五章传输层</td>\n<td>1.恋恋有词Unit5   Lesson2 <br>2.田静、长难句、特殊句式 <br>3.背所学课程单词</td>\n<td>导论</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.10</td>\n<td>1000题高数第9讲BC</td>\n<td>1.2015年数据结构真题</td>\n<td>1.恋恋有词Unit5   Lesson3 <br>2.田静、长难句分析、标点与连接词 <br>3.背所学课程单词</td>\n<td>唯物论</td>\n<td><strong>数学未完成</strong></td>\n</tr>\n<tr>\n<td>6.11</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><strong>休息一天</strong></td>\n</tr>\n<tr>\n<td>6.12</td>\n<td>剩余第9讲BC题</td>\n<td>1.2014年数据结构真题</td>\n<td>1.恋恋有词Unit5   Lesson4 <br>2.田静、长难句分析、分析主谓 <br>3.背所学课程单词</td>\n<td>唯物论-物质观</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.13</td>\n<td>1000题高数第10讲BC</td>\n<td>1.2013年数据结构真题      <br>2.计算机网络常青藤5、6章对照书复习</td>\n<td>1.恋恋有词Unit5   Lesson5 <br>2.田静、长难句分析、简化长难句 <br>3.背恋恋有词Unit01单词表   <br>4.背所学课程单词</td>\n<td>唯物论-意识观</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.14</td>\n<td>1000题高数第11、12讲BC</td>\n<td>1.2012年数据结构真题      <br>2.重点对照常青藤和课本复习计算机网络第五章</td>\n<td>1.恋恋有词Unit6   Lesson1 <br>2.田静、长难句分析、分裂结构 <br>3.背所学课程单词</td>\n<td>辩证法两大特征</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.15</td>\n<td>1.1000题高数第13讲BC</td>\n<td>1.2011年数据结构真题</td>\n<td>1.恋恋有词Unit6   Lesson2 <br>2.田静、长难句分析、嵌套结构 <br>3.背所学课程单词</td>\n<td>辩证法五对范畴1</td>\n<td><strong>政治少看一课、恋恋有词未完成</strong></td>\n</tr>\n<tr>\n<td>6.16</td>\n<td>1.1000题高数剩余第13讲BC      <br>2.看第四章BC组讲解</td>\n<td>1.2009年计学数据结构</td>\n<td>1.恋恋有词Unit6   Lesson3 <br>2.田静、长难句分析、平行结构 <br>3.背所学课程单词</td>\n<td>辩证法五对范畴2</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.17</td>\n<td>1.1000题高数第14讲BC      <br>2.看第五章BC组讲解</td>\n<td>1.2008年计学数据结构      <br>2.2018计算机学硕两道代码      <br>3.对照常青藤复习计算机网络第七、八章</td>\n<td>1.恋恋有词Unit6   Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词</td>\n<td>对立统一</td>\n<td></td>\n</tr>\n<tr>\n<td>6.18</td>\n<td>1.1000题高数第15讲BC</td>\n<td>1.2018年软学数据结构</td>\n<td>1.恋恋有词Unit7   Lesson1 <br>2.李旭、阅读基础、论点论据题 <br>3.背所学课程单词</td>\n<td>质量互变定律</td>\n<td></td>\n</tr>\n<tr>\n<td>6.19</td>\n<td>1.1000题高数第16讲BC</td>\n<td>1.2017年软学数据结构</td>\n<td>1.恋恋有词Unit7   Lesson2 <br>2.李旭、阅读基础、文章续写题 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td></td>\n</tr>\n<tr>\n<td>6.20</td>\n<td>1.1000题高数第17讲BC</td>\n<td>1.2018年计专数据结构</td>\n<td>1.恋恋有词Unit7   Lesson3 <br>2.李旭、阅读基础、总结点睛 <br>3.背所学课程单词</td>\n<td>认识论</td>\n<td></td>\n</tr>\n<tr>\n<td>6.21</td>\n<td>1.1000题线代第1、2讲BC</td>\n<td>1.2017年计专数据结构</td>\n<td>1.恋恋有词Unit7   Lesson4 <br>2.做真题2010.1并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>认识的本质</td>\n<td></td>\n</tr>\n<tr>\n<td>6.22</td>\n<td>1000题线代第3讲BC</td>\n<td>1.2016年计专数据结构</td>\n<td>1.恋恋有词Unit7   Lesson5 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>真理与价值</td>\n<td></td>\n</tr>\n<tr>\n<td>6.23</td>\n<td>1000题线代第4讲BC</td>\n<td>1.2015年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson1 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>社会基本矛盾</td>\n<td></td>\n</tr>\n<tr>\n<td>6.24</td>\n<td>1000题线代第5讲BC</td>\n<td>1.2014年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson2 <br>2.做真题2010.4并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>社会形态</td>\n<td></td>\n</tr>\n<tr>\n<td>6.25</td>\n<td>1000题线代第6讲BC</td>\n<td>1.2013年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson3 <br>2.做真题2011.1并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>商品的两因素</td>\n<td></td>\n</tr>\n<tr>\n<td>6.26</td>\n<td>1000题线代第7讲BC</td>\n<td>1.2012年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson4 <br>2.做真题2011.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>价值规律</td>\n<td></td>\n</tr>\n<tr>\n<td>6.27</td>\n<td>1000题线代第8讲BC</td>\n<td>1.2011年计专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson1 <br>2.做真题2011.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>剩余价值生产</td>\n<td></td>\n</tr>\n<tr>\n<td>6.28</td>\n<td>1000题线代第9讲BC</td>\n<td>1.2018年软专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson2 <br>2.做真题2011.4并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>剩余价值流转</td>\n<td></td>\n</tr>\n<tr>\n<td>6.29</td>\n<td>1000题概率第1讲BC</td>\n<td>1.2017年软专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson3 <br>2.做真题2012.1并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>垄断资本主义</td>\n<td></td>\n</tr>\n<tr>\n<td>6.30</td>\n<td>1000题概率第2讲BC</td>\n<td>1.2016年软专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson4 <br>2.做真题2012.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>社会主义</td>\n<td></td>\n</tr>\n<tr>\n<td>6.31</td>\n<td>1000题概率第3讲BC</td>\n<td>2018-2007软专</td>\n<td>1.恋恋有词Unit10   Lesson1 <br>2.做真题2012.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>人生的青春</td>\n<td></td>\n</tr>\n<tr>\n<td>7.1</td>\n<td>1000题概率第4讲BC</td>\n<td></td>\n<td></td>\n<td>人生理想</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<center> <h2>6月份学习计划<h2></center>\n<table>\n<thead>\n<tr>\n<th>6月份</th>\n<th>数学</th>\n<th>专业课</th>\n<th>英语</th>\n<th>政治</th>\n<th>完成度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6.9</td>\n<td>1000题高数第8讲BC</td>\n<td>1.2016年数据结构真题   <br>2.计算机网络王道第五章传输层</td>\n<td>1.恋恋有词Unit5   Lesson2 <br>2.田静、长难句、特殊句式 <br>3.背所学课程单词</td>\n<td>导论</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.10</td>\n<td>1000题高数第9讲BC</td>\n<td>1.2015年数据结构真题</td>\n<td>1.恋恋有词Unit5   Lesson3 <br>2.田静、长难句分析、标点与连接词 <br>3.背所学课程单词</td>\n<td>唯物论</td>\n<td><strong>数学未完成</strong></td>\n</tr>\n<tr>\n<td>6.11</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td>休息一天</td>\n<td><strong>休息一天</strong></td>\n</tr>\n<tr>\n<td>6.12</td>\n<td>剩余第9讲BC题</td>\n<td>1.2014年数据结构真题</td>\n<td>1.恋恋有词Unit5   Lesson4 <br>2.田静、长难句分析、分析主谓 <br>3.背所学课程单词</td>\n<td>唯物论-物质观</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.13</td>\n<td>1000题高数第10讲BC</td>\n<td>1.2013年数据结构真题      <br>2.计算机网络常青藤5、6章对照书复习</td>\n<td>1.恋恋有词Unit5   Lesson5 <br>2.田静、长难句分析、简化长难句 <br>3.背恋恋有词Unit01单词表   <br>4.背所学课程单词</td>\n<td>唯物论-意识观</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.14</td>\n<td>1000题高数第11、12讲BC</td>\n<td>1.2012年数据结构真题      <br>2.重点对照常青藤和课本复习计算机网络第五章</td>\n<td>1.恋恋有词Unit6   Lesson1 <br>2.田静、长难句分析、分裂结构 <br>3.背所学课程单词</td>\n<td>辩证法两大特征</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.15</td>\n<td>1.1000题高数第13讲BC</td>\n<td>1.2011年数据结构真题</td>\n<td>1.恋恋有词Unit6   Lesson2 <br>2.田静、长难句分析、嵌套结构 <br>3.背所学课程单词</td>\n<td>辩证法五对范畴1</td>\n<td><strong>政治少看一课、恋恋有词未完成</strong></td>\n</tr>\n<tr>\n<td>6.16</td>\n<td>1.1000题高数剩余第13讲BC      <br>2.看第四章BC组讲解</td>\n<td>1.2009年计学数据结构</td>\n<td>1.恋恋有词Unit6   Lesson3 <br>2.田静、长难句分析、平行结构 <br>3.背所学课程单词</td>\n<td>辩证法五对范畴2</td>\n<td><strong>完成</strong></td>\n</tr>\n<tr>\n<td>6.17</td>\n<td>1.1000题高数第14讲BC      <br>2.看第五章BC组讲解</td>\n<td>1.2008年计学数据结构      <br>2.2018计算机学硕两道代码      <br>3.对照常青藤复习计算机网络第七、八章</td>\n<td>1.恋恋有词Unit6   Lesson4 <br>2.李旭、阅读基础、态度方向题 <br>3.背所学课程单词</td>\n<td>对立统一</td>\n<td></td>\n</tr>\n<tr>\n<td>6.18</td>\n<td>1.1000题高数第15讲BC</td>\n<td>1.2018年软学数据结构</td>\n<td>1.恋恋有词Unit7   Lesson1 <br>2.李旭、阅读基础、论点论据题 <br>3.背所学课程单词</td>\n<td>质量互变定律</td>\n<td></td>\n</tr>\n<tr>\n<td>6.19</td>\n<td>1.1000题高数第16讲BC</td>\n<td>1.2017年软学数据结构</td>\n<td>1.恋恋有词Unit7   Lesson2 <br>2.李旭、阅读基础、文章续写题 <br>3.背所学课程单词</td>\n<td>否定之否定定律</td>\n<td></td>\n</tr>\n<tr>\n<td>6.20</td>\n<td>1.1000题高数第17讲BC</td>\n<td>1.2018年计专数据结构</td>\n<td>1.恋恋有词Unit7   Lesson3 <br>2.李旭、阅读基础、总结点睛 <br>3.背所学课程单词</td>\n<td>认识论</td>\n<td></td>\n</tr>\n<tr>\n<td>6.21</td>\n<td>1.1000题线代第1、2讲BC</td>\n<td>1.2017年计专数据结构</td>\n<td>1.恋恋有词Unit7   Lesson4 <br>2.做真题2010.1并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>认识的本质</td>\n<td></td>\n</tr>\n<tr>\n<td>6.22</td>\n<td>1000题线代第3讲BC</td>\n<td>1.2016年计专数据结构</td>\n<td>1.恋恋有词Unit7   Lesson5 <br>2.做真题2010.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>真理与价值</td>\n<td></td>\n</tr>\n<tr>\n<td>6.23</td>\n<td>1000题线代第4讲BC</td>\n<td>1.2015年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson1 <br>2.做真题2010.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>社会基本矛盾</td>\n<td></td>\n</tr>\n<tr>\n<td>6.24</td>\n<td>1000题线代第5讲BC</td>\n<td>1.2014年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson2 <br>2.做真题2010.4并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>社会形态</td>\n<td></td>\n</tr>\n<tr>\n<td>6.25</td>\n<td>1000题线代第6讲BC</td>\n<td>1.2013年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson3 <br>2.做真题2011.1并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>商品的两因素</td>\n<td></td>\n</tr>\n<tr>\n<td>6.26</td>\n<td>1000题线代第7讲BC</td>\n<td>1.2012年计专数据结构</td>\n<td>1.恋恋有词Unit8   Lesson4 <br>2.做真题2011.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>价值规律</td>\n<td></td>\n</tr>\n<tr>\n<td>6.27</td>\n<td>1000题线代第8讲BC</td>\n<td>1.2011年计专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson1 <br>2.做真题2011.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>剩余价值生产</td>\n<td></td>\n</tr>\n<tr>\n<td>6.28</td>\n<td>1000题线代第9讲BC</td>\n<td>1.2018年软专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson2 <br>2.做真题2011.4并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>剩余价值流转</td>\n<td></td>\n</tr>\n<tr>\n<td>6.29</td>\n<td>1000题概率第1讲BC</td>\n<td>1.2017年软专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson3 <br>2.做真题2012.1并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>垄断资本主义</td>\n<td></td>\n</tr>\n<tr>\n<td>6.30</td>\n<td>1000题概率第2讲BC</td>\n<td>1.2016年软专数据结构</td>\n<td>1.恋恋有词Unit9   Lesson4 <br>2.做真题2012.2并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>社会主义</td>\n<td></td>\n</tr>\n<tr>\n<td>6.31</td>\n<td>1000题概率第3讲BC</td>\n<td>2018-2007软专</td>\n<td>1.恋恋有词Unit10   Lesson1 <br>2.做真题2012.3并看李旭相应视频 <br>3.背所学课程单词</td>\n<td>人生的青春</td>\n<td></td>\n</tr>\n<tr>\n<td>7.1</td>\n<td>1000题概率第4讲BC</td>\n<td></td>\n<td></td>\n<td>人生理想</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"强化-计网第三章-数据链路层","top":false,"cover":false,"toc":true,"mathjax":true,"keywords":"吉林大学，考研，计算机网络，数据链路层","description":"吉林大学，考研，计算机网络，数据链路层","summary":"强化-计网第三章-数据链路层","abbrlink":"2fcb","date":"2020-09-23T11:29:11.000Z","password":null,"_content":"## 强化 计网第三章 数据链路层\n\n### 1.线路规划\n\n#### 1.1询问/应答（ENQ/ACK）\n\n- 一条链路两端的**设备级别相同**，任意一个设备都可以启动一个会话过程（**点对点**）\n- 工作方式\n- 启动方首先发送一个**询问帧（ENQ）**询问接收方是否可以接收数据\n- 接收方如果已经**准备好接收**，必须应答一个**确认帧（ACK）**\n- 如果没用做好准备，就必须应答一个否定帧（NAK）\n\n#### 1.2轮询（Poll）/选择（Select）方式\n\n- 有一个设备为主设备，其他设备为从设备的拓补结构中采用（**多点系统**）\n- 每个设备都有一个地址标识自身\n- 信息传输必须通过主设备\n\n##### 1.2.1轮询\n\n- 如果主设备希望**接收**数据，它将逐个询问从设备是否有数据发送，这个功能称为轮询\n\n##### 1.2.2选择\n\n- 如果主设备希望**发送**数据，它告知目标从设备准备好接收数据，这个功能称为选择\n\n### 2.流量控制与差错控制\n\n- 两者是结合在一起实现的，共有两种技术：停止等待协议和滑动窗口协议\n\n#### 2.1差错控制\n\n- 差错控制主要指错误检测和重传方法\n\n#### 2.2自动重复请求（ARQ）\n\n- 在一个帧中出现任何一个错误，接收方就返回一个否认帧，出错的帧就被发送方重新传送。这个过程被称为自动重复请求（ARQ）\n\n#### 2.3停止等待协议\n\n- 发送方每发送一帧后就等待一个确认帧。**只有当接收到确认帧后，发送方才发送下一帧**，这种过程不断交替，直到发送方发送一个传输结束帧（EOT）\n- 优点：简单\n- 缺点：效率低，每次都要等待\n\n##### 2.3.1信道利用率\n\n- 无差错的情况下完成一帧的发送时间为一个**窗口时间WT**:\n\n$$\nWT=t_I+2t_p+2t_{Proc}+t_s\n$$\n\n- **$t_I$是发送一个数据帧的时间**，设一个数据帧的长度为$L_f$比特，发送数据速率为$C$bps，则$t_I=L_f/C$秒\n\n- **$t_S$是确认帧的发送时间**，设一个确认帧的长度为$L_S$比特，发送数据速率为$C$bps，则$t_S=L_S/C$秒\n- **$ t_P $是电信号在物理链路上的传播延迟**\n\n- **$t_{Proc}$是收到一帧的处理时间和一个帧的形成时间**\n\n- 无差错信道利用率：\n\n$$\nF=(t_I+t_p)/WT\n$$\n\n- 有效数据传送速率：\n\n$$\nS=N/WT,N:一帧的有效数据位数\n$$\n\n- $t_W \\approx t_I+2t_P$\n\n##### 2.3.2差错控制\n\n###### 2.3.2.1帧破坏\n\n- 自动重复请求（ARQ）\n\n###### 2.3.2.2帧丢失\n\n- 定时器，判断数据帧在传输中丢失，超时自动重发\n\n###### 2.3.2.3应答帧丢失\n\n- 先重传数据帧\n- 数据帧和应答帧以交替的标识0和1出现在数据帧中，每次发送一个新的数据帧，编号信息和上次发送的不一样。这样就可以区分重复的数据帧\n- 丢弃重复帧\n\n#### 2.4滑动窗口协议\n\n##### 2.4.1流量控制\n\n- 在滑动窗口协议中，发送方在收到确认消息前可以发送若干帧。帧可以直接依次发送\n- 接收方使用一个应答帧来对多个数据帧的接收进行确认\n- 在发送方，只要窗口未填满就可以在未收到确认帧的情况下继续发送数据帧\n- **发送方窗口用于存放已经发送但未确认的数据帧和在收到确认帧之前可以发送的数据帧**\n- 例如：\n- 接收方发送了一个编号为5的确认帧，表示接收方收到了5号帧以前的所有帧，希望发送方发送5号帧\n\n##### 2.4.2差错控制\n\n###### 2.4.2.1回退N自动重复请求\n\n- 如果有一帧丢失或者损坏了，未被确认帧确认的帧都必须进行重传\n- <font color=\"red\">窗口大小：</font>如果帧的编号范围是$0 \\sim n-1$，则窗口尺寸为$n-1$\n\n###### 2.4.2.2选择拒绝自动重复请求\n\n- 只有特定的丢失或损坏帧被重发。接收方收到的数据帧可以是不按顺序到达的\n- 与回退n协议自动重传请求有以下不同：\n- 接收设备必须具有排序的逻辑功能\n- <font color=\"red\">窗口大小：</font>如果帧的编号范围是$0 \\sim n-1$，则窗口尺寸小于等于$n/2$\n\n##### 2.4.3滑动窗口协议的效率\n\n##### 2.4.4窗口大小的选择\n\n$$\nnt_I>2(t_I+t_P)\n$$\n\n- $t_I$：一个帧的发送时间\n- $t_P$：传播时间\n\n### 3.HDLC高级数据链路控制协议\n\n#### 3.1HDLC帧格式\n\n- 信息帧（I-帧）：用来传输用户数据以及与用户数据有关的控制信息\n- 监控帧（S-帧）：用来传输控制信息，主要是数据链路层流量控制和错误控制信息\n- 无编号帧（U-帧）：用来进行链路管理服务的\n\n##### 3.1.1标志字段\n\n- 标志字段为一个字节（8位），其位模式为01111110\n- 它用来**表示一个帧的开始和结束，并且为接收方提供同步手段**\n\n##### 3.1.2地址字段\n\n- 可以有1个或几个字节的长度\n\n##### 3.1.2控制字段\n\n- 有一个或两个字节\n- 用来进行**流量管理**\n\n### 4.数据链路层网络互联\n\n#### 4.1网桥\n\n- 网桥是一种存储转发设备，用于连接局域网\n- 网桥常用于局域网之间的互联\n- 是数据链路层上的互连设备，网桥同时作用在$OSI$的物理层和数据链路层\n- 网桥具有隔离通信的功能\n\n#### 4.2网桥路由算法\n\n##### 4.2.1固定路由策略 --- 固定路由网桥\n\n##### 4.2.2路由学习策略 --- 透明网桥\n\n###### 4.2.2.1生成树算法\n\n##### 4.2.3源路由策略 --- 源路由网桥","source":"_posts/强化-计网第三章-数据链路层.md","raw":"---\ntitle: 强化-计网第三章-数据链路层\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - 计网\n  - 数据链路层\n  - 强化\n  - 总结\n  - 考研\ncategories:\n  - 计网\nkeywords: 吉林大学，考研，计算机网络，数据链路层\ndescription: 吉林大学，考研，计算机网络，数据链路层\nsummary: 强化-计网第三章-数据链路层\nabbrlink: 2fcb\ndate: 2020-09-23 19:29:11\npassword:\n---\n## 强化 计网第三章 数据链路层\n\n### 1.线路规划\n\n#### 1.1询问/应答（ENQ/ACK）\n\n- 一条链路两端的**设备级别相同**，任意一个设备都可以启动一个会话过程（**点对点**）\n- 工作方式\n- 启动方首先发送一个**询问帧（ENQ）**询问接收方是否可以接收数据\n- 接收方如果已经**准备好接收**，必须应答一个**确认帧（ACK）**\n- 如果没用做好准备，就必须应答一个否定帧（NAK）\n\n#### 1.2轮询（Poll）/选择（Select）方式\n\n- 有一个设备为主设备，其他设备为从设备的拓补结构中采用（**多点系统**）\n- 每个设备都有一个地址标识自身\n- 信息传输必须通过主设备\n\n##### 1.2.1轮询\n\n- 如果主设备希望**接收**数据，它将逐个询问从设备是否有数据发送，这个功能称为轮询\n\n##### 1.2.2选择\n\n- 如果主设备希望**发送**数据，它告知目标从设备准备好接收数据，这个功能称为选择\n\n### 2.流量控制与差错控制\n\n- 两者是结合在一起实现的，共有两种技术：停止等待协议和滑动窗口协议\n\n#### 2.1差错控制\n\n- 差错控制主要指错误检测和重传方法\n\n#### 2.2自动重复请求（ARQ）\n\n- 在一个帧中出现任何一个错误，接收方就返回一个否认帧，出错的帧就被发送方重新传送。这个过程被称为自动重复请求（ARQ）\n\n#### 2.3停止等待协议\n\n- 发送方每发送一帧后就等待一个确认帧。**只有当接收到确认帧后，发送方才发送下一帧**，这种过程不断交替，直到发送方发送一个传输结束帧（EOT）\n- 优点：简单\n- 缺点：效率低，每次都要等待\n\n##### 2.3.1信道利用率\n\n- 无差错的情况下完成一帧的发送时间为一个**窗口时间WT**:\n\n$$\nWT=t_I+2t_p+2t_{Proc}+t_s\n$$\n\n- **$t_I$是发送一个数据帧的时间**，设一个数据帧的长度为$L_f$比特，发送数据速率为$C$bps，则$t_I=L_f/C$秒\n\n- **$t_S$是确认帧的发送时间**，设一个确认帧的长度为$L_S$比特，发送数据速率为$C$bps，则$t_S=L_S/C$秒\n- **$ t_P $是电信号在物理链路上的传播延迟**\n\n- **$t_{Proc}$是收到一帧的处理时间和一个帧的形成时间**\n\n- 无差错信道利用率：\n\n$$\nF=(t_I+t_p)/WT\n$$\n\n- 有效数据传送速率：\n\n$$\nS=N/WT,N:一帧的有效数据位数\n$$\n\n- $t_W \\approx t_I+2t_P$\n\n##### 2.3.2差错控制\n\n###### 2.3.2.1帧破坏\n\n- 自动重复请求（ARQ）\n\n###### 2.3.2.2帧丢失\n\n- 定时器，判断数据帧在传输中丢失，超时自动重发\n\n###### 2.3.2.3应答帧丢失\n\n- 先重传数据帧\n- 数据帧和应答帧以交替的标识0和1出现在数据帧中，每次发送一个新的数据帧，编号信息和上次发送的不一样。这样就可以区分重复的数据帧\n- 丢弃重复帧\n\n#### 2.4滑动窗口协议\n\n##### 2.4.1流量控制\n\n- 在滑动窗口协议中，发送方在收到确认消息前可以发送若干帧。帧可以直接依次发送\n- 接收方使用一个应答帧来对多个数据帧的接收进行确认\n- 在发送方，只要窗口未填满就可以在未收到确认帧的情况下继续发送数据帧\n- **发送方窗口用于存放已经发送但未确认的数据帧和在收到确认帧之前可以发送的数据帧**\n- 例如：\n- 接收方发送了一个编号为5的确认帧，表示接收方收到了5号帧以前的所有帧，希望发送方发送5号帧\n\n##### 2.4.2差错控制\n\n###### 2.4.2.1回退N自动重复请求\n\n- 如果有一帧丢失或者损坏了，未被确认帧确认的帧都必须进行重传\n- <font color=\"red\">窗口大小：</font>如果帧的编号范围是$0 \\sim n-1$，则窗口尺寸为$n-1$\n\n###### 2.4.2.2选择拒绝自动重复请求\n\n- 只有特定的丢失或损坏帧被重发。接收方收到的数据帧可以是不按顺序到达的\n- 与回退n协议自动重传请求有以下不同：\n- 接收设备必须具有排序的逻辑功能\n- <font color=\"red\">窗口大小：</font>如果帧的编号范围是$0 \\sim n-1$，则窗口尺寸小于等于$n/2$\n\n##### 2.4.3滑动窗口协议的效率\n\n##### 2.4.4窗口大小的选择\n\n$$\nnt_I>2(t_I+t_P)\n$$\n\n- $t_I$：一个帧的发送时间\n- $t_P$：传播时间\n\n### 3.HDLC高级数据链路控制协议\n\n#### 3.1HDLC帧格式\n\n- 信息帧（I-帧）：用来传输用户数据以及与用户数据有关的控制信息\n- 监控帧（S-帧）：用来传输控制信息，主要是数据链路层流量控制和错误控制信息\n- 无编号帧（U-帧）：用来进行链路管理服务的\n\n##### 3.1.1标志字段\n\n- 标志字段为一个字节（8位），其位模式为01111110\n- 它用来**表示一个帧的开始和结束，并且为接收方提供同步手段**\n\n##### 3.1.2地址字段\n\n- 可以有1个或几个字节的长度\n\n##### 3.1.2控制字段\n\n- 有一个或两个字节\n- 用来进行**流量管理**\n\n### 4.数据链路层网络互联\n\n#### 4.1网桥\n\n- 网桥是一种存储转发设备，用于连接局域网\n- 网桥常用于局域网之间的互联\n- 是数据链路层上的互连设备，网桥同时作用在$OSI$的物理层和数据链路层\n- 网桥具有隔离通信的功能\n\n#### 4.2网桥路由算法\n\n##### 4.2.1固定路由策略 --- 固定路由网桥\n\n##### 4.2.2路由学习策略 --- 透明网桥\n\n###### 4.2.2.1生成树算法\n\n##### 4.2.3源路由策略 --- 源路由网桥","slug":"强化-计网第三章-数据链路层","published":1,"updated":"2020-09-25T14:34:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdif002ozl9k3nfc3t1o","content":"<h2 id=\"强化-计网第三章-数据链路层\"><a class=\"markdownIt-Anchor\" href=\"#强化-计网第三章-数据链路层\"></a> 强化 计网第三章 数据链路层</h2>\n<h3 id=\"1线路规划\"><a class=\"markdownIt-Anchor\" href=\"#1线路规划\"></a> 1.线路规划</h3>\n<h4 id=\"11询问应答enqack\"><a class=\"markdownIt-Anchor\" href=\"#11询问应答enqack\"></a> 1.1询问/应答（ENQ/ACK）</h4>\n<ul>\n<li>一条链路两端的<strong>设备级别相同</strong>，任意一个设备都可以启动一个会话过程（<strong>点对点</strong>）</li>\n<li>工作方式</li>\n<li>启动方首先发送一个**询问帧（ENQ）**询问接收方是否可以接收数据</li>\n<li>接收方如果已经<strong>准备好接收</strong>，必须应答一个<strong>确认帧（ACK）</strong></li>\n<li>如果没用做好准备，就必须应答一个否定帧（NAK）</li>\n</ul>\n<h4 id=\"12轮询poll选择select方式\"><a class=\"markdownIt-Anchor\" href=\"#12轮询poll选择select方式\"></a> 1.2轮询（Poll）/选择（Select）方式</h4>\n<ul>\n<li>有一个设备为主设备，其他设备为从设备的拓补结构中采用（<strong>多点系统</strong>）</li>\n<li>每个设备都有一个地址标识自身</li>\n<li>信息传输必须通过主设备</li>\n</ul>\n<h5 id=\"121轮询\"><a class=\"markdownIt-Anchor\" href=\"#121轮询\"></a> 1.2.1轮询</h5>\n<ul>\n<li>如果主设备希望<strong>接收</strong>数据，它将逐个询问从设备是否有数据发送，这个功能称为轮询</li>\n</ul>\n<h5 id=\"122选择\"><a class=\"markdownIt-Anchor\" href=\"#122选择\"></a> 1.2.2选择</h5>\n<ul>\n<li>如果主设备希望<strong>发送</strong>数据，它告知目标从设备准备好接收数据，这个功能称为选择</li>\n</ul>\n<h3 id=\"2流量控制与差错控制\"><a class=\"markdownIt-Anchor\" href=\"#2流量控制与差错控制\"></a> 2.流量控制与差错控制</h3>\n<ul>\n<li>两者是结合在一起实现的，共有两种技术：停止等待协议和滑动窗口协议</li>\n</ul>\n<h4 id=\"21差错控制\"><a class=\"markdownIt-Anchor\" href=\"#21差错控制\"></a> 2.1差错控制</h4>\n<ul>\n<li>差错控制主要指错误检测和重传方法</li>\n</ul>\n<h4 id=\"22自动重复请求arq\"><a class=\"markdownIt-Anchor\" href=\"#22自动重复请求arq\"></a> 2.2自动重复请求（ARQ）</h4>\n<ul>\n<li>在一个帧中出现任何一个错误，接收方就返回一个否认帧，出错的帧就被发送方重新传送。这个过程被称为自动重复请求（ARQ）</li>\n</ul>\n<h4 id=\"23停止等待协议\"><a class=\"markdownIt-Anchor\" href=\"#23停止等待协议\"></a> 2.3停止等待协议</h4>\n<ul>\n<li>发送方每发送一帧后就等待一个确认帧。<strong>只有当接收到确认帧后，发送方才发送下一帧</strong>，这种过程不断交替，直到发送方发送一个传输结束帧（EOT）</li>\n<li>优点：简单</li>\n<li>缺点：效率低，每次都要等待</li>\n</ul>\n<h5 id=\"231信道利用率\"><a class=\"markdownIt-Anchor\" href=\"#231信道利用率\"></a> 2.3.1信道利用率</h5>\n<ul>\n<li>无差错的情况下完成一帧的发送时间为一个<strong>窗口时间WT</strong>:</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mi>p</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">WT=t_I+2t_p+2t_{Proc}+t_s\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9305479999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是发送一个数据帧的时间</strong>，设一个数据帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub><mo>=</mo><msub><mi>L</mi><mi>f</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_I=L_f/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒</p>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是确认帧的发送时间</strong>，设一个确认帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>S</mi></msub><mo>=</mo><msub><mi>L</mi><mi>S</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_S=L_S/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒</p>\n</li>\n<li>\n<p><strong>$ t_P $是电信号在物理链路上的传播延迟</strong></p>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">t_{Proc}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是收到一帧的处理时间和一个帧的形成时间</strong></p>\n</li>\n<li>\n<p>无差错信道利用率：</p>\n</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><msub><mi>t</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">F=(t_I+t_p)/WT\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></p>\n<ul>\n<li>有效数据传送速率：</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>N</mi><mi mathvariant=\"normal\">/</mi><mi>W</mi><mi>T</mi><mo separator=\"true\">,</mo><mi>N</mi><mo>:</mo><mi mathvariant=\"normal\">一</mi><mi mathvariant=\"normal\">帧</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">有</mi><mi mathvariant=\"normal\">效</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">据</mi><mi mathvariant=\"normal\">位</mi><mi mathvariant=\"normal\">数</mi></mrow><annotation encoding=\"application/x-tex\">S=N/WT,N:一帧的有效数据位数\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">帧</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">效</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">位</span><span class=\"mord cjk_fallback\">数</span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>W</mi></msub><mo>≈</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_W \\approx t_I+2t_P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">W</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<h5 id=\"232差错控制\"><a class=\"markdownIt-Anchor\" href=\"#232差错控制\"></a> 2.3.2差错控制</h5>\n<h6 id=\"2321帧破坏\"><a class=\"markdownIt-Anchor\" href=\"#2321帧破坏\"></a> 2.3.2.1帧破坏</h6>\n<ul>\n<li>自动重复请求（ARQ）</li>\n</ul>\n<h6 id=\"2322帧丢失\"><a class=\"markdownIt-Anchor\" href=\"#2322帧丢失\"></a> 2.3.2.2帧丢失</h6>\n<ul>\n<li>定时器，判断数据帧在传输中丢失，超时自动重发</li>\n</ul>\n<h6 id=\"2323应答帧丢失\"><a class=\"markdownIt-Anchor\" href=\"#2323应答帧丢失\"></a> 2.3.2.3应答帧丢失</h6>\n<ul>\n<li>先重传数据帧</li>\n<li>数据帧和应答帧以交替的标识0和1出现在数据帧中，每次发送一个新的数据帧，编号信息和上次发送的不一样。这样就可以区分重复的数据帧</li>\n<li>丢弃重复帧</li>\n</ul>\n<h4 id=\"24滑动窗口协议\"><a class=\"markdownIt-Anchor\" href=\"#24滑动窗口协议\"></a> 2.4滑动窗口协议</h4>\n<h5 id=\"241流量控制\"><a class=\"markdownIt-Anchor\" href=\"#241流量控制\"></a> 2.4.1流量控制</h5>\n<ul>\n<li>在滑动窗口协议中，发送方在收到确认消息前可以发送若干帧。帧可以直接依次发送</li>\n<li>接收方使用一个应答帧来对多个数据帧的接收进行确认</li>\n<li>在发送方，只要窗口未填满就可以在未收到确认帧的情况下继续发送数据帧</li>\n<li><strong>发送方窗口用于存放已经发送但未确认的数据帧和在收到确认帧之前可以发送的数据帧</strong></li>\n<li>例如：</li>\n<li>接收方发送了一个编号为5的确认帧，表示接收方收到了5号帧以前的所有帧，希望发送方发送5号帧</li>\n</ul>\n<h5 id=\"242差错控制\"><a class=\"markdownIt-Anchor\" href=\"#242差错控制\"></a> 2.4.2差错控制</h5>\n<h6 id=\"2421回退n自动重复请求\"><a class=\"markdownIt-Anchor\" href=\"#2421回退n自动重复请求\"></a> 2.4.2.1回退N自动重复请求</h6>\n<ul>\n<li>如果有一帧丢失或者损坏了，未被确认帧确认的帧都必须进行重传</li>\n<li><font color=\"red\">窗口大小：</font>如果帧的编号范围是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\sim n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，则窗口尺寸为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<h6 id=\"2422选择拒绝自动重复请求\"><a class=\"markdownIt-Anchor\" href=\"#2422选择拒绝自动重复请求\"></a> 2.4.2.2选择拒绝自动重复请求</h6>\n<ul>\n<li>只有特定的丢失或损坏帧被重发。接收方收到的数据帧可以是不按顺序到达的</li>\n<li>与回退n协议自动重传请求有以下不同：</li>\n<li>接收设备必须具有排序的逻辑功能</li>\n<li><font color=\"red\">窗口大小：</font>如果帧的编号范围是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\sim n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，则窗口尺寸小于等于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span></li>\n</ul>\n<h5 id=\"243滑动窗口协议的效率\"><a class=\"markdownIt-Anchor\" href=\"#243滑动窗口协议的效率\"></a> 2.4.3滑动窗口协议的效率</h5>\n<h5 id=\"244窗口大小的选择\"><a class=\"markdownIt-Anchor\" href=\"#244窗口大小的选择\"></a> 2.4.4窗口大小的选择</h5>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><msub><mi>t</mi><mi>I</mi></msub><mo>&gt;</mo><mn>2</mn><mo stretchy=\"false\">(</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><msub><mi>t</mi><mi>P</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">nt_I&gt;2(t_I+t_P)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：一个帧的发送时间</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：传播时间</li>\n</ul>\n<h3 id=\"3hdlc高级数据链路控制协议\"><a class=\"markdownIt-Anchor\" href=\"#3hdlc高级数据链路控制协议\"></a> 3.HDLC高级数据链路控制协议</h3>\n<h4 id=\"31hdlc帧格式\"><a class=\"markdownIt-Anchor\" href=\"#31hdlc帧格式\"></a> 3.1HDLC帧格式</h4>\n<ul>\n<li>信息帧（I-帧）：用来传输用户数据以及与用户数据有关的控制信息</li>\n<li>监控帧（S-帧）：用来传输控制信息，主要是数据链路层流量控制和错误控制信息</li>\n<li>无编号帧（U-帧）：用来进行链路管理服务的</li>\n</ul>\n<h5 id=\"311标志字段\"><a class=\"markdownIt-Anchor\" href=\"#311标志字段\"></a> 3.1.1标志字段</h5>\n<ul>\n<li>标志字段为一个字节（8位），其位模式为01111110</li>\n<li>它用来<strong>表示一个帧的开始和结束，并且为接收方提供同步手段</strong></li>\n</ul>\n<h5 id=\"312地址字段\"><a class=\"markdownIt-Anchor\" href=\"#312地址字段\"></a> 3.1.2地址字段</h5>\n<ul>\n<li>可以有1个或几个字节的长度</li>\n</ul>\n<h5 id=\"312控制字段\"><a class=\"markdownIt-Anchor\" href=\"#312控制字段\"></a> 3.1.2控制字段</h5>\n<ul>\n<li>有一个或两个字节</li>\n<li>用来进行<strong>流量管理</strong></li>\n</ul>\n<h3 id=\"4数据链路层网络互联\"><a class=\"markdownIt-Anchor\" href=\"#4数据链路层网络互联\"></a> 4.数据链路层网络互联</h3>\n<h4 id=\"41网桥\"><a class=\"markdownIt-Anchor\" href=\"#41网桥\"></a> 4.1网桥</h4>\n<ul>\n<li>网桥是一种存储转发设备，用于连接局域网</li>\n<li>网桥常用于局域网之间的互联</li>\n<li>是数据链路层上的互连设备，网桥同时作用在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mi>S</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">OSI</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span>的物理层和数据链路层</li>\n<li>网桥具有隔离通信的功能</li>\n</ul>\n<h4 id=\"42网桥路由算法\"><a class=\"markdownIt-Anchor\" href=\"#42网桥路由算法\"></a> 4.2网桥路由算法</h4>\n<h5 id=\"421固定路由策略-固定路由网桥\"><a class=\"markdownIt-Anchor\" href=\"#421固定路由策略-固定路由网桥\"></a> 4.2.1固定路由策略 — 固定路由网桥</h5>\n<h5 id=\"422路由学习策略-透明网桥\"><a class=\"markdownIt-Anchor\" href=\"#422路由学习策略-透明网桥\"></a> 4.2.2路由学习策略 — 透明网桥</h5>\n<h6 id=\"4221生成树算法\"><a class=\"markdownIt-Anchor\" href=\"#4221生成树算法\"></a> 4.2.2.1生成树算法</h6>\n<h5 id=\"423源路由策略-源路由网桥\"><a class=\"markdownIt-Anchor\" href=\"#423源路由策略-源路由网桥\"></a> 4.2.3源路由策略 — 源路由网桥</h5>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"强化-计网第三章-数据链路层\"><a class=\"markdownIt-Anchor\" href=\"#强化-计网第三章-数据链路层\"></a> 强化 计网第三章 数据链路层</h2>\n<h3 id=\"1线路规划\"><a class=\"markdownIt-Anchor\" href=\"#1线路规划\"></a> 1.线路规划</h3>\n<h4 id=\"11询问应答enqack\"><a class=\"markdownIt-Anchor\" href=\"#11询问应答enqack\"></a> 1.1询问/应答（ENQ/ACK）</h4>\n<ul>\n<li>一条链路两端的<strong>设备级别相同</strong>，任意一个设备都可以启动一个会话过程（<strong>点对点</strong>）</li>\n<li>工作方式</li>\n<li>启动方首先发送一个**询问帧（ENQ）**询问接收方是否可以接收数据</li>\n<li>接收方如果已经<strong>准备好接收</strong>，必须应答一个<strong>确认帧（ACK）</strong></li>\n<li>如果没用做好准备，就必须应答一个否定帧（NAK）</li>\n</ul>\n<h4 id=\"12轮询poll选择select方式\"><a class=\"markdownIt-Anchor\" href=\"#12轮询poll选择select方式\"></a> 1.2轮询（Poll）/选择（Select）方式</h4>\n<ul>\n<li>有一个设备为主设备，其他设备为从设备的拓补结构中采用（<strong>多点系统</strong>）</li>\n<li>每个设备都有一个地址标识自身</li>\n<li>信息传输必须通过主设备</li>\n</ul>\n<h5 id=\"121轮询\"><a class=\"markdownIt-Anchor\" href=\"#121轮询\"></a> 1.2.1轮询</h5>\n<ul>\n<li>如果主设备希望<strong>接收</strong>数据，它将逐个询问从设备是否有数据发送，这个功能称为轮询</li>\n</ul>\n<h5 id=\"122选择\"><a class=\"markdownIt-Anchor\" href=\"#122选择\"></a> 1.2.2选择</h5>\n<ul>\n<li>如果主设备希望<strong>发送</strong>数据，它告知目标从设备准备好接收数据，这个功能称为选择</li>\n</ul>\n<h3 id=\"2流量控制与差错控制\"><a class=\"markdownIt-Anchor\" href=\"#2流量控制与差错控制\"></a> 2.流量控制与差错控制</h3>\n<ul>\n<li>两者是结合在一起实现的，共有两种技术：停止等待协议和滑动窗口协议</li>\n</ul>\n<h4 id=\"21差错控制\"><a class=\"markdownIt-Anchor\" href=\"#21差错控制\"></a> 2.1差错控制</h4>\n<ul>\n<li>差错控制主要指错误检测和重传方法</li>\n</ul>\n<h4 id=\"22自动重复请求arq\"><a class=\"markdownIt-Anchor\" href=\"#22自动重复请求arq\"></a> 2.2自动重复请求（ARQ）</h4>\n<ul>\n<li>在一个帧中出现任何一个错误，接收方就返回一个否认帧，出错的帧就被发送方重新传送。这个过程被称为自动重复请求（ARQ）</li>\n</ul>\n<h4 id=\"23停止等待协议\"><a class=\"markdownIt-Anchor\" href=\"#23停止等待协议\"></a> 2.3停止等待协议</h4>\n<ul>\n<li>发送方每发送一帧后就等待一个确认帧。<strong>只有当接收到确认帧后，发送方才发送下一帧</strong>，这种过程不断交替，直到发送方发送一个传输结束帧（EOT）</li>\n<li>优点：简单</li>\n<li>缺点：效率低，每次都要等待</li>\n</ul>\n<h5 id=\"231信道利用率\"><a class=\"markdownIt-Anchor\" href=\"#231信道利用率\"></a> 2.3.1信道利用率</h5>\n<ul>\n<li>无差错的情况下完成一帧的发送时间为一个<strong>窗口时间WT</strong>:</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mi>p</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">WT=t_I+2t_p+2t_{Proc}+t_s\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9305479999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是发送一个数据帧的时间</strong>，设一个数据帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub><mo>=</mo><msub><mi>L</mi><mi>f</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_I=L_f/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒</p>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是确认帧的发送时间</strong>，设一个确认帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>S</mi></msub><mo>=</mo><msub><mi>L</mi><mi>S</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_S=L_S/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒</p>\n</li>\n<li>\n<p><strong>$ t_P $是电信号在物理链路上的传播延迟</strong></p>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">t_{Proc}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是收到一帧的处理时间和一个帧的形成时间</strong></p>\n</li>\n<li>\n<p>无差错信道利用率：</p>\n</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><msub><mi>t</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">F=(t_I+t_p)/WT\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></p>\n<ul>\n<li>有效数据传送速率：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>N</mi><mi mathvariant=\"normal\">/</mi><mi>W</mi><mi>T</mi><mo separator=\"true\">,</mo><mi>N</mi><mo>:</mo><mi mathvariant=\"normal\">一</mi><mi mathvariant=\"normal\">帧</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">有</mi><mi mathvariant=\"normal\">效</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">据</mi><mi mathvariant=\"normal\">位</mi><mi mathvariant=\"normal\">数</mi></mrow><annotation encoding=\"application/x-tex\">S=N/WT,N:一帧的有效数据位数\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">帧</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">效</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">位</span><span class=\"mord cjk_fallback\">数</span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>W</mi></msub><mo>≈</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_W \\approx t_I+2t_P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">W</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<h5 id=\"232差错控制\"><a class=\"markdownIt-Anchor\" href=\"#232差错控制\"></a> 2.3.2差错控制</h5>\n<h6 id=\"2321帧破坏\"><a class=\"markdownIt-Anchor\" href=\"#2321帧破坏\"></a> 2.3.2.1帧破坏</h6>\n<ul>\n<li>自动重复请求（ARQ）</li>\n</ul>\n<h6 id=\"2322帧丢失\"><a class=\"markdownIt-Anchor\" href=\"#2322帧丢失\"></a> 2.3.2.2帧丢失</h6>\n<ul>\n<li>定时器，判断数据帧在传输中丢失，超时自动重发</li>\n</ul>\n<h6 id=\"2323应答帧丢失\"><a class=\"markdownIt-Anchor\" href=\"#2323应答帧丢失\"></a> 2.3.2.3应答帧丢失</h6>\n<ul>\n<li>先重传数据帧</li>\n<li>数据帧和应答帧以交替的标识0和1出现在数据帧中，每次发送一个新的数据帧，编号信息和上次发送的不一样。这样就可以区分重复的数据帧</li>\n<li>丢弃重复帧</li>\n</ul>\n<h4 id=\"24滑动窗口协议\"><a class=\"markdownIt-Anchor\" href=\"#24滑动窗口协议\"></a> 2.4滑动窗口协议</h4>\n<h5 id=\"241流量控制\"><a class=\"markdownIt-Anchor\" href=\"#241流量控制\"></a> 2.4.1流量控制</h5>\n<ul>\n<li>在滑动窗口协议中，发送方在收到确认消息前可以发送若干帧。帧可以直接依次发送</li>\n<li>接收方使用一个应答帧来对多个数据帧的接收进行确认</li>\n<li>在发送方，只要窗口未填满就可以在未收到确认帧的情况下继续发送数据帧</li>\n<li><strong>发送方窗口用于存放已经发送但未确认的数据帧和在收到确认帧之前可以发送的数据帧</strong></li>\n<li>例如：</li>\n<li>接收方发送了一个编号为5的确认帧，表示接收方收到了5号帧以前的所有帧，希望发送方发送5号帧</li>\n</ul>\n<h5 id=\"242差错控制\"><a class=\"markdownIt-Anchor\" href=\"#242差错控制\"></a> 2.4.2差错控制</h5>\n<h6 id=\"2421回退n自动重复请求\"><a class=\"markdownIt-Anchor\" href=\"#2421回退n自动重复请求\"></a> 2.4.2.1回退N自动重复请求</h6>\n<ul>\n<li>如果有一帧丢失或者损坏了，未被确认帧确认的帧都必须进行重传</li>\n<li><font color=\"red\">窗口大小：</font>如果帧的编号范围是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\sim n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，则窗口尺寸为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<h6 id=\"2422选择拒绝自动重复请求\"><a class=\"markdownIt-Anchor\" href=\"#2422选择拒绝自动重复请求\"></a> 2.4.2.2选择拒绝自动重复请求</h6>\n<ul>\n<li>只有特定的丢失或损坏帧被重发。接收方收到的数据帧可以是不按顺序到达的</li>\n<li>与回退n协议自动重传请求有以下不同：</li>\n<li>接收设备必须具有排序的逻辑功能</li>\n<li><font color=\"red\">窗口大小：</font>如果帧的编号范围是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\sim n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，则窗口尺寸小于等于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span></li>\n</ul>\n<h5 id=\"243滑动窗口协议的效率\"><a class=\"markdownIt-Anchor\" href=\"#243滑动窗口协议的效率\"></a> 2.4.3滑动窗口协议的效率</h5>\n<h5 id=\"244窗口大小的选择\"><a class=\"markdownIt-Anchor\" href=\"#244窗口大小的选择\"></a> 2.4.4窗口大小的选择</h5>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><msub><mi>t</mi><mi>I</mi></msub><mo>&gt;</mo><mn>2</mn><mo stretchy=\"false\">(</mo><msub><mi>t</mi><mi>I</mi></msub><mo>+</mo><msub><mi>t</mi><mi>P</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">nt_I&gt;2(t_I+t_P)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：一个帧的发送时间</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：传播时间</li>\n</ul>\n<h3 id=\"3hdlc高级数据链路控制协议\"><a class=\"markdownIt-Anchor\" href=\"#3hdlc高级数据链路控制协议\"></a> 3.HDLC高级数据链路控制协议</h3>\n<h4 id=\"31hdlc帧格式\"><a class=\"markdownIt-Anchor\" href=\"#31hdlc帧格式\"></a> 3.1HDLC帧格式</h4>\n<ul>\n<li>信息帧（I-帧）：用来传输用户数据以及与用户数据有关的控制信息</li>\n<li>监控帧（S-帧）：用来传输控制信息，主要是数据链路层流量控制和错误控制信息</li>\n<li>无编号帧（U-帧）：用来进行链路管理服务的</li>\n</ul>\n<h5 id=\"311标志字段\"><a class=\"markdownIt-Anchor\" href=\"#311标志字段\"></a> 3.1.1标志字段</h5>\n<ul>\n<li>标志字段为一个字节（8位），其位模式为01111110</li>\n<li>它用来<strong>表示一个帧的开始和结束，并且为接收方提供同步手段</strong></li>\n</ul>\n<h5 id=\"312地址字段\"><a class=\"markdownIt-Anchor\" href=\"#312地址字段\"></a> 3.1.2地址字段</h5>\n<ul>\n<li>可以有1个或几个字节的长度</li>\n</ul>\n<h5 id=\"312控制字段\"><a class=\"markdownIt-Anchor\" href=\"#312控制字段\"></a> 3.1.2控制字段</h5>\n<ul>\n<li>有一个或两个字节</li>\n<li>用来进行<strong>流量管理</strong></li>\n</ul>\n<h3 id=\"4数据链路层网络互联\"><a class=\"markdownIt-Anchor\" href=\"#4数据链路层网络互联\"></a> 4.数据链路层网络互联</h3>\n<h4 id=\"41网桥\"><a class=\"markdownIt-Anchor\" href=\"#41网桥\"></a> 4.1网桥</h4>\n<ul>\n<li>网桥是一种存储转发设备，用于连接局域网</li>\n<li>网桥常用于局域网之间的互联</li>\n<li>是数据链路层上的互连设备，网桥同时作用在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mi>S</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">OSI</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span>的物理层和数据链路层</li>\n<li>网桥具有隔离通信的功能</li>\n</ul>\n<h4 id=\"42网桥路由算法\"><a class=\"markdownIt-Anchor\" href=\"#42网桥路由算法\"></a> 4.2网桥路由算法</h4>\n<h5 id=\"421固定路由策略-固定路由网桥\"><a class=\"markdownIt-Anchor\" href=\"#421固定路由策略-固定路由网桥\"></a> 4.2.1固定路由策略 — 固定路由网桥</h5>\n<h5 id=\"422路由学习策略-透明网桥\"><a class=\"markdownIt-Anchor\" href=\"#422路由学习策略-透明网桥\"></a> 4.2.2路由学习策略 — 透明网桥</h5>\n<h6 id=\"4221生成树算法\"><a class=\"markdownIt-Anchor\" href=\"#4221生成树算法\"></a> 4.2.2.1生成树算法</h6>\n<h5 id=\"423源路由策略-源路由网桥\"><a class=\"markdownIt-Anchor\" href=\"#423源路由策略-源路由网桥\"></a> 4.2.3源路由策略 — 源路由网桥</h5>\n"},{"title":"强化计网第一章-概述","top":false,"cover":false,"toc":true,"mathjax":true,"abbrlink":"3689","date":"2020-08-27T08:23:11.000Z","password":null,"summary":"(强化)第一章 绪论","keywords":"计算机网络概述大纲","_content":"## （强化）计网第一章 绪论\n\n> **计算机网络：是由多个独立的计算机通过通信线路和通信设备互联起来的系统，以便实现彼此交换信息和共享资源的目的**。\n\n#### 1. 功能\n\n##### 1.1数据通信\n\n- 网络系统中相连的计算机能够相互传送数据信息，使相距很远的用户之间能够直接交换数据\n\n##### 1.2资源共享\n\n- 网络中的软件和硬件资源，如外部设备、文件系统和数据等可分为多个用户所共享\n\n#### 2. 组成\n\n##### 2.1资源子网\n\n- 负责全网的信息处理，向网络用户提供各种网络资源与网络服务\n\n##### 2.2通信子网\n\n- 完成数据传输和转发等通讯业务\n\n#### 3.网络拓扑结构（<font color=red>背！</font>）\n\n##### 3.1网状拓扑（全连接拓扑）\n\n- 避免拥塞问题\n- 具有很好的健壮性\n- 具有私有性和安全性\n- 便于管理\n- 安装费用高\n\n##### 3.2星状拓扑\n\n- 拓扑结构简单\n- 具有较好的健壮性\n- 便于管理\n- 中央控制器是整个网络性能的瓶颈\n\n##### 3.3树状拓扑\n\n- 允许更多的设备相连并且增加了在设备间的传输距离\n- 允许网络隔离不同计算机的通信\n\n##### 3.4总线型拓扑\n\n- 信息传输不存在路由和转发的问题\n- 易安装\n- 故障隔离和重新配置困难\n- 总线长度和连接的设备数会受到限制\n\n##### 3.5环形拓扑\n\n- 易安装和重新配置\n- 故障隔离比较简单\n- 对于最大长度和设备的数量有一定的限制\n- 一个故障就会引起整个网络瘫痪\n\n##### 3.6混合型拓扑\n\n#### 4.网络分类\n\n##### 4.1按作用范围分类\n\n- 局域网（一般为私有的）、城域网和广域网\n\n##### 4.2按通讯介质分类\n\n- 有线网（同轴电缆、双绞线和光纤）和无线网\n\n##### 4.3按通信传播方式分类\n\n- 点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）\n\n##### 4.4按通信速率分类\n\n- 低速网、中速网和高速网\n\n##### 4.5按使用范围分类\n\n- 公用网和专用网\n\n##### 4.6按网络控制方式分类\n\n- 集中式网络和分布式网络（无处理中心，每个结点地位平等）\n\n##### 4.7按网络环境分类\n\n- 部门网、企业网和校园网\n\n#### 5. 分层体系结构\n\n##### 5.1网络协议\n\n- 通信双方必须需遵守的规则、标准和约定\n\n##### 5.2语法\n\n- 数据与控制信息的结构或格式\n\n##### 5.3语义\n\n- 控制信息的功能和动作\n\n##### 5.4时序\n\n- 信息的同步，速度匹配\n\n##### 5.5体系结构\n\n- 计算机网络的各个层次及其相关协议的集合\n\n#### 6. OSI ISO（**七层**）\n\n##### 6.1 物理层（比特）\n\n- 设备：中继器、集线器\n\n##### 6.2 数据链路层（帧）\n\n- 可靠通信\n\n##### 6.3 网络层（分组或包）\n\n- 选择路由、交换结点、拥塞控制、网络互联\n\n##### 6.4 传输层（报文）\n\n- 实现了端到端的通信\n\n##### 6.5 会话层\n\n- 提供同步点机制\n\n##### 6.6 表示层\n\n- 解决用户信息的语法表示问题\n\n##### 6.7 应用层\n\n- 处理用户的数据和信息\n\n#### 7. TCP/IP\n\n<font color=red>必须掌握TCP，UDP报文要熟记</font>\n\n##### 7.1 物理层和数据链路层\n\n##### 7.2 网络层\n\n- 寻址、数据打包和路由选择\n- 核心协议：IP协议\n- IP协议是无连接的，不保证传输的可靠性\n\n##### 7.3 传输层\n\n- 核心协议：传输控制协议TCP和用户数据报协议UDP（<font color=red>TCP，UDP报文要熟记</font>）\n- TCP是一个可靠的面向连接的传输层协议\n- UDP是一个不可靠的面向无连接的传输层协议，适用于延迟较小的场合\n\n##### 7.4 应用层\n\n- 各种协议\n\n#### 8. 实体间通信与服务\n\n##### 8.1通信\n\n###### 8.1.1 层间通信\n\n- 同一个网络结点上相邻层次中实体之间的通信称为层间通信\n\n###### 8.1.2 对等层间通信\n\n- 不同的网络结点上对等层实体间的通信称为对等层间通信\n\n###### 8.1.3 实通信\n\n- 层间通信以及物理层之间的通信叫做实通信\n\n###### 8.1.4虚通信\n\n- 除物理层外，对等层之间的通信叫做虚通信\n\n##### 8.2服务于数据单元\n\n###### 8.2.1服务访问点SAP（Service Access Point）\n\n- 层间接口处提供服务的地方\n\n###### 8.2.2服务数据单元SDU（Service Data Unit）\n\n- 相邻层在提供服务的过程中要传递的信息\n\n###### 8.2.3协议数据单元PDU（Protocol Data Unit）\n\n- 对等层间交换的信息单位\n\n###### 8.2.4协议控制信息PCI\n\n- N层的PDU = N层的SDU加上该层的PCI\n\n##### 8.3服务原语\n\n###### 8.3.1请求原语\n\n- 由N+1层实体向N层实体发出，要求这个N层实体向它提供指定的N层服务，如进行一次数据传送\n\n###### 8.3.2指示原语\n\n- 由N层实体向N+1层实体发出，通知这个N+1层实体某个特定的N层服务已经开始\n\n###### 8.3.3响应原语\n\n- 由N+1层实体向N层实体发出，表示对这个N层实体送来的指示原语的响应\n\n###### 8.3.4证实原语\n\n- 由N层实体向N+1层实体发出，表示它请求的N层服务已经完成\n\n###### 8.3.5证实性服务\n\n- \n\n###### 8.3.6非证实性服务\n\n- \n\n###### 8.3.7面向连接的服务\n\n- 建立连接阶段\n- 数据交换阶段\n- 释放连接阶段\n\n###### 8.3.8面向无连接的服务\n\n- 数据报\n- 证实交付，又称可靠地数据报\n- 请求/响应\n\n##### 8.4性能指标\n\n###### 8.4.1吞吐量\n\n- 信道吞吐量是信道上单位时间成功发送的信息量，用bps（位每秒）表示\n\n###### 8.4.2信道利用率\n\n- 是除去全部控制信息后的数据率与信道吞吐量之比。控制部分开销越大，利用率越低\n\n###### 8.4.3延迟时间\n\n###### 8.4.4**排队时间**\n\n###### 8.4.5**访问延时**\n\n###### 8.4.6**发送时延**\n\n- 数据块长度（b）\n- 信道带宽（s）\n\n###### 8.4.7**传输延时**\n\n- 信道长度（m）\n- 信号在信道上的传播速率（m/s）\n\n#### 9.考题类型\n\n##### 9.1计算机网络系统的主要通信性能指标有哪些？\n\n##### 9.2网络延迟的4个主要原因是什么？\n","source":"_posts/强化计网第一章-概述.md","raw":"---\ntitle: 强化计网第一章-概述\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - 计网\n  - 强化\n  - 总结\n  - 考研\ncategories:\n  - 计网\nabbrlink: '3689'\ndate: 2020-08-27 16:23:11\npassword:\nsummary: (强化)第一章 绪论\nkeywords: 计算机网络概述大纲\n---\n## （强化）计网第一章 绪论\n\n> **计算机网络：是由多个独立的计算机通过通信线路和通信设备互联起来的系统，以便实现彼此交换信息和共享资源的目的**。\n\n#### 1. 功能\n\n##### 1.1数据通信\n\n- 网络系统中相连的计算机能够相互传送数据信息，使相距很远的用户之间能够直接交换数据\n\n##### 1.2资源共享\n\n- 网络中的软件和硬件资源，如外部设备、文件系统和数据等可分为多个用户所共享\n\n#### 2. 组成\n\n##### 2.1资源子网\n\n- 负责全网的信息处理，向网络用户提供各种网络资源与网络服务\n\n##### 2.2通信子网\n\n- 完成数据传输和转发等通讯业务\n\n#### 3.网络拓扑结构（<font color=red>背！</font>）\n\n##### 3.1网状拓扑（全连接拓扑）\n\n- 避免拥塞问题\n- 具有很好的健壮性\n- 具有私有性和安全性\n- 便于管理\n- 安装费用高\n\n##### 3.2星状拓扑\n\n- 拓扑结构简单\n- 具有较好的健壮性\n- 便于管理\n- 中央控制器是整个网络性能的瓶颈\n\n##### 3.3树状拓扑\n\n- 允许更多的设备相连并且增加了在设备间的传输距离\n- 允许网络隔离不同计算机的通信\n\n##### 3.4总线型拓扑\n\n- 信息传输不存在路由和转发的问题\n- 易安装\n- 故障隔离和重新配置困难\n- 总线长度和连接的设备数会受到限制\n\n##### 3.5环形拓扑\n\n- 易安装和重新配置\n- 故障隔离比较简单\n- 对于最大长度和设备的数量有一定的限制\n- 一个故障就会引起整个网络瘫痪\n\n##### 3.6混合型拓扑\n\n#### 4.网络分类\n\n##### 4.1按作用范围分类\n\n- 局域网（一般为私有的）、城域网和广域网\n\n##### 4.2按通讯介质分类\n\n- 有线网（同轴电缆、双绞线和光纤）和无线网\n\n##### 4.3按通信传播方式分类\n\n- 点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）\n\n##### 4.4按通信速率分类\n\n- 低速网、中速网和高速网\n\n##### 4.5按使用范围分类\n\n- 公用网和专用网\n\n##### 4.6按网络控制方式分类\n\n- 集中式网络和分布式网络（无处理中心，每个结点地位平等）\n\n##### 4.7按网络环境分类\n\n- 部门网、企业网和校园网\n\n#### 5. 分层体系结构\n\n##### 5.1网络协议\n\n- 通信双方必须需遵守的规则、标准和约定\n\n##### 5.2语法\n\n- 数据与控制信息的结构或格式\n\n##### 5.3语义\n\n- 控制信息的功能和动作\n\n##### 5.4时序\n\n- 信息的同步，速度匹配\n\n##### 5.5体系结构\n\n- 计算机网络的各个层次及其相关协议的集合\n\n#### 6. OSI ISO（**七层**）\n\n##### 6.1 物理层（比特）\n\n- 设备：中继器、集线器\n\n##### 6.2 数据链路层（帧）\n\n- 可靠通信\n\n##### 6.3 网络层（分组或包）\n\n- 选择路由、交换结点、拥塞控制、网络互联\n\n##### 6.4 传输层（报文）\n\n- 实现了端到端的通信\n\n##### 6.5 会话层\n\n- 提供同步点机制\n\n##### 6.6 表示层\n\n- 解决用户信息的语法表示问题\n\n##### 6.7 应用层\n\n- 处理用户的数据和信息\n\n#### 7. TCP/IP\n\n<font color=red>必须掌握TCP，UDP报文要熟记</font>\n\n##### 7.1 物理层和数据链路层\n\n##### 7.2 网络层\n\n- 寻址、数据打包和路由选择\n- 核心协议：IP协议\n- IP协议是无连接的，不保证传输的可靠性\n\n##### 7.3 传输层\n\n- 核心协议：传输控制协议TCP和用户数据报协议UDP（<font color=red>TCP，UDP报文要熟记</font>）\n- TCP是一个可靠的面向连接的传输层协议\n- UDP是一个不可靠的面向无连接的传输层协议，适用于延迟较小的场合\n\n##### 7.4 应用层\n\n- 各种协议\n\n#### 8. 实体间通信与服务\n\n##### 8.1通信\n\n###### 8.1.1 层间通信\n\n- 同一个网络结点上相邻层次中实体之间的通信称为层间通信\n\n###### 8.1.2 对等层间通信\n\n- 不同的网络结点上对等层实体间的通信称为对等层间通信\n\n###### 8.1.3 实通信\n\n- 层间通信以及物理层之间的通信叫做实通信\n\n###### 8.1.4虚通信\n\n- 除物理层外，对等层之间的通信叫做虚通信\n\n##### 8.2服务于数据单元\n\n###### 8.2.1服务访问点SAP（Service Access Point）\n\n- 层间接口处提供服务的地方\n\n###### 8.2.2服务数据单元SDU（Service Data Unit）\n\n- 相邻层在提供服务的过程中要传递的信息\n\n###### 8.2.3协议数据单元PDU（Protocol Data Unit）\n\n- 对等层间交换的信息单位\n\n###### 8.2.4协议控制信息PCI\n\n- N层的PDU = N层的SDU加上该层的PCI\n\n##### 8.3服务原语\n\n###### 8.3.1请求原语\n\n- 由N+1层实体向N层实体发出，要求这个N层实体向它提供指定的N层服务，如进行一次数据传送\n\n###### 8.3.2指示原语\n\n- 由N层实体向N+1层实体发出，通知这个N+1层实体某个特定的N层服务已经开始\n\n###### 8.3.3响应原语\n\n- 由N+1层实体向N层实体发出，表示对这个N层实体送来的指示原语的响应\n\n###### 8.3.4证实原语\n\n- 由N层实体向N+1层实体发出，表示它请求的N层服务已经完成\n\n###### 8.3.5证实性服务\n\n- \n\n###### 8.3.6非证实性服务\n\n- \n\n###### 8.3.7面向连接的服务\n\n- 建立连接阶段\n- 数据交换阶段\n- 释放连接阶段\n\n###### 8.3.8面向无连接的服务\n\n- 数据报\n- 证实交付，又称可靠地数据报\n- 请求/响应\n\n##### 8.4性能指标\n\n###### 8.4.1吞吐量\n\n- 信道吞吐量是信道上单位时间成功发送的信息量，用bps（位每秒）表示\n\n###### 8.4.2信道利用率\n\n- 是除去全部控制信息后的数据率与信道吞吐量之比。控制部分开销越大，利用率越低\n\n###### 8.4.3延迟时间\n\n###### 8.4.4**排队时间**\n\n###### 8.4.5**访问延时**\n\n###### 8.4.6**发送时延**\n\n- 数据块长度（b）\n- 信道带宽（s）\n\n###### 8.4.7**传输延时**\n\n- 信道长度（m）\n- 信号在信道上的传播速率（m/s）\n\n#### 9.考题类型\n\n##### 9.1计算机网络系统的主要通信性能指标有哪些？\n\n##### 9.2网络延迟的4个主要原因是什么？\n","slug":"强化计网第一章-概述","published":1,"updated":"2020-09-15T11:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdif002tzl9kajba3s2j","content":"<h2 id=\"强化计网第一章-绪论\"><a class=\"markdownIt-Anchor\" href=\"#强化计网第一章-绪论\"></a> （强化）计网第一章 绪论</h2>\n<blockquote>\n<p><strong>计算机网络：是由多个独立的计算机通过通信线路和通信设备互联起来的系统，以便实现彼此交换信息和共享资源的目的</strong>。</p>\n</blockquote>\n<h4 id=\"1-功能\"><a class=\"markdownIt-Anchor\" href=\"#1-功能\"></a> 1. 功能</h4>\n<h5 id=\"11数据通信\"><a class=\"markdownIt-Anchor\" href=\"#11数据通信\"></a> 1.1数据通信</h5>\n<ul>\n<li>网络系统中相连的计算机能够相互传送数据信息，使相距很远的用户之间能够直接交换数据</li>\n</ul>\n<h5 id=\"12资源共享\"><a class=\"markdownIt-Anchor\" href=\"#12资源共享\"></a> 1.2资源共享</h5>\n<ul>\n<li>网络中的软件和硬件资源，如外部设备、文件系统和数据等可分为多个用户所共享</li>\n</ul>\n<h4 id=\"2-组成\"><a class=\"markdownIt-Anchor\" href=\"#2-组成\"></a> 2. 组成</h4>\n<h5 id=\"21资源子网\"><a class=\"markdownIt-Anchor\" href=\"#21资源子网\"></a> 2.1资源子网</h5>\n<ul>\n<li>负责全网的信息处理，向网络用户提供各种网络资源与网络服务</li>\n</ul>\n<h5 id=\"22通信子网\"><a class=\"markdownIt-Anchor\" href=\"#22通信子网\"></a> 2.2通信子网</h5>\n<ul>\n<li>完成数据传输和转发等通讯业务</li>\n</ul>\n<h4 id=\"3网络拓扑结构font-colorred背font\"><a class=\"markdownIt-Anchor\" href=\"#3网络拓扑结构font-colorred背font\"></a> 3.网络拓扑结构（<font color=\"red\">背！</font>）</h4>\n<h5 id=\"31网状拓扑全连接拓扑\"><a class=\"markdownIt-Anchor\" href=\"#31网状拓扑全连接拓扑\"></a> 3.1网状拓扑（全连接拓扑）</h5>\n<ul>\n<li>避免拥塞问题</li>\n<li>具有很好的健壮性</li>\n<li>具有私有性和安全性</li>\n<li>便于管理</li>\n<li>安装费用高</li>\n</ul>\n<h5 id=\"32星状拓扑\"><a class=\"markdownIt-Anchor\" href=\"#32星状拓扑\"></a> 3.2星状拓扑</h5>\n<ul>\n<li>拓扑结构简单</li>\n<li>具有较好的健壮性</li>\n<li>便于管理</li>\n<li>中央控制器是整个网络性能的瓶颈</li>\n</ul>\n<h5 id=\"33树状拓扑\"><a class=\"markdownIt-Anchor\" href=\"#33树状拓扑\"></a> 3.3树状拓扑</h5>\n<ul>\n<li>允许更多的设备相连并且增加了在设备间的传输距离</li>\n<li>允许网络隔离不同计算机的通信</li>\n</ul>\n<h5 id=\"34总线型拓扑\"><a class=\"markdownIt-Anchor\" href=\"#34总线型拓扑\"></a> 3.4总线型拓扑</h5>\n<ul>\n<li>信息传输不存在路由和转发的问题</li>\n<li>易安装</li>\n<li>故障隔离和重新配置困难</li>\n<li>总线长度和连接的设备数会受到限制</li>\n</ul>\n<h5 id=\"35环形拓扑\"><a class=\"markdownIt-Anchor\" href=\"#35环形拓扑\"></a> 3.5环形拓扑</h5>\n<ul>\n<li>易安装和重新配置</li>\n<li>故障隔离比较简单</li>\n<li>对于最大长度和设备的数量有一定的限制</li>\n<li>一个故障就会引起整个网络瘫痪</li>\n</ul>\n<h5 id=\"36混合型拓扑\"><a class=\"markdownIt-Anchor\" href=\"#36混合型拓扑\"></a> 3.6混合型拓扑</h5>\n<h4 id=\"4网络分类\"><a class=\"markdownIt-Anchor\" href=\"#4网络分类\"></a> 4.网络分类</h4>\n<h5 id=\"41按作用范围分类\"><a class=\"markdownIt-Anchor\" href=\"#41按作用范围分类\"></a> 4.1按作用范围分类</h5>\n<ul>\n<li>局域网（一般为私有的）、城域网和广域网</li>\n</ul>\n<h5 id=\"42按通讯介质分类\"><a class=\"markdownIt-Anchor\" href=\"#42按通讯介质分类\"></a> 4.2按通讯介质分类</h5>\n<ul>\n<li>有线网（同轴电缆、双绞线和光纤）和无线网</li>\n</ul>\n<h5 id=\"43按通信传播方式分类\"><a class=\"markdownIt-Anchor\" href=\"#43按通信传播方式分类\"></a> 4.3按通信传播方式分类</h5>\n<ul>\n<li>点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）</li>\n</ul>\n<h5 id=\"44按通信速率分类\"><a class=\"markdownIt-Anchor\" href=\"#44按通信速率分类\"></a> 4.4按通信速率分类</h5>\n<ul>\n<li>低速网、中速网和高速网</li>\n</ul>\n<h5 id=\"45按使用范围分类\"><a class=\"markdownIt-Anchor\" href=\"#45按使用范围分类\"></a> 4.5按使用范围分类</h5>\n<ul>\n<li>公用网和专用网</li>\n</ul>\n<h5 id=\"46按网络控制方式分类\"><a class=\"markdownIt-Anchor\" href=\"#46按网络控制方式分类\"></a> 4.6按网络控制方式分类</h5>\n<ul>\n<li>集中式网络和分布式网络（无处理中心，每个结点地位平等）</li>\n</ul>\n<h5 id=\"47按网络环境分类\"><a class=\"markdownIt-Anchor\" href=\"#47按网络环境分类\"></a> 4.7按网络环境分类</h5>\n<ul>\n<li>部门网、企业网和校园网</li>\n</ul>\n<h4 id=\"5-分层体系结构\"><a class=\"markdownIt-Anchor\" href=\"#5-分层体系结构\"></a> 5. 分层体系结构</h4>\n<h5 id=\"51网络协议\"><a class=\"markdownIt-Anchor\" href=\"#51网络协议\"></a> 5.1网络协议</h5>\n<ul>\n<li>通信双方必须需遵守的规则、标准和约定</li>\n</ul>\n<h5 id=\"52语法\"><a class=\"markdownIt-Anchor\" href=\"#52语法\"></a> 5.2语法</h5>\n<ul>\n<li>数据与控制信息的结构或格式</li>\n</ul>\n<h5 id=\"53语义\"><a class=\"markdownIt-Anchor\" href=\"#53语义\"></a> 5.3语义</h5>\n<ul>\n<li>控制信息的功能和动作</li>\n</ul>\n<h5 id=\"54时序\"><a class=\"markdownIt-Anchor\" href=\"#54时序\"></a> 5.4时序</h5>\n<ul>\n<li>信息的同步，速度匹配</li>\n</ul>\n<h5 id=\"55体系结构\"><a class=\"markdownIt-Anchor\" href=\"#55体系结构\"></a> 5.5体系结构</h5>\n<ul>\n<li>计算机网络的各个层次及其相关协议的集合</li>\n</ul>\n<h4 id=\"6-osi-iso七层\"><a class=\"markdownIt-Anchor\" href=\"#6-osi-iso七层\"></a> 6. OSI ISO（<strong>七层</strong>）</h4>\n<h5 id=\"61-物理层比特\"><a class=\"markdownIt-Anchor\" href=\"#61-物理层比特\"></a> 6.1 物理层（比特）</h5>\n<ul>\n<li>设备：中继器、集线器</li>\n</ul>\n<h5 id=\"62-数据链路层帧\"><a class=\"markdownIt-Anchor\" href=\"#62-数据链路层帧\"></a> 6.2 数据链路层（帧）</h5>\n<ul>\n<li>可靠通信</li>\n</ul>\n<h5 id=\"63-网络层分组或包\"><a class=\"markdownIt-Anchor\" href=\"#63-网络层分组或包\"></a> 6.3 网络层（分组或包）</h5>\n<ul>\n<li>选择路由、交换结点、拥塞控制、网络互联</li>\n</ul>\n<h5 id=\"64-传输层报文\"><a class=\"markdownIt-Anchor\" href=\"#64-传输层报文\"></a> 6.4 传输层（报文）</h5>\n<ul>\n<li>实现了端到端的通信</li>\n</ul>\n<h5 id=\"65-会话层\"><a class=\"markdownIt-Anchor\" href=\"#65-会话层\"></a> 6.5 会话层</h5>\n<ul>\n<li>提供同步点机制</li>\n</ul>\n<h5 id=\"66-表示层\"><a class=\"markdownIt-Anchor\" href=\"#66-表示层\"></a> 6.6 表示层</h5>\n<ul>\n<li>解决用户信息的语法表示问题</li>\n</ul>\n<h5 id=\"67-应用层\"><a class=\"markdownIt-Anchor\" href=\"#67-应用层\"></a> 6.7 应用层</h5>\n<ul>\n<li>处理用户的数据和信息</li>\n</ul>\n<h4 id=\"7-tcpip\"><a class=\"markdownIt-Anchor\" href=\"#7-tcpip\"></a> 7. TCP/IP</h4>\n<p><font color=\"red\">必须掌握TCP，UDP报文要熟记</font></p>\n<h5 id=\"71-物理层和数据链路层\"><a class=\"markdownIt-Anchor\" href=\"#71-物理层和数据链路层\"></a> 7.1 物理层和数据链路层</h5>\n<h5 id=\"72-网络层\"><a class=\"markdownIt-Anchor\" href=\"#72-网络层\"></a> 7.2 网络层</h5>\n<ul>\n<li>寻址、数据打包和路由选择</li>\n<li>核心协议：IP协议</li>\n<li>IP协议是无连接的，不保证传输的可靠性</li>\n</ul>\n<h5 id=\"73-传输层\"><a class=\"markdownIt-Anchor\" href=\"#73-传输层\"></a> 7.3 传输层</h5>\n<ul>\n<li>核心协议：传输控制协议TCP和用户数据报协议UDP（<font color=\"red\">TCP，UDP报文要熟记</font>）</li>\n<li>TCP是一个可靠的面向连接的传输层协议</li>\n<li>UDP是一个不可靠的面向无连接的传输层协议，适用于延迟较小的场合</li>\n</ul>\n<h5 id=\"74-应用层\"><a class=\"markdownIt-Anchor\" href=\"#74-应用层\"></a> 7.4 应用层</h5>\n<ul>\n<li>各种协议</li>\n</ul>\n<h4 id=\"8-实体间通信与服务\"><a class=\"markdownIt-Anchor\" href=\"#8-实体间通信与服务\"></a> 8. 实体间通信与服务</h4>\n<h5 id=\"81通信\"><a class=\"markdownIt-Anchor\" href=\"#81通信\"></a> 8.1通信</h5>\n<h6 id=\"811-层间通信\"><a class=\"markdownIt-Anchor\" href=\"#811-层间通信\"></a> 8.1.1 层间通信</h6>\n<ul>\n<li>同一个网络结点上相邻层次中实体之间的通信称为层间通信</li>\n</ul>\n<h6 id=\"812-对等层间通信\"><a class=\"markdownIt-Anchor\" href=\"#812-对等层间通信\"></a> 8.1.2 对等层间通信</h6>\n<ul>\n<li>不同的网络结点上对等层实体间的通信称为对等层间通信</li>\n</ul>\n<h6 id=\"813-实通信\"><a class=\"markdownIt-Anchor\" href=\"#813-实通信\"></a> 8.1.3 实通信</h6>\n<ul>\n<li>层间通信以及物理层之间的通信叫做实通信</li>\n</ul>\n<h6 id=\"814虚通信\"><a class=\"markdownIt-Anchor\" href=\"#814虚通信\"></a> 8.1.4虚通信</h6>\n<ul>\n<li>除物理层外，对等层之间的通信叫做虚通信</li>\n</ul>\n<h5 id=\"82服务于数据单元\"><a class=\"markdownIt-Anchor\" href=\"#82服务于数据单元\"></a> 8.2服务于数据单元</h5>\n<h6 id=\"821服务访问点sapservice-access-point\"><a class=\"markdownIt-Anchor\" href=\"#821服务访问点sapservice-access-point\"></a> 8.2.1服务访问点SAP（Service Access Point）</h6>\n<ul>\n<li>层间接口处提供服务的地方</li>\n</ul>\n<h6 id=\"822服务数据单元sduservice-data-unit\"><a class=\"markdownIt-Anchor\" href=\"#822服务数据单元sduservice-data-unit\"></a> 8.2.2服务数据单元SDU（Service Data Unit）</h6>\n<ul>\n<li>相邻层在提供服务的过程中要传递的信息</li>\n</ul>\n<h6 id=\"823协议数据单元pduprotocol-data-unit\"><a class=\"markdownIt-Anchor\" href=\"#823协议数据单元pduprotocol-data-unit\"></a> 8.2.3协议数据单元PDU（Protocol Data Unit）</h6>\n<ul>\n<li>对等层间交换的信息单位</li>\n</ul>\n<h6 id=\"824协议控制信息pci\"><a class=\"markdownIt-Anchor\" href=\"#824协议控制信息pci\"></a> 8.2.4协议控制信息PCI</h6>\n<ul>\n<li>N层的PDU = N层的SDU加上该层的PCI</li>\n</ul>\n<h5 id=\"83服务原语\"><a class=\"markdownIt-Anchor\" href=\"#83服务原语\"></a> 8.3服务原语</h5>\n<h6 id=\"831请求原语\"><a class=\"markdownIt-Anchor\" href=\"#831请求原语\"></a> 8.3.1请求原语</h6>\n<ul>\n<li>由N+1层实体向N层实体发出，要求这个N层实体向它提供指定的N层服务，如进行一次数据传送</li>\n</ul>\n<h6 id=\"832指示原语\"><a class=\"markdownIt-Anchor\" href=\"#832指示原语\"></a> 8.3.2指示原语</h6>\n<ul>\n<li>由N层实体向N+1层实体发出，通知这个N+1层实体某个特定的N层服务已经开始</li>\n</ul>\n<h6 id=\"833响应原语\"><a class=\"markdownIt-Anchor\" href=\"#833响应原语\"></a> 8.3.3响应原语</h6>\n<ul>\n<li>由N+1层实体向N层实体发出，表示对这个N层实体送来的指示原语的响应</li>\n</ul>\n<h6 id=\"834证实原语\"><a class=\"markdownIt-Anchor\" href=\"#834证实原语\"></a> 8.3.4证实原语</h6>\n<ul>\n<li>由N层实体向N+1层实体发出，表示它请求的N层服务已经完成</li>\n</ul>\n<h6 id=\"835证实性服务\"><a class=\"markdownIt-Anchor\" href=\"#835证实性服务\"></a> 8.3.5证实性服务</h6>\n<ul>\n<li></li>\n</ul>\n<h6 id=\"836非证实性服务\"><a class=\"markdownIt-Anchor\" href=\"#836非证实性服务\"></a> 8.3.6非证实性服务</h6>\n<ul>\n<li></li>\n</ul>\n<h6 id=\"837面向连接的服务\"><a class=\"markdownIt-Anchor\" href=\"#837面向连接的服务\"></a> 8.3.7面向连接的服务</h6>\n<ul>\n<li>建立连接阶段</li>\n<li>数据交换阶段</li>\n<li>释放连接阶段</li>\n</ul>\n<h6 id=\"838面向无连接的服务\"><a class=\"markdownIt-Anchor\" href=\"#838面向无连接的服务\"></a> 8.3.8面向无连接的服务</h6>\n<ul>\n<li>数据报</li>\n<li>证实交付，又称可靠地数据报</li>\n<li>请求/响应</li>\n</ul>\n<h5 id=\"84性能指标\"><a class=\"markdownIt-Anchor\" href=\"#84性能指标\"></a> 8.4性能指标</h5>\n<h6 id=\"841吞吐量\"><a class=\"markdownIt-Anchor\" href=\"#841吞吐量\"></a> 8.4.1吞吐量</h6>\n<ul>\n<li>信道吞吐量是信道上单位时间成功发送的信息量，用bps（位每秒）表示</li>\n</ul>\n<h6 id=\"842信道利用率\"><a class=\"markdownIt-Anchor\" href=\"#842信道利用率\"></a> 8.4.2信道利用率</h6>\n<ul>\n<li>是除去全部控制信息后的数据率与信道吞吐量之比。控制部分开销越大，利用率越低</li>\n</ul>\n<h6 id=\"843延迟时间\"><a class=\"markdownIt-Anchor\" href=\"#843延迟时间\"></a> 8.4.3延迟时间</h6>\n<h6 id=\"844排队时间\"><a class=\"markdownIt-Anchor\" href=\"#844排队时间\"></a> 8.4.4<strong>排队时间</strong></h6>\n<h6 id=\"845访问延时\"><a class=\"markdownIt-Anchor\" href=\"#845访问延时\"></a> 8.4.5<strong>访问延时</strong></h6>\n<h6 id=\"846发送时延\"><a class=\"markdownIt-Anchor\" href=\"#846发送时延\"></a> 8.4.6<strong>发送时延</strong></h6>\n<ul>\n<li>数据块长度（b）</li>\n<li>信道带宽（s）</li>\n</ul>\n<h6 id=\"847传输延时\"><a class=\"markdownIt-Anchor\" href=\"#847传输延时\"></a> 8.4.7<strong>传输延时</strong></h6>\n<ul>\n<li>信道长度（m）</li>\n<li>信号在信道上的传播速率（m/s）</li>\n</ul>\n<h4 id=\"9考题类型\"><a class=\"markdownIt-Anchor\" href=\"#9考题类型\"></a> 9.考题类型</h4>\n<h5 id=\"91计算机网络系统的主要通信性能指标有哪些\"><a class=\"markdownIt-Anchor\" href=\"#91计算机网络系统的主要通信性能指标有哪些\"></a> 9.1计算机网络系统的主要通信性能指标有哪些？</h5>\n<h5 id=\"92网络延迟的4个主要原因是什么\"><a class=\"markdownIt-Anchor\" href=\"#92网络延迟的4个主要原因是什么\"></a> 9.2网络延迟的4个主要原因是什么？</h5>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"强化计网第一章-绪论\"><a class=\"markdownIt-Anchor\" href=\"#强化计网第一章-绪论\"></a> （强化）计网第一章 绪论</h2>\n<blockquote>\n<p><strong>计算机网络：是由多个独立的计算机通过通信线路和通信设备互联起来的系统，以便实现彼此交换信息和共享资源的目的</strong>。</p>\n</blockquote>\n<h4 id=\"1-功能\"><a class=\"markdownIt-Anchor\" href=\"#1-功能\"></a> 1. 功能</h4>\n<h5 id=\"11数据通信\"><a class=\"markdownIt-Anchor\" href=\"#11数据通信\"></a> 1.1数据通信</h5>\n<ul>\n<li>网络系统中相连的计算机能够相互传送数据信息，使相距很远的用户之间能够直接交换数据</li>\n</ul>\n<h5 id=\"12资源共享\"><a class=\"markdownIt-Anchor\" href=\"#12资源共享\"></a> 1.2资源共享</h5>\n<ul>\n<li>网络中的软件和硬件资源，如外部设备、文件系统和数据等可分为多个用户所共享</li>\n</ul>\n<h4 id=\"2-组成\"><a class=\"markdownIt-Anchor\" href=\"#2-组成\"></a> 2. 组成</h4>\n<h5 id=\"21资源子网\"><a class=\"markdownIt-Anchor\" href=\"#21资源子网\"></a> 2.1资源子网</h5>\n<ul>\n<li>负责全网的信息处理，向网络用户提供各种网络资源与网络服务</li>\n</ul>\n<h5 id=\"22通信子网\"><a class=\"markdownIt-Anchor\" href=\"#22通信子网\"></a> 2.2通信子网</h5>\n<ul>\n<li>完成数据传输和转发等通讯业务</li>\n</ul>\n<h4 id=\"3网络拓扑结构font-colorred背font\"><a class=\"markdownIt-Anchor\" href=\"#3网络拓扑结构font-colorred背font\"></a> 3.网络拓扑结构（<font color=red>背！</font>）</h4>\n<h5 id=\"31网状拓扑全连接拓扑\"><a class=\"markdownIt-Anchor\" href=\"#31网状拓扑全连接拓扑\"></a> 3.1网状拓扑（全连接拓扑）</h5>\n<ul>\n<li>避免拥塞问题</li>\n<li>具有很好的健壮性</li>\n<li>具有私有性和安全性</li>\n<li>便于管理</li>\n<li>安装费用高</li>\n</ul>\n<h5 id=\"32星状拓扑\"><a class=\"markdownIt-Anchor\" href=\"#32星状拓扑\"></a> 3.2星状拓扑</h5>\n<ul>\n<li>拓扑结构简单</li>\n<li>具有较好的健壮性</li>\n<li>便于管理</li>\n<li>中央控制器是整个网络性能的瓶颈</li>\n</ul>\n<h5 id=\"33树状拓扑\"><a class=\"markdownIt-Anchor\" href=\"#33树状拓扑\"></a> 3.3树状拓扑</h5>\n<ul>\n<li>允许更多的设备相连并且增加了在设备间的传输距离</li>\n<li>允许网络隔离不同计算机的通信</li>\n</ul>\n<h5 id=\"34总线型拓扑\"><a class=\"markdownIt-Anchor\" href=\"#34总线型拓扑\"></a> 3.4总线型拓扑</h5>\n<ul>\n<li>信息传输不存在路由和转发的问题</li>\n<li>易安装</li>\n<li>故障隔离和重新配置困难</li>\n<li>总线长度和连接的设备数会受到限制</li>\n</ul>\n<h5 id=\"35环形拓扑\"><a class=\"markdownIt-Anchor\" href=\"#35环形拓扑\"></a> 3.5环形拓扑</h5>\n<ul>\n<li>易安装和重新配置</li>\n<li>故障隔离比较简单</li>\n<li>对于最大长度和设备的数量有一定的限制</li>\n<li>一个故障就会引起整个网络瘫痪</li>\n</ul>\n<h5 id=\"36混合型拓扑\"><a class=\"markdownIt-Anchor\" href=\"#36混合型拓扑\"></a> 3.6混合型拓扑</h5>\n<h4 id=\"4网络分类\"><a class=\"markdownIt-Anchor\" href=\"#4网络分类\"></a> 4.网络分类</h4>\n<h5 id=\"41按作用范围分类\"><a class=\"markdownIt-Anchor\" href=\"#41按作用范围分类\"></a> 4.1按作用范围分类</h5>\n<ul>\n<li>局域网（一般为私有的）、城域网和广域网</li>\n</ul>\n<h5 id=\"42按通讯介质分类\"><a class=\"markdownIt-Anchor\" href=\"#42按通讯介质分类\"></a> 4.2按通讯介质分类</h5>\n<ul>\n<li>有线网（同轴电缆、双绞线和光纤）和无线网</li>\n</ul>\n<h5 id=\"43按通信传播方式分类\"><a class=\"markdownIt-Anchor\" href=\"#43按通信传播方式分类\"></a> 4.3按通信传播方式分类</h5>\n<ul>\n<li>点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）</li>\n</ul>\n<h5 id=\"44按通信速率分类\"><a class=\"markdownIt-Anchor\" href=\"#44按通信速率分类\"></a> 4.4按通信速率分类</h5>\n<ul>\n<li>低速网、中速网和高速网</li>\n</ul>\n<h5 id=\"45按使用范围分类\"><a class=\"markdownIt-Anchor\" href=\"#45按使用范围分类\"></a> 4.5按使用范围分类</h5>\n<ul>\n<li>公用网和专用网</li>\n</ul>\n<h5 id=\"46按网络控制方式分类\"><a class=\"markdownIt-Anchor\" href=\"#46按网络控制方式分类\"></a> 4.6按网络控制方式分类</h5>\n<ul>\n<li>集中式网络和分布式网络（无处理中心，每个结点地位平等）</li>\n</ul>\n<h5 id=\"47按网络环境分类\"><a class=\"markdownIt-Anchor\" href=\"#47按网络环境分类\"></a> 4.7按网络环境分类</h5>\n<ul>\n<li>部门网、企业网和校园网</li>\n</ul>\n<h4 id=\"5-分层体系结构\"><a class=\"markdownIt-Anchor\" href=\"#5-分层体系结构\"></a> 5. 分层体系结构</h4>\n<h5 id=\"51网络协议\"><a class=\"markdownIt-Anchor\" href=\"#51网络协议\"></a> 5.1网络协议</h5>\n<ul>\n<li>通信双方必须需遵守的规则、标准和约定</li>\n</ul>\n<h5 id=\"52语法\"><a class=\"markdownIt-Anchor\" href=\"#52语法\"></a> 5.2语法</h5>\n<ul>\n<li>数据与控制信息的结构或格式</li>\n</ul>\n<h5 id=\"53语义\"><a class=\"markdownIt-Anchor\" href=\"#53语义\"></a> 5.3语义</h5>\n<ul>\n<li>控制信息的功能和动作</li>\n</ul>\n<h5 id=\"54时序\"><a class=\"markdownIt-Anchor\" href=\"#54时序\"></a> 5.4时序</h5>\n<ul>\n<li>信息的同步，速度匹配</li>\n</ul>\n<h5 id=\"55体系结构\"><a class=\"markdownIt-Anchor\" href=\"#55体系结构\"></a> 5.5体系结构</h5>\n<ul>\n<li>计算机网络的各个层次及其相关协议的集合</li>\n</ul>\n<h4 id=\"6-osi-iso七层\"><a class=\"markdownIt-Anchor\" href=\"#6-osi-iso七层\"></a> 6. OSI ISO（<strong>七层</strong>）</h4>\n<h5 id=\"61-物理层比特\"><a class=\"markdownIt-Anchor\" href=\"#61-物理层比特\"></a> 6.1 物理层（比特）</h5>\n<ul>\n<li>设备：中继器、集线器</li>\n</ul>\n<h5 id=\"62-数据链路层帧\"><a class=\"markdownIt-Anchor\" href=\"#62-数据链路层帧\"></a> 6.2 数据链路层（帧）</h5>\n<ul>\n<li>可靠通信</li>\n</ul>\n<h5 id=\"63-网络层分组或包\"><a class=\"markdownIt-Anchor\" href=\"#63-网络层分组或包\"></a> 6.3 网络层（分组或包）</h5>\n<ul>\n<li>选择路由、交换结点、拥塞控制、网络互联</li>\n</ul>\n<h5 id=\"64-传输层报文\"><a class=\"markdownIt-Anchor\" href=\"#64-传输层报文\"></a> 6.4 传输层（报文）</h5>\n<ul>\n<li>实现了端到端的通信</li>\n</ul>\n<h5 id=\"65-会话层\"><a class=\"markdownIt-Anchor\" href=\"#65-会话层\"></a> 6.5 会话层</h5>\n<ul>\n<li>提供同步点机制</li>\n</ul>\n<h5 id=\"66-表示层\"><a class=\"markdownIt-Anchor\" href=\"#66-表示层\"></a> 6.6 表示层</h5>\n<ul>\n<li>解决用户信息的语法表示问题</li>\n</ul>\n<h5 id=\"67-应用层\"><a class=\"markdownIt-Anchor\" href=\"#67-应用层\"></a> 6.7 应用层</h5>\n<ul>\n<li>处理用户的数据和信息</li>\n</ul>\n<h4 id=\"7-tcpip\"><a class=\"markdownIt-Anchor\" href=\"#7-tcpip\"></a> 7. TCP/IP</h4>\n<p><font color=red>必须掌握TCP，UDP报文要熟记</font></p>\n<h5 id=\"71-物理层和数据链路层\"><a class=\"markdownIt-Anchor\" href=\"#71-物理层和数据链路层\"></a> 7.1 物理层和数据链路层</h5>\n<h5 id=\"72-网络层\"><a class=\"markdownIt-Anchor\" href=\"#72-网络层\"></a> 7.2 网络层</h5>\n<ul>\n<li>寻址、数据打包和路由选择</li>\n<li>核心协议：IP协议</li>\n<li>IP协议是无连接的，不保证传输的可靠性</li>\n</ul>\n<h5 id=\"73-传输层\"><a class=\"markdownIt-Anchor\" href=\"#73-传输层\"></a> 7.3 传输层</h5>\n<ul>\n<li>核心协议：传输控制协议TCP和用户数据报协议UDP（<font color=red>TCP，UDP报文要熟记</font>）</li>\n<li>TCP是一个可靠的面向连接的传输层协议</li>\n<li>UDP是一个不可靠的面向无连接的传输层协议，适用于延迟较小的场合</li>\n</ul>\n<h5 id=\"74-应用层\"><a class=\"markdownIt-Anchor\" href=\"#74-应用层\"></a> 7.4 应用层</h5>\n<ul>\n<li>各种协议</li>\n</ul>\n<h4 id=\"8-实体间通信与服务\"><a class=\"markdownIt-Anchor\" href=\"#8-实体间通信与服务\"></a> 8. 实体间通信与服务</h4>\n<h5 id=\"81通信\"><a class=\"markdownIt-Anchor\" href=\"#81通信\"></a> 8.1通信</h5>\n<h6 id=\"811-层间通信\"><a class=\"markdownIt-Anchor\" href=\"#811-层间通信\"></a> 8.1.1 层间通信</h6>\n<ul>\n<li>同一个网络结点上相邻层次中实体之间的通信称为层间通信</li>\n</ul>\n<h6 id=\"812-对等层间通信\"><a class=\"markdownIt-Anchor\" href=\"#812-对等层间通信\"></a> 8.1.2 对等层间通信</h6>\n<ul>\n<li>不同的网络结点上对等层实体间的通信称为对等层间通信</li>\n</ul>\n<h6 id=\"813-实通信\"><a class=\"markdownIt-Anchor\" href=\"#813-实通信\"></a> 8.1.3 实通信</h6>\n<ul>\n<li>层间通信以及物理层之间的通信叫做实通信</li>\n</ul>\n<h6 id=\"814虚通信\"><a class=\"markdownIt-Anchor\" href=\"#814虚通信\"></a> 8.1.4虚通信</h6>\n<ul>\n<li>除物理层外，对等层之间的通信叫做虚通信</li>\n</ul>\n<h5 id=\"82服务于数据单元\"><a class=\"markdownIt-Anchor\" href=\"#82服务于数据单元\"></a> 8.2服务于数据单元</h5>\n<h6 id=\"821服务访问点sapservice-access-point\"><a class=\"markdownIt-Anchor\" href=\"#821服务访问点sapservice-access-point\"></a> 8.2.1服务访问点SAP（Service Access Point）</h6>\n<ul>\n<li>层间接口处提供服务的地方</li>\n</ul>\n<h6 id=\"822服务数据单元sduservice-data-unit\"><a class=\"markdownIt-Anchor\" href=\"#822服务数据单元sduservice-data-unit\"></a> 8.2.2服务数据单元SDU（Service Data Unit）</h6>\n<ul>\n<li>相邻层在提供服务的过程中要传递的信息</li>\n</ul>\n<h6 id=\"823协议数据单元pduprotocol-data-unit\"><a class=\"markdownIt-Anchor\" href=\"#823协议数据单元pduprotocol-data-unit\"></a> 8.2.3协议数据单元PDU（Protocol Data Unit）</h6>\n<ul>\n<li>对等层间交换的信息单位</li>\n</ul>\n<h6 id=\"824协议控制信息pci\"><a class=\"markdownIt-Anchor\" href=\"#824协议控制信息pci\"></a> 8.2.4协议控制信息PCI</h6>\n<ul>\n<li>N层的PDU = N层的SDU加上该层的PCI</li>\n</ul>\n<h5 id=\"83服务原语\"><a class=\"markdownIt-Anchor\" href=\"#83服务原语\"></a> 8.3服务原语</h5>\n<h6 id=\"831请求原语\"><a class=\"markdownIt-Anchor\" href=\"#831请求原语\"></a> 8.3.1请求原语</h6>\n<ul>\n<li>由N+1层实体向N层实体发出，要求这个N层实体向它提供指定的N层服务，如进行一次数据传送</li>\n</ul>\n<h6 id=\"832指示原语\"><a class=\"markdownIt-Anchor\" href=\"#832指示原语\"></a> 8.3.2指示原语</h6>\n<ul>\n<li>由N层实体向N+1层实体发出，通知这个N+1层实体某个特定的N层服务已经开始</li>\n</ul>\n<h6 id=\"833响应原语\"><a class=\"markdownIt-Anchor\" href=\"#833响应原语\"></a> 8.3.3响应原语</h6>\n<ul>\n<li>由N+1层实体向N层实体发出，表示对这个N层实体送来的指示原语的响应</li>\n</ul>\n<h6 id=\"834证实原语\"><a class=\"markdownIt-Anchor\" href=\"#834证实原语\"></a> 8.3.4证实原语</h6>\n<ul>\n<li>由N层实体向N+1层实体发出，表示它请求的N层服务已经完成</li>\n</ul>\n<h6 id=\"835证实性服务\"><a class=\"markdownIt-Anchor\" href=\"#835证实性服务\"></a> 8.3.5证实性服务</h6>\n<ul>\n<li></li>\n</ul>\n<h6 id=\"836非证实性服务\"><a class=\"markdownIt-Anchor\" href=\"#836非证实性服务\"></a> 8.3.6非证实性服务</h6>\n<ul>\n<li></li>\n</ul>\n<h6 id=\"837面向连接的服务\"><a class=\"markdownIt-Anchor\" href=\"#837面向连接的服务\"></a> 8.3.7面向连接的服务</h6>\n<ul>\n<li>建立连接阶段</li>\n<li>数据交换阶段</li>\n<li>释放连接阶段</li>\n</ul>\n<h6 id=\"838面向无连接的服务\"><a class=\"markdownIt-Anchor\" href=\"#838面向无连接的服务\"></a> 8.3.8面向无连接的服务</h6>\n<ul>\n<li>数据报</li>\n<li>证实交付，又称可靠地数据报</li>\n<li>请求/响应</li>\n</ul>\n<h5 id=\"84性能指标\"><a class=\"markdownIt-Anchor\" href=\"#84性能指标\"></a> 8.4性能指标</h5>\n<h6 id=\"841吞吐量\"><a class=\"markdownIt-Anchor\" href=\"#841吞吐量\"></a> 8.4.1吞吐量</h6>\n<ul>\n<li>信道吞吐量是信道上单位时间成功发送的信息量，用bps（位每秒）表示</li>\n</ul>\n<h6 id=\"842信道利用率\"><a class=\"markdownIt-Anchor\" href=\"#842信道利用率\"></a> 8.4.2信道利用率</h6>\n<ul>\n<li>是除去全部控制信息后的数据率与信道吞吐量之比。控制部分开销越大，利用率越低</li>\n</ul>\n<h6 id=\"843延迟时间\"><a class=\"markdownIt-Anchor\" href=\"#843延迟时间\"></a> 8.4.3延迟时间</h6>\n<h6 id=\"844排队时间\"><a class=\"markdownIt-Anchor\" href=\"#844排队时间\"></a> 8.4.4<strong>排队时间</strong></h6>\n<h6 id=\"845访问延时\"><a class=\"markdownIt-Anchor\" href=\"#845访问延时\"></a> 8.4.5<strong>访问延时</strong></h6>\n<h6 id=\"846发送时延\"><a class=\"markdownIt-Anchor\" href=\"#846发送时延\"></a> 8.4.6<strong>发送时延</strong></h6>\n<ul>\n<li>数据块长度（b）</li>\n<li>信道带宽（s）</li>\n</ul>\n<h6 id=\"847传输延时\"><a class=\"markdownIt-Anchor\" href=\"#847传输延时\"></a> 8.4.7<strong>传输延时</strong></h6>\n<ul>\n<li>信道长度（m）</li>\n<li>信号在信道上的传播速率（m/s）</li>\n</ul>\n<h4 id=\"9考题类型\"><a class=\"markdownIt-Anchor\" href=\"#9考题类型\"></a> 9.考题类型</h4>\n<h5 id=\"91计算机网络系统的主要通信性能指标有哪些\"><a class=\"markdownIt-Anchor\" href=\"#91计算机网络系统的主要通信性能指标有哪些\"></a> 9.1计算机网络系统的主要通信性能指标有哪些？</h5>\n<h5 id=\"92网络延迟的4个主要原因是什么\"><a class=\"markdownIt-Anchor\" href=\"#92网络延迟的4个主要原因是什么\"></a> 9.2网络延迟的4个主要原因是什么？</h5>\n"},{"title":"强化-计网第二章-物理层","top":false,"cover":false,"toc":true,"mathjax":true,"keywords":"吉林大学，考研，计算机网络，物理层","description":"吉林大学，考研，计算机网络，物理层","summary":"强化-计网第二章-物理层","abbrlink":"f655","date":"2020-09-16T09:41:32.000Z","password":null,"_content":"## 强化 计网第二章 物理层\n\n### 1.通信系统\n\n#### 1.1组成\n\n##### 1.1.1信源\n\n- 产生要发送数据的设备\n\n##### 1.1.2发送设备\n\n- 对数据信息编码的设备\n\n##### 1.1.3传输系统\n\n- 传输线路或网络\n\n##### 1.1.4接收设备\n\n- 将接受的信号变成数据\n\n##### 1.1.5信宿\n\n- 从接收设备接收数据信息。就是目的系统\n\n### 2.编码与调制\n\n#### 2.1信号类型\n\n##### 2.1.1模拟信号\n\n- 随时间连续变化的电磁波形式（信号）\n\n###### 2.1.1.1波特率\n\n- 每秒发送的波数\n\n##### 2.1.2数字信号\n\n- 离散的，数值的变化是瞬时的\n\n###### 2.1.2.1比特间隙\n\n- 发送一比特所需要的时间\n\n###### 2.1.2.2比特率\n\n- 一秒钟内的比特间隙个数，是每秒发送的比特数，单位是bps（位每秒）\n\n###### 2.1.2.3有效带宽\n\n- 数字信号的频谱包括不同振幅的无数多个频率，如果根据一定的门限，只传输那些具有重要振幅的分量，仍然可以以合理的精度在接收端还原出数字信号，则数字信号频谱中的这一部分称作有效频谱，有效频谱的带宽称为有效带宽\n\n#### 2.2信道数据传输率\n\n##### 2.2.1奈奎斯特定理（奈氏准则）\n\n##### 2.2.2香农定理\n\n#### 2.3数字-数字编码\n\n##### 2.3.1单极性编码\n\n- 电压只有一极，高电平表示1，低电平表示0\n\n<img src=\"单极性编码.png\" alt=\"单极性编码\" style=\"zoom: 67%;\" />\n\n##### 2.3.2极化编码\n\n- 一个正电压，一个负电压。通过使用两个电压，减轻了单极性编码中的直流分量问题\n\n###### 2.3.2.1非归零编码\n\n- 正电压为1，负电压为0\n\n###### 2.3.2.2归零编码\n\n- 电平翻转一次为1，没有电平变化为0\n- 电平的翻转能提供一种同步机制\n\n<img src=\"非归零编码.png\" alt=\"非归零编码\" style=\"zoom:67%;\" />\n\n###### 2.3.2.3双相位编码\n\n- 曼彻斯特编码：一个**负电平到正电平**的跳边**代表1**，由**正到负代表0**\n- 差分曼彻斯特编码：每个比特间隙的开始位置**有跳变代表0**，**没有跳变代表1**\n\n#### 2.4数字-模拟编码\n\n##### 2.4.1幅移键控（ASK）\n\n<img src=\"ASK.png\" alt=\"ASK\" style=\"zoom:67%;\" />\n\n##### 2.4.2频移键控（FSK）\n\n<img src=\"FSK.png\" alt=\"FSK\" style=\"zoom:67%;\" />\n\n##### 2.4.3相移键控（PSK）\n\n<img src=\"PSK.png\" alt=\"PSK\" style=\"zoom:67%;\" />\n\n##### 2.4.4正交调幅（QAM）\n\n- ASK和PSK结合起来的编码方式\n\n<img src=\"QAM.png\" alt=\"QAM\" style=\"zoom: 67%;\" />\n\n### 3.线路配置与传输模式\n\n#### 3.1传输模式\n\n##### 3.1.1点到点连接\n\n- 提供了两个设备之间的专用链路。整个信道的容量都被用于这两个设备之间的传输\n\n##### 3.1.2多点连接\n\n- 两个以上的设备共享一条链路的配置方式。信道的容量是通过某种途径共享的\n- 实现**信道共享**的技术称为**复用技术**\n\n##### 3.1.3单工、半双工、双工\n\n- 单工：**通信单向进行**，两个站点中只有一个可以进行传输，另一个只能接收\n- 半双工：每个站点都可以发送和接收数据，但是**不能同时发送和接收数据**。\n- 双工：两个站点**都可以同时发送和接收数据**\n\n##### 3.1.4串行、并行\n\n- 并行：在每个时钟脉冲到来时，多个比特被同时发送，每个比特使用单独的一条线路\n- 串行：每个时钟脉冲只发送一个比特，它只使用一条线路，逐个传送\n\n##### 3.1.5同步、异步\n\n- 异步：比特流划分成多个小组独立传送。随时发，有开始位，终止位，用于低速设备。开销大，先发开始位0，发送一个字节，在发送终止位1，如此循环\n- 同步：成块的发送比特流，字符之间不加开始位和停止位。先二进制同步（法一：接收端和发送端之间单设一条线传送时钟脉冲；法二：采用自同步编码，曼彻斯特编码等），再数据帧同步，在数据帧前后加上起始和结束标志\n\n#### 3.2多路复用\n\n##### 3.2.1频分多路复用（FDM）\n\n- **模拟信号**\n\n##### 3.2.1时分多路复用（TDM）\n\n- **数字信号**\n\n##### 3.2.1波分多路复用（WDM）\n\n- **模拟信号**\n- 光纤\n\n##### 3.2.1码分多路复用（CDM）/码分多址复用（CDMA）\n\n- 根据码型结构的不同来实现信号分割\n- 在CDMA每个比特被分成m个不同码片，每个站点被指定一个唯一的m位码片（码型）。当发送比特1时，站点就发送其码片，想发送0时，站点就发送其码片的补码\n\n#### 3.3数据交换技术\n\n##### 3.3.1电路交换\n\n- 在两个设备之间创建一条临时的物理连接\n- 通讯过程：电路建立、数据传输、电路拆除\n\n##### 3.3.2报文交换（存储转发）\n\n- 在报文的传输过程中，由网络的中间结点将报文暂时存储起来，检查它的正确性和完整性，然后再发往下一个结点\n\n##### 3.3.3分组交换\n\n- 在分组交换中，较长的报文被分为较短的数据单元，然后每个数据单元被加上一些通信控制信息等内容，形成一个信息包（packet）。通信时以包为单位发送、存储和转发。信息包包含数据和包头，包头由通信控制信息、差错控制信息等组成\n- 信息包比报文短得多，因此可以在中间结点存储，不必访问外存。而且只要整个信息包到达后就可以转发，不必等待很长的报文全部到达，大大缩短了信息传输过程中的延迟时间\n\n###### 3.3.3.1数据报\n\n- 数据报方法中，包被称为数据报，在传输中每个包都将独立于其他包进行处理\n- **到达的顺序可能不同**，对数据报进行重排的任务可以由网络层的上层（传输层）来完成\n\n###### 3.3.3.2虚电路\n\n- 虚电路方法中，属于同一次通信的所有包之间的关系得以维持。当数据开始时，将按照预定好的路线一个接一个的传送\n- 任何一条链路可以同时为多对设备之间的通信服务\n- 在需要的时候被创建、通信传输、拆除\n- 仅在建立虚电路时需要目的地址，在进行数据传送时，每个包不需要携带完整的目的地址，只需要一个虚电路的号码标识。减少了包的控制信息长度，从而减少了额外开销\n\n#### 3.4错误检验和控制\n\n- 见题型即可\n\n##### 3.4.1奇偶校验码\n\n###### 3.4.1.1垂直（纵向）奇偶校验\n\n###### 3.4.1.2水平（横向）奇偶校验\n\n##### 3.4.1循环校验码CRC\n\n##### 3.4.2校验和\n\n### 4.传输介质\n\n#### 4.1有线介质\n\n##### 4.1.1双绞线\n\n- 由扭在一起的两根绝缘铜线组成\n- 用于传输平衡信号\n\n##### 4.1.2同轴电缆\n\n##### 4.1.3光纤\n\n- 光的速度依赖于它所穿越的传输介质的密度，密度越大，速度越低\n\n###### 4.1.3.1多模传播\n\n- 多束光线在芯材中通过不同的路径\n\n- 多模阶跃：密度突变，不同角度，速度不同，\n- 多模渐变：密度渐变，速度相同，中心密度最大，并向外逐步变小\n\n###### 4.1.3.2单模传播\n\n- 单模光纤采用阶跃材质和高度集中的光源。芯材直径比多模光纤小得多\n\n#### 4.2无线介质\n\n##### 4.2.1卫星、微波、红外线\n\n### 5.物理连接\n\n- 在数据通信中涉及4个基本功能单元：两端各有一个数据终端设备（DTE）和一个数据电路终接设备\n\n#### 5.1数据终端设备（DTE）\n\n- DTE是具有数据处理能力及发送和接收数据信息能力的设备\n- DTE一般不直接连接网络，它通过一台DCE进行通信。\n- 我们把DTE和DCE的连接称为DTE-DCE接口\n- 在DTE-DCE接口上既有数据信息又有控制信息，为了**使各个计算机公司生产的DTE可以方便的和DCE连接**，就**必须对DTE-DCE接口进行标准化**，这些就是**物理层的协议**\n\n#### 5.2数据电路终接设备（DCE）\n\n- DCE是能够通过网络发送和接收模拟或数字信号形式数据的设备\n- **总结**\n- 数据从上层数据链路层传来\n- DTE处理数据，并交给DCE转换成能通过传输介质的电磁信号\n- 电磁信号通过传输介质传输\n- 各端的DCE接收这些电磁信号形成数据交给DTE处理\n- DTE处理完数据，交给上层的数据链路层\n\n### 6.物理层协议\n\n#### 6.1EIA232\n\n##### 6.1.1机械特性\n\n##### 6.1.2电气特性\n\n##### 6.1.3功能特性\n\n##### 6.1.4规程特性\n\n#### 6.2X.21\n\n### 7.工作的设备\n\n#### 7.1中继器或转发器\n\n- 中继器是一个再生器，不是一个增幅器，只是将受损的信号重新还原成原始的形式，会导致局域网性能下降\n\n#### 7.2集线器\n\n- 多端口中继器，建立星状、树状网络结构\n\n### 8.考题类型\n\n#### 8.1 111000111000的曼彻斯特编码和差分曼彻斯特编码？\n\n#### 8.2 CRC校验码\n\n- 是x的几次多项式，就在带传送数据后加几个0\n- <font color=\"red\">**同0异1**</font>\n- 做除法，得出来的余数，加到带传输的数据后即可\n\n#### 8.3电路交换网络和包交换（分组交换）网络的主要区别是什么？\n\n#### 8.4已知信道速率为1Mbps，离散电平数目为16，根据奈奎斯特定理，求信道带宽\n\n- **W**：理想低通信信道的**带宽**，单位为Hz\n\n- **V**：表示每个码元离散电平的数目\n\n- 则理想低通信道下的极限数据传输率 = **$2Wlog_2V$**\n\n- $1*10^6=2H*1*4, H=1*10^6/8=125000Hz$\n\n","source":"_posts/强化-计网第二章-物理层.md","raw":"---\ntitle: 强化-计网第二章-物理层\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - 计网\n  - 强化\n  - 总结\n  - 考研\ncategories:\n  - 计网\nkeywords: 吉林大学，考研，计算机网络，物理层\ndescription: 吉林大学，考研，计算机网络，物理层\nsummary: 强化-计网第二章-物理层\nabbrlink: f655\ndate: 2020-09-16 17:41:32\npassword:\n---\n## 强化 计网第二章 物理层\n\n### 1.通信系统\n\n#### 1.1组成\n\n##### 1.1.1信源\n\n- 产生要发送数据的设备\n\n##### 1.1.2发送设备\n\n- 对数据信息编码的设备\n\n##### 1.1.3传输系统\n\n- 传输线路或网络\n\n##### 1.1.4接收设备\n\n- 将接受的信号变成数据\n\n##### 1.1.5信宿\n\n- 从接收设备接收数据信息。就是目的系统\n\n### 2.编码与调制\n\n#### 2.1信号类型\n\n##### 2.1.1模拟信号\n\n- 随时间连续变化的电磁波形式（信号）\n\n###### 2.1.1.1波特率\n\n- 每秒发送的波数\n\n##### 2.1.2数字信号\n\n- 离散的，数值的变化是瞬时的\n\n###### 2.1.2.1比特间隙\n\n- 发送一比特所需要的时间\n\n###### 2.1.2.2比特率\n\n- 一秒钟内的比特间隙个数，是每秒发送的比特数，单位是bps（位每秒）\n\n###### 2.1.2.3有效带宽\n\n- 数字信号的频谱包括不同振幅的无数多个频率，如果根据一定的门限，只传输那些具有重要振幅的分量，仍然可以以合理的精度在接收端还原出数字信号，则数字信号频谱中的这一部分称作有效频谱，有效频谱的带宽称为有效带宽\n\n#### 2.2信道数据传输率\n\n##### 2.2.1奈奎斯特定理（奈氏准则）\n\n##### 2.2.2香农定理\n\n#### 2.3数字-数字编码\n\n##### 2.3.1单极性编码\n\n- 电压只有一极，高电平表示1，低电平表示0\n\n<img src=\"单极性编码.png\" alt=\"单极性编码\" style=\"zoom: 67%;\" />\n\n##### 2.3.2极化编码\n\n- 一个正电压，一个负电压。通过使用两个电压，减轻了单极性编码中的直流分量问题\n\n###### 2.3.2.1非归零编码\n\n- 正电压为1，负电压为0\n\n###### 2.3.2.2归零编码\n\n- 电平翻转一次为1，没有电平变化为0\n- 电平的翻转能提供一种同步机制\n\n<img src=\"非归零编码.png\" alt=\"非归零编码\" style=\"zoom:67%;\" />\n\n###### 2.3.2.3双相位编码\n\n- 曼彻斯特编码：一个**负电平到正电平**的跳边**代表1**，由**正到负代表0**\n- 差分曼彻斯特编码：每个比特间隙的开始位置**有跳变代表0**，**没有跳变代表1**\n\n#### 2.4数字-模拟编码\n\n##### 2.4.1幅移键控（ASK）\n\n<img src=\"ASK.png\" alt=\"ASK\" style=\"zoom:67%;\" />\n\n##### 2.4.2频移键控（FSK）\n\n<img src=\"FSK.png\" alt=\"FSK\" style=\"zoom:67%;\" />\n\n##### 2.4.3相移键控（PSK）\n\n<img src=\"PSK.png\" alt=\"PSK\" style=\"zoom:67%;\" />\n\n##### 2.4.4正交调幅（QAM）\n\n- ASK和PSK结合起来的编码方式\n\n<img src=\"QAM.png\" alt=\"QAM\" style=\"zoom: 67%;\" />\n\n### 3.线路配置与传输模式\n\n#### 3.1传输模式\n\n##### 3.1.1点到点连接\n\n- 提供了两个设备之间的专用链路。整个信道的容量都被用于这两个设备之间的传输\n\n##### 3.1.2多点连接\n\n- 两个以上的设备共享一条链路的配置方式。信道的容量是通过某种途径共享的\n- 实现**信道共享**的技术称为**复用技术**\n\n##### 3.1.3单工、半双工、双工\n\n- 单工：**通信单向进行**，两个站点中只有一个可以进行传输，另一个只能接收\n- 半双工：每个站点都可以发送和接收数据，但是**不能同时发送和接收数据**。\n- 双工：两个站点**都可以同时发送和接收数据**\n\n##### 3.1.4串行、并行\n\n- 并行：在每个时钟脉冲到来时，多个比特被同时发送，每个比特使用单独的一条线路\n- 串行：每个时钟脉冲只发送一个比特，它只使用一条线路，逐个传送\n\n##### 3.1.5同步、异步\n\n- 异步：比特流划分成多个小组独立传送。随时发，有开始位，终止位，用于低速设备。开销大，先发开始位0，发送一个字节，在发送终止位1，如此循环\n- 同步：成块的发送比特流，字符之间不加开始位和停止位。先二进制同步（法一：接收端和发送端之间单设一条线传送时钟脉冲；法二：采用自同步编码，曼彻斯特编码等），再数据帧同步，在数据帧前后加上起始和结束标志\n\n#### 3.2多路复用\n\n##### 3.2.1频分多路复用（FDM）\n\n- **模拟信号**\n\n##### 3.2.1时分多路复用（TDM）\n\n- **数字信号**\n\n##### 3.2.1波分多路复用（WDM）\n\n- **模拟信号**\n- 光纤\n\n##### 3.2.1码分多路复用（CDM）/码分多址复用（CDMA）\n\n- 根据码型结构的不同来实现信号分割\n- 在CDMA每个比特被分成m个不同码片，每个站点被指定一个唯一的m位码片（码型）。当发送比特1时，站点就发送其码片，想发送0时，站点就发送其码片的补码\n\n#### 3.3数据交换技术\n\n##### 3.3.1电路交换\n\n- 在两个设备之间创建一条临时的物理连接\n- 通讯过程：电路建立、数据传输、电路拆除\n\n##### 3.3.2报文交换（存储转发）\n\n- 在报文的传输过程中，由网络的中间结点将报文暂时存储起来，检查它的正确性和完整性，然后再发往下一个结点\n\n##### 3.3.3分组交换\n\n- 在分组交换中，较长的报文被分为较短的数据单元，然后每个数据单元被加上一些通信控制信息等内容，形成一个信息包（packet）。通信时以包为单位发送、存储和转发。信息包包含数据和包头，包头由通信控制信息、差错控制信息等组成\n- 信息包比报文短得多，因此可以在中间结点存储，不必访问外存。而且只要整个信息包到达后就可以转发，不必等待很长的报文全部到达，大大缩短了信息传输过程中的延迟时间\n\n###### 3.3.3.1数据报\n\n- 数据报方法中，包被称为数据报，在传输中每个包都将独立于其他包进行处理\n- **到达的顺序可能不同**，对数据报进行重排的任务可以由网络层的上层（传输层）来完成\n\n###### 3.3.3.2虚电路\n\n- 虚电路方法中，属于同一次通信的所有包之间的关系得以维持。当数据开始时，将按照预定好的路线一个接一个的传送\n- 任何一条链路可以同时为多对设备之间的通信服务\n- 在需要的时候被创建、通信传输、拆除\n- 仅在建立虚电路时需要目的地址，在进行数据传送时，每个包不需要携带完整的目的地址，只需要一个虚电路的号码标识。减少了包的控制信息长度，从而减少了额外开销\n\n#### 3.4错误检验和控制\n\n- 见题型即可\n\n##### 3.4.1奇偶校验码\n\n###### 3.4.1.1垂直（纵向）奇偶校验\n\n###### 3.4.1.2水平（横向）奇偶校验\n\n##### 3.4.1循环校验码CRC\n\n##### 3.4.2校验和\n\n### 4.传输介质\n\n#### 4.1有线介质\n\n##### 4.1.1双绞线\n\n- 由扭在一起的两根绝缘铜线组成\n- 用于传输平衡信号\n\n##### 4.1.2同轴电缆\n\n##### 4.1.3光纤\n\n- 光的速度依赖于它所穿越的传输介质的密度，密度越大，速度越低\n\n###### 4.1.3.1多模传播\n\n- 多束光线在芯材中通过不同的路径\n\n- 多模阶跃：密度突变，不同角度，速度不同，\n- 多模渐变：密度渐变，速度相同，中心密度最大，并向外逐步变小\n\n###### 4.1.3.2单模传播\n\n- 单模光纤采用阶跃材质和高度集中的光源。芯材直径比多模光纤小得多\n\n#### 4.2无线介质\n\n##### 4.2.1卫星、微波、红外线\n\n### 5.物理连接\n\n- 在数据通信中涉及4个基本功能单元：两端各有一个数据终端设备（DTE）和一个数据电路终接设备\n\n#### 5.1数据终端设备（DTE）\n\n- DTE是具有数据处理能力及发送和接收数据信息能力的设备\n- DTE一般不直接连接网络，它通过一台DCE进行通信。\n- 我们把DTE和DCE的连接称为DTE-DCE接口\n- 在DTE-DCE接口上既有数据信息又有控制信息，为了**使各个计算机公司生产的DTE可以方便的和DCE连接**，就**必须对DTE-DCE接口进行标准化**，这些就是**物理层的协议**\n\n#### 5.2数据电路终接设备（DCE）\n\n- DCE是能够通过网络发送和接收模拟或数字信号形式数据的设备\n- **总结**\n- 数据从上层数据链路层传来\n- DTE处理数据，并交给DCE转换成能通过传输介质的电磁信号\n- 电磁信号通过传输介质传输\n- 各端的DCE接收这些电磁信号形成数据交给DTE处理\n- DTE处理完数据，交给上层的数据链路层\n\n### 6.物理层协议\n\n#### 6.1EIA232\n\n##### 6.1.1机械特性\n\n##### 6.1.2电气特性\n\n##### 6.1.3功能特性\n\n##### 6.1.4规程特性\n\n#### 6.2X.21\n\n### 7.工作的设备\n\n#### 7.1中继器或转发器\n\n- 中继器是一个再生器，不是一个增幅器，只是将受损的信号重新还原成原始的形式，会导致局域网性能下降\n\n#### 7.2集线器\n\n- 多端口中继器，建立星状、树状网络结构\n\n### 8.考题类型\n\n#### 8.1 111000111000的曼彻斯特编码和差分曼彻斯特编码？\n\n#### 8.2 CRC校验码\n\n- 是x的几次多项式，就在带传送数据后加几个0\n- <font color=\"red\">**同0异1**</font>\n- 做除法，得出来的余数，加到带传输的数据后即可\n\n#### 8.3电路交换网络和包交换（分组交换）网络的主要区别是什么？\n\n#### 8.4已知信道速率为1Mbps，离散电平数目为16，根据奈奎斯特定理，求信道带宽\n\n- **W**：理想低通信信道的**带宽**，单位为Hz\n\n- **V**：表示每个码元离散电平的数目\n\n- 则理想低通信道下的极限数据传输率 = **$2Wlog_2V$**\n\n- $1*10^6=2H*1*4, H=1*10^6/8=125000Hz$\n\n","slug":"强化-计网第二章-物理层","published":1,"updated":"2020-09-21T11:42:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdig002wzl9kahch0qav","content":"<h2 id=\"强化-计网第二章-物理层\"><a class=\"markdownIt-Anchor\" href=\"#强化-计网第二章-物理层\"></a> 强化 计网第二章 物理层</h2>\n<h3 id=\"1通信系统\"><a class=\"markdownIt-Anchor\" href=\"#1通信系统\"></a> 1.通信系统</h3>\n<h4 id=\"11组成\"><a class=\"markdownIt-Anchor\" href=\"#11组成\"></a> 1.1组成</h4>\n<h5 id=\"111信源\"><a class=\"markdownIt-Anchor\" href=\"#111信源\"></a> 1.1.1信源</h5>\n<ul>\n<li>产生要发送数据的设备</li>\n</ul>\n<h5 id=\"112发送设备\"><a class=\"markdownIt-Anchor\" href=\"#112发送设备\"></a> 1.1.2发送设备</h5>\n<ul>\n<li>对数据信息编码的设备</li>\n</ul>\n<h5 id=\"113传输系统\"><a class=\"markdownIt-Anchor\" href=\"#113传输系统\"></a> 1.1.3传输系统</h5>\n<ul>\n<li>传输线路或网络</li>\n</ul>\n<h5 id=\"114接收设备\"><a class=\"markdownIt-Anchor\" href=\"#114接收设备\"></a> 1.1.4接收设备</h5>\n<ul>\n<li>将接受的信号变成数据</li>\n</ul>\n<h5 id=\"115信宿\"><a class=\"markdownIt-Anchor\" href=\"#115信宿\"></a> 1.1.5信宿</h5>\n<ul>\n<li>从接收设备接收数据信息。就是目的系统</li>\n</ul>\n<h3 id=\"2编码与调制\"><a class=\"markdownIt-Anchor\" href=\"#2编码与调制\"></a> 2.编码与调制</h3>\n<h4 id=\"21信号类型\"><a class=\"markdownIt-Anchor\" href=\"#21信号类型\"></a> 2.1信号类型</h4>\n<h5 id=\"211模拟信号\"><a class=\"markdownIt-Anchor\" href=\"#211模拟信号\"></a> 2.1.1模拟信号</h5>\n<ul>\n<li>随时间连续变化的电磁波形式（信号）</li>\n</ul>\n<h6 id=\"2111波特率\"><a class=\"markdownIt-Anchor\" href=\"#2111波特率\"></a> 2.1.1.1波特率</h6>\n<ul>\n<li>每秒发送的波数</li>\n</ul>\n<h5 id=\"212数字信号\"><a class=\"markdownIt-Anchor\" href=\"#212数字信号\"></a> 2.1.2数字信号</h5>\n<ul>\n<li>离散的，数值的变化是瞬时的</li>\n</ul>\n<h6 id=\"2121比特间隙\"><a class=\"markdownIt-Anchor\" href=\"#2121比特间隙\"></a> 2.1.2.1比特间隙</h6>\n<ul>\n<li>发送一比特所需要的时间</li>\n</ul>\n<h6 id=\"2122比特率\"><a class=\"markdownIt-Anchor\" href=\"#2122比特率\"></a> 2.1.2.2比特率</h6>\n<ul>\n<li>一秒钟内的比特间隙个数，是每秒发送的比特数，单位是bps（位每秒）</li>\n</ul>\n<h6 id=\"2123有效带宽\"><a class=\"markdownIt-Anchor\" href=\"#2123有效带宽\"></a> 2.1.2.3有效带宽</h6>\n<ul>\n<li>数字信号的频谱包括不同振幅的无数多个频率，如果根据一定的门限，只传输那些具有重要振幅的分量，仍然可以以合理的精度在接收端还原出数字信号，则数字信号频谱中的这一部分称作有效频谱，有效频谱的带宽称为有效带宽</li>\n</ul>\n<h4 id=\"22信道数据传输率\"><a class=\"markdownIt-Anchor\" href=\"#22信道数据传输率\"></a> 2.2信道数据传输率</h4>\n<h5 id=\"221奈奎斯特定理奈氏准则\"><a class=\"markdownIt-Anchor\" href=\"#221奈奎斯特定理奈氏准则\"></a> 2.2.1奈奎斯特定理（奈氏准则）</h5>\n<h5 id=\"222香农定理\"><a class=\"markdownIt-Anchor\" href=\"#222香农定理\"></a> 2.2.2香农定理</h5>\n<h4 id=\"23数字-数字编码\"><a class=\"markdownIt-Anchor\" href=\"#23数字-数字编码\"></a> 2.3数字-数字编码</h4>\n<h5 id=\"231单极性编码\"><a class=\"markdownIt-Anchor\" href=\"#231单极性编码\"></a> 2.3.1单极性编码</h5>\n<ul>\n<li>电压只有一极，高电平表示1，低电平表示0</li>\n</ul>\n<img src=\"单极性编码.png\" alt=\"单极性编码\" style=\"zoom: 67%;\">\n<h5 id=\"232极化编码\"><a class=\"markdownIt-Anchor\" href=\"#232极化编码\"></a> 2.3.2极化编码</h5>\n<ul>\n<li>一个正电压，一个负电压。通过使用两个电压，减轻了单极性编码中的直流分量问题</li>\n</ul>\n<h6 id=\"2321非归零编码\"><a class=\"markdownIt-Anchor\" href=\"#2321非归零编码\"></a> 2.3.2.1非归零编码</h6>\n<ul>\n<li>正电压为1，负电压为0</li>\n</ul>\n<h6 id=\"2322归零编码\"><a class=\"markdownIt-Anchor\" href=\"#2322归零编码\"></a> 2.3.2.2归零编码</h6>\n<ul>\n<li>电平翻转一次为1，没有电平变化为0</li>\n<li>电平的翻转能提供一种同步机制</li>\n</ul>\n<img src=\"非归零编码.png\" alt=\"非归零编码\" style=\"zoom:67%;\">\n<h6 id=\"2323双相位编码\"><a class=\"markdownIt-Anchor\" href=\"#2323双相位编码\"></a> 2.3.2.3双相位编码</h6>\n<ul>\n<li>曼彻斯特编码：一个<strong>负电平到正电平</strong>的跳边<strong>代表1</strong>，由<strong>正到负代表0</strong></li>\n<li>差分曼彻斯特编码：每个比特间隙的开始位置<strong>有跳变代表0</strong>，<strong>没有跳变代表1</strong></li>\n</ul>\n<h4 id=\"24数字-模拟编码\"><a class=\"markdownIt-Anchor\" href=\"#24数字-模拟编码\"></a> 2.4数字-模拟编码</h4>\n<h5 id=\"241幅移键控ask\"><a class=\"markdownIt-Anchor\" href=\"#241幅移键控ask\"></a> 2.4.1幅移键控（ASK）</h5>\n<img src=\"ASK.png\" alt=\"ASK\" style=\"zoom:67%;\">\n<h5 id=\"242频移键控fsk\"><a class=\"markdownIt-Anchor\" href=\"#242频移键控fsk\"></a> 2.4.2频移键控（FSK）</h5>\n<img src=\"FSK.png\" alt=\"FSK\" style=\"zoom:67%;\">\n<h5 id=\"243相移键控psk\"><a class=\"markdownIt-Anchor\" href=\"#243相移键控psk\"></a> 2.4.3相移键控（PSK）</h5>\n<img src=\"PSK.png\" alt=\"PSK\" style=\"zoom:67%;\">\n<h5 id=\"244正交调幅qam\"><a class=\"markdownIt-Anchor\" href=\"#244正交调幅qam\"></a> 2.4.4正交调幅（QAM）</h5>\n<ul>\n<li>ASK和PSK结合起来的编码方式</li>\n</ul>\n<img src=\"QAM.png\" alt=\"QAM\" style=\"zoom: 67%;\">\n<h3 id=\"3线路配置与传输模式\"><a class=\"markdownIt-Anchor\" href=\"#3线路配置与传输模式\"></a> 3.线路配置与传输模式</h3>\n<h4 id=\"31传输模式\"><a class=\"markdownIt-Anchor\" href=\"#31传输模式\"></a> 3.1传输模式</h4>\n<h5 id=\"311点到点连接\"><a class=\"markdownIt-Anchor\" href=\"#311点到点连接\"></a> 3.1.1点到点连接</h5>\n<ul>\n<li>提供了两个设备之间的专用链路。整个信道的容量都被用于这两个设备之间的传输</li>\n</ul>\n<h5 id=\"312多点连接\"><a class=\"markdownIt-Anchor\" href=\"#312多点连接\"></a> 3.1.2多点连接</h5>\n<ul>\n<li>两个以上的设备共享一条链路的配置方式。信道的容量是通过某种途径共享的</li>\n<li>实现<strong>信道共享</strong>的技术称为<strong>复用技术</strong></li>\n</ul>\n<h5 id=\"313单工-半双工-双工\"><a class=\"markdownIt-Anchor\" href=\"#313单工-半双工-双工\"></a> 3.1.3单工、半双工、双工</h5>\n<ul>\n<li>单工：<strong>通信单向进行</strong>，两个站点中只有一个可以进行传输，另一个只能接收</li>\n<li>半双工：每个站点都可以发送和接收数据，但是<strong>不能同时发送和接收数据</strong>。</li>\n<li>双工：两个站点<strong>都可以同时发送和接收数据</strong></li>\n</ul>\n<h5 id=\"314串行-并行\"><a class=\"markdownIt-Anchor\" href=\"#314串行-并行\"></a> 3.1.4串行、并行</h5>\n<ul>\n<li>并行：在每个时钟脉冲到来时，多个比特被同时发送，每个比特使用单独的一条线路</li>\n<li>串行：每个时钟脉冲只发送一个比特，它只使用一条线路，逐个传送</li>\n</ul>\n<h5 id=\"315同步-异步\"><a class=\"markdownIt-Anchor\" href=\"#315同步-异步\"></a> 3.1.5同步、异步</h5>\n<ul>\n<li>异步：比特流划分成多个小组独立传送。随时发，有开始位，终止位，用于低速设备。开销大，先发开始位0，发送一个字节，在发送终止位1，如此循环</li>\n<li>同步：成块的发送比特流，字符之间不加开始位和停止位。先二进制同步（法一：接收端和发送端之间单设一条线传送时钟脉冲；法二：采用自同步编码，曼彻斯特编码等），再数据帧同步，在数据帧前后加上起始和结束标志</li>\n</ul>\n<h4 id=\"32多路复用\"><a class=\"markdownIt-Anchor\" href=\"#32多路复用\"></a> 3.2多路复用</h4>\n<h5 id=\"321频分多路复用fdm\"><a class=\"markdownIt-Anchor\" href=\"#321频分多路复用fdm\"></a> 3.2.1频分多路复用（FDM）</h5>\n<ul>\n<li><strong>模拟信号</strong></li>\n</ul>\n<h5 id=\"321时分多路复用tdm\"><a class=\"markdownIt-Anchor\" href=\"#321时分多路复用tdm\"></a> 3.2.1时分多路复用（TDM）</h5>\n<ul>\n<li><strong>数字信号</strong></li>\n</ul>\n<h5 id=\"321波分多路复用wdm\"><a class=\"markdownIt-Anchor\" href=\"#321波分多路复用wdm\"></a> 3.2.1波分多路复用（WDM）</h5>\n<ul>\n<li><strong>模拟信号</strong></li>\n<li>光纤</li>\n</ul>\n<h5 id=\"321码分多路复用cdm码分多址复用cdma\"><a class=\"markdownIt-Anchor\" href=\"#321码分多路复用cdm码分多址复用cdma\"></a> 3.2.1码分多路复用（CDM）/码分多址复用（CDMA）</h5>\n<ul>\n<li>根据码型结构的不同来实现信号分割</li>\n<li>在CDMA每个比特被分成m个不同码片，每个站点被指定一个唯一的m位码片（码型）。当发送比特1时，站点就发送其码片，想发送0时，站点就发送其码片的补码</li>\n</ul>\n<h4 id=\"33数据交换技术\"><a class=\"markdownIt-Anchor\" href=\"#33数据交换技术\"></a> 3.3数据交换技术</h4>\n<h5 id=\"331电路交换\"><a class=\"markdownIt-Anchor\" href=\"#331电路交换\"></a> 3.3.1电路交换</h5>\n<ul>\n<li>在两个设备之间创建一条临时的物理连接</li>\n<li>通讯过程：电路建立、数据传输、电路拆除</li>\n</ul>\n<h5 id=\"332报文交换存储转发\"><a class=\"markdownIt-Anchor\" href=\"#332报文交换存储转发\"></a> 3.3.2报文交换（存储转发）</h5>\n<ul>\n<li>在报文的传输过程中，由网络的中间结点将报文暂时存储起来，检查它的正确性和完整性，然后再发往下一个结点</li>\n</ul>\n<h5 id=\"333分组交换\"><a class=\"markdownIt-Anchor\" href=\"#333分组交换\"></a> 3.3.3分组交换</h5>\n<ul>\n<li>在分组交换中，较长的报文被分为较短的数据单元，然后每个数据单元被加上一些通信控制信息等内容，形成一个信息包（packet）。通信时以包为单位发送、存储和转发。信息包包含数据和包头，包头由通信控制信息、差错控制信息等组成</li>\n<li>信息包比报文短得多，因此可以在中间结点存储，不必访问外存。而且只要整个信息包到达后就可以转发，不必等待很长的报文全部到达，大大缩短了信息传输过程中的延迟时间</li>\n</ul>\n<h6 id=\"3331数据报\"><a class=\"markdownIt-Anchor\" href=\"#3331数据报\"></a> 3.3.3.1数据报</h6>\n<ul>\n<li>数据报方法中，包被称为数据报，在传输中每个包都将独立于其他包进行处理</li>\n<li><strong>到达的顺序可能不同</strong>，对数据报进行重排的任务可以由网络层的上层（传输层）来完成</li>\n</ul>\n<h6 id=\"3332虚电路\"><a class=\"markdownIt-Anchor\" href=\"#3332虚电路\"></a> 3.3.3.2虚电路</h6>\n<ul>\n<li>虚电路方法中，属于同一次通信的所有包之间的关系得以维持。当数据开始时，将按照预定好的路线一个接一个的传送</li>\n<li>任何一条链路可以同时为多对设备之间的通信服务</li>\n<li>在需要的时候被创建、通信传输、拆除</li>\n<li>仅在建立虚电路时需要目的地址，在进行数据传送时，每个包不需要携带完整的目的地址，只需要一个虚电路的号码标识。减少了包的控制信息长度，从而减少了额外开销</li>\n</ul>\n<h4 id=\"34错误检验和控制\"><a class=\"markdownIt-Anchor\" href=\"#34错误检验和控制\"></a> 3.4错误检验和控制</h4>\n<ul>\n<li>见题型即可</li>\n</ul>\n<h5 id=\"341奇偶校验码\"><a class=\"markdownIt-Anchor\" href=\"#341奇偶校验码\"></a> 3.4.1奇偶校验码</h5>\n<h6 id=\"3411垂直纵向奇偶校验\"><a class=\"markdownIt-Anchor\" href=\"#3411垂直纵向奇偶校验\"></a> 3.4.1.1垂直（纵向）奇偶校验</h6>\n<h6 id=\"3412水平横向奇偶校验\"><a class=\"markdownIt-Anchor\" href=\"#3412水平横向奇偶校验\"></a> 3.4.1.2水平（横向）奇偶校验</h6>\n<h5 id=\"341循环校验码crc\"><a class=\"markdownIt-Anchor\" href=\"#341循环校验码crc\"></a> 3.4.1循环校验码CRC</h5>\n<h5 id=\"342校验和\"><a class=\"markdownIt-Anchor\" href=\"#342校验和\"></a> 3.4.2校验和</h5>\n<h3 id=\"4传输介质\"><a class=\"markdownIt-Anchor\" href=\"#4传输介质\"></a> 4.传输介质</h3>\n<h4 id=\"41有线介质\"><a class=\"markdownIt-Anchor\" href=\"#41有线介质\"></a> 4.1有线介质</h4>\n<h5 id=\"411双绞线\"><a class=\"markdownIt-Anchor\" href=\"#411双绞线\"></a> 4.1.1双绞线</h5>\n<ul>\n<li>由扭在一起的两根绝缘铜线组成</li>\n<li>用于传输平衡信号</li>\n</ul>\n<h5 id=\"412同轴电缆\"><a class=\"markdownIt-Anchor\" href=\"#412同轴电缆\"></a> 4.1.2同轴电缆</h5>\n<h5 id=\"413光纤\"><a class=\"markdownIt-Anchor\" href=\"#413光纤\"></a> 4.1.3光纤</h5>\n<ul>\n<li>光的速度依赖于它所穿越的传输介质的密度，密度越大，速度越低</li>\n</ul>\n<h6 id=\"4131多模传播\"><a class=\"markdownIt-Anchor\" href=\"#4131多模传播\"></a> 4.1.3.1多模传播</h6>\n<ul>\n<li>\n<p>多束光线在芯材中通过不同的路径</p>\n</li>\n<li>\n<p>多模阶跃：密度突变，不同角度，速度不同，</p>\n</li>\n<li>\n<p>多模渐变：密度渐变，速度相同，中心密度最大，并向外逐步变小</p>\n</li>\n</ul>\n<h6 id=\"4132单模传播\"><a class=\"markdownIt-Anchor\" href=\"#4132单模传播\"></a> 4.1.3.2单模传播</h6>\n<ul>\n<li>单模光纤采用阶跃材质和高度集中的光源。芯材直径比多模光纤小得多</li>\n</ul>\n<h4 id=\"42无线介质\"><a class=\"markdownIt-Anchor\" href=\"#42无线介质\"></a> 4.2无线介质</h4>\n<h5 id=\"421卫星-微波-红外线\"><a class=\"markdownIt-Anchor\" href=\"#421卫星-微波-红外线\"></a> 4.2.1卫星、微波、红外线</h5>\n<h3 id=\"5物理连接\"><a class=\"markdownIt-Anchor\" href=\"#5物理连接\"></a> 5.物理连接</h3>\n<ul>\n<li>在数据通信中涉及4个基本功能单元：两端各有一个数据终端设备（DTE）和一个数据电路终接设备</li>\n</ul>\n<h4 id=\"51数据终端设备dte\"><a class=\"markdownIt-Anchor\" href=\"#51数据终端设备dte\"></a> 5.1数据终端设备（DTE）</h4>\n<ul>\n<li>DTE是具有数据处理能力及发送和接收数据信息能力的设备</li>\n<li>DTE一般不直接连接网络，它通过一台DCE进行通信。</li>\n<li>我们把DTE和DCE的连接称为DTE-DCE接口</li>\n<li>在DTE-DCE接口上既有数据信息又有控制信息，为了<strong>使各个计算机公司生产的DTE可以方便的和DCE连接</strong>，就<strong>必须对DTE-DCE接口进行标准化</strong>，这些就是<strong>物理层的协议</strong></li>\n</ul>\n<h4 id=\"52数据电路终接设备dce\"><a class=\"markdownIt-Anchor\" href=\"#52数据电路终接设备dce\"></a> 5.2数据电路终接设备（DCE）</h4>\n<ul>\n<li>DCE是能够通过网络发送和接收模拟或数字信号形式数据的设备</li>\n<li><strong>总结</strong></li>\n<li>数据从上层数据链路层传来</li>\n<li>DTE处理数据，并交给DCE转换成能通过传输介质的电磁信号</li>\n<li>电磁信号通过传输介质传输</li>\n<li>各端的DCE接收这些电磁信号形成数据交给DTE处理</li>\n<li>DTE处理完数据，交给上层的数据链路层</li>\n</ul>\n<h3 id=\"6物理层协议\"><a class=\"markdownIt-Anchor\" href=\"#6物理层协议\"></a> 6.物理层协议</h3>\n<h4 id=\"61eia232\"><a class=\"markdownIt-Anchor\" href=\"#61eia232\"></a> 6.1EIA232</h4>\n<h5 id=\"611机械特性\"><a class=\"markdownIt-Anchor\" href=\"#611机械特性\"></a> 6.1.1机械特性</h5>\n<h5 id=\"612电气特性\"><a class=\"markdownIt-Anchor\" href=\"#612电气特性\"></a> 6.1.2电气特性</h5>\n<h5 id=\"613功能特性\"><a class=\"markdownIt-Anchor\" href=\"#613功能特性\"></a> 6.1.3功能特性</h5>\n<h5 id=\"614规程特性\"><a class=\"markdownIt-Anchor\" href=\"#614规程特性\"></a> 6.1.4规程特性</h5>\n<h4 id=\"62x21\"><a class=\"markdownIt-Anchor\" href=\"#62x21\"></a> 6.2X.21</h4>\n<h3 id=\"7工作的设备\"><a class=\"markdownIt-Anchor\" href=\"#7工作的设备\"></a> 7.工作的设备</h3>\n<h4 id=\"71中继器或转发器\"><a class=\"markdownIt-Anchor\" href=\"#71中继器或转发器\"></a> 7.1中继器或转发器</h4>\n<ul>\n<li>中继器是一个再生器，不是一个增幅器，只是将受损的信号重新还原成原始的形式，会导致局域网性能下降</li>\n</ul>\n<h4 id=\"72集线器\"><a class=\"markdownIt-Anchor\" href=\"#72集线器\"></a> 7.2集线器</h4>\n<ul>\n<li>多端口中继器，建立星状、树状网络结构</li>\n</ul>\n<h3 id=\"8考题类型\"><a class=\"markdownIt-Anchor\" href=\"#8考题类型\"></a> 8.考题类型</h3>\n<h4 id=\"81-111000111000的曼彻斯特编码和差分曼彻斯特编码\"><a class=\"markdownIt-Anchor\" href=\"#81-111000111000的曼彻斯特编码和差分曼彻斯特编码\"></a> 8.1 111000111000的曼彻斯特编码和差分曼彻斯特编码？</h4>\n<h4 id=\"82-crc校验码\"><a class=\"markdownIt-Anchor\" href=\"#82-crc校验码\"></a> 8.2 CRC校验码</h4>\n<ul>\n<li>是x的几次多项式，就在带传送数据后加几个0</li>\n<li><font color=\"red\"><strong>同0异1</strong></font></li>\n<li>做除法，得出来的余数，加到带传输的数据后即可</li>\n</ul>\n<h4 id=\"83电路交换网络和包交换分组交换网络的主要区别是什么\"><a class=\"markdownIt-Anchor\" href=\"#83电路交换网络和包交换分组交换网络的主要区别是什么\"></a> 8.3电路交换网络和包交换（分组交换）网络的主要区别是什么？</h4>\n<h4 id=\"84已知信道速率为1mbps离散电平数目为16根据奈奎斯特定理求信道带宽\"><a class=\"markdownIt-Anchor\" href=\"#84已知信道速率为1mbps离散电平数目为16根据奈奎斯特定理求信道带宽\"></a> 8.4已知信道速率为1Mbps，离散电平数目为16，根据奈奎斯特定理，求信道带宽</h4>\n<ul>\n<li>\n<p><strong>W</strong>：理想低通信信道的<strong>带宽</strong>，单位为Hz</p>\n</li>\n<li>\n<p><strong>V</strong>：表示每个码元离散电平的数目</p>\n</li>\n<li>\n<p>则理想低通信道下的极限数据传输率 = <strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>W</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">2Wlog_2V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span></strong></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mo>=</mo><mn>2</mn><mi>H</mi><mo>∗</mo><mn>1</mn><mo>∗</mo><mn>4</mn><mo separator=\"true\">,</mo><mi>H</mi><mo>=</mo><mn>1</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi mathvariant=\"normal\">/</mi><mn>8</mn><mo>=</mo><mn>125000</mn><mi>H</mi><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">1*10^6=2H*1*4, H=1*10^6/8=125000Hz</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span></p>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"强化-计网第二章-物理层\"><a class=\"markdownIt-Anchor\" href=\"#强化-计网第二章-物理层\"></a> 强化 计网第二章 物理层</h2>\n<h3 id=\"1通信系统\"><a class=\"markdownIt-Anchor\" href=\"#1通信系统\"></a> 1.通信系统</h3>\n<h4 id=\"11组成\"><a class=\"markdownIt-Anchor\" href=\"#11组成\"></a> 1.1组成</h4>\n<h5 id=\"111信源\"><a class=\"markdownIt-Anchor\" href=\"#111信源\"></a> 1.1.1信源</h5>\n<ul>\n<li>产生要发送数据的设备</li>\n</ul>\n<h5 id=\"112发送设备\"><a class=\"markdownIt-Anchor\" href=\"#112发送设备\"></a> 1.1.2发送设备</h5>\n<ul>\n<li>对数据信息编码的设备</li>\n</ul>\n<h5 id=\"113传输系统\"><a class=\"markdownIt-Anchor\" href=\"#113传输系统\"></a> 1.1.3传输系统</h5>\n<ul>\n<li>传输线路或网络</li>\n</ul>\n<h5 id=\"114接收设备\"><a class=\"markdownIt-Anchor\" href=\"#114接收设备\"></a> 1.1.4接收设备</h5>\n<ul>\n<li>将接受的信号变成数据</li>\n</ul>\n<h5 id=\"115信宿\"><a class=\"markdownIt-Anchor\" href=\"#115信宿\"></a> 1.1.5信宿</h5>\n<ul>\n<li>从接收设备接收数据信息。就是目的系统</li>\n</ul>\n<h3 id=\"2编码与调制\"><a class=\"markdownIt-Anchor\" href=\"#2编码与调制\"></a> 2.编码与调制</h3>\n<h4 id=\"21信号类型\"><a class=\"markdownIt-Anchor\" href=\"#21信号类型\"></a> 2.1信号类型</h4>\n<h5 id=\"211模拟信号\"><a class=\"markdownIt-Anchor\" href=\"#211模拟信号\"></a> 2.1.1模拟信号</h5>\n<ul>\n<li>随时间连续变化的电磁波形式（信号）</li>\n</ul>\n<h6 id=\"2111波特率\"><a class=\"markdownIt-Anchor\" href=\"#2111波特率\"></a> 2.1.1.1波特率</h6>\n<ul>\n<li>每秒发送的波数</li>\n</ul>\n<h5 id=\"212数字信号\"><a class=\"markdownIt-Anchor\" href=\"#212数字信号\"></a> 2.1.2数字信号</h5>\n<ul>\n<li>离散的，数值的变化是瞬时的</li>\n</ul>\n<h6 id=\"2121比特间隙\"><a class=\"markdownIt-Anchor\" href=\"#2121比特间隙\"></a> 2.1.2.1比特间隙</h6>\n<ul>\n<li>发送一比特所需要的时间</li>\n</ul>\n<h6 id=\"2122比特率\"><a class=\"markdownIt-Anchor\" href=\"#2122比特率\"></a> 2.1.2.2比特率</h6>\n<ul>\n<li>一秒钟内的比特间隙个数，是每秒发送的比特数，单位是bps（位每秒）</li>\n</ul>\n<h6 id=\"2123有效带宽\"><a class=\"markdownIt-Anchor\" href=\"#2123有效带宽\"></a> 2.1.2.3有效带宽</h6>\n<ul>\n<li>数字信号的频谱包括不同振幅的无数多个频率，如果根据一定的门限，只传输那些具有重要振幅的分量，仍然可以以合理的精度在接收端还原出数字信号，则数字信号频谱中的这一部分称作有效频谱，有效频谱的带宽称为有效带宽</li>\n</ul>\n<h4 id=\"22信道数据传输率\"><a class=\"markdownIt-Anchor\" href=\"#22信道数据传输率\"></a> 2.2信道数据传输率</h4>\n<h5 id=\"221奈奎斯特定理奈氏准则\"><a class=\"markdownIt-Anchor\" href=\"#221奈奎斯特定理奈氏准则\"></a> 2.2.1奈奎斯特定理（奈氏准则）</h5>\n<h5 id=\"222香农定理\"><a class=\"markdownIt-Anchor\" href=\"#222香农定理\"></a> 2.2.2香农定理</h5>\n<h4 id=\"23数字-数字编码\"><a class=\"markdownIt-Anchor\" href=\"#23数字-数字编码\"></a> 2.3数字-数字编码</h4>\n<h5 id=\"231单极性编码\"><a class=\"markdownIt-Anchor\" href=\"#231单极性编码\"></a> 2.3.1单极性编码</h5>\n<ul>\n<li>电压只有一极，高电平表示1，低电平表示0</li>\n</ul>\n<img src=\"单极性编码.png\" alt=\"单极性编码\" style=\"zoom: 67%;\" />\n<h5 id=\"232极化编码\"><a class=\"markdownIt-Anchor\" href=\"#232极化编码\"></a> 2.3.2极化编码</h5>\n<ul>\n<li>一个正电压，一个负电压。通过使用两个电压，减轻了单极性编码中的直流分量问题</li>\n</ul>\n<h6 id=\"2321非归零编码\"><a class=\"markdownIt-Anchor\" href=\"#2321非归零编码\"></a> 2.3.2.1非归零编码</h6>\n<ul>\n<li>正电压为1，负电压为0</li>\n</ul>\n<h6 id=\"2322归零编码\"><a class=\"markdownIt-Anchor\" href=\"#2322归零编码\"></a> 2.3.2.2归零编码</h6>\n<ul>\n<li>电平翻转一次为1，没有电平变化为0</li>\n<li>电平的翻转能提供一种同步机制</li>\n</ul>\n<img src=\"非归零编码.png\" alt=\"非归零编码\" style=\"zoom:67%;\" />\n<h6 id=\"2323双相位编码\"><a class=\"markdownIt-Anchor\" href=\"#2323双相位编码\"></a> 2.3.2.3双相位编码</h6>\n<ul>\n<li>曼彻斯特编码：一个<strong>负电平到正电平</strong>的跳边<strong>代表1</strong>，由<strong>正到负代表0</strong></li>\n<li>差分曼彻斯特编码：每个比特间隙的开始位置<strong>有跳变代表0</strong>，<strong>没有跳变代表1</strong></li>\n</ul>\n<h4 id=\"24数字-模拟编码\"><a class=\"markdownIt-Anchor\" href=\"#24数字-模拟编码\"></a> 2.4数字-模拟编码</h4>\n<h5 id=\"241幅移键控ask\"><a class=\"markdownIt-Anchor\" href=\"#241幅移键控ask\"></a> 2.4.1幅移键控（ASK）</h5>\n<img src=\"ASK.png\" alt=\"ASK\" style=\"zoom:67%;\" />\n<h5 id=\"242频移键控fsk\"><a class=\"markdownIt-Anchor\" href=\"#242频移键控fsk\"></a> 2.4.2频移键控（FSK）</h5>\n<img src=\"FSK.png\" alt=\"FSK\" style=\"zoom:67%;\" />\n<h5 id=\"243相移键控psk\"><a class=\"markdownIt-Anchor\" href=\"#243相移键控psk\"></a> 2.4.3相移键控（PSK）</h5>\n<img src=\"PSK.png\" alt=\"PSK\" style=\"zoom:67%;\" />\n<h5 id=\"244正交调幅qam\"><a class=\"markdownIt-Anchor\" href=\"#244正交调幅qam\"></a> 2.4.4正交调幅（QAM）</h5>\n<ul>\n<li>ASK和PSK结合起来的编码方式</li>\n</ul>\n<img src=\"QAM.png\" alt=\"QAM\" style=\"zoom: 67%;\" />\n<h3 id=\"3线路配置与传输模式\"><a class=\"markdownIt-Anchor\" href=\"#3线路配置与传输模式\"></a> 3.线路配置与传输模式</h3>\n<h4 id=\"31传输模式\"><a class=\"markdownIt-Anchor\" href=\"#31传输模式\"></a> 3.1传输模式</h4>\n<h5 id=\"311点到点连接\"><a class=\"markdownIt-Anchor\" href=\"#311点到点连接\"></a> 3.1.1点到点连接</h5>\n<ul>\n<li>提供了两个设备之间的专用链路。整个信道的容量都被用于这两个设备之间的传输</li>\n</ul>\n<h5 id=\"312多点连接\"><a class=\"markdownIt-Anchor\" href=\"#312多点连接\"></a> 3.1.2多点连接</h5>\n<ul>\n<li>两个以上的设备共享一条链路的配置方式。信道的容量是通过某种途径共享的</li>\n<li>实现<strong>信道共享</strong>的技术称为<strong>复用技术</strong></li>\n</ul>\n<h5 id=\"313单工-半双工-双工\"><a class=\"markdownIt-Anchor\" href=\"#313单工-半双工-双工\"></a> 3.1.3单工、半双工、双工</h5>\n<ul>\n<li>单工：<strong>通信单向进行</strong>，两个站点中只有一个可以进行传输，另一个只能接收</li>\n<li>半双工：每个站点都可以发送和接收数据，但是<strong>不能同时发送和接收数据</strong>。</li>\n<li>双工：两个站点<strong>都可以同时发送和接收数据</strong></li>\n</ul>\n<h5 id=\"314串行-并行\"><a class=\"markdownIt-Anchor\" href=\"#314串行-并行\"></a> 3.1.4串行、并行</h5>\n<ul>\n<li>并行：在每个时钟脉冲到来时，多个比特被同时发送，每个比特使用单独的一条线路</li>\n<li>串行：每个时钟脉冲只发送一个比特，它只使用一条线路，逐个传送</li>\n</ul>\n<h5 id=\"315同步-异步\"><a class=\"markdownIt-Anchor\" href=\"#315同步-异步\"></a> 3.1.5同步、异步</h5>\n<ul>\n<li>异步：比特流划分成多个小组独立传送。随时发，有开始位，终止位，用于低速设备。开销大，先发开始位0，发送一个字节，在发送终止位1，如此循环</li>\n<li>同步：成块的发送比特流，字符之间不加开始位和停止位。先二进制同步（法一：接收端和发送端之间单设一条线传送时钟脉冲；法二：采用自同步编码，曼彻斯特编码等），再数据帧同步，在数据帧前后加上起始和结束标志</li>\n</ul>\n<h4 id=\"32多路复用\"><a class=\"markdownIt-Anchor\" href=\"#32多路复用\"></a> 3.2多路复用</h4>\n<h5 id=\"321频分多路复用fdm\"><a class=\"markdownIt-Anchor\" href=\"#321频分多路复用fdm\"></a> 3.2.1频分多路复用（FDM）</h5>\n<ul>\n<li><strong>模拟信号</strong></li>\n</ul>\n<h5 id=\"321时分多路复用tdm\"><a class=\"markdownIt-Anchor\" href=\"#321时分多路复用tdm\"></a> 3.2.1时分多路复用（TDM）</h5>\n<ul>\n<li><strong>数字信号</strong></li>\n</ul>\n<h5 id=\"321波分多路复用wdm\"><a class=\"markdownIt-Anchor\" href=\"#321波分多路复用wdm\"></a> 3.2.1波分多路复用（WDM）</h5>\n<ul>\n<li><strong>模拟信号</strong></li>\n<li>光纤</li>\n</ul>\n<h5 id=\"321码分多路复用cdm码分多址复用cdma\"><a class=\"markdownIt-Anchor\" href=\"#321码分多路复用cdm码分多址复用cdma\"></a> 3.2.1码分多路复用（CDM）/码分多址复用（CDMA）</h5>\n<ul>\n<li>根据码型结构的不同来实现信号分割</li>\n<li>在CDMA每个比特被分成m个不同码片，每个站点被指定一个唯一的m位码片（码型）。当发送比特1时，站点就发送其码片，想发送0时，站点就发送其码片的补码</li>\n</ul>\n<h4 id=\"33数据交换技术\"><a class=\"markdownIt-Anchor\" href=\"#33数据交换技术\"></a> 3.3数据交换技术</h4>\n<h5 id=\"331电路交换\"><a class=\"markdownIt-Anchor\" href=\"#331电路交换\"></a> 3.3.1电路交换</h5>\n<ul>\n<li>在两个设备之间创建一条临时的物理连接</li>\n<li>通讯过程：电路建立、数据传输、电路拆除</li>\n</ul>\n<h5 id=\"332报文交换存储转发\"><a class=\"markdownIt-Anchor\" href=\"#332报文交换存储转发\"></a> 3.3.2报文交换（存储转发）</h5>\n<ul>\n<li>在报文的传输过程中，由网络的中间结点将报文暂时存储起来，检查它的正确性和完整性，然后再发往下一个结点</li>\n</ul>\n<h5 id=\"333分组交换\"><a class=\"markdownIt-Anchor\" href=\"#333分组交换\"></a> 3.3.3分组交换</h5>\n<ul>\n<li>在分组交换中，较长的报文被分为较短的数据单元，然后每个数据单元被加上一些通信控制信息等内容，形成一个信息包（packet）。通信时以包为单位发送、存储和转发。信息包包含数据和包头，包头由通信控制信息、差错控制信息等组成</li>\n<li>信息包比报文短得多，因此可以在中间结点存储，不必访问外存。而且只要整个信息包到达后就可以转发，不必等待很长的报文全部到达，大大缩短了信息传输过程中的延迟时间</li>\n</ul>\n<h6 id=\"3331数据报\"><a class=\"markdownIt-Anchor\" href=\"#3331数据报\"></a> 3.3.3.1数据报</h6>\n<ul>\n<li>数据报方法中，包被称为数据报，在传输中每个包都将独立于其他包进行处理</li>\n<li><strong>到达的顺序可能不同</strong>，对数据报进行重排的任务可以由网络层的上层（传输层）来完成</li>\n</ul>\n<h6 id=\"3332虚电路\"><a class=\"markdownIt-Anchor\" href=\"#3332虚电路\"></a> 3.3.3.2虚电路</h6>\n<ul>\n<li>虚电路方法中，属于同一次通信的所有包之间的关系得以维持。当数据开始时，将按照预定好的路线一个接一个的传送</li>\n<li>任何一条链路可以同时为多对设备之间的通信服务</li>\n<li>在需要的时候被创建、通信传输、拆除</li>\n<li>仅在建立虚电路时需要目的地址，在进行数据传送时，每个包不需要携带完整的目的地址，只需要一个虚电路的号码标识。减少了包的控制信息长度，从而减少了额外开销</li>\n</ul>\n<h4 id=\"34错误检验和控制\"><a class=\"markdownIt-Anchor\" href=\"#34错误检验和控制\"></a> 3.4错误检验和控制</h4>\n<ul>\n<li>见题型即可</li>\n</ul>\n<h5 id=\"341奇偶校验码\"><a class=\"markdownIt-Anchor\" href=\"#341奇偶校验码\"></a> 3.4.1奇偶校验码</h5>\n<h6 id=\"3411垂直纵向奇偶校验\"><a class=\"markdownIt-Anchor\" href=\"#3411垂直纵向奇偶校验\"></a> 3.4.1.1垂直（纵向）奇偶校验</h6>\n<h6 id=\"3412水平横向奇偶校验\"><a class=\"markdownIt-Anchor\" href=\"#3412水平横向奇偶校验\"></a> 3.4.1.2水平（横向）奇偶校验</h6>\n<h5 id=\"341循环校验码crc\"><a class=\"markdownIt-Anchor\" href=\"#341循环校验码crc\"></a> 3.4.1循环校验码CRC</h5>\n<h5 id=\"342校验和\"><a class=\"markdownIt-Anchor\" href=\"#342校验和\"></a> 3.4.2校验和</h5>\n<h3 id=\"4传输介质\"><a class=\"markdownIt-Anchor\" href=\"#4传输介质\"></a> 4.传输介质</h3>\n<h4 id=\"41有线介质\"><a class=\"markdownIt-Anchor\" href=\"#41有线介质\"></a> 4.1有线介质</h4>\n<h5 id=\"411双绞线\"><a class=\"markdownIt-Anchor\" href=\"#411双绞线\"></a> 4.1.1双绞线</h5>\n<ul>\n<li>由扭在一起的两根绝缘铜线组成</li>\n<li>用于传输平衡信号</li>\n</ul>\n<h5 id=\"412同轴电缆\"><a class=\"markdownIt-Anchor\" href=\"#412同轴电缆\"></a> 4.1.2同轴电缆</h5>\n<h5 id=\"413光纤\"><a class=\"markdownIt-Anchor\" href=\"#413光纤\"></a> 4.1.3光纤</h5>\n<ul>\n<li>光的速度依赖于它所穿越的传输介质的密度，密度越大，速度越低</li>\n</ul>\n<h6 id=\"4131多模传播\"><a class=\"markdownIt-Anchor\" href=\"#4131多模传播\"></a> 4.1.3.1多模传播</h6>\n<ul>\n<li>\n<p>多束光线在芯材中通过不同的路径</p>\n</li>\n<li>\n<p>多模阶跃：密度突变，不同角度，速度不同，</p>\n</li>\n<li>\n<p>多模渐变：密度渐变，速度相同，中心密度最大，并向外逐步变小</p>\n</li>\n</ul>\n<h6 id=\"4132单模传播\"><a class=\"markdownIt-Anchor\" href=\"#4132单模传播\"></a> 4.1.3.2单模传播</h6>\n<ul>\n<li>单模光纤采用阶跃材质和高度集中的光源。芯材直径比多模光纤小得多</li>\n</ul>\n<h4 id=\"42无线介质\"><a class=\"markdownIt-Anchor\" href=\"#42无线介质\"></a> 4.2无线介质</h4>\n<h5 id=\"421卫星-微波-红外线\"><a class=\"markdownIt-Anchor\" href=\"#421卫星-微波-红外线\"></a> 4.2.1卫星、微波、红外线</h5>\n<h3 id=\"5物理连接\"><a class=\"markdownIt-Anchor\" href=\"#5物理连接\"></a> 5.物理连接</h3>\n<ul>\n<li>在数据通信中涉及4个基本功能单元：两端各有一个数据终端设备（DTE）和一个数据电路终接设备</li>\n</ul>\n<h4 id=\"51数据终端设备dte\"><a class=\"markdownIt-Anchor\" href=\"#51数据终端设备dte\"></a> 5.1数据终端设备（DTE）</h4>\n<ul>\n<li>DTE是具有数据处理能力及发送和接收数据信息能力的设备</li>\n<li>DTE一般不直接连接网络，它通过一台DCE进行通信。</li>\n<li>我们把DTE和DCE的连接称为DTE-DCE接口</li>\n<li>在DTE-DCE接口上既有数据信息又有控制信息，为了<strong>使各个计算机公司生产的DTE可以方便的和DCE连接</strong>，就<strong>必须对DTE-DCE接口进行标准化</strong>，这些就是<strong>物理层的协议</strong></li>\n</ul>\n<h4 id=\"52数据电路终接设备dce\"><a class=\"markdownIt-Anchor\" href=\"#52数据电路终接设备dce\"></a> 5.2数据电路终接设备（DCE）</h4>\n<ul>\n<li>DCE是能够通过网络发送和接收模拟或数字信号形式数据的设备</li>\n<li><strong>总结</strong></li>\n<li>数据从上层数据链路层传来</li>\n<li>DTE处理数据，并交给DCE转换成能通过传输介质的电磁信号</li>\n<li>电磁信号通过传输介质传输</li>\n<li>各端的DCE接收这些电磁信号形成数据交给DTE处理</li>\n<li>DTE处理完数据，交给上层的数据链路层</li>\n</ul>\n<h3 id=\"6物理层协议\"><a class=\"markdownIt-Anchor\" href=\"#6物理层协议\"></a> 6.物理层协议</h3>\n<h4 id=\"61eia232\"><a class=\"markdownIt-Anchor\" href=\"#61eia232\"></a> 6.1EIA232</h4>\n<h5 id=\"611机械特性\"><a class=\"markdownIt-Anchor\" href=\"#611机械特性\"></a> 6.1.1机械特性</h5>\n<h5 id=\"612电气特性\"><a class=\"markdownIt-Anchor\" href=\"#612电气特性\"></a> 6.1.2电气特性</h5>\n<h5 id=\"613功能特性\"><a class=\"markdownIt-Anchor\" href=\"#613功能特性\"></a> 6.1.3功能特性</h5>\n<h5 id=\"614规程特性\"><a class=\"markdownIt-Anchor\" href=\"#614规程特性\"></a> 6.1.4规程特性</h5>\n<h4 id=\"62x21\"><a class=\"markdownIt-Anchor\" href=\"#62x21\"></a> 6.2X.21</h4>\n<h3 id=\"7工作的设备\"><a class=\"markdownIt-Anchor\" href=\"#7工作的设备\"></a> 7.工作的设备</h3>\n<h4 id=\"71中继器或转发器\"><a class=\"markdownIt-Anchor\" href=\"#71中继器或转发器\"></a> 7.1中继器或转发器</h4>\n<ul>\n<li>中继器是一个再生器，不是一个增幅器，只是将受损的信号重新还原成原始的形式，会导致局域网性能下降</li>\n</ul>\n<h4 id=\"72集线器\"><a class=\"markdownIt-Anchor\" href=\"#72集线器\"></a> 7.2集线器</h4>\n<ul>\n<li>多端口中继器，建立星状、树状网络结构</li>\n</ul>\n<h3 id=\"8考题类型\"><a class=\"markdownIt-Anchor\" href=\"#8考题类型\"></a> 8.考题类型</h3>\n<h4 id=\"81-111000111000的曼彻斯特编码和差分曼彻斯特编码\"><a class=\"markdownIt-Anchor\" href=\"#81-111000111000的曼彻斯特编码和差分曼彻斯特编码\"></a> 8.1 111000111000的曼彻斯特编码和差分曼彻斯特编码？</h4>\n<h4 id=\"82-crc校验码\"><a class=\"markdownIt-Anchor\" href=\"#82-crc校验码\"></a> 8.2 CRC校验码</h4>\n<ul>\n<li>是x的几次多项式，就在带传送数据后加几个0</li>\n<li><font color=\"red\"><strong>同0异1</strong></font></li>\n<li>做除法，得出来的余数，加到带传输的数据后即可</li>\n</ul>\n<h4 id=\"83电路交换网络和包交换分组交换网络的主要区别是什么\"><a class=\"markdownIt-Anchor\" href=\"#83电路交换网络和包交换分组交换网络的主要区别是什么\"></a> 8.3电路交换网络和包交换（分组交换）网络的主要区别是什么？</h4>\n<h4 id=\"84已知信道速率为1mbps离散电平数目为16根据奈奎斯特定理求信道带宽\"><a class=\"markdownIt-Anchor\" href=\"#84已知信道速率为1mbps离散电平数目为16根据奈奎斯特定理求信道带宽\"></a> 8.4已知信道速率为1Mbps，离散电平数目为16，根据奈奎斯特定理，求信道带宽</h4>\n<ul>\n<li>\n<p><strong>W</strong>：理想低通信信道的<strong>带宽</strong>，单位为Hz</p>\n</li>\n<li>\n<p><strong>V</strong>：表示每个码元离散电平的数目</p>\n</li>\n<li>\n<p>则理想低通信道下的极限数据传输率 = <strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>W</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">2Wlog_2V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span></strong></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mo>=</mo><mn>2</mn><mi>H</mi><mo>∗</mo><mn>1</mn><mo>∗</mo><mn>4</mn><mo separator=\"true\">,</mo><mi>H</mi><mo>=</mo><mn>1</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi mathvariant=\"normal\">/</mi><mn>8</mn><mo>=</mo><mn>125000</mn><mi>H</mi><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">1*10^6=2H*1*4, H=1*10^6/8=125000Hz</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span></p>\n</li>\n</ul>\n"},{"title":"排序算法","top":false,"cover":false,"toc":false,"mathjax":true,"keywords":"排序算法，快排，堆排序","description":"排序算法整理","summary":"排序算法整理","abbrlink":"232f","date":"2020-09-13T08:31:22.000Z","password":null,"_content":"## 排序问题整理\n\n> - 排序的时候能用快速排序尽量用快排\n>\n> - 整理排序算法的复杂度以及优缺点\n\n#### 1.快速排序（交换排序）\n\n- 需要一个递归栈来保存信息\n- 最好情况$O(nlog_2{n})$；平均情况$O(nlog_2{n})$；最坏情况$O(n^{2})$\n- 空间复杂度：$O(log_2{n})$\n- 是否稳定：否（快的排序都不稳定）\n- 每排一次，枢轴被放入最终位置\n\n```c\nint Partition(int A[],int low,int high){     //一趟划分\n    int pivot = A[low];                      //将当前表中第一个元素设为枢轴，对表进行划分\n    int t = low;\n    while(low<high){\n        low++;\n        while(A[low]<=pivot){                //从前往后找到一个比枢轴大的数\n            low++;\n        }\n        while(A[high]>pivot){                //从后往前找到一个比枢轴小的数\n            high--;\n        }\n        if(low<high){\n            int w = A[low];                  //用临时变量w储存值，交换两个数\n        \tA[low] = A[high];                //用临时变量w储存值，交换两个数\n        \tA[high] = w;                     //用临时变量w储存值，交换两个数\n        }\n    }\n    A[t] = A[high];                          //找到枢轴的正确位置，交换这两个元素\n    A[high] = pivot;\n    return high;                             //返回枢轴正确的位置\n}\nvoid QuickSort(int &A[],int low,int high){   //开始快排\n    if(low<high){\n        int mid = Partition(A,low,high);\n        QuickSort(A,low,mid-1);              //枢轴左半边继续快排\n        QuickSort(A,mid+1,high);\n    }\n}\n```\n\n#### 2.冒泡排序（交换排序）\n\n> - 注意返回值类型以及函数以及flag的使用\n\n- 从后往前比较两两相邻元素的值，若为逆序，则交换他们，直到序列比较完成。这成为第一趟冒泡。\n- 结果是将最小的元素交换到待排序列的第一个位置\n- 下一趟冒泡时，前一趟确定的最小元素不再参与比较，这样最多$n-1$趟冒泡就能排好序\n- 最好情况：$O({n})$；平均情况：$O(n^{2})$；最坏情况：$O(n^{2})$\n- 是否稳定：是\n\n```c\nvoid BubbleSort(int A[],int n){\n    for(int i = 0; i < n-1; i++){\n        bool flag = false;\n        for(int j = n-1; j>i; j--){    //从后往前\n            if(A[j-1] > A[j]){\n                swap(A[j-1],A[j]);     //交换两个元素\n                flag = true;\n            }\n        }\n        if(flag == false){\n            return;                    //没有发生交换，这说明有序\n        }\n    }\n}\n//网上找的swap函数，仅供参考\nvoid swap(int *a,int *b)\n{\n    int temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n```\n\n#### 3.直接插入排序\n\n- 从前往后依次插入到前面的序列\n- 最好情况是表中元素已经有序，此时每插入一个元素，都只需比较一次而不用移动元素\n- 最好情况：$O({n})$；平均情况：$O(n^{2})$；最坏情况：$O(n^{2})$\n- 是否稳定：是\n\n```c\nvoid InserSort(int A[],int n){\n    int i,j;\n    for(i=2;i<n;i++){                  //依次将A[2]~A[n]插入到前面已排序序列\n        if(A[i]<A[i-1]){               //若A[i]关键词小于其前驱，将A[i]插入有序表\n            A[0] = A[i];//复制为哨兵，A[0]不存放元素\n            for(j=i-1;A[0]<A[j];j--){//从后往前查找待插入位置\n                A[j+1] = A[j];//向后挪位\n            }\n            A[j+1] = A[0];//复制到插入位置\n        }\n    }\n}\n```\n\n#### 4.折半插入排序\n\n- 只适用于**顺序表**\n- 最好情况：$O({n})$；平均情况：$O(n^{2})$；最坏情况：$O(n^{2})$\n- 是否稳定：是\n\n```c\nvoid InsertSort(int A[],int n){\n    int i,j,low,high,mid;\n    for(i=2;i<=n;i++){           //依次将A[2]~A[n]插入到前面的已排序序列\n        A[0] = A[i];             //将A[i]暂存到A[0]\n        low = 1;                 //设置折半查找的范围\n        high = i - 1;            //设置折半查找的范围\n        while(low<=high){        //折半查找（默认递增有序）\n            mid = (low+high)/2;  //取中间点\n            if(A[mid]>A[0]){\n                high = mid - 1;  //查找左半子表\n            }else{\n                low = mid + 1;   //查找右半子表\n            }\n        }\n        for(j=i-1;j>=high+1;--j){\n            A[j+1] = A[j];       //统一后移元素，空出插入位置\n        }\n        A[high+1] = A[0];        //插入操作\n    }\n}\n```\n\n#### 5.希尔排序\n\n- 只适用于**顺序表**\n- 是否稳定：否\n\n```c\nvoid ShellSort(int A[],int n){\n    int i,j,dk;\n    for(dk=n/2;dk>=1;dk=dk/2){       //步长变化 \n        for(i=dk+1;i<=n;++i){\n            if(A[i]<A[i-dk]){        //需将A[i]插入有序增量字表\n                A[0] = A[i];         //暂存A[0]\n                for(j=i-dk;j>0 && A[0]<A[j];j=j-dk){\n                    A[j+dk] = A[j];  //记录后移，查找插入位置\n                }\n                A[j+dk] = A[0];      //插入\n            }//if\n        }\n    }\n}\n```\n\n#### 6.堆排序\n\n- 每排列一次，都有一个正确结点\n- 最好情况$O(nlog_2{n})$；平均情况$O(nlog_2{n})$；最坏情况$O(nlog_2{n})$\n- 是否稳定：否\n\n```c\nvoid BuildMaxHeap(int A[],int len){\n    for(int i=len/2;i>0;i--){//反复调整堆\n        HeadAdjust(A,i,len);\n    }\n}\nvoid HeadAdjust(int A[],int k,int len){\n    A[0] = A[k];//\n    for(int i=2*k;i<=len;i*=2){\n        if(i<len && A[i]<A[i+1]){\n            i++;//\n        }\n        if(A[0]>=A[i]){\n            break;//\n        }else{\n            A[k] = A[i];//\n            k = i;//\n        }\n    }\n    A[k] = A[0];//放入最终位置\n}\nvoid HeapSort(int A[],int len){\n    BuildMaxHeap(A,len);//建立初始堆\n    for(int i=len;i>1;i--){//n-1趟的交换和建堆\n        int temp = A[i];//堆顶和堆底元素交换\n        A[1] = A[i];\n        A[i] = temp;\n        HeadAdjust(A,1,i-1);//继续调整剩余元素\n    }\n}\n```\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\n  - 排序\ncategories:\n  - 代码\nkeywords: 排序算法，快排，堆排序\ndescription: 排序算法整理\nsummary: 排序算法整理\nabbrlink: 232f\ndate: 2020-09-13 16:31:22\npassword:\n---\n## 排序问题整理\n\n> - 排序的时候能用快速排序尽量用快排\n>\n> - 整理排序算法的复杂度以及优缺点\n\n#### 1.快速排序（交换排序）\n\n- 需要一个递归栈来保存信息\n- 最好情况$O(nlog_2{n})$；平均情况$O(nlog_2{n})$；最坏情况$O(n^{2})$\n- 空间复杂度：$O(log_2{n})$\n- 是否稳定：否（快的排序都不稳定）\n- 每排一次，枢轴被放入最终位置\n\n```c\nint Partition(int A[],int low,int high){     //一趟划分\n    int pivot = A[low];                      //将当前表中第一个元素设为枢轴，对表进行划分\n    int t = low;\n    while(low<high){\n        low++;\n        while(A[low]<=pivot){                //从前往后找到一个比枢轴大的数\n            low++;\n        }\n        while(A[high]>pivot){                //从后往前找到一个比枢轴小的数\n            high--;\n        }\n        if(low<high){\n            int w = A[low];                  //用临时变量w储存值，交换两个数\n        \tA[low] = A[high];                //用临时变量w储存值，交换两个数\n        \tA[high] = w;                     //用临时变量w储存值，交换两个数\n        }\n    }\n    A[t] = A[high];                          //找到枢轴的正确位置，交换这两个元素\n    A[high] = pivot;\n    return high;                             //返回枢轴正确的位置\n}\nvoid QuickSort(int &A[],int low,int high){   //开始快排\n    if(low<high){\n        int mid = Partition(A,low,high);\n        QuickSort(A,low,mid-1);              //枢轴左半边继续快排\n        QuickSort(A,mid+1,high);\n    }\n}\n```\n\n#### 2.冒泡排序（交换排序）\n\n> - 注意返回值类型以及函数以及flag的使用\n\n- 从后往前比较两两相邻元素的值，若为逆序，则交换他们，直到序列比较完成。这成为第一趟冒泡。\n- 结果是将最小的元素交换到待排序列的第一个位置\n- 下一趟冒泡时，前一趟确定的最小元素不再参与比较，这样最多$n-1$趟冒泡就能排好序\n- 最好情况：$O({n})$；平均情况：$O(n^{2})$；最坏情况：$O(n^{2})$\n- 是否稳定：是\n\n```c\nvoid BubbleSort(int A[],int n){\n    for(int i = 0; i < n-1; i++){\n        bool flag = false;\n        for(int j = n-1; j>i; j--){    //从后往前\n            if(A[j-1] > A[j]){\n                swap(A[j-1],A[j]);     //交换两个元素\n                flag = true;\n            }\n        }\n        if(flag == false){\n            return;                    //没有发生交换，这说明有序\n        }\n    }\n}\n//网上找的swap函数，仅供参考\nvoid swap(int *a,int *b)\n{\n    int temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n```\n\n#### 3.直接插入排序\n\n- 从前往后依次插入到前面的序列\n- 最好情况是表中元素已经有序，此时每插入一个元素，都只需比较一次而不用移动元素\n- 最好情况：$O({n})$；平均情况：$O(n^{2})$；最坏情况：$O(n^{2})$\n- 是否稳定：是\n\n```c\nvoid InserSort(int A[],int n){\n    int i,j;\n    for(i=2;i<n;i++){                  //依次将A[2]~A[n]插入到前面已排序序列\n        if(A[i]<A[i-1]){               //若A[i]关键词小于其前驱，将A[i]插入有序表\n            A[0] = A[i];//复制为哨兵，A[0]不存放元素\n            for(j=i-1;A[0]<A[j];j--){//从后往前查找待插入位置\n                A[j+1] = A[j];//向后挪位\n            }\n            A[j+1] = A[0];//复制到插入位置\n        }\n    }\n}\n```\n\n#### 4.折半插入排序\n\n- 只适用于**顺序表**\n- 最好情况：$O({n})$；平均情况：$O(n^{2})$；最坏情况：$O(n^{2})$\n- 是否稳定：是\n\n```c\nvoid InsertSort(int A[],int n){\n    int i,j,low,high,mid;\n    for(i=2;i<=n;i++){           //依次将A[2]~A[n]插入到前面的已排序序列\n        A[0] = A[i];             //将A[i]暂存到A[0]\n        low = 1;                 //设置折半查找的范围\n        high = i - 1;            //设置折半查找的范围\n        while(low<=high){        //折半查找（默认递增有序）\n            mid = (low+high)/2;  //取中间点\n            if(A[mid]>A[0]){\n                high = mid - 1;  //查找左半子表\n            }else{\n                low = mid + 1;   //查找右半子表\n            }\n        }\n        for(j=i-1;j>=high+1;--j){\n            A[j+1] = A[j];       //统一后移元素，空出插入位置\n        }\n        A[high+1] = A[0];        //插入操作\n    }\n}\n```\n\n#### 5.希尔排序\n\n- 只适用于**顺序表**\n- 是否稳定：否\n\n```c\nvoid ShellSort(int A[],int n){\n    int i,j,dk;\n    for(dk=n/2;dk>=1;dk=dk/2){       //步长变化 \n        for(i=dk+1;i<=n;++i){\n            if(A[i]<A[i-dk]){        //需将A[i]插入有序增量字表\n                A[0] = A[i];         //暂存A[0]\n                for(j=i-dk;j>0 && A[0]<A[j];j=j-dk){\n                    A[j+dk] = A[j];  //记录后移，查找插入位置\n                }\n                A[j+dk] = A[0];      //插入\n            }//if\n        }\n    }\n}\n```\n\n#### 6.堆排序\n\n- 每排列一次，都有一个正确结点\n- 最好情况$O(nlog_2{n})$；平均情况$O(nlog_2{n})$；最坏情况$O(nlog_2{n})$\n- 是否稳定：否\n\n```c\nvoid BuildMaxHeap(int A[],int len){\n    for(int i=len/2;i>0;i--){//反复调整堆\n        HeadAdjust(A,i,len);\n    }\n}\nvoid HeadAdjust(int A[],int k,int len){\n    A[0] = A[k];//\n    for(int i=2*k;i<=len;i*=2){\n        if(i<len && A[i]<A[i+1]){\n            i++;//\n        }\n        if(A[0]>=A[i]){\n            break;//\n        }else{\n            A[k] = A[i];//\n            k = i;//\n        }\n    }\n    A[k] = A[0];//放入最终位置\n}\nvoid HeapSort(int A[],int len){\n    BuildMaxHeap(A,len);//建立初始堆\n    for(int i=len;i>1;i--){//n-1趟的交换和建堆\n        int temp = A[i];//堆顶和堆底元素交换\n        A[1] = A[i];\n        A[i] = temp;\n        HeadAdjust(A,1,i-1);//继续调整剩余元素\n    }\n}\n```\n","slug":"排序算法","published":1,"updated":"2020-09-18T09:44:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdig0031zl9karjwd6c0","content":"<h2 id=\"排序问题整理\"><a class=\"markdownIt-Anchor\" href=\"#排序问题整理\"></a> 排序问题整理</h2>\n<blockquote>\n<ul>\n<li>\n<p>排序的时候能用快速排序尽量用快排</p>\n</li>\n<li>\n<p>整理排序算法的复杂度以及优缺点</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"1快速排序交换排序\"><a class=\"markdownIt-Anchor\" href=\"#1快速排序交换排序\"></a> 1.快速排序（交换排序）</h4>\n<ul>\n<li>需要一个递归栈来保存信息</li>\n<li>最好情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：否（快的排序都不稳定）</li>\n<li>每排一次，枢轴被放入最终位置</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Partition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{     <span class=\"hljs-comment\">//一趟划分</span>\n    <span class=\"hljs-keyword\">int</span> pivot = A[low];                      <span class=\"hljs-comment\">//将当前表中第一个元素设为枢轴，对表进行划分</span>\n    <span class=\"hljs-keyword\">int</span> t = low;\n    <span class=\"hljs-keyword\">while</span>(low&lt;high){\n        low++;\n        <span class=\"hljs-keyword\">while</span>(A[low]&lt;=pivot){                <span class=\"hljs-comment\">//从前往后找到一个比枢轴大的数</span>\n            low++;\n        }\n        <span class=\"hljs-keyword\">while</span>(A[high]&gt;pivot){                <span class=\"hljs-comment\">//从后往前找到一个比枢轴小的数</span>\n            high--;\n        }\n        <span class=\"hljs-keyword\">if</span>(low&lt;high){\n            <span class=\"hljs-keyword\">int</span> w = A[low];                  <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[low] = A[high];                <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[high] = w;                     <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        }\n    }\n    A[t] = A[high];                          <span class=\"hljs-comment\">//找到枢轴的正确位置，交换这两个元素</span>\n    A[high] = pivot;\n    <span class=\"hljs-keyword\">return</span> high;                             <span class=\"hljs-comment\">//返回枢轴正确的位置</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">QuickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> &amp;A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{   <span class=\"hljs-comment\">//开始快排</span>\n    <span class=\"hljs-keyword\">if</span>(low&lt;high){\n        <span class=\"hljs-keyword\">int</span> mid = Partition(A,low,high);\n        QuickSort(A,low,mid<span class=\"hljs-number\">-1</span>);              <span class=\"hljs-comment\">//枢轴左半边继续快排</span>\n        QuickSort(A,mid+<span class=\"hljs-number\">1</span>,high);\n    }\n}\n</code></pre>\n<h4 id=\"2冒泡排序交换排序\"><a class=\"markdownIt-Anchor\" href=\"#2冒泡排序交换排序\"></a> 2.冒泡排序（交换排序）</h4>\n<blockquote>\n<ul>\n<li>注意返回值类型以及函数以及flag的使用</li>\n</ul>\n</blockquote>\n<ul>\n<li>从后往前比较两两相邻元素的值，若为逆序，则交换他们，直到序列比较完成。这成为第一趟冒泡。</li>\n<li>结果是将最小的元素交换到待排序列的第一个位置</li>\n<li>下一趟冒泡时，前一趟确定的最小元素不再参与比较，这样最多<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>趟冒泡就能排好序</li>\n<li>最好情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O({n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：是</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BubbleSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n<span class=\"hljs-number\">-1</span>; i++){\n        <span class=\"hljs-keyword\">bool</span> flag = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = n<span class=\"hljs-number\">-1</span>; j&gt;i; j--){    <span class=\"hljs-comment\">//从后往前</span>\n            <span class=\"hljs-keyword\">if</span>(A[j<span class=\"hljs-number\">-1</span>] &gt; A[j]){\n                swap(A[j<span class=\"hljs-number\">-1</span>],A[j]);     <span class=\"hljs-comment\">//交换两个元素</span>\n                flag = <span class=\"hljs-literal\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-literal\">false</span>){\n            <span class=\"hljs-keyword\">return</span>;                    <span class=\"hljs-comment\">//没有发生交换，这说明有序</span>\n        }\n    }\n}\n<span class=\"hljs-comment\">//网上找的swap函数，仅供参考</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *a,<span class=\"hljs-keyword\">int</span> *b)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n</code></pre>\n<h4 id=\"3直接插入排序\"><a class=\"markdownIt-Anchor\" href=\"#3直接插入排序\"></a> 3.直接插入排序</h4>\n<ul>\n<li>从前往后依次插入到前面的序列</li>\n<li>最好情况是表中元素已经有序，此时每插入一个元素，都只需比较一次而不用移动元素</li>\n<li>最好情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O({n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：是</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InserSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j;\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">2</span>;i&lt;n;i++){                  <span class=\"hljs-comment\">//依次将A[2]~A[n]插入到前面已排序序列</span>\n        <span class=\"hljs-keyword\">if</span>(A[i]&lt;A[i<span class=\"hljs-number\">-1</span>]){               <span class=\"hljs-comment\">//若A[i]关键词小于其前驱，将A[i]插入有序表</span>\n            A[<span class=\"hljs-number\">0</span>] = A[i];<span class=\"hljs-comment\">//复制为哨兵，A[0]不存放元素</span>\n            <span class=\"hljs-keyword\">for</span>(j=i<span class=\"hljs-number\">-1</span>;A[<span class=\"hljs-number\">0</span>]&lt;A[j];j--){<span class=\"hljs-comment\">//从后往前查找待插入位置</span>\n                A[j+<span class=\"hljs-number\">1</span>] = A[j];<span class=\"hljs-comment\">//向后挪位</span>\n            }\n            A[j+<span class=\"hljs-number\">1</span>] = A[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//复制到插入位置</span>\n        }\n    }\n}\n</code></pre>\n<h4 id=\"4折半插入排序\"><a class=\"markdownIt-Anchor\" href=\"#4折半插入排序\"></a> 4.折半插入排序</h4>\n<ul>\n<li>只适用于<strong>顺序表</strong></li>\n<li>最好情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O({n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：是</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InsertSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j,low,high,mid;\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">2</span>;i&lt;=n;i++){           <span class=\"hljs-comment\">//依次将A[2]~A[n]插入到前面的已排序序列</span>\n        A[<span class=\"hljs-number\">0</span>] = A[i];             <span class=\"hljs-comment\">//将A[i]暂存到A[0]</span>\n        low = <span class=\"hljs-number\">1</span>;                 <span class=\"hljs-comment\">//设置折半查找的范围</span>\n        high = i - <span class=\"hljs-number\">1</span>;            <span class=\"hljs-comment\">//设置折半查找的范围</span>\n        <span class=\"hljs-keyword\">while</span>(low&lt;=high){        <span class=\"hljs-comment\">//折半查找（默认递增有序）</span>\n            mid = (low+high)/<span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">//取中间点</span>\n            <span class=\"hljs-keyword\">if</span>(A[mid]&gt;A[<span class=\"hljs-number\">0</span>]){\n                high = mid - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//查找左半子表</span>\n            }<span class=\"hljs-keyword\">else</span>{\n                low = mid + <span class=\"hljs-number\">1</span>;   <span class=\"hljs-comment\">//查找右半子表</span>\n            }\n        }\n        <span class=\"hljs-keyword\">for</span>(j=i<span class=\"hljs-number\">-1</span>;j&gt;=high+<span class=\"hljs-number\">1</span>;--j){\n            A[j+<span class=\"hljs-number\">1</span>] = A[j];       <span class=\"hljs-comment\">//统一后移元素，空出插入位置</span>\n        }\n        A[high+<span class=\"hljs-number\">1</span>] = A[<span class=\"hljs-number\">0</span>];        <span class=\"hljs-comment\">//插入操作</span>\n    }\n}\n</code></pre>\n<h4 id=\"5希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#5希尔排序\"></a> 5.希尔排序</h4>\n<ul>\n<li>只适用于<strong>顺序表</strong></li>\n<li>是否稳定：否</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ShellSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j,dk;\n    <span class=\"hljs-keyword\">for</span>(dk=n/<span class=\"hljs-number\">2</span>;dk&gt;=<span class=\"hljs-number\">1</span>;dk=dk/<span class=\"hljs-number\">2</span>){       <span class=\"hljs-comment\">//步长变化 </span>\n        <span class=\"hljs-keyword\">for</span>(i=dk+<span class=\"hljs-number\">1</span>;i&lt;=n;++i){\n            <span class=\"hljs-keyword\">if</span>(A[i]&lt;A[i-dk]){        <span class=\"hljs-comment\">//需将A[i]插入有序增量字表</span>\n                A[<span class=\"hljs-number\">0</span>] = A[i];         <span class=\"hljs-comment\">//暂存A[0]</span>\n                <span class=\"hljs-keyword\">for</span>(j=i-dk;j&gt;<span class=\"hljs-number\">0</span> &amp;&amp; A[<span class=\"hljs-number\">0</span>]&lt;A[j];j=j-dk){\n                    A[j+dk] = A[j];  <span class=\"hljs-comment\">//记录后移，查找插入位置</span>\n                }\n                A[j+dk] = A[<span class=\"hljs-number\">0</span>];      <span class=\"hljs-comment\">//插入</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }\n}\n</code></pre>\n<h4 id=\"6堆排序\"><a class=\"markdownIt-Anchor\" href=\"#6堆排序\"></a> 6.堆排序</h4>\n<ul>\n<li>每排列一次，都有一个正确结点</li>\n<li>最好情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：否</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BuildMaxHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=len/<span class=\"hljs-number\">2</span>;i&gt;<span class=\"hljs-number\">0</span>;i--){<span class=\"hljs-comment\">//反复调整堆</span>\n        HeadAdjust(A,i,len);\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HeadAdjust</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> k,<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    A[<span class=\"hljs-number\">0</span>] = A[k];<span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">2</span>*k;i&lt;=len;i*=<span class=\"hljs-number\">2</span>){\n        <span class=\"hljs-keyword\">if</span>(i&lt;len &amp;&amp; A[i]&lt;A[i+<span class=\"hljs-number\">1</span>]){\n            i++;<span class=\"hljs-comment\">//</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(A[<span class=\"hljs-number\">0</span>]&gt;=A[i]){\n            <span class=\"hljs-keyword\">break</span>;<span class=\"hljs-comment\">//</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            A[k] = A[i];<span class=\"hljs-comment\">//</span>\n            k = i;<span class=\"hljs-comment\">//</span>\n        }\n    }\n    A[k] = A[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//放入最终位置</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HeapSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    BuildMaxHeap(A,len);<span class=\"hljs-comment\">//建立初始堆</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=len;i&gt;<span class=\"hljs-number\">1</span>;i--){<span class=\"hljs-comment\">//n-1趟的交换和建堆</span>\n        <span class=\"hljs-keyword\">int</span> temp = A[i];<span class=\"hljs-comment\">//堆顶和堆底元素交换</span>\n        A[<span class=\"hljs-number\">1</span>] = A[i];\n        A[i] = temp;\n        HeadAdjust(A,<span class=\"hljs-number\">1</span>,i<span class=\"hljs-number\">-1</span>);<span class=\"hljs-comment\">//继续调整剩余元素</span>\n    }\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"排序问题整理\"><a class=\"markdownIt-Anchor\" href=\"#排序问题整理\"></a> 排序问题整理</h2>\n<blockquote>\n<ul>\n<li>\n<p>排序的时候能用快速排序尽量用快排</p>\n</li>\n<li>\n<p>整理排序算法的复杂度以及优缺点</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"1快速排序交换排序\"><a class=\"markdownIt-Anchor\" href=\"#1快速排序交换排序\"></a> 1.快速排序（交换排序）</h4>\n<ul>\n<li>需要一个递归栈来保存信息</li>\n<li>最好情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：否（快的排序都不稳定）</li>\n<li>每排一次，枢轴被放入最终位置</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Partition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{     <span class=\"hljs-comment\">//一趟划分</span>\n    <span class=\"hljs-keyword\">int</span> pivot = A[low];                      <span class=\"hljs-comment\">//将当前表中第一个元素设为枢轴，对表进行划分</span>\n    <span class=\"hljs-keyword\">int</span> t = low;\n    <span class=\"hljs-keyword\">while</span>(low&lt;high){\n        low++;\n        <span class=\"hljs-keyword\">while</span>(A[low]&lt;=pivot){                <span class=\"hljs-comment\">//从前往后找到一个比枢轴大的数</span>\n            low++;\n        }\n        <span class=\"hljs-keyword\">while</span>(A[high]&gt;pivot){                <span class=\"hljs-comment\">//从后往前找到一个比枢轴小的数</span>\n            high--;\n        }\n        <span class=\"hljs-keyword\">if</span>(low&lt;high){\n            <span class=\"hljs-keyword\">int</span> w = A[low];                  <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[low] = A[high];                <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        \tA[high] = w;                     <span class=\"hljs-comment\">//用临时变量w储存值，交换两个数</span>\n        }\n    }\n    A[t] = A[high];                          <span class=\"hljs-comment\">//找到枢轴的正确位置，交换这两个元素</span>\n    A[high] = pivot;\n    <span class=\"hljs-keyword\">return</span> high;                             <span class=\"hljs-comment\">//返回枢轴正确的位置</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">QuickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> &amp;A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>{   <span class=\"hljs-comment\">//开始快排</span>\n    <span class=\"hljs-keyword\">if</span>(low&lt;high){\n        <span class=\"hljs-keyword\">int</span> mid = Partition(A,low,high);\n        QuickSort(A,low,mid<span class=\"hljs-number\">-1</span>);              <span class=\"hljs-comment\">//枢轴左半边继续快排</span>\n        QuickSort(A,mid+<span class=\"hljs-number\">1</span>,high);\n    }\n}\n</code></pre>\n<h4 id=\"2冒泡排序交换排序\"><a class=\"markdownIt-Anchor\" href=\"#2冒泡排序交换排序\"></a> 2.冒泡排序（交换排序）</h4>\n<blockquote>\n<ul>\n<li>注意返回值类型以及函数以及flag的使用</li>\n</ul>\n</blockquote>\n<ul>\n<li>从后往前比较两两相邻元素的值，若为逆序，则交换他们，直到序列比较完成。这成为第一趟冒泡。</li>\n<li>结果是将最小的元素交换到待排序列的第一个位置</li>\n<li>下一趟冒泡时，前一趟确定的最小元素不再参与比较，这样最多<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>趟冒泡就能排好序</li>\n<li>最好情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O({n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：是</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BubbleSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n<span class=\"hljs-number\">-1</span>; i++){\n        <span class=\"hljs-keyword\">bool</span> flag = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = n<span class=\"hljs-number\">-1</span>; j&gt;i; j--){    <span class=\"hljs-comment\">//从后往前</span>\n            <span class=\"hljs-keyword\">if</span>(A[j<span class=\"hljs-number\">-1</span>] &gt; A[j]){\n                swap(A[j<span class=\"hljs-number\">-1</span>],A[j]);     <span class=\"hljs-comment\">//交换两个元素</span>\n                flag = <span class=\"hljs-literal\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-literal\">false</span>){\n            <span class=\"hljs-keyword\">return</span>;                    <span class=\"hljs-comment\">//没有发生交换，这说明有序</span>\n        }\n    }\n}\n<span class=\"hljs-comment\">//网上找的swap函数，仅供参考</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *a,<span class=\"hljs-keyword\">int</span> *b)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n</code></pre>\n<h4 id=\"3直接插入排序\"><a class=\"markdownIt-Anchor\" href=\"#3直接插入排序\"></a> 3.直接插入排序</h4>\n<ul>\n<li>从前往后依次插入到前面的序列</li>\n<li>最好情况是表中元素已经有序，此时每插入一个元素，都只需比较一次而不用移动元素</li>\n<li>最好情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O({n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：是</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InserSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j;\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">2</span>;i&lt;n;i++){                  <span class=\"hljs-comment\">//依次将A[2]~A[n]插入到前面已排序序列</span>\n        <span class=\"hljs-keyword\">if</span>(A[i]&lt;A[i<span class=\"hljs-number\">-1</span>]){               <span class=\"hljs-comment\">//若A[i]关键词小于其前驱，将A[i]插入有序表</span>\n            A[<span class=\"hljs-number\">0</span>] = A[i];<span class=\"hljs-comment\">//复制为哨兵，A[0]不存放元素</span>\n            <span class=\"hljs-keyword\">for</span>(j=i<span class=\"hljs-number\">-1</span>;A[<span class=\"hljs-number\">0</span>]&lt;A[j];j--){<span class=\"hljs-comment\">//从后往前查找待插入位置</span>\n                A[j+<span class=\"hljs-number\">1</span>] = A[j];<span class=\"hljs-comment\">//向后挪位</span>\n            }\n            A[j+<span class=\"hljs-number\">1</span>] = A[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//复制到插入位置</span>\n        }\n    }\n}\n</code></pre>\n<h4 id=\"4折半插入排序\"><a class=\"markdownIt-Anchor\" href=\"#4折半插入排序\"></a> 4.折半插入排序</h4>\n<ul>\n<li>只适用于<strong>顺序表</strong></li>\n<li>最好情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O({n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：是</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InsertSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j,low,high,mid;\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">2</span>;i&lt;=n;i++){           <span class=\"hljs-comment\">//依次将A[2]~A[n]插入到前面的已排序序列</span>\n        A[<span class=\"hljs-number\">0</span>] = A[i];             <span class=\"hljs-comment\">//将A[i]暂存到A[0]</span>\n        low = <span class=\"hljs-number\">1</span>;                 <span class=\"hljs-comment\">//设置折半查找的范围</span>\n        high = i - <span class=\"hljs-number\">1</span>;            <span class=\"hljs-comment\">//设置折半查找的范围</span>\n        <span class=\"hljs-keyword\">while</span>(low&lt;=high){        <span class=\"hljs-comment\">//折半查找（默认递增有序）</span>\n            mid = (low+high)/<span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">//取中间点</span>\n            <span class=\"hljs-keyword\">if</span>(A[mid]&gt;A[<span class=\"hljs-number\">0</span>]){\n                high = mid - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//查找左半子表</span>\n            }<span class=\"hljs-keyword\">else</span>{\n                low = mid + <span class=\"hljs-number\">1</span>;   <span class=\"hljs-comment\">//查找右半子表</span>\n            }\n        }\n        <span class=\"hljs-keyword\">for</span>(j=i<span class=\"hljs-number\">-1</span>;j&gt;=high+<span class=\"hljs-number\">1</span>;--j){\n            A[j+<span class=\"hljs-number\">1</span>] = A[j];       <span class=\"hljs-comment\">//统一后移元素，空出插入位置</span>\n        }\n        A[high+<span class=\"hljs-number\">1</span>] = A[<span class=\"hljs-number\">0</span>];        <span class=\"hljs-comment\">//插入操作</span>\n    }\n}\n</code></pre>\n<h4 id=\"5希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#5希尔排序\"></a> 5.希尔排序</h4>\n<ul>\n<li>只适用于<strong>顺序表</strong></li>\n<li>是否稳定：否</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ShellSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i,j,dk;\n    <span class=\"hljs-keyword\">for</span>(dk=n/<span class=\"hljs-number\">2</span>;dk&gt;=<span class=\"hljs-number\">1</span>;dk=dk/<span class=\"hljs-number\">2</span>){       <span class=\"hljs-comment\">//步长变化 </span>\n        <span class=\"hljs-keyword\">for</span>(i=dk+<span class=\"hljs-number\">1</span>;i&lt;=n;++i){\n            <span class=\"hljs-keyword\">if</span>(A[i]&lt;A[i-dk]){        <span class=\"hljs-comment\">//需将A[i]插入有序增量字表</span>\n                A[<span class=\"hljs-number\">0</span>] = A[i];         <span class=\"hljs-comment\">//暂存A[0]</span>\n                <span class=\"hljs-keyword\">for</span>(j=i-dk;j&gt;<span class=\"hljs-number\">0</span> &amp;&amp; A[<span class=\"hljs-number\">0</span>]&lt;A[j];j=j-dk){\n                    A[j+dk] = A[j];  <span class=\"hljs-comment\">//记录后移，查找插入位置</span>\n                }\n                A[j+dk] = A[<span class=\"hljs-number\">0</span>];      <span class=\"hljs-comment\">//插入</span>\n            }<span class=\"hljs-comment\">//if</span>\n        }\n    }\n}\n</code></pre>\n<h4 id=\"6堆排序\"><a class=\"markdownIt-Anchor\" href=\"#6堆排序\"></a> 6.堆排序</h4>\n<ul>\n<li>每排列一次，都有一个正确结点</li>\n<li>最好情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；平均情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span>；最坏情况<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>是否稳定：否</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BuildMaxHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=len/<span class=\"hljs-number\">2</span>;i&gt;<span class=\"hljs-number\">0</span>;i--){<span class=\"hljs-comment\">//反复调整堆</span>\n        HeadAdjust(A,i,len);\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HeadAdjust</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> k,<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    A[<span class=\"hljs-number\">0</span>] = A[k];<span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">2</span>*k;i&lt;=len;i*=<span class=\"hljs-number\">2</span>){\n        <span class=\"hljs-keyword\">if</span>(i&lt;len &amp;&amp; A[i]&lt;A[i+<span class=\"hljs-number\">1</span>]){\n            i++;<span class=\"hljs-comment\">//</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(A[<span class=\"hljs-number\">0</span>]&gt;=A[i]){\n            <span class=\"hljs-keyword\">break</span>;<span class=\"hljs-comment\">//</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            A[k] = A[i];<span class=\"hljs-comment\">//</span>\n            k = i;<span class=\"hljs-comment\">//</span>\n        }\n    }\n    A[k] = A[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//放入最终位置</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HeapSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> A[],<span class=\"hljs-keyword\">int</span> len)</span></span>{\n    BuildMaxHeap(A,len);<span class=\"hljs-comment\">//建立初始堆</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=len;i&gt;<span class=\"hljs-number\">1</span>;i--){<span class=\"hljs-comment\">//n-1趟的交换和建堆</span>\n        <span class=\"hljs-keyword\">int</span> temp = A[i];<span class=\"hljs-comment\">//堆顶和堆底元素交换</span>\n        A[<span class=\"hljs-number\">1</span>] = A[i];\n        A[i] = temp;\n        HeadAdjust(A,<span class=\"hljs-number\">1</span>,i<span class=\"hljs-number\">-1</span>);<span class=\"hljs-comment\">//继续调整剩余元素</span>\n    }\n}\n</code></pre>\n"},{"title":"树相关代码","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"树代码整理","abbrlink":"3849","date":"2020-09-05T10:46:17.000Z","password":null,"keywords":["HEXO","HEXO SEO优化"],"description":"总结一下使用Hexo搭建博客后，SEO优化方案的总结，后期会不定期更新。","_content":"## 树相关代码\n\n> #### 1. 二叉树链式存储结构描述\n\n```c\ntypedef struct BiTNode{\n    int data;                        //数据域\n    struct BiTree *lchild, *rchild;  //左、右孩子指针\n}BiTNode, *BiTree;\n```\n\n> #### 2. 先序遍历\n\n```c\nvoid PreOrder(BiTree T){\n    if(T != NULL){\n        visit(T);             //访问根节点\n        PreOrder(T->lchild);  //递归遍历左子树\n        PreOrder(T->rchild);  //递归遍历左子树\n    }\n}\n```\n\n> #### 3. 中序遍历\n\n```c\nvoid PreOrder(BiTree T){\n    if(T != NULL){\n        PreOrder(T->lchild);  //递归遍历左子树\n        visit(T);             //访问根节点\n        PreOrder(T->rchild);  //递归遍历左子树\n    }\n}\n```\n\n> #### 4. 后序遍历\n\n```c\nvoid PreOrder(BiTree T){\n    if(T != NULL){\n        PreOrder(T->lchild);  //递归遍历左子树\n        PreOrder(T->rchild);  //递归遍历左子树\n        visit(T);             //访问根节点\n    }\n}\n```\n\n> #### 5. 层次遍历（层次遍历是利用**队列**作为辅助结构，并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的，其他遍历方式均为判定结点不为空或者栈不为空）\n\n```c\nvoid LevelOrder(BiTree T){\n    BiTree Queue[maxsize];              //初始化辅助队列\n    int front = -1, rear = -1;\n    BiTree p;                           //p用于遍历二叉树\n    Queue[++rear] = T;                  //将根节点入队Q\n    while(front!=rear){                 //队列不为空则循环\n        p = Queue[++front];             //队头结点出队\n        visit(p);                       //访问出队结点\n        if(p->lchild != NULL){\n            Queue[++rear] = p->lchild;  //左子树不为空，则左子树根结点入队\n        }\n        if(p->rchild != NULL){\n            Queue[++rear] = p->rchild;  //右子树不为空，则右子树根节点入队\n        }\n    }   \n}\n```\n\n> #### 6. 先序非递归（使用栈来辅助存储的，切勿与层次遍历搞混了）\n\n```c\nvoid PreOrder(BiTree T){\n    BiTree Stack[maxsize];     //初始化辅助栈S\n    int top = -1;              //栈的下标\n    BiTree p = T;              //p是遍历指针\n    while(top!=-1 || p!=NULL){ //栈不空或p不为空时，开始循环\n        if(p){                 //一路向左\n            visit(p);          //访问当前结点\n            Stack[++top] = p;  //入栈元素\n            p = p -> lchild;   //左孩子不为空，一直向左走\n        }else{                 //出栈，并转向出栈结点的右子树\n            p = Stack[top--];  //栈顶元素出栈\n            p = p -> rchild;   //向右子树走，p赋值为当前结点的右孩子\n                               //返回while循环继续进入if-else语句\n        }\n    }\n}\n```\n\n> #### 7. 中序非递归（使用栈来辅助储存的。先序与中序的区别便是：先序是先访问再压栈，中序是出栈后再访问）\n\n```c\nvoid InOrder(BiTree T){\n    InitStack(S);              //初始化栈S\n    BiTree p = T;              //p是遍历指针\n    while(p || !IsEmpty){      //栈不空或p不为空时，开始循环\n        if(p){                 //一路向左\n            Push(S,p);         //入栈元素\n            p = p -> lchild;   //左孩子不为空，一直向左走\n        }else{                 //出栈，并转向出栈结点的右子树\n            Pop(S,p);          //栈顶元素出栈\n            visit(p);          //访问出栈结点\n            p = p -> rchild;   //向右子树走，p赋值为当前结点的右孩子\n                               //返回while循环继续进入if-else语句\n        }\n    }\n}\n```\n\n> #### 8. 后序非递归（后序非递归遍历是最重要的。一定要记住当遍历到某一结点时，栈里存在的元素是其所有的祖先结点）\n\n```c\nvoid PostOrder(BiTree T){\n    InitStack(S);\n    p = T;                                      //p是遍历指针\n    r = NULL;\n    while(p || !IsEmpty(S)){\n        if(p){                                  //走到最左边\n            push(S,p); \n            p = p -> lchild;\n        }else{                                  //向右\n            GetTop(T,p);                        //读栈顶结点（非出栈）\n            if(p->rchild && p->rchild != r){    //若右子树存在，且未被访问过\n                p = p -> rchild;                //向右转\n                push(S,p);                      //压入栈\n                p = p -> lchild;                //再走到最走\n            }else{                              //否则，弹出结点并访问\n                pop(S,p);                       //将结点弹出\n                visit(p->data);                 //访问该节点\n                r = p;                          //记录最近访问过的结点\n                p = NULL;                       //结点访问完后，重置p指针\n            }\n        }//else\n    }//while\n}\n```\n\n> #### 9.递归求树的高度\n\n- 写递归时首先需要考虑的便是递归运行到什么时候终止\n\n```c\nint Btdepth(BiTree T){\n    if(T == NULL){\n        return 0;\n    }\n    int ldep = Btdepth(T->lchild);\n    int rdep = Btdepth(T->rchild);\n    if(ldep > rdep){\n        return ldep + 1;\n    }else{\n        return rdep + 1;\n    }\n}\n```\n\n> #### 10.递归交换二叉树的左右子树\n\n- 此代码暗含着结点为递归出口\n\n```c\nvoid swap(BiTree b){\n//本算法递归的交换二叉树的左、右子树\n    if(b){\n        swap(b->lchild);\n        swap(b->rchild);\n        BiTree temp = b -> lchild;\n        b->lchild = b->rhcild;\n        b->rchild = temp;\n    }\n}\n```\n\n> #### 11.递归删除以某一结点为根节点的子树并释放其存储空间\n\n- 此代码暗含着节点为空时为递归出口\n\n```c\nvoid DeleteXTree(BiTree bt){\n    if(bt){\n        DeleteXTree(bt->lchild);\n        DeleteXTree(bt->rchild);\n        free(bt);\n    }\n}\n```\n\n> #### 12.利用层次遍历求树的高度（这里还没看）\n\n```c\nint LeverOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=-1,rear=-1,level=0,last=0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front != rear){\n        p = Queue[++front];\n        if(p->lchild!=NULL){\n            Queue[++rear] = P->lchild;\n        }\n        if(p->lchild!=NULL){\n            Queue[++rear] = P->rchild;\n        }\n        if(front==last){\n            level++;\n            last = rear;\n        }\n    }\n}\n```\n\n> #### 13.利用层次遍历求树的宽度\n\n```c\nint LevelOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=-1,width=last=max=0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        width++;\n        if(p->lchild!=NULL){\n            Queue[++rear] = p->lchild;\n        }\n        if(p->rchild!=NULL){\n            Queue[++rear] = p->rchild;\n        }\n        if(front == last){\n            if(max < width){\n                max = width;\n            }\n            last = rear;\n        }\n    }\n    return max;\n}\n```\n\n> #### 14.求二叉树中叶子结点的个数\n\n```c\nint LevelOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=-1,count=0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        if(p->lchild == NUll && p->rchild == NULL){\n            count++;\n        }\n        if(p->lchild != NUll){\n            Queue[++rear] = p->lchild;\n        }\n        if(p->rchild != NUll){\n            Queue[++rear] = p->rchild;\n        }\n    }\n    return count;\n}\n```\n\n> #### 15.求树中独生叶结点的个数（既是叶结点又无兄弟结点）\n\n```c\nint LevelOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=-1;\n    int num = 0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        if(p->lchild != NUll && p->rchild == NULL){\n            if(p->lchild->lchild == NUll && p->lchild->rchild == NULL){\n                num++;\n            }\n        }\n        if(p->lchild == NUll && p->rchild != NULL){\n            if(p->rchild->lchild == NUll && p->rchild->rchild == NULL){\n                num++;\n            }\n        }\n        if(p->lchild != NUll){\n            Queue[++rear] = p->lchild;\n        }\n        if(p->rchild != NUll){\n            Queue[++rear] = p->rchild;\n        }\n    }\n    if(T->lchild == NULL && T-rchild == NULL){\n        num++\n    }\n    return num;\n}\n```\n\n> #### 16.求一棵二叉树是否为平衡二叉树\n\n```c\nint High(BiTree T){\n    if(T == NULL){\n        return 0;\n    }\n    int llen = High(T->lchild);\n    int rlen = High(T->rchild);\n    if(llen >= rlen){\n        return llen+1;\n    }else{\n        return rlen+1;\n    }\n}\n\nbool PostOrder1(BiTree T){\n    BiTree Stack[maxsize];\n    int top = -1;\n    BiTree p = T,r = NULL;//p为遍历二叉树指针，r指向最近访问结点\n    while(p!=NULL || top!=-1){\n        if(p!=NULL){\n            Stack[++top] = p;\n            p = p->lchild;\n        }else{\n            p = Stack[top];\n            if(p->rchild!=NULL && p->rchild!=r){//p的右孩子不为空，且未被访问过\n                p = p->rchild;\n                Stack[++top] = p;\n                p = p->lchild;\n            }else{\n                p = Stack[top--];\n                if(abs(High(p->lchild)-High(p->rchild))>1){\n                    return false;\n                }\n                r = p;\n                p = NULL;\n            }\n        }\n    }\n    return true;\n}\n```\n\n> #### 17.给出二叉树的自下而上、从右到左的层次遍历算法\n\n```c\nvoid InverLevel(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=0;\n    BiTree Stack[maxsize];\n    int top=-1;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        Stack[++top] = p;\n        if(p->lchild！= NULL){\n            Queue[++rear] = p;\n        }\n        if(p->rchild！= NULL){\n            Queue[++rear] = p;\n        }\n    }\n    while(top!=-1){\n        p = Stack[top--];\n        Visit(p);\n    }\n}\n```\n\n> #### 18.线索二叉树的构造，结构描述\n\n- 对于二叉树的线索化，实质上就是遍历一次二叉树，只是在遍历的过程中，检查当前结点左右指针域是否为空，若为空，讲他们改为指向前驱结点或后继结点的线索\n- ltag=0，lchild域指示结点的左孩子；ltag=1，lchild域指示结点的前驱\n- ltag=0，rchild域指示结点的右孩子；ltag=1，rchild域指示结点的后继\n\n```c\ntypedef struct ThreadNode{\n    int data;                            //数据元素\n    struct ThreadNode *lchild,*rchild;   //左、右孩子指针\n    int ltag,rtag;                       //左、右线索标志\n}ThreadNode,*ThreadTree;\n```\n\n> #### 19.中序二叉树线索化\n\n```c\nvoid InThread(ThreadTree &p, ThreadTree &pre){\n    if(p!=NULL){\n        Inthread(p->lchild,pre);\n        if(p->lchild == NULL){\n            p->lchild = pre;\n            p->ltag = 1;\n        }\n        if(pre!=NULL && pre->rchild == NULL){\n            pre->rchild = p;\n            pre->rtag = 1;\n        }\n        pre = p;\n        InThread(pre->rchild,pre);\n    }\n}\n```\n\n> #### 20.二叉排序树的查找\n\n- 二叉排序树：左＜根＜右\n\n```c\nBSTNode *BST_Search(BiTree T,int key){\n    p = NULL;\n    while(T!=NULL && key!=T-data){\n        p = NULL;\n        if(key<T->data){\n            T = T->lchild;\n        }else{\n            T = T->rchild;\n        }\n    }\n    return T;\n}\n```\n\n> #### 21.二叉排序树的插入\n\n```c\nBSTNode *BST_Search(BiTree T,int key){\n    p = NULL;\n    while(T!=NULL && key!=T-data){\n        p = NULL;\n        if(key<T->data){\n            T = T->lchild;\n        }else{\n            T = T->rchild;\n        }\n    }\n    BiTree Bt = (BiTree)malloc(sizeof(BSTNode));\n    if(key<p->data){\n        p->lchild = BT;\n    }\n    if(key>p->data){\n        p->rchild = BT;\n    }\n    return T;\n}\n```\n\n> #### 22.二叉排序树的构造\n\n```c\nvoid Creat_BST(BiTree &T,KeyType str[],int n){\n    T = NULL;\n    int i = 0;\n    while(i<n){\n        BST_Insert(T,str[i]);\n        i++;\n    }\n}\n```","source":"_posts/树相关代码.md","raw":"---\ntitle: 树相关代码\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\n  - 树\ncategories:\n  - 代码\nsummary: 树代码整理\nabbrlink: '3849'\ndate: 2020-09-05 18:46:17\npassword:\nkeywords: [HEXO,HEXO SEO优化]\ndescription: 总结一下使用Hexo搭建博客后，SEO优化方案的总结，后期会不定期更新。\n---\n## 树相关代码\n\n> #### 1. 二叉树链式存储结构描述\n\n```c\ntypedef struct BiTNode{\n    int data;                        //数据域\n    struct BiTree *lchild, *rchild;  //左、右孩子指针\n}BiTNode, *BiTree;\n```\n\n> #### 2. 先序遍历\n\n```c\nvoid PreOrder(BiTree T){\n    if(T != NULL){\n        visit(T);             //访问根节点\n        PreOrder(T->lchild);  //递归遍历左子树\n        PreOrder(T->rchild);  //递归遍历左子树\n    }\n}\n```\n\n> #### 3. 中序遍历\n\n```c\nvoid PreOrder(BiTree T){\n    if(T != NULL){\n        PreOrder(T->lchild);  //递归遍历左子树\n        visit(T);             //访问根节点\n        PreOrder(T->rchild);  //递归遍历左子树\n    }\n}\n```\n\n> #### 4. 后序遍历\n\n```c\nvoid PreOrder(BiTree T){\n    if(T != NULL){\n        PreOrder(T->lchild);  //递归遍历左子树\n        PreOrder(T->rchild);  //递归遍历左子树\n        visit(T);             //访问根节点\n    }\n}\n```\n\n> #### 5. 层次遍历（层次遍历是利用**队列**作为辅助结构，并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的，其他遍历方式均为判定结点不为空或者栈不为空）\n\n```c\nvoid LevelOrder(BiTree T){\n    BiTree Queue[maxsize];              //初始化辅助队列\n    int front = -1, rear = -1;\n    BiTree p;                           //p用于遍历二叉树\n    Queue[++rear] = T;                  //将根节点入队Q\n    while(front!=rear){                 //队列不为空则循环\n        p = Queue[++front];             //队头结点出队\n        visit(p);                       //访问出队结点\n        if(p->lchild != NULL){\n            Queue[++rear] = p->lchild;  //左子树不为空，则左子树根结点入队\n        }\n        if(p->rchild != NULL){\n            Queue[++rear] = p->rchild;  //右子树不为空，则右子树根节点入队\n        }\n    }   \n}\n```\n\n> #### 6. 先序非递归（使用栈来辅助存储的，切勿与层次遍历搞混了）\n\n```c\nvoid PreOrder(BiTree T){\n    BiTree Stack[maxsize];     //初始化辅助栈S\n    int top = -1;              //栈的下标\n    BiTree p = T;              //p是遍历指针\n    while(top!=-1 || p!=NULL){ //栈不空或p不为空时，开始循环\n        if(p){                 //一路向左\n            visit(p);          //访问当前结点\n            Stack[++top] = p;  //入栈元素\n            p = p -> lchild;   //左孩子不为空，一直向左走\n        }else{                 //出栈，并转向出栈结点的右子树\n            p = Stack[top--];  //栈顶元素出栈\n            p = p -> rchild;   //向右子树走，p赋值为当前结点的右孩子\n                               //返回while循环继续进入if-else语句\n        }\n    }\n}\n```\n\n> #### 7. 中序非递归（使用栈来辅助储存的。先序与中序的区别便是：先序是先访问再压栈，中序是出栈后再访问）\n\n```c\nvoid InOrder(BiTree T){\n    InitStack(S);              //初始化栈S\n    BiTree p = T;              //p是遍历指针\n    while(p || !IsEmpty){      //栈不空或p不为空时，开始循环\n        if(p){                 //一路向左\n            Push(S,p);         //入栈元素\n            p = p -> lchild;   //左孩子不为空，一直向左走\n        }else{                 //出栈，并转向出栈结点的右子树\n            Pop(S,p);          //栈顶元素出栈\n            visit(p);          //访问出栈结点\n            p = p -> rchild;   //向右子树走，p赋值为当前结点的右孩子\n                               //返回while循环继续进入if-else语句\n        }\n    }\n}\n```\n\n> #### 8. 后序非递归（后序非递归遍历是最重要的。一定要记住当遍历到某一结点时，栈里存在的元素是其所有的祖先结点）\n\n```c\nvoid PostOrder(BiTree T){\n    InitStack(S);\n    p = T;                                      //p是遍历指针\n    r = NULL;\n    while(p || !IsEmpty(S)){\n        if(p){                                  //走到最左边\n            push(S,p); \n            p = p -> lchild;\n        }else{                                  //向右\n            GetTop(T,p);                        //读栈顶结点（非出栈）\n            if(p->rchild && p->rchild != r){    //若右子树存在，且未被访问过\n                p = p -> rchild;                //向右转\n                push(S,p);                      //压入栈\n                p = p -> lchild;                //再走到最走\n            }else{                              //否则，弹出结点并访问\n                pop(S,p);                       //将结点弹出\n                visit(p->data);                 //访问该节点\n                r = p;                          //记录最近访问过的结点\n                p = NULL;                       //结点访问完后，重置p指针\n            }\n        }//else\n    }//while\n}\n```\n\n> #### 9.递归求树的高度\n\n- 写递归时首先需要考虑的便是递归运行到什么时候终止\n\n```c\nint Btdepth(BiTree T){\n    if(T == NULL){\n        return 0;\n    }\n    int ldep = Btdepth(T->lchild);\n    int rdep = Btdepth(T->rchild);\n    if(ldep > rdep){\n        return ldep + 1;\n    }else{\n        return rdep + 1;\n    }\n}\n```\n\n> #### 10.递归交换二叉树的左右子树\n\n- 此代码暗含着结点为递归出口\n\n```c\nvoid swap(BiTree b){\n//本算法递归的交换二叉树的左、右子树\n    if(b){\n        swap(b->lchild);\n        swap(b->rchild);\n        BiTree temp = b -> lchild;\n        b->lchild = b->rhcild;\n        b->rchild = temp;\n    }\n}\n```\n\n> #### 11.递归删除以某一结点为根节点的子树并释放其存储空间\n\n- 此代码暗含着节点为空时为递归出口\n\n```c\nvoid DeleteXTree(BiTree bt){\n    if(bt){\n        DeleteXTree(bt->lchild);\n        DeleteXTree(bt->rchild);\n        free(bt);\n    }\n}\n```\n\n> #### 12.利用层次遍历求树的高度（这里还没看）\n\n```c\nint LeverOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=-1,rear=-1,level=0,last=0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front != rear){\n        p = Queue[++front];\n        if(p->lchild!=NULL){\n            Queue[++rear] = P->lchild;\n        }\n        if(p->lchild!=NULL){\n            Queue[++rear] = P->rchild;\n        }\n        if(front==last){\n            level++;\n            last = rear;\n        }\n    }\n}\n```\n\n> #### 13.利用层次遍历求树的宽度\n\n```c\nint LevelOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=-1,width=last=max=0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        width++;\n        if(p->lchild!=NULL){\n            Queue[++rear] = p->lchild;\n        }\n        if(p->rchild!=NULL){\n            Queue[++rear] = p->rchild;\n        }\n        if(front == last){\n            if(max < width){\n                max = width;\n            }\n            last = rear;\n        }\n    }\n    return max;\n}\n```\n\n> #### 14.求二叉树中叶子结点的个数\n\n```c\nint LevelOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=-1,count=0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        if(p->lchild == NUll && p->rchild == NULL){\n            count++;\n        }\n        if(p->lchild != NUll){\n            Queue[++rear] = p->lchild;\n        }\n        if(p->rchild != NUll){\n            Queue[++rear] = p->rchild;\n        }\n    }\n    return count;\n}\n```\n\n> #### 15.求树中独生叶结点的个数（既是叶结点又无兄弟结点）\n\n```c\nint LevelOrder(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=-1;\n    int num = 0;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        if(p->lchild != NUll && p->rchild == NULL){\n            if(p->lchild->lchild == NUll && p->lchild->rchild == NULL){\n                num++;\n            }\n        }\n        if(p->lchild == NUll && p->rchild != NULL){\n            if(p->rchild->lchild == NUll && p->rchild->rchild == NULL){\n                num++;\n            }\n        }\n        if(p->lchild != NUll){\n            Queue[++rear] = p->lchild;\n        }\n        if(p->rchild != NUll){\n            Queue[++rear] = p->rchild;\n        }\n    }\n    if(T->lchild == NULL && T-rchild == NULL){\n        num++\n    }\n    return num;\n}\n```\n\n> #### 16.求一棵二叉树是否为平衡二叉树\n\n```c\nint High(BiTree T){\n    if(T == NULL){\n        return 0;\n    }\n    int llen = High(T->lchild);\n    int rlen = High(T->rchild);\n    if(llen >= rlen){\n        return llen+1;\n    }else{\n        return rlen+1;\n    }\n}\n\nbool PostOrder1(BiTree T){\n    BiTree Stack[maxsize];\n    int top = -1;\n    BiTree p = T,r = NULL;//p为遍历二叉树指针，r指向最近访问结点\n    while(p!=NULL || top!=-1){\n        if(p!=NULL){\n            Stack[++top] = p;\n            p = p->lchild;\n        }else{\n            p = Stack[top];\n            if(p->rchild!=NULL && p->rchild!=r){//p的右孩子不为空，且未被访问过\n                p = p->rchild;\n                Stack[++top] = p;\n                p = p->lchild;\n            }else{\n                p = Stack[top--];\n                if(abs(High(p->lchild)-High(p->rchild))>1){\n                    return false;\n                }\n                r = p;\n                p = NULL;\n            }\n        }\n    }\n    return true;\n}\n```\n\n> #### 17.给出二叉树的自下而上、从右到左的层次遍历算法\n\n```c\nvoid InverLevel(BiTree T){\n    BiTree Queue[maxsize];\n    int front=rear=0;\n    BiTree Stack[maxsize];\n    int top=-1;\n    BiTree p;\n    Queue[++rear] = T;\n    while(front!=rear){\n        p = Queue[++front];\n        Stack[++top] = p;\n        if(p->lchild！= NULL){\n            Queue[++rear] = p;\n        }\n        if(p->rchild！= NULL){\n            Queue[++rear] = p;\n        }\n    }\n    while(top!=-1){\n        p = Stack[top--];\n        Visit(p);\n    }\n}\n```\n\n> #### 18.线索二叉树的构造，结构描述\n\n- 对于二叉树的线索化，实质上就是遍历一次二叉树，只是在遍历的过程中，检查当前结点左右指针域是否为空，若为空，讲他们改为指向前驱结点或后继结点的线索\n- ltag=0，lchild域指示结点的左孩子；ltag=1，lchild域指示结点的前驱\n- ltag=0，rchild域指示结点的右孩子；ltag=1，rchild域指示结点的后继\n\n```c\ntypedef struct ThreadNode{\n    int data;                            //数据元素\n    struct ThreadNode *lchild,*rchild;   //左、右孩子指针\n    int ltag,rtag;                       //左、右线索标志\n}ThreadNode,*ThreadTree;\n```\n\n> #### 19.中序二叉树线索化\n\n```c\nvoid InThread(ThreadTree &p, ThreadTree &pre){\n    if(p!=NULL){\n        Inthread(p->lchild,pre);\n        if(p->lchild == NULL){\n            p->lchild = pre;\n            p->ltag = 1;\n        }\n        if(pre!=NULL && pre->rchild == NULL){\n            pre->rchild = p;\n            pre->rtag = 1;\n        }\n        pre = p;\n        InThread(pre->rchild,pre);\n    }\n}\n```\n\n> #### 20.二叉排序树的查找\n\n- 二叉排序树：左＜根＜右\n\n```c\nBSTNode *BST_Search(BiTree T,int key){\n    p = NULL;\n    while(T!=NULL && key!=T-data){\n        p = NULL;\n        if(key<T->data){\n            T = T->lchild;\n        }else{\n            T = T->rchild;\n        }\n    }\n    return T;\n}\n```\n\n> #### 21.二叉排序树的插入\n\n```c\nBSTNode *BST_Search(BiTree T,int key){\n    p = NULL;\n    while(T!=NULL && key!=T-data){\n        p = NULL;\n        if(key<T->data){\n            T = T->lchild;\n        }else{\n            T = T->rchild;\n        }\n    }\n    BiTree Bt = (BiTree)malloc(sizeof(BSTNode));\n    if(key<p->data){\n        p->lchild = BT;\n    }\n    if(key>p->data){\n        p->rchild = BT;\n    }\n    return T;\n}\n```\n\n> #### 22.二叉排序树的构造\n\n```c\nvoid Creat_BST(BiTree &T,KeyType str[],int n){\n    T = NULL;\n    int i = 0;\n    while(i<n){\n        BST_Insert(T,str[i]);\n        i++;\n    }\n}\n```","slug":"树相关代码","published":1,"updated":"2020-09-12T05:44:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdih0033zl9k6q8061q2","content":"<h2 id=\"树相关代码\"><a class=\"markdownIt-Anchor\" href=\"#树相关代码\"></a> 树相关代码</h2>\n<blockquote>\n<h4 id=\"1-二叉树链式存储结构描述\"><a class=\"markdownIt-Anchor\" href=\"#1-二叉树链式存储结构描述\"></a> 1. 二叉树链式存储结构描述</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data;                        <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTree</span> *<span class=\"hljs-title\">lchild</span>, *<span class=\"hljs-title\">rchild</span>;</span>  <span class=\"hljs-comment\">//左、右孩子指针</span>\n}BiTNode, *BiTree;\n</code></pre>\n<blockquote>\n<h4 id=\"2-先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#2-先序遍历\"></a> 2. 先序遍历</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        visit(T);             <span class=\"hljs-comment\">//访问根节点</span>\n        PreOrder(T-&gt;lchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        PreOrder(T-&gt;rchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"3-中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#3-中序遍历\"></a> 3. 中序遍历</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        PreOrder(T-&gt;lchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        visit(T);             <span class=\"hljs-comment\">//访问根节点</span>\n        PreOrder(T-&gt;rchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4-后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#4-后序遍历\"></a> 4. 后序遍历</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        PreOrder(T-&gt;lchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        PreOrder(T-&gt;rchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        visit(T);             <span class=\"hljs-comment\">//访问根节点</span>\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5-层次遍历层次遍历是利用队列作为辅助结构并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的其他遍历方式均为判定结点不为空或者栈不为空\"><a class=\"markdownIt-Anchor\" href=\"#5-层次遍历层次遍历是利用队列作为辅助结构并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的其他遍历方式均为判定结点不为空或者栈不为空\"></a> 5. 层次遍历（层次遍历是利用<strong>队列</strong>作为辅助结构，并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的，其他遍历方式均为判定结点不为空或者栈不为空）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];              <span class=\"hljs-comment\">//初始化辅助队列</span>\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">-1</span>, rear = <span class=\"hljs-number\">-1</span>;\n    BiTree p;                           <span class=\"hljs-comment\">//p用于遍历二叉树</span>\n    Queue[++rear] = T;                  <span class=\"hljs-comment\">//将根节点入队Q</span>\n    <span class=\"hljs-keyword\">while</span>(front!=rear){                 <span class=\"hljs-comment\">//队列不为空则循环</span>\n        p = Queue[++front];             <span class=\"hljs-comment\">//队头结点出队</span>\n        visit(p);                       <span class=\"hljs-comment\">//访问出队结点</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;lchild;  <span class=\"hljs-comment\">//左子树不为空，则左子树根结点入队</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;rchild;  <span class=\"hljs-comment\">//右子树不为空，则右子树根节点入队</span>\n        }\n    }   \n}\n</code></pre>\n<blockquote>\n<h4 id=\"6-先序非递归使用栈来辅助存储的切勿与层次遍历搞混了\"><a class=\"markdownIt-Anchor\" href=\"#6-先序非递归使用栈来辅助存储的切勿与层次遍历搞混了\"></a> 6. 先序非递归（使用栈来辅助存储的，切勿与层次遍历搞混了）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Stack[maxsize];     <span class=\"hljs-comment\">//初始化辅助栈S</span>\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;              <span class=\"hljs-comment\">//栈的下标</span>\n    BiTree p = T;              <span class=\"hljs-comment\">//p是遍历指针</span>\n    <span class=\"hljs-keyword\">while</span>(top!=<span class=\"hljs-number\">-1</span> || p!=<span class=\"hljs-literal\">NULL</span>){ <span class=\"hljs-comment\">//栈不空或p不为空时，开始循环</span>\n        <span class=\"hljs-keyword\">if</span>(p){                 <span class=\"hljs-comment\">//一路向左</span>\n            visit(p);          <span class=\"hljs-comment\">//访问当前结点</span>\n            Stack[++top] = p;  <span class=\"hljs-comment\">//入栈元素</span>\n            p = p -&gt; lchild;   <span class=\"hljs-comment\">//左孩子不为空，一直向左走</span>\n        }<span class=\"hljs-keyword\">else</span>{                 <span class=\"hljs-comment\">//出栈，并转向出栈结点的右子树</span>\n            p = Stack[top--];  <span class=\"hljs-comment\">//栈顶元素出栈</span>\n            p = p -&gt; rchild;   <span class=\"hljs-comment\">//向右子树走，p赋值为当前结点的右孩子</span>\n                               <span class=\"hljs-comment\">//返回while循环继续进入if-else语句</span>\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"7-中序非递归使用栈来辅助储存的-先序与中序的区别便是先序是先访问再压栈中序是出栈后再访问\"><a class=\"markdownIt-Anchor\" href=\"#7-中序非递归使用栈来辅助储存的-先序与中序的区别便是先序是先访问再压栈中序是出栈后再访问\"></a> 7. 中序非递归（使用栈来辅助储存的。先序与中序的区别便是：先序是先访问再压栈，中序是出栈后再访问）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    InitStack(S);              <span class=\"hljs-comment\">//初始化栈S</span>\n    BiTree p = T;              <span class=\"hljs-comment\">//p是遍历指针</span>\n    <span class=\"hljs-keyword\">while</span>(p || !IsEmpty){      <span class=\"hljs-comment\">//栈不空或p不为空时，开始循环</span>\n        <span class=\"hljs-keyword\">if</span>(p){                 <span class=\"hljs-comment\">//一路向左</span>\n            Push(S,p);         <span class=\"hljs-comment\">//入栈元素</span>\n            p = p -&gt; lchild;   <span class=\"hljs-comment\">//左孩子不为空，一直向左走</span>\n        }<span class=\"hljs-keyword\">else</span>{                 <span class=\"hljs-comment\">//出栈，并转向出栈结点的右子树</span>\n            Pop(S,p);          <span class=\"hljs-comment\">//栈顶元素出栈</span>\n            visit(p);          <span class=\"hljs-comment\">//访问出栈结点</span>\n            p = p -&gt; rchild;   <span class=\"hljs-comment\">//向右子树走，p赋值为当前结点的右孩子</span>\n                               <span class=\"hljs-comment\">//返回while循环继续进入if-else语句</span>\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"8-后序非递归后序非递归遍历是最重要的-一定要记住当遍历到某一结点时栈里存在的元素是其所有的祖先结点\"><a class=\"markdownIt-Anchor\" href=\"#8-后序非递归后序非递归遍历是最重要的-一定要记住当遍历到某一结点时栈里存在的元素是其所有的祖先结点\"></a> 8. 后序非递归（后序非递归遍历是最重要的。一定要记住当遍历到某一结点时，栈里存在的元素是其所有的祖先结点）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PostOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    InitStack(S);\n    p = T;                                      <span class=\"hljs-comment\">//p是遍历指针</span>\n    r = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p || !IsEmpty(S)){\n        <span class=\"hljs-keyword\">if</span>(p){                                  <span class=\"hljs-comment\">//走到最左边</span>\n            push(S,p); \n            p = p -&gt; lchild;\n        }<span class=\"hljs-keyword\">else</span>{                                  <span class=\"hljs-comment\">//向右</span>\n            GetTop(T,p);                        <span class=\"hljs-comment\">//读栈顶结点（非出栈）</span>\n            <span class=\"hljs-keyword\">if</span>(p-&gt;rchild &amp;&amp; p-&gt;rchild != r){    <span class=\"hljs-comment\">//若右子树存在，且未被访问过</span>\n                p = p -&gt; rchild;                <span class=\"hljs-comment\">//向右转</span>\n                push(S,p);                      <span class=\"hljs-comment\">//压入栈</span>\n                p = p -&gt; lchild;                <span class=\"hljs-comment\">//再走到最走</span>\n            }<span class=\"hljs-keyword\">else</span>{                              <span class=\"hljs-comment\">//否则，弹出结点并访问</span>\n                pop(S,p);                       <span class=\"hljs-comment\">//将结点弹出</span>\n                visit(p-&gt;data);                 <span class=\"hljs-comment\">//访问该节点</span>\n                r = p;                          <span class=\"hljs-comment\">//记录最近访问过的结点</span>\n                p = <span class=\"hljs-literal\">NULL</span>;                       <span class=\"hljs-comment\">//结点访问完后，重置p指针</span>\n            }\n        }<span class=\"hljs-comment\">//else</span>\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n<blockquote>\n<h4 id=\"9递归求树的高度\"><a class=\"markdownIt-Anchor\" href=\"#9递归求树的高度\"></a> 9.递归求树的高度</h4>\n</blockquote>\n<ul>\n<li>写递归时首先需要考虑的便是递归运行到什么时候终止</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Btdepth</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T == <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">int</span> ldep = Btdepth(T-&gt;lchild);\n    <span class=\"hljs-keyword\">int</span> rdep = Btdepth(T-&gt;rchild);\n    <span class=\"hljs-keyword\">if</span>(ldep &gt; rdep){\n        <span class=\"hljs-keyword\">return</span> ldep + <span class=\"hljs-number\">1</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> rdep + <span class=\"hljs-number\">1</span>;\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"10递归交换二叉树的左右子树\"><a class=\"markdownIt-Anchor\" href=\"#10递归交换二叉树的左右子树\"></a> 10.递归交换二叉树的左右子树</h4>\n</blockquote>\n<ul>\n<li>此代码暗含着结点为递归出口</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(BiTree b)</span></span>{\n<span class=\"hljs-comment\">//本算法递归的交换二叉树的左、右子树</span>\n    <span class=\"hljs-keyword\">if</span>(b){\n        swap(b-&gt;lchild);\n        swap(b-&gt;rchild);\n        BiTree temp = b -&gt; lchild;\n        b-&gt;lchild = b-&gt;rhcild;\n        b-&gt;rchild = temp;\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"11递归删除以某一结点为根节点的子树并释放其存储空间\"><a class=\"markdownIt-Anchor\" href=\"#11递归删除以某一结点为根节点的子树并释放其存储空间\"></a> 11.递归删除以某一结点为根节点的子树并释放其存储空间</h4>\n</blockquote>\n<ul>\n<li>此代码暗含着节点为空时为递归出口</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteXTree</span><span class=\"hljs-params\">(BiTree bt)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(bt){\n        DeleteXTree(bt-&gt;lchild);\n        DeleteXTree(bt-&gt;rchild);\n        <span class=\"hljs-built_in\">free</span>(bt);\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"12利用层次遍历求树的高度这里还没看\"><a class=\"markdownIt-Anchor\" href=\"#12利用层次遍历求树的高度这里还没看\"></a> 12.利用层次遍历求树的高度（这里还没看）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LeverOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=<span class=\"hljs-number\">-1</span>,rear=<span class=\"hljs-number\">-1</span>,level=<span class=\"hljs-number\">0</span>,last=<span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front != rear){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = P-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = P-&gt;rchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(front==last){\n            level++;\n            last = rear;\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"13利用层次遍历求树的宽度\"><a class=\"markdownIt-Anchor\" href=\"#13利用层次遍历求树的宽度\"></a> 13.利用层次遍历求树的宽度</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">-1</span>,<span class=\"hljs-built_in\">width</span>=last=<span class=\"hljs-built_in\">max</span>=<span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        <span class=\"hljs-built_in\">width</span>++;\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;rchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(front == last){\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">max</span> &lt; <span class=\"hljs-built_in\">width</span>){\n                <span class=\"hljs-built_in\">max</span> = <span class=\"hljs-built_in\">width</span>;\n            }\n            last = rear;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"14求二叉树中叶子结点的个数\"><a class=\"markdownIt-Anchor\" href=\"#14求二叉树中叶子结点的个数\"></a> 14.求二叉树中叶子结点的个数</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">-1</span>,count=<span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild == NUll &amp;&amp; p-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n            count++;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != NUll){\n            Queue[++rear] = p-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != NUll){\n            Queue[++rear] = p-&gt;rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"15求树中独生叶结点的个数既是叶结点又无兄弟结点\"><a class=\"markdownIt-Anchor\" href=\"#15求树中独生叶结点的个数既是叶结点又无兄弟结点\"></a> 15.求树中独生叶结点的个数（既是叶结点又无兄弟结点）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != NUll &amp;&amp; p-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n            <span class=\"hljs-keyword\">if</span>(p-&gt;lchild-&gt;lchild == NUll &amp;&amp; p-&gt;lchild-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n                num++;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild == NUll &amp;&amp; p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>){\n            <span class=\"hljs-keyword\">if</span>(p-&gt;rchild-&gt;lchild == NUll &amp;&amp; p-&gt;rchild-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n                num++;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != NUll){\n            Queue[++rear] = p-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != NUll){\n            Queue[++rear] = p-&gt;rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(T-&gt;lchild == <span class=\"hljs-literal\">NULL</span> &amp;&amp; T-rchild == <span class=\"hljs-literal\">NULL</span>){\n        num++\n    }\n    <span class=\"hljs-keyword\">return</span> num;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"16求一棵二叉树是否为平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#16求一棵二叉树是否为平衡二叉树\"></a> 16.求一棵二叉树是否为平衡二叉树</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">High</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T == <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">int</span> llen = High(T-&gt;lchild);\n    <span class=\"hljs-keyword\">int</span> rlen = High(T-&gt;rchild);\n    <span class=\"hljs-keyword\">if</span>(llen &gt;= rlen){\n        <span class=\"hljs-keyword\">return</span> llen+<span class=\"hljs-number\">1</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> rlen+<span class=\"hljs-number\">1</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">PostOrder1</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Stack[maxsize];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;\n    BiTree p = T,r = <span class=\"hljs-literal\">NULL</span>;<span class=\"hljs-comment\">//p为遍历二叉树指针，r指向最近访问结点</span>\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span> || top!=<span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n            Stack[++top] = p;\n            p = p-&gt;lchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            p = Stack[top];\n            <span class=\"hljs-keyword\">if</span>(p-&gt;rchild!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; p-&gt;rchild!=r){<span class=\"hljs-comment\">//p的右孩子不为空，且未被访问过</span>\n                p = p-&gt;rchild;\n                Stack[++top] = p;\n                p = p-&gt;lchild;\n            }<span class=\"hljs-keyword\">else</span>{\n                p = Stack[top--];\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(High(p-&gt;lchild)-High(p-&gt;rchild))&gt;<span class=\"hljs-number\">1</span>){\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n                r = p;\n                p = <span class=\"hljs-literal\">NULL</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"17给出二叉树的自下而上-从右到左的层次遍历算法\"><a class=\"markdownIt-Anchor\" href=\"#17给出二叉树的自下而上-从右到左的层次遍历算法\"></a> 17.给出二叉树的自下而上、从右到左的层次遍历算法</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InverLevel</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">0</span>;\n    BiTree Stack[maxsize];\n    <span class=\"hljs-keyword\">int</span> top=<span class=\"hljs-number\">-1</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        Stack[++top] = p;\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild！= <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild！= <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(top!=<span class=\"hljs-number\">-1</span>){\n        p = Stack[top--];\n        Visit(p);\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"18线索二叉树的构造结构描述\"><a class=\"markdownIt-Anchor\" href=\"#18线索二叉树的构造结构描述\"></a> 18.线索二叉树的构造，结构描述</h4>\n</blockquote>\n<ul>\n<li>对于二叉树的线索化，实质上就是遍历一次二叉树，只是在遍历的过程中，检查当前结点左右指针域是否为空，若为空，讲他们改为指向前驱结点或后继结点的线索</li>\n<li>ltag=0，lchild域指示结点的左孩子；ltag=1，lchild域指示结点的前驱</li>\n<li>ltag=0，rchild域指示结点的右孩子；ltag=1，rchild域指示结点的后继</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data;                            <span class=\"hljs-comment\">//数据元素</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>   <span class=\"hljs-comment\">//左、右孩子指针</span>\n    <span class=\"hljs-keyword\">int</span> ltag,rtag;                       <span class=\"hljs-comment\">//左、右线索标志</span>\n}ThreadNode,*ThreadTree;\n</code></pre>\n<blockquote>\n<h4 id=\"19中序二叉树线索化\"><a class=\"markdownIt-Anchor\" href=\"#19中序二叉树线索化\"></a> 19.中序二叉树线索化</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InThread</span><span class=\"hljs-params\">(ThreadTree &amp;p, ThreadTree &amp;pre)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n        Inthread(p-&gt;lchild,pre);\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild == <span class=\"hljs-literal\">NULL</span>){\n            p-&gt;lchild = pre;\n            p-&gt;ltag = <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">if</span>(pre!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n            pre-&gt;rchild = p;\n            pre-&gt;rtag = <span class=\"hljs-number\">1</span>;\n        }\n        pre = p;\n        InThread(pre-&gt;rchild,pre);\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"20二叉排序树的查找\"><a class=\"markdownIt-Anchor\" href=\"#20二叉排序树的查找\"></a> 20.二叉排序树的查找</h4>\n</blockquote>\n<ul>\n<li>二叉排序树：左＜根＜右</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">BSTNode *<span class=\"hljs-title\">BST_Search</span><span class=\"hljs-params\">(BiTree T,<span class=\"hljs-keyword\">int</span> key)</span></span>{\n    p = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(T!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; key!=T-data){\n        p = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">if</span>(key&lt;T-&gt;data){\n            T = T-&gt;lchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            T = T-&gt;rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> T;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"21二叉排序树的插入\"><a class=\"markdownIt-Anchor\" href=\"#21二叉排序树的插入\"></a> 21.二叉排序树的插入</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">BSTNode *<span class=\"hljs-title\">BST_Search</span><span class=\"hljs-params\">(BiTree T,<span class=\"hljs-keyword\">int</span> key)</span></span>{\n    p = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(T!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; key!=T-data){\n        p = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">if</span>(key&lt;T-&gt;data){\n            T = T-&gt;lchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            T = T-&gt;rchild;\n        }\n    }\n    BiTree Bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BSTNode));\n    <span class=\"hljs-keyword\">if</span>(key&lt;p-&gt;data){\n        p-&gt;lchild = BT;\n    }\n    <span class=\"hljs-keyword\">if</span>(key&gt;p-&gt;data){\n        p-&gt;rchild = BT;\n    }\n    <span class=\"hljs-keyword\">return</span> T;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"22二叉排序树的构造\"><a class=\"markdownIt-Anchor\" href=\"#22二叉排序树的构造\"></a> 22.二叉排序树的构造</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Creat_BST</span><span class=\"hljs-params\">(BiTree &amp;T,KeyType str[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    T = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i&lt;n){\n        BST_Insert(T,str[i]);\n        i++;\n    }\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"树相关代码\"><a class=\"markdownIt-Anchor\" href=\"#树相关代码\"></a> 树相关代码</h2>\n<blockquote>\n<h4 id=\"1-二叉树链式存储结构描述\"><a class=\"markdownIt-Anchor\" href=\"#1-二叉树链式存储结构描述\"></a> 1. 二叉树链式存储结构描述</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data;                        <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTree</span> *<span class=\"hljs-title\">lchild</span>, *<span class=\"hljs-title\">rchild</span>;</span>  <span class=\"hljs-comment\">//左、右孩子指针</span>\n}BiTNode, *BiTree;\n</code></pre>\n<blockquote>\n<h4 id=\"2-先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#2-先序遍历\"></a> 2. 先序遍历</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        visit(T);             <span class=\"hljs-comment\">//访问根节点</span>\n        PreOrder(T-&gt;lchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        PreOrder(T-&gt;rchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"3-中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#3-中序遍历\"></a> 3. 中序遍历</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        PreOrder(T-&gt;lchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        visit(T);             <span class=\"hljs-comment\">//访问根节点</span>\n        PreOrder(T-&gt;rchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4-后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#4-后序遍历\"></a> 4. 后序遍历</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>){\n        PreOrder(T-&gt;lchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        PreOrder(T-&gt;rchild);  <span class=\"hljs-comment\">//递归遍历左子树</span>\n        visit(T);             <span class=\"hljs-comment\">//访问根节点</span>\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5-层次遍历层次遍历是利用队列作为辅助结构并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的其他遍历方式均为判定结点不为空或者栈不为空\"><a class=\"markdownIt-Anchor\" href=\"#5-层次遍历层次遍历是利用队列作为辅助结构并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的其他遍历方式均为判定结点不为空或者栈不为空\"></a> 5. 层次遍历（层次遍历是利用<strong>队列</strong>作为辅助结构，并且只有层次遍历时循环语句是只用队列是否为空作为判断条件的，其他遍历方式均为判定结点不为空或者栈不为空）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];              <span class=\"hljs-comment\">//初始化辅助队列</span>\n    <span class=\"hljs-keyword\">int</span> front = <span class=\"hljs-number\">-1</span>, rear = <span class=\"hljs-number\">-1</span>;\n    BiTree p;                           <span class=\"hljs-comment\">//p用于遍历二叉树</span>\n    Queue[++rear] = T;                  <span class=\"hljs-comment\">//将根节点入队Q</span>\n    <span class=\"hljs-keyword\">while</span>(front!=rear){                 <span class=\"hljs-comment\">//队列不为空则循环</span>\n        p = Queue[++front];             <span class=\"hljs-comment\">//队头结点出队</span>\n        visit(p);                       <span class=\"hljs-comment\">//访问出队结点</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;lchild;  <span class=\"hljs-comment\">//左子树不为空，则左子树根结点入队</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;rchild;  <span class=\"hljs-comment\">//右子树不为空，则右子树根节点入队</span>\n        }\n    }   \n}\n</code></pre>\n<blockquote>\n<h4 id=\"6-先序非递归使用栈来辅助存储的切勿与层次遍历搞混了\"><a class=\"markdownIt-Anchor\" href=\"#6-先序非递归使用栈来辅助存储的切勿与层次遍历搞混了\"></a> 6. 先序非递归（使用栈来辅助存储的，切勿与层次遍历搞混了）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Stack[maxsize];     <span class=\"hljs-comment\">//初始化辅助栈S</span>\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;              <span class=\"hljs-comment\">//栈的下标</span>\n    BiTree p = T;              <span class=\"hljs-comment\">//p是遍历指针</span>\n    <span class=\"hljs-keyword\">while</span>(top!=<span class=\"hljs-number\">-1</span> || p!=<span class=\"hljs-literal\">NULL</span>){ <span class=\"hljs-comment\">//栈不空或p不为空时，开始循环</span>\n        <span class=\"hljs-keyword\">if</span>(p){                 <span class=\"hljs-comment\">//一路向左</span>\n            visit(p);          <span class=\"hljs-comment\">//访问当前结点</span>\n            Stack[++top] = p;  <span class=\"hljs-comment\">//入栈元素</span>\n            p = p -&gt; lchild;   <span class=\"hljs-comment\">//左孩子不为空，一直向左走</span>\n        }<span class=\"hljs-keyword\">else</span>{                 <span class=\"hljs-comment\">//出栈，并转向出栈结点的右子树</span>\n            p = Stack[top--];  <span class=\"hljs-comment\">//栈顶元素出栈</span>\n            p = p -&gt; rchild;   <span class=\"hljs-comment\">//向右子树走，p赋值为当前结点的右孩子</span>\n                               <span class=\"hljs-comment\">//返回while循环继续进入if-else语句</span>\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"7-中序非递归使用栈来辅助储存的-先序与中序的区别便是先序是先访问再压栈中序是出栈后再访问\"><a class=\"markdownIt-Anchor\" href=\"#7-中序非递归使用栈来辅助储存的-先序与中序的区别便是先序是先访问再压栈中序是出栈后再访问\"></a> 7. 中序非递归（使用栈来辅助储存的。先序与中序的区别便是：先序是先访问再压栈，中序是出栈后再访问）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    InitStack(S);              <span class=\"hljs-comment\">//初始化栈S</span>\n    BiTree p = T;              <span class=\"hljs-comment\">//p是遍历指针</span>\n    <span class=\"hljs-keyword\">while</span>(p || !IsEmpty){      <span class=\"hljs-comment\">//栈不空或p不为空时，开始循环</span>\n        <span class=\"hljs-keyword\">if</span>(p){                 <span class=\"hljs-comment\">//一路向左</span>\n            Push(S,p);         <span class=\"hljs-comment\">//入栈元素</span>\n            p = p -&gt; lchild;   <span class=\"hljs-comment\">//左孩子不为空，一直向左走</span>\n        }<span class=\"hljs-keyword\">else</span>{                 <span class=\"hljs-comment\">//出栈，并转向出栈结点的右子树</span>\n            Pop(S,p);          <span class=\"hljs-comment\">//栈顶元素出栈</span>\n            visit(p);          <span class=\"hljs-comment\">//访问出栈结点</span>\n            p = p -&gt; rchild;   <span class=\"hljs-comment\">//向右子树走，p赋值为当前结点的右孩子</span>\n                               <span class=\"hljs-comment\">//返回while循环继续进入if-else语句</span>\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"8-后序非递归后序非递归遍历是最重要的-一定要记住当遍历到某一结点时栈里存在的元素是其所有的祖先结点\"><a class=\"markdownIt-Anchor\" href=\"#8-后序非递归后序非递归遍历是最重要的-一定要记住当遍历到某一结点时栈里存在的元素是其所有的祖先结点\"></a> 8. 后序非递归（后序非递归遍历是最重要的。一定要记住当遍历到某一结点时，栈里存在的元素是其所有的祖先结点）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PostOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    InitStack(S);\n    p = T;                                      <span class=\"hljs-comment\">//p是遍历指针</span>\n    r = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p || !IsEmpty(S)){\n        <span class=\"hljs-keyword\">if</span>(p){                                  <span class=\"hljs-comment\">//走到最左边</span>\n            push(S,p); \n            p = p -&gt; lchild;\n        }<span class=\"hljs-keyword\">else</span>{                                  <span class=\"hljs-comment\">//向右</span>\n            GetTop(T,p);                        <span class=\"hljs-comment\">//读栈顶结点（非出栈）</span>\n            <span class=\"hljs-keyword\">if</span>(p-&gt;rchild &amp;&amp; p-&gt;rchild != r){    <span class=\"hljs-comment\">//若右子树存在，且未被访问过</span>\n                p = p -&gt; rchild;                <span class=\"hljs-comment\">//向右转</span>\n                push(S,p);                      <span class=\"hljs-comment\">//压入栈</span>\n                p = p -&gt; lchild;                <span class=\"hljs-comment\">//再走到最走</span>\n            }<span class=\"hljs-keyword\">else</span>{                              <span class=\"hljs-comment\">//否则，弹出结点并访问</span>\n                pop(S,p);                       <span class=\"hljs-comment\">//将结点弹出</span>\n                visit(p-&gt;data);                 <span class=\"hljs-comment\">//访问该节点</span>\n                r = p;                          <span class=\"hljs-comment\">//记录最近访问过的结点</span>\n                p = <span class=\"hljs-literal\">NULL</span>;                       <span class=\"hljs-comment\">//结点访问完后，重置p指针</span>\n            }\n        }<span class=\"hljs-comment\">//else</span>\n    }<span class=\"hljs-comment\">//while</span>\n}\n</code></pre>\n<blockquote>\n<h4 id=\"9递归求树的高度\"><a class=\"markdownIt-Anchor\" href=\"#9递归求树的高度\"></a> 9.递归求树的高度</h4>\n</blockquote>\n<ul>\n<li>写递归时首先需要考虑的便是递归运行到什么时候终止</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Btdepth</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T == <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">int</span> ldep = Btdepth(T-&gt;lchild);\n    <span class=\"hljs-keyword\">int</span> rdep = Btdepth(T-&gt;rchild);\n    <span class=\"hljs-keyword\">if</span>(ldep &gt; rdep){\n        <span class=\"hljs-keyword\">return</span> ldep + <span class=\"hljs-number\">1</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> rdep + <span class=\"hljs-number\">1</span>;\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"10递归交换二叉树的左右子树\"><a class=\"markdownIt-Anchor\" href=\"#10递归交换二叉树的左右子树\"></a> 10.递归交换二叉树的左右子树</h4>\n</blockquote>\n<ul>\n<li>此代码暗含着结点为递归出口</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(BiTree b)</span></span>{\n<span class=\"hljs-comment\">//本算法递归的交换二叉树的左、右子树</span>\n    <span class=\"hljs-keyword\">if</span>(b){\n        swap(b-&gt;lchild);\n        swap(b-&gt;rchild);\n        BiTree temp = b -&gt; lchild;\n        b-&gt;lchild = b-&gt;rhcild;\n        b-&gt;rchild = temp;\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"11递归删除以某一结点为根节点的子树并释放其存储空间\"><a class=\"markdownIt-Anchor\" href=\"#11递归删除以某一结点为根节点的子树并释放其存储空间\"></a> 11.递归删除以某一结点为根节点的子树并释放其存储空间</h4>\n</blockquote>\n<ul>\n<li>此代码暗含着节点为空时为递归出口</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteXTree</span><span class=\"hljs-params\">(BiTree bt)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(bt){\n        DeleteXTree(bt-&gt;lchild);\n        DeleteXTree(bt-&gt;rchild);\n        <span class=\"hljs-built_in\">free</span>(bt);\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"12利用层次遍历求树的高度这里还没看\"><a class=\"markdownIt-Anchor\" href=\"#12利用层次遍历求树的高度这里还没看\"></a> 12.利用层次遍历求树的高度（这里还没看）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LeverOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=<span class=\"hljs-number\">-1</span>,rear=<span class=\"hljs-number\">-1</span>,level=<span class=\"hljs-number\">0</span>,last=<span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front != rear){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = P-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = P-&gt;rchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(front==last){\n            level++;\n            last = rear;\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"13利用层次遍历求树的宽度\"><a class=\"markdownIt-Anchor\" href=\"#13利用层次遍历求树的宽度\"></a> 13.利用层次遍历求树的宽度</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">-1</span>,<span class=\"hljs-built_in\">width</span>=last=<span class=\"hljs-built_in\">max</span>=<span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        <span class=\"hljs-built_in\">width</span>++;\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p-&gt;rchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(front == last){\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">max</span> &lt; <span class=\"hljs-built_in\">width</span>){\n                <span class=\"hljs-built_in\">max</span> = <span class=\"hljs-built_in\">width</span>;\n            }\n            last = rear;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"14求二叉树中叶子结点的个数\"><a class=\"markdownIt-Anchor\" href=\"#14求二叉树中叶子结点的个数\"></a> 14.求二叉树中叶子结点的个数</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">-1</span>,count=<span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild == NUll &amp;&amp; p-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n            count++;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != NUll){\n            Queue[++rear] = p-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != NUll){\n            Queue[++rear] = p-&gt;rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"15求树中独生叶结点的个数既是叶结点又无兄弟结点\"><a class=\"markdownIt-Anchor\" href=\"#15求树中独生叶结点的个数既是叶结点又无兄弟结点\"></a> 15.求树中独生叶结点的个数（既是叶结点又无兄弟结点）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">0</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != NUll &amp;&amp; p-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n            <span class=\"hljs-keyword\">if</span>(p-&gt;lchild-&gt;lchild == NUll &amp;&amp; p-&gt;lchild-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n                num++;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild == NUll &amp;&amp; p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>){\n            <span class=\"hljs-keyword\">if</span>(p-&gt;rchild-&gt;lchild == NUll &amp;&amp; p-&gt;rchild-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n                num++;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != NUll){\n            Queue[++rear] = p-&gt;lchild;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != NUll){\n            Queue[++rear] = p-&gt;rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(T-&gt;lchild == <span class=\"hljs-literal\">NULL</span> &amp;&amp; T-rchild == <span class=\"hljs-literal\">NULL</span>){\n        num++\n    }\n    <span class=\"hljs-keyword\">return</span> num;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"16求一棵二叉树是否为平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#16求一棵二叉树是否为平衡二叉树\"></a> 16.求一棵二叉树是否为平衡二叉树</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">High</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(T == <span class=\"hljs-literal\">NULL</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">int</span> llen = High(T-&gt;lchild);\n    <span class=\"hljs-keyword\">int</span> rlen = High(T-&gt;rchild);\n    <span class=\"hljs-keyword\">if</span>(llen &gt;= rlen){\n        <span class=\"hljs-keyword\">return</span> llen+<span class=\"hljs-number\">1</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> rlen+<span class=\"hljs-number\">1</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">PostOrder1</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Stack[maxsize];\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;\n    BiTree p = T,r = <span class=\"hljs-literal\">NULL</span>;<span class=\"hljs-comment\">//p为遍历二叉树指针，r指向最近访问结点</span>\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span> || top!=<span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n            Stack[++top] = p;\n            p = p-&gt;lchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            p = Stack[top];\n            <span class=\"hljs-keyword\">if</span>(p-&gt;rchild!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; p-&gt;rchild!=r){<span class=\"hljs-comment\">//p的右孩子不为空，且未被访问过</span>\n                p = p-&gt;rchild;\n                Stack[++top] = p;\n                p = p-&gt;lchild;\n            }<span class=\"hljs-keyword\">else</span>{\n                p = Stack[top--];\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(High(p-&gt;lchild)-High(p-&gt;rchild))&gt;<span class=\"hljs-number\">1</span>){\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n                r = p;\n                p = <span class=\"hljs-literal\">NULL</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"17给出二叉树的自下而上-从右到左的层次遍历算法\"><a class=\"markdownIt-Anchor\" href=\"#17给出二叉树的自下而上-从右到左的层次遍历算法\"></a> 17.给出二叉树的自下而上、从右到左的层次遍历算法</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InverLevel</span><span class=\"hljs-params\">(BiTree T)</span></span>{\n    BiTree Queue[maxsize];\n    <span class=\"hljs-keyword\">int</span> front=rear=<span class=\"hljs-number\">0</span>;\n    BiTree Stack[maxsize];\n    <span class=\"hljs-keyword\">int</span> top=<span class=\"hljs-number\">-1</span>;\n    BiTree p;\n    Queue[++rear] = T;\n    <span class=\"hljs-keyword\">while</span>(front!=rear){\n        p = Queue[++front];\n        Stack[++top] = p;\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild！= <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p;\n        }\n        <span class=\"hljs-keyword\">if</span>(p-&gt;rchild！= <span class=\"hljs-literal\">NULL</span>){\n            Queue[++rear] = p;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(top!=<span class=\"hljs-number\">-1</span>){\n        p = Stack[top--];\n        Visit(p);\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"18线索二叉树的构造结构描述\"><a class=\"markdownIt-Anchor\" href=\"#18线索二叉树的构造结构描述\"></a> 18.线索二叉树的构造，结构描述</h4>\n</blockquote>\n<ul>\n<li>对于二叉树的线索化，实质上就是遍历一次二叉树，只是在遍历的过程中，检查当前结点左右指针域是否为空，若为空，讲他们改为指向前驱结点或后继结点的线索</li>\n<li>ltag=0，lchild域指示结点的左孩子；ltag=1，lchild域指示结点的前驱</li>\n<li>ltag=0，rchild域指示结点的右孩子；ltag=1，rchild域指示结点的后继</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data;                            <span class=\"hljs-comment\">//数据元素</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>   <span class=\"hljs-comment\">//左、右孩子指针</span>\n    <span class=\"hljs-keyword\">int</span> ltag,rtag;                       <span class=\"hljs-comment\">//左、右线索标志</span>\n}ThreadNode,*ThreadTree;\n</code></pre>\n<blockquote>\n<h4 id=\"19中序二叉树线索化\"><a class=\"markdownIt-Anchor\" href=\"#19中序二叉树线索化\"></a> 19.中序二叉树线索化</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InThread</span><span class=\"hljs-params\">(ThreadTree &amp;p, ThreadTree &amp;pre)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n        Inthread(p-&gt;lchild,pre);\n        <span class=\"hljs-keyword\">if</span>(p-&gt;lchild == <span class=\"hljs-literal\">NULL</span>){\n            p-&gt;lchild = pre;\n            p-&gt;ltag = <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">if</span>(pre!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;rchild == <span class=\"hljs-literal\">NULL</span>){\n            pre-&gt;rchild = p;\n            pre-&gt;rtag = <span class=\"hljs-number\">1</span>;\n        }\n        pre = p;\n        InThread(pre-&gt;rchild,pre);\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"20二叉排序树的查找\"><a class=\"markdownIt-Anchor\" href=\"#20二叉排序树的查找\"></a> 20.二叉排序树的查找</h4>\n</blockquote>\n<ul>\n<li>二叉排序树：左＜根＜右</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">BSTNode *<span class=\"hljs-title\">BST_Search</span><span class=\"hljs-params\">(BiTree T,<span class=\"hljs-keyword\">int</span> key)</span></span>{\n    p = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(T!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; key!=T-data){\n        p = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">if</span>(key&lt;T-&gt;data){\n            T = T-&gt;lchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            T = T-&gt;rchild;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> T;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"21二叉排序树的插入\"><a class=\"markdownIt-Anchor\" href=\"#21二叉排序树的插入\"></a> 21.二叉排序树的插入</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">BSTNode *<span class=\"hljs-title\">BST_Search</span><span class=\"hljs-params\">(BiTree T,<span class=\"hljs-keyword\">int</span> key)</span></span>{\n    p = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(T!=<span class=\"hljs-literal\">NULL</span> &amp;&amp; key!=T-data){\n        p = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">if</span>(key&lt;T-&gt;data){\n            T = T-&gt;lchild;\n        }<span class=\"hljs-keyword\">else</span>{\n            T = T-&gt;rchild;\n        }\n    }\n    BiTree Bt = (BiTree)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BSTNode));\n    <span class=\"hljs-keyword\">if</span>(key&lt;p-&gt;data){\n        p-&gt;lchild = BT;\n    }\n    <span class=\"hljs-keyword\">if</span>(key&gt;p-&gt;data){\n        p-&gt;rchild = BT;\n    }\n    <span class=\"hljs-keyword\">return</span> T;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"22二叉排序树的构造\"><a class=\"markdownIt-Anchor\" href=\"#22二叉排序树的构造\"></a> 22.二叉排序树的构造</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Creat_BST</span><span class=\"hljs-params\">(BiTree &amp;T,KeyType str[],<span class=\"hljs-keyword\">int</span> n)</span></span>{\n    T = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i&lt;n){\n        BST_Insert(T,str[i]);\n        i++;\n    }\n}\n</code></pre>\n"},{"title":"每日一题(一) 7.27","top":false,"cover":false,"toc":false,"mathjax":false,"summary":"判断子序列","abbrlink":"b23c","date":"2020-07-27T12:42:34.000Z","password":null,"_content":"## 每日一题 7.27\n\n### 给定字符串 **s** 和 **t** ，判断 **s** 是否为 **t** 的子序列。\n\n字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，\"ace\"是\"abcde\"的一个子序列，而\"aec\"不是）。\n\n**示例 1:**\ns = \"abc\", t = \"ahbgdc\"\n\n返回 true.\n\n**示例 2:**\ns = \"axc\", t = \"ahbgdc\"\n\n返回 false.\n\n##### 思路：\n\n​\t我们初始化两个指针 i 和 j ，分别指向 s 和 t 的初始位置。每次贪心地匹配，匹配成功则 i 和 j 同时右移，匹配 s 的下一个位置，匹配失败则 j 右移，i 不变，尝试用 t 的下一个字符匹配 s。\n​\t最终如果 i 移动到 s的末尾，就说明 s 是 t 的子序列。\n\n##### 代码：\n\n```c\n#include <stdio.h> \n#include <string.h>//字符串所需包\n#include <stdbool.h>//bool所需包\n\nbool isSubsequence(char *s, char *t) {    \n    int n = strlen(s), m = strlen(t);    \n    int i = 0, j = 0;//定义两个指针\n    while (i < n && j < m) {        \n        if (s[i] == t[j]) {            \n            i++;        \n        }        \n        j++;    \n    }    \n    printf(\"%d\",i==n);//%d指十进制数字\n}\n\nint main() {    \n    isSubsequence(\"abcdc\", \"asdabcd\");\n}\n```\n\n##### 复杂度分析：\n\n- 时间复杂度：O(m + n)\n- 空间复杂度：O(1)\n\n","source":"_posts/每日一题7-27.md","raw":"---\ntitle: 每日一题(一) 7.27\ntop: false\ncover: false\ntoc: false\nmathjax: false\ntags:\n  - 代码\n  - 每日一题\n  - 考研\ncategories:\n  - 每日一题\nsummary: 判断子序列\nabbrlink: b23c\ndate: 2020-07-27 20:42:34\npassword:\n---\n## 每日一题 7.27\n\n### 给定字符串 **s** 和 **t** ，判断 **s** 是否为 **t** 的子序列。\n\n字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，\"ace\"是\"abcde\"的一个子序列，而\"aec\"不是）。\n\n**示例 1:**\ns = \"abc\", t = \"ahbgdc\"\n\n返回 true.\n\n**示例 2:**\ns = \"axc\", t = \"ahbgdc\"\n\n返回 false.\n\n##### 思路：\n\n​\t我们初始化两个指针 i 和 j ，分别指向 s 和 t 的初始位置。每次贪心地匹配，匹配成功则 i 和 j 同时右移，匹配 s 的下一个位置，匹配失败则 j 右移，i 不变，尝试用 t 的下一个字符匹配 s。\n​\t最终如果 i 移动到 s的末尾，就说明 s 是 t 的子序列。\n\n##### 代码：\n\n```c\n#include <stdio.h> \n#include <string.h>//字符串所需包\n#include <stdbool.h>//bool所需包\n\nbool isSubsequence(char *s, char *t) {    \n    int n = strlen(s), m = strlen(t);    \n    int i = 0, j = 0;//定义两个指针\n    while (i < n && j < m) {        \n        if (s[i] == t[j]) {            \n            i++;        \n        }        \n        j++;    \n    }    \n    printf(\"%d\",i==n);//%d指十进制数字\n}\n\nint main() {    \n    isSubsequence(\"abcdc\", \"asdabcd\");\n}\n```\n\n##### 复杂度分析：\n\n- 时间复杂度：O(m + n)\n- 空间复杂度：O(1)\n\n","slug":"每日一题7-27","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdih0036zl9kcs0sartb","content":"<h2 id=\"每日一题-727\"><a class=\"markdownIt-Anchor\" href=\"#每日一题-727\"></a> 每日一题 7.27</h2>\n<h3 id=\"给定字符串-s-和-t-判断-s-是否为-t-的子序列\"><a class=\"markdownIt-Anchor\" href=\"#给定字符串-s-和-t-判断-s-是否为-t-的子序列\"></a> 给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断 <strong>s</strong> 是否为 <strong>t</strong> 的子序列。</h3>\n<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，\"ace\"是\"abcde\"的一个子序列，而\"aec\"不是）。</p>\n<p><strong>示例 1:</strong><br>\ns = “abc”, t = “ahbgdc”</p>\n<p>返回 true.</p>\n<p><strong>示例 2:</strong><br>\ns = “axc”, t = “ahbgdc”</p>\n<p>返回 false.</p>\n<h5 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路：</h5>\n<p>​\t我们初始化两个指针 i 和 j ，分别指向 s 和 t 的初始位置。每次贪心地匹配，匹配成功则 i 和 j 同时右移，匹配 s 的下一个位置，匹配失败则 j 右移，i 不变，尝试用 t 的下一个字符匹配 s。<br>\n​\t最终如果 i 移动到 s的末尾，就说明 s 是 t 的子序列。</p>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码：</h5>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt; </span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;//字符串所需包</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;//bool所需包</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isSubsequence</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *s, <span class=\"hljs-keyword\">char</span> *t)</span> </span>{    \n    <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-built_in\">strlen</span>(s), m = <span class=\"hljs-built_in\">strlen</span>(t);    \n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//定义两个指针</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; n &amp;&amp; j &lt; m) {        \n        <span class=\"hljs-keyword\">if</span> (s[i] == t[j]) {            \n            i++;        \n        }        \n        j++;    \n    }    \n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,i==n);<span class=\"hljs-comment\">//%d指十进制数字</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{    \n    isSubsequence(<span class=\"hljs-string\">\"abcdc\"</span>, <span class=\"hljs-string\">\"asdabcd\"</span>);\n}\n</code></pre>\n<h5 id=\"复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析\"></a> 复杂度分析：</h5>\n<ul>\n<li>时间复杂度：O(m + n)</li>\n<li>空间复杂度：O(1)</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"每日一题-727\"><a class=\"markdownIt-Anchor\" href=\"#每日一题-727\"></a> 每日一题 7.27</h2>\n<h3 id=\"给定字符串-s-和-t-判断-s-是否为-t-的子序列\"><a class=\"markdownIt-Anchor\" href=\"#给定字符串-s-和-t-判断-s-是否为-t-的子序列\"></a> 给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断 <strong>s</strong> 是否为 <strong>t</strong> 的子序列。</h3>\n<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，&quot;ace&quot;是&quot;abcde&quot;的一个子序列，而&quot;aec&quot;不是）。</p>\n<p><strong>示例 1:</strong><br />\ns = “abc”, t = “ahbgdc”</p>\n<p>返回 true.</p>\n<p><strong>示例 2:</strong><br />\ns = “axc”, t = “ahbgdc”</p>\n<p>返回 false.</p>\n<h5 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路：</h5>\n<p>​\t我们初始化两个指针 i 和 j ，分别指向 s 和 t 的初始位置。每次贪心地匹配，匹配成功则 i 和 j 同时右移，匹配 s 的下一个位置，匹配失败则 j 右移，i 不变，尝试用 t 的下一个字符匹配 s。<br />\n​\t最终如果 i 移动到 s的末尾，就说明 s 是 t 的子序列。</p>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码：</h5>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt; </span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;//字符串所需包</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;//bool所需包</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isSubsequence</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *s, <span class=\"hljs-keyword\">char</span> *t)</span> </span>{    \n    <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-built_in\">strlen</span>(s), m = <span class=\"hljs-built_in\">strlen</span>(t);    \n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//定义两个指针</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; n &amp;&amp; j &lt; m) {        \n        <span class=\"hljs-keyword\">if</span> (s[i] == t[j]) {            \n            i++;        \n        }        \n        j++;    \n    }    \n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,i==n);<span class=\"hljs-comment\">//%d指十进制数字</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{    \n    isSubsequence(<span class=\"hljs-string\">\"abcdc\"</span>, <span class=\"hljs-string\">\"asdabcd\"</span>);\n}\n</code></pre>\n<h5 id=\"复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析\"></a> 复杂度分析：</h5>\n<ul>\n<li>时间复杂度：O(m + n)</li>\n<li>空间复杂度：O(1)</li>\n</ul>\n"},{"title":"每日一题(二) 7.28","top":false,"cover":false,"toc":false,"mathjax":false,"summary":"判断二叉树深度","abbrlink":"6f31","date":"2020-07-28T08:58:06.000Z","password":null,"_content":"## 每日一题 7.28\n\n#### 给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n##### 思路：\n\n- 建立二叉树结构\n- 建立二叉树，创造结点\n- 递归求解二叉树深度\n- 释放结点\n\n##### 代码：\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\n//二叉树结构\ntypedef struct tree //结构体的名字为tree\n{\n    char ch;\n    struct tree *lchild;//指向tree型变量的指针（指向自己结构体的指针）\n    struct tree *rchild;\n}tree;\n//按先序建立二叉树\ntree *CreateTree()  //创建树；\n{\n    tree *bt;  //定义节点的指针bt\n    char str;  //屏幕输入的字符\n    scanf(\"%c\",&str);  //把屏幕输入字符赋予str\n    if(str=='0')\n        return NULL;\n    else\n    {\n        bt=(tree *)malloc(sizeof(tree));//为指针bt申请内存空间\n        bt->ch=str;\n        bt->lchild=CreateTree();\n        bt->rchild=CreateTree();\n        return bt;\n    }\n}\n//先定义两个变量，初始化为0 int ld=0，int rd=0；分别表示左子树和右子树的深度；\n//先判断二叉树bt是否为空，为空直接return返回；\n//不为空，进入左子树的递归调用，此时ld=1，一直到某个结点的左子树为空，if条件不成立，返回上一层递归调用；\n//之后进入右子树的递归调用，再进入这个结点的左子树一直到左子树为空，返回上一层递归调用，继续进入右子树的递归调用；\n//一直循环判断使用哪个递归调用；\n//一直到某个结点的左右子树为空，返回ld和rd的最大值，并将所带回的值+1，重新赋给ld或者rd；\n//重复上述过程，直到根结点，说明bt为空，无法继续返回，所以结束调用函数；\n//返回main函数带回一个整型的值；\n\n\n//求二叉树的深度,递归实现；\nint DeepOrder(tree *bt)\n{\n    int ld=0,rd=0;\n    if(bt)\n    {\n        //先找到最左边的左右孩子为空的结点，之后找到相对位置靠近第一个结点的结点，依次类推；\n        ld=DeepOrder(bt->lchild)+1;\n        rd=DeepOrder(bt->rchild)+1;\n    }\n    return ld>=rd?ld:rd;\n}\n\n//释放树的结点；\nvoid DestroyTree(tree *bt)\n{\n    if(bt)\n    {\n        DestroyTree(bt->lchild);\n        DestroyTree(bt->rchild);\n        free(bt);\n    }\n}\n\nint main(void)\n{\n    tree *bt;\n    printf(\"请以先序输入二叉树(0表示该结点的子结点为空):\\n\");\n    bt=CreateTree();\n    printf(\"bt为： %s\",bt);\n    int deep=DeepOrder(bt);\n    printf(\"\\n二叉树的深度为:  %d\\n\",deep);\n    printf(\"\\n\");\n    DestroyTree(bt);  //释放树结点；\n    return 0;\n}\n```","source":"_posts/每日一题7-28.md","raw":"---\ntitle: 每日一题(二) 7.28\ntop: false\ncover: false\ntoc: false\nmathjax: false\ntags:\n  - 代码\n  - 每日一题\n  - 考研\ncategories:\n  - 每日一题\nsummary: 判断二叉树深度\nabbrlink: 6f31\ndate: 2020-07-28 16:58:06\npassword:\n---\n## 每日一题 7.28\n\n#### 给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n##### 思路：\n\n- 建立二叉树结构\n- 建立二叉树，创造结点\n- 递归求解二叉树深度\n- 释放结点\n\n##### 代码：\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\n//二叉树结构\ntypedef struct tree //结构体的名字为tree\n{\n    char ch;\n    struct tree *lchild;//指向tree型变量的指针（指向自己结构体的指针）\n    struct tree *rchild;\n}tree;\n//按先序建立二叉树\ntree *CreateTree()  //创建树；\n{\n    tree *bt;  //定义节点的指针bt\n    char str;  //屏幕输入的字符\n    scanf(\"%c\",&str);  //把屏幕输入字符赋予str\n    if(str=='0')\n        return NULL;\n    else\n    {\n        bt=(tree *)malloc(sizeof(tree));//为指针bt申请内存空间\n        bt->ch=str;\n        bt->lchild=CreateTree();\n        bt->rchild=CreateTree();\n        return bt;\n    }\n}\n//先定义两个变量，初始化为0 int ld=0，int rd=0；分别表示左子树和右子树的深度；\n//先判断二叉树bt是否为空，为空直接return返回；\n//不为空，进入左子树的递归调用，此时ld=1，一直到某个结点的左子树为空，if条件不成立，返回上一层递归调用；\n//之后进入右子树的递归调用，再进入这个结点的左子树一直到左子树为空，返回上一层递归调用，继续进入右子树的递归调用；\n//一直循环判断使用哪个递归调用；\n//一直到某个结点的左右子树为空，返回ld和rd的最大值，并将所带回的值+1，重新赋给ld或者rd；\n//重复上述过程，直到根结点，说明bt为空，无法继续返回，所以结束调用函数；\n//返回main函数带回一个整型的值；\n\n\n//求二叉树的深度,递归实现；\nint DeepOrder(tree *bt)\n{\n    int ld=0,rd=0;\n    if(bt)\n    {\n        //先找到最左边的左右孩子为空的结点，之后找到相对位置靠近第一个结点的结点，依次类推；\n        ld=DeepOrder(bt->lchild)+1;\n        rd=DeepOrder(bt->rchild)+1;\n    }\n    return ld>=rd?ld:rd;\n}\n\n//释放树的结点；\nvoid DestroyTree(tree *bt)\n{\n    if(bt)\n    {\n        DestroyTree(bt->lchild);\n        DestroyTree(bt->rchild);\n        free(bt);\n    }\n}\n\nint main(void)\n{\n    tree *bt;\n    printf(\"请以先序输入二叉树(0表示该结点的子结点为空):\\n\");\n    bt=CreateTree();\n    printf(\"bt为： %s\",bt);\n    int deep=DeepOrder(bt);\n    printf(\"\\n二叉树的深度为:  %d\\n\",deep);\n    printf(\"\\n\");\n    DestroyTree(bt);  //释放树结点；\n    return 0;\n}\n```","slug":"每日一题7-28","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdii003azl9k0thnb41r","content":"<h2 id=\"每日一题-728\"><a class=\"markdownIt-Anchor\" href=\"#每日一题-728\"></a> 每日一题 7.28</h2>\n<h4 id=\"给定一个二叉树找出其最大深度-二叉树的深度为根节点到最远叶子节点的最长路径上的节点数\"><a class=\"markdownIt-Anchor\" href=\"#给定一个二叉树找出其最大深度-二叉树的深度为根节点到最远叶子节点的最长路径上的节点数\"></a> 给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</h4>\n<h5 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路：</h5>\n<ul>\n<li>建立二叉树结构</li>\n<li>建立二叉树，创造结点</li>\n<li>递归求解二叉树深度</li>\n<li>释放结点</li>\n</ul>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码：</h5>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">//二叉树结构</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tree</span> //结构体的名字为<span class=\"hljs-title\">tree</span>\n{</span>\n    <span class=\"hljs-keyword\">char</span> ch;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tree</span> *<span class=\"hljs-title\">lchild</span>;</span><span class=\"hljs-comment\">//指向tree型变量的指针（指向自己结构体的指针）</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tree</span> *<span class=\"hljs-title\">rchild</span>;</span>\n}tree;\n<span class=\"hljs-comment\">//按先序建立二叉树</span>\n<span class=\"hljs-function\">tree *<span class=\"hljs-title\">CreateTree</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-comment\">//创建树；</span>\n</span>{\n    tree *bt;  <span class=\"hljs-comment\">//定义节点的指针bt</span>\n    <span class=\"hljs-keyword\">char</span> str;  <span class=\"hljs-comment\">//屏幕输入的字符</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%c\"</span>,&amp;str);  <span class=\"hljs-comment\">//把屏幕输入字符赋予str</span>\n    <span class=\"hljs-keyword\">if</span>(str==<span class=\"hljs-string\">'0'</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">else</span>\n    {\n        bt=(tree *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(tree));<span class=\"hljs-comment\">//为指针bt申请内存空间</span>\n        bt-&gt;ch=str;\n        bt-&gt;lchild=CreateTree();\n        bt-&gt;rchild=CreateTree();\n        <span class=\"hljs-keyword\">return</span> bt;\n    }\n}\n<span class=\"hljs-comment\">//先定义两个变量，初始化为0 int ld=0，int rd=0；分别表示左子树和右子树的深度；</span>\n<span class=\"hljs-comment\">//先判断二叉树bt是否为空，为空直接return返回；</span>\n<span class=\"hljs-comment\">//不为空，进入左子树的递归调用，此时ld=1，一直到某个结点的左子树为空，if条件不成立，返回上一层递归调用；</span>\n<span class=\"hljs-comment\">//之后进入右子树的递归调用，再进入这个结点的左子树一直到左子树为空，返回上一层递归调用，继续进入右子树的递归调用；</span>\n<span class=\"hljs-comment\">//一直循环判断使用哪个递归调用；</span>\n<span class=\"hljs-comment\">//一直到某个结点的左右子树为空，返回ld和rd的最大值，并将所带回的值+1，重新赋给ld或者rd；</span>\n<span class=\"hljs-comment\">//重复上述过程，直到根结点，说明bt为空，无法继续返回，所以结束调用函数；</span>\n<span class=\"hljs-comment\">//返回main函数带回一个整型的值；</span>\n\n\n<span class=\"hljs-comment\">//求二叉树的深度,递归实现；</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">DeepOrder</span><span class=\"hljs-params\">(tree *bt)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> ld=<span class=\"hljs-number\">0</span>,rd=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span>(bt)\n    {\n        <span class=\"hljs-comment\">//先找到最左边的左右孩子为空的结点，之后找到相对位置靠近第一个结点的结点，依次类推；</span>\n        ld=DeepOrder(bt-&gt;lchild)+<span class=\"hljs-number\">1</span>;\n        rd=DeepOrder(bt-&gt;rchild)+<span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> ld&gt;=rd?ld:rd;\n}\n\n<span class=\"hljs-comment\">//释放树的结点；</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DestroyTree</span><span class=\"hljs-params\">(tree *bt)</span>\n</span>{\n    <span class=\"hljs-keyword\">if</span>(bt)\n    {\n        DestroyTree(bt-&gt;lchild);\n        DestroyTree(bt-&gt;rchild);\n        <span class=\"hljs-built_in\">free</span>(bt);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n</span>{\n    tree *bt;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"请以先序输入二叉树(0表示该结点的子结点为空):\\n\"</span>);\n    bt=CreateTree();\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"bt为： %s\"</span>,bt);\n    <span class=\"hljs-keyword\">int</span> deep=DeepOrder(bt);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n二叉树的深度为:  %d\\n\"</span>,deep);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n    DestroyTree(bt);  <span class=\"hljs-comment\">//释放树结点；</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"每日一题-728\"><a class=\"markdownIt-Anchor\" href=\"#每日一题-728\"></a> 每日一题 7.28</h2>\n<h4 id=\"给定一个二叉树找出其最大深度-二叉树的深度为根节点到最远叶子节点的最长路径上的节点数\"><a class=\"markdownIt-Anchor\" href=\"#给定一个二叉树找出其最大深度-二叉树的深度为根节点到最远叶子节点的最长路径上的节点数\"></a> 给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</h4>\n<h5 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路：</h5>\n<ul>\n<li>建立二叉树结构</li>\n<li>建立二叉树，创造结点</li>\n<li>递归求解二叉树深度</li>\n<li>释放结点</li>\n</ul>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码：</h5>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">//二叉树结构</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tree</span> //结构体的名字为<span class=\"hljs-title\">tree</span>\n{</span>\n    <span class=\"hljs-keyword\">char</span> ch;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tree</span> *<span class=\"hljs-title\">lchild</span>;</span><span class=\"hljs-comment\">//指向tree型变量的指针（指向自己结构体的指针）</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tree</span> *<span class=\"hljs-title\">rchild</span>;</span>\n}tree;\n<span class=\"hljs-comment\">//按先序建立二叉树</span>\n<span class=\"hljs-function\">tree *<span class=\"hljs-title\">CreateTree</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-comment\">//创建树；</span>\n</span>{\n    tree *bt;  <span class=\"hljs-comment\">//定义节点的指针bt</span>\n    <span class=\"hljs-keyword\">char</span> str;  <span class=\"hljs-comment\">//屏幕输入的字符</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%c\"</span>,&amp;str);  <span class=\"hljs-comment\">//把屏幕输入字符赋予str</span>\n    <span class=\"hljs-keyword\">if</span>(str==<span class=\"hljs-string\">'0'</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">else</span>\n    {\n        bt=(tree *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(tree));<span class=\"hljs-comment\">//为指针bt申请内存空间</span>\n        bt-&gt;ch=str;\n        bt-&gt;lchild=CreateTree();\n        bt-&gt;rchild=CreateTree();\n        <span class=\"hljs-keyword\">return</span> bt;\n    }\n}\n<span class=\"hljs-comment\">//先定义两个变量，初始化为0 int ld=0，int rd=0；分别表示左子树和右子树的深度；</span>\n<span class=\"hljs-comment\">//先判断二叉树bt是否为空，为空直接return返回；</span>\n<span class=\"hljs-comment\">//不为空，进入左子树的递归调用，此时ld=1，一直到某个结点的左子树为空，if条件不成立，返回上一层递归调用；</span>\n<span class=\"hljs-comment\">//之后进入右子树的递归调用，再进入这个结点的左子树一直到左子树为空，返回上一层递归调用，继续进入右子树的递归调用；</span>\n<span class=\"hljs-comment\">//一直循环判断使用哪个递归调用；</span>\n<span class=\"hljs-comment\">//一直到某个结点的左右子树为空，返回ld和rd的最大值，并将所带回的值+1，重新赋给ld或者rd；</span>\n<span class=\"hljs-comment\">//重复上述过程，直到根结点，说明bt为空，无法继续返回，所以结束调用函数；</span>\n<span class=\"hljs-comment\">//返回main函数带回一个整型的值；</span>\n\n\n<span class=\"hljs-comment\">//求二叉树的深度,递归实现；</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">DeepOrder</span><span class=\"hljs-params\">(tree *bt)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> ld=<span class=\"hljs-number\">0</span>,rd=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span>(bt)\n    {\n        <span class=\"hljs-comment\">//先找到最左边的左右孩子为空的结点，之后找到相对位置靠近第一个结点的结点，依次类推；</span>\n        ld=DeepOrder(bt-&gt;lchild)+<span class=\"hljs-number\">1</span>;\n        rd=DeepOrder(bt-&gt;rchild)+<span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> ld&gt;=rd?ld:rd;\n}\n\n<span class=\"hljs-comment\">//释放树的结点；</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DestroyTree</span><span class=\"hljs-params\">(tree *bt)</span>\n</span>{\n    <span class=\"hljs-keyword\">if</span>(bt)\n    {\n        DestroyTree(bt-&gt;lchild);\n        DestroyTree(bt-&gt;rchild);\n        <span class=\"hljs-built_in\">free</span>(bt);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n</span>{\n    tree *bt;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"请以先序输入二叉树(0表示该结点的子结点为空):\\n\"</span>);\n    bt=CreateTree();\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"bt为： %s\"</span>,bt);\n    <span class=\"hljs-keyword\">int</span> deep=DeepOrder(bt);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n二叉树的深度为:  %d\\n\"</span>,deep);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n    DestroyTree(bt);  <span class=\"hljs-comment\">//释放树结点；</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n"},{"title":"每日一题(四) 8.3","top":false,"cover":false,"toc":false,"mathjax":false,"abbrlink":"dde7","date":"2020-08-03T10:15:07.000Z","password":null,"summary":"中序遍历","_content":"## 每日一题（四） 8.3\n##### 二叉树的中序遍历\n##### 给定一个二叉树，返回他的中序遍历\n\n##### 示例：\n\n```c\n输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n##### 代码：\n\n```c\n一.递归实现 \n    void InOrder(BiTree bt){\n    if(bt==NULL) return; \n    InOrder(bt->lchild); \n    visit(bt->data); \n    InOrder(bt->rchild); \n} \n二.中序遍历非递归实现(利用栈来辅助储存，先出栈，在访问) \nvoid NRInOrder(BiTree bt){ \n\tBiTree Stack[maxsize];//初始化辅助栈 \n    int top = -1;//栈的下标 \n    BiTree p = bt;//用p遍历二叉树 \n    while(p!=NULL||p!=-1){ //p不为空或栈不为空 \n       if(p!=NULL){//左孩子不为空 \n           Stack[++top] = p;//入栈 \n           p = p -> lchild;//往左走 \n        }else{ \n            p = tack[top--];//出栈 \n            visit(p);//访问节点 \n            P->rchild;//往右走 \n        } \n    } \n}\n```\n\n","source":"_posts/每日一题8-3.md","raw":"---\ntitle: 每日一题(四) 8.3\ntop: false\ncover: false\ntoc: false\nmathjax: false\ntags:\n  - 代码\n  - 每日一题\n  - 考研\ncategories:\n  - 每日一题\nabbrlink: dde7\ndate: 2020-08-03 18:15:07\npassword:\nsummary: 中序遍历\n---\n## 每日一题（四） 8.3\n##### 二叉树的中序遍历\n##### 给定一个二叉树，返回他的中序遍历\n\n##### 示例：\n\n```c\n输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n##### 代码：\n\n```c\n一.递归实现 \n    void InOrder(BiTree bt){\n    if(bt==NULL) return; \n    InOrder(bt->lchild); \n    visit(bt->data); \n    InOrder(bt->rchild); \n} \n二.中序遍历非递归实现(利用栈来辅助储存，先出栈，在访问) \nvoid NRInOrder(BiTree bt){ \n\tBiTree Stack[maxsize];//初始化辅助栈 \n    int top = -1;//栈的下标 \n    BiTree p = bt;//用p遍历二叉树 \n    while(p!=NULL||p!=-1){ //p不为空或栈不为空 \n       if(p!=NULL){//左孩子不为空 \n           Stack[++top] = p;//入栈 \n           p = p -> lchild;//往左走 \n        }else{ \n            p = tack[top--];//出栈 \n            visit(p);//访问节点 \n            P->rchild;//往右走 \n        } \n    } \n}\n```\n\n","slug":"每日一题8-3","published":1,"updated":"2020-08-10T10:21:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdii003ezl9k8ozngg1o","content":"<h2 id=\"每日一题四-83\"><a class=\"markdownIt-Anchor\" href=\"#每日一题四-83\"></a> 每日一题（四） 8.3</h2>\n<h5 id=\"二叉树的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的中序遍历\"></a> 二叉树的中序遍历</h5>\n<h5 id=\"给定一个二叉树返回他的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#给定一个二叉树返回他的中序遍历\"></a> 给定一个二叉树，返回他的中序遍历</h5>\n<h5 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例：</h5>\n<pre class=\"highlight\"><code class=\"c\">输入: [<span class=\"hljs-number\">1</span>,null,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n   <span class=\"hljs-number\">1</span>\n    \\\n     <span class=\"hljs-number\">2</span>\n    /\n   <span class=\"hljs-number\">3</span>\n\n输出: [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>]\n</code></pre>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码：</h5>\n<pre class=\"highlight\"><code class=\"c\">一.递归实现 \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InOrder</span><span class=\"hljs-params\">(BiTree bt)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(bt==<span class=\"hljs-literal\">NULL</span>) <span class=\"hljs-keyword\">return</span>; \n    InOrder(bt-&gt;lchild); \n    visit(bt-&gt;data); \n    InOrder(bt-&gt;rchild); \n} \n二.中序遍历非递归实现(利用栈来辅助储存，先出栈，在访问) \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">NRInOrder</span><span class=\"hljs-params\">(BiTree bt)</span></span>{ \n\tBiTree Stack[maxsize];<span class=\"hljs-comment\">//初始化辅助栈 </span>\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//栈的下标 </span>\n    BiTree p = bt;<span class=\"hljs-comment\">//用p遍历二叉树 </span>\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>||p!=<span class=\"hljs-number\">-1</span>){ <span class=\"hljs-comment\">//p不为空或栈不为空 </span>\n       <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>){<span class=\"hljs-comment\">//左孩子不为空 </span>\n           Stack[++top] = p;<span class=\"hljs-comment\">//入栈 </span>\n           p = p -&gt; lchild;<span class=\"hljs-comment\">//往左走 </span>\n        }<span class=\"hljs-keyword\">else</span>{ \n            p = tack[top--];<span class=\"hljs-comment\">//出栈 </span>\n            visit(p);<span class=\"hljs-comment\">//访问节点 </span>\n            P-&gt;rchild;<span class=\"hljs-comment\">//往右走 </span>\n        } \n    } \n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"每日一题四-83\"><a class=\"markdownIt-Anchor\" href=\"#每日一题四-83\"></a> 每日一题（四） 8.3</h2>\n<h5 id=\"二叉树的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的中序遍历\"></a> 二叉树的中序遍历</h5>\n<h5 id=\"给定一个二叉树返回他的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#给定一个二叉树返回他的中序遍历\"></a> 给定一个二叉树，返回他的中序遍历</h5>\n<h5 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例：</h5>\n<pre class=\"highlight\"><code class=\"c\">输入: [<span class=\"hljs-number\">1</span>,null,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n   <span class=\"hljs-number\">1</span>\n    \\\n     <span class=\"hljs-number\">2</span>\n    /\n   <span class=\"hljs-number\">3</span>\n\n输出: [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>]\n</code></pre>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码：</h5>\n<pre class=\"highlight\"><code class=\"c\">一.递归实现 \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InOrder</span><span class=\"hljs-params\">(BiTree bt)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(bt==<span class=\"hljs-literal\">NULL</span>) <span class=\"hljs-keyword\">return</span>; \n    InOrder(bt-&gt;lchild); \n    visit(bt-&gt;data); \n    InOrder(bt-&gt;rchild); \n} \n二.中序遍历非递归实现(利用栈来辅助储存，先出栈，在访问) \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">NRInOrder</span><span class=\"hljs-params\">(BiTree bt)</span></span>{ \n\tBiTree Stack[maxsize];<span class=\"hljs-comment\">//初始化辅助栈 </span>\n    <span class=\"hljs-keyword\">int</span> top = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//栈的下标 </span>\n    BiTree p = bt;<span class=\"hljs-comment\">//用p遍历二叉树 </span>\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>||p!=<span class=\"hljs-number\">-1</span>){ <span class=\"hljs-comment\">//p不为空或栈不为空 </span>\n       <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>){<span class=\"hljs-comment\">//左孩子不为空 </span>\n           Stack[++top] = p;<span class=\"hljs-comment\">//入栈 </span>\n           p = p -&gt; lchild;<span class=\"hljs-comment\">//往左走 </span>\n        }<span class=\"hljs-keyword\">else</span>{ \n            p = tack[top--];<span class=\"hljs-comment\">//出栈 </span>\n            visit(p);<span class=\"hljs-comment\">//访问节点 </span>\n            P-&gt;rchild;<span class=\"hljs-comment\">//往右走 </span>\n        } \n    } \n}\n</code></pre>\n"},{"title":"计网第三章 物理层","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"第三章 物理层","abbrlink":"506b","date":"2020-07-27T08:53:23.000Z","password":null,"_content":"## 第三章 物理层\n\n1. 有线传输介质：双绞线、同轴电缆和光纤\n2. 光纤传播模式\n   - 多模传输：多束光线在芯材中通过不同路径传播\n     \n     - 多模阶跃：芯材的密度从中心到边缘是一致的。在边界上，填充材料密度降低（密度突变）\n     \n     - 多模渐变：芯材的中心密度最大，并向外逐步变小，到边界是最小（密度渐变）\n     \n   - 单模传输\n   \n3. 物理连接\n\n   - DTE数据终端设备：是具有数据处理能力及发送和接收数据信息能力的设备\n\n   - DCE数据电路终接设备：是能够通过网络发送和接收模拟或数字信号形式数据的设备（起到帮助的作用）\n\n   - DTE一般不直接连接网络，它通过一台DCE通信。把DTE和DCE的连接成为DTE-DCE接口\n\n4. **媒介是消息传输的物理通路**\n5. DTE是二进制数字数据源或宿\n6. **HDLC中标志域控制了帧的开始和结束**\n\n7. IEEE802标准讲数据链路层划分为一个上子层和一个下子层，分别为LLC和MAC\n\n","source":"_posts/物理层.md","raw":"---\ntitle: 计网第三章 物理层\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 计网\n  - 总结\n  - 考研\ncategories:\n  - 计网\nsummary: 第三章 物理层\nabbrlink: 506b\ndate: 2020-07-27 16:53:23\npassword:\n---\n## 第三章 物理层\n\n1. 有线传输介质：双绞线、同轴电缆和光纤\n2. 光纤传播模式\n   - 多模传输：多束光线在芯材中通过不同路径传播\n     \n     - 多模阶跃：芯材的密度从中心到边缘是一致的。在边界上，填充材料密度降低（密度突变）\n     \n     - 多模渐变：芯材的中心密度最大，并向外逐步变小，到边界是最小（密度渐变）\n     \n   - 单模传输\n   \n3. 物理连接\n\n   - DTE数据终端设备：是具有数据处理能力及发送和接收数据信息能力的设备\n\n   - DCE数据电路终接设备：是能够通过网络发送和接收模拟或数字信号形式数据的设备（起到帮助的作用）\n\n   - DTE一般不直接连接网络，它通过一台DCE通信。把DTE和DCE的连接成为DTE-DCE接口\n\n4. **媒介是消息传输的物理通路**\n5. DTE是二进制数字数据源或宿\n6. **HDLC中标志域控制了帧的开始和结束**\n\n7. IEEE802标准讲数据链路层划分为一个上子层和一个下子层，分别为LLC和MAC\n\n","slug":"物理层","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdij003izl9k69ah30z5","content":"<h2 id=\"第三章-物理层\"><a class=\"markdownIt-Anchor\" href=\"#第三章-物理层\"></a> 第三章 物理层</h2>\n<ol>\n<li>\n<p>有线传输介质：双绞线、同轴电缆和光纤</p>\n</li>\n<li>\n<p>光纤传播模式</p>\n<ul>\n<li>\n<p>多模传输：多束光线在芯材中通过不同路径传播</p>\n<ul>\n<li>\n<p>多模阶跃：芯材的密度从中心到边缘是一致的。在边界上，填充材料密度降低（密度突变）</p>\n</li>\n<li>\n<p>多模渐变：芯材的中心密度最大，并向外逐步变小，到边界是最小（密度渐变）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>单模传输</p>\n</li>\n</ul>\n</li>\n<li>\n<p>物理连接</p>\n<ul>\n<li>\n<p>DTE数据终端设备：是具有数据处理能力及发送和接收数据信息能力的设备</p>\n</li>\n<li>\n<p>DCE数据电路终接设备：是能够通过网络发送和接收模拟或数字信号形式数据的设备（起到帮助的作用）</p>\n</li>\n<li>\n<p>DTE一般不直接连接网络，它通过一台DCE通信。把DTE和DCE的连接成为DTE-DCE接口</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>媒介是消息传输的物理通路</strong></p>\n</li>\n<li>\n<p>DTE是二进制数字数据源或宿</p>\n</li>\n<li>\n<p><strong>HDLC中标志域控制了帧的开始和结束</strong></p>\n</li>\n<li>\n<p>IEEE802标准讲数据链路层划分为一个上子层和一个下子层，分别为LLC和MAC</p>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第三章-物理层\"><a class=\"markdownIt-Anchor\" href=\"#第三章-物理层\"></a> 第三章 物理层</h2>\n<ol>\n<li>\n<p>有线传输介质：双绞线、同轴电缆和光纤</p>\n</li>\n<li>\n<p>光纤传播模式</p>\n<ul>\n<li>\n<p>多模传输：多束光线在芯材中通过不同路径传播</p>\n<ul>\n<li>\n<p>多模阶跃：芯材的密度从中心到边缘是一致的。在边界上，填充材料密度降低（密度突变）</p>\n</li>\n<li>\n<p>多模渐变：芯材的中心密度最大，并向外逐步变小，到边界是最小（密度渐变）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>单模传输</p>\n</li>\n</ul>\n</li>\n<li>\n<p>物理连接</p>\n<ul>\n<li>\n<p>DTE数据终端设备：是具有数据处理能力及发送和接收数据信息能力的设备</p>\n</li>\n<li>\n<p>DCE数据电路终接设备：是能够通过网络发送和接收模拟或数字信号形式数据的设备（起到帮助的作用）</p>\n</li>\n<li>\n<p>DTE一般不直接连接网络，它通过一台DCE通信。把DTE和DCE的连接成为DTE-DCE接口</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>媒介是消息传输的物理通路</strong></p>\n</li>\n<li>\n<p>DTE是二进制数字数据源或宿</p>\n</li>\n<li>\n<p><strong>HDLC中标志域控制了帧的开始和结束</strong></p>\n</li>\n<li>\n<p>IEEE802标准讲数据链路层划分为一个上子层和一个下子层，分别为LLC和MAC</p>\n</li>\n</ol>\n"},{"title":"第一次测试","author":"冷冠男","summary":"摘要测试","top":false,"cover":false,"abbrlink":"e047","date":"2020-05-07T01:25:00.000Z","img":null,"password":null,"_content":"\n## -搭建hexo博客-\n## 初记录 :smile:\n### 捯饬了两天，终于把网站搭建好了，\n使用matery主题<br>制作\n本项目由[冷的小站](https://www.lgn2018.com)支持,更多详细使用方法请在博客上查看<br>\n**本项目开源免费归档前长期维护，请勿用于任何商业用途，否则后果自负！<br>**\n## -技术支持 Support-\n在使用过程中有任何问题可以**提交Issue**（邮件不再回复） ，但是**在此之前** ，请仔细阅读下方**使用步骤** ！<br>\n## -使用步骤-\n* 登录前需要想好自己要选择哪一个座位\n* 具体使用步骤请登录 https://www.lgn2018.com 查看 :smile:  </br>\n\n中心主题\n\t分支主题 1\n\t分支主题 2\n\t分支主题 3\n\n\n","source":"_posts/第一次测试.md","raw":"---\ntitle: 第一次测试\nauthor: 冷冠男\nsummary: 摘要测试\ntop: false\ncover: false\ncategories:\n  - first\ntags:\n  - Typora\n  - Markdown\nabbrlink: e047\ndate: 2020-05-07 09:25:00\nimg:\npassword:\n---\n\n## -搭建hexo博客-\n## 初记录 :smile:\n### 捯饬了两天，终于把网站搭建好了，\n使用matery主题<br>制作\n本项目由[冷的小站](https://www.lgn2018.com)支持,更多详细使用方法请在博客上查看<br>\n**本项目开源免费归档前长期维护，请勿用于任何商业用途，否则后果自负！<br>**\n## -技术支持 Support-\n在使用过程中有任何问题可以**提交Issue**（邮件不再回复） ，但是**在此之前** ，请仔细阅读下方**使用步骤** ！<br>\n## -使用步骤-\n* 登录前需要想好自己要选择哪一个座位\n* 具体使用步骤请登录 https://www.lgn2018.com 查看 :smile:  </br>\n\n中心主题\n\t分支主题 1\n\t分支主题 2\n\t分支主题 3\n\n\n","slug":"第一次测试","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdij003mzl9kd9ie3v7p","content":"<h2 id=\"-搭建hexo博客-\"><a class=\"markdownIt-Anchor\" href=\"#-搭建hexo博客-\"></a> -搭建hexo博客-</h2>\n<h2 id=\"初记录\"><a class=\"markdownIt-Anchor\" href=\"#初记录\"></a> 初记录 😄</h2>\n<h3 id=\"捯饬了两天终于把网站搭建好了\"><a class=\"markdownIt-Anchor\" href=\"#捯饬了两天终于把网站搭建好了\"></a> 捯饬了两天，终于把网站搭建好了，</h3>\n<p>使用matery主题<br>制作<br>\n本项目由<a href=\"https://www.lgn2018.com\" target=\"_blank\" rel=\"noopener\">冷的小站</a>支持,更多详细使用方法请在博客上查看<br><br>\n<strong>本项目开源免费归档前长期维护，请勿用于任何商业用途，否则后果自负！<br></strong></p>\n<h2 id=\"-技术支持-support-\"><a class=\"markdownIt-Anchor\" href=\"#-技术支持-support-\"></a> -技术支持 Support-</h2>\n<p>在使用过程中有任何问题可以<strong>提交Issue</strong>（邮件不再回复） ，但是<strong>在此之前</strong> ，请仔细阅读下方<strong>使用步骤</strong> ！<br></p>\n<h2 id=\"-使用步骤-\"><a class=\"markdownIt-Anchor\" href=\"#-使用步骤-\"></a> -使用步骤-</h2>\n<ul>\n<li>登录前需要想好自己要选择哪一个座位</li>\n<li>具体使用步骤请登录 <a href=\"https://www.lgn2018.com\" target=\"_blank\" rel=\"noopener\">https://www.lgn2018.com</a> 查看 😄  <br></li>\n</ul>\n<p>中心主题<br>\n分支主题 1<br>\n分支主题 2<br>\n分支主题 3</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"-搭建hexo博客-\"><a class=\"markdownIt-Anchor\" href=\"#-搭建hexo博客-\"></a> -搭建hexo博客-</h2>\n<h2 id=\"初记录\"><a class=\"markdownIt-Anchor\" href=\"#初记录\"></a> 初记录 😄</h2>\n<h3 id=\"捯饬了两天终于把网站搭建好了\"><a class=\"markdownIt-Anchor\" href=\"#捯饬了两天终于把网站搭建好了\"></a> 捯饬了两天，终于把网站搭建好了，</h3>\n<p>使用matery主题<br>制作<br />\n本项目由<a href=\"https://www.lgn2018.com\" target=\"_blank\" rel=\"noopener\">冷的小站</a>支持,更多详细使用方法请在博客上查看<br><br />\n<strong>本项目开源免费归档前长期维护，请勿用于任何商业用途，否则后果自负！<br></strong></p>\n<h2 id=\"-技术支持-support-\"><a class=\"markdownIt-Anchor\" href=\"#-技术支持-support-\"></a> -技术支持 Support-</h2>\n<p>在使用过程中有任何问题可以<strong>提交Issue</strong>（邮件不再回复） ，但是<strong>在此之前</strong> ，请仔细阅读下方<strong>使用步骤</strong> ！<br></p>\n<h2 id=\"-使用步骤-\"><a class=\"markdownIt-Anchor\" href=\"#-使用步骤-\"></a> -使用步骤-</h2>\n<ul>\n<li>登录前需要想好自己要选择哪一个座位</li>\n<li>具体使用步骤请登录 <a href=\"https://www.lgn2018.com\" target=\"_blank\" rel=\"noopener\">https://www.lgn2018.com</a> 查看 😄  </br></li>\n</ul>\n<p>中心主题<br />\n分支主题 1<br />\n分支主题 2<br />\n分支主题 3</p>\n"},{"title":"每日一题(三) 7.29","top":false,"cover":false,"toc":false,"mathjax":false,"summary":"判断有效括号","abbrlink":"7624","date":"2020-07-29T09:17:01.000Z","password":null,"_content":"## 每日一题(三) 7.29\n\n##### 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n注意空字符串可被认为是有效字符串。\n\n##### 题解思路\n\n使用数组做栈，两个指针i和j，分别代表字符串和栈顶+1，先判断是否是({[,如果是进栈，不是则判断栈是否为空，空则返回false；如果栈顶是相对应字符，j--；否则，返回false。\n最后再判断栈中是否还有元素，没有元素则false，否则true。\n\n##### 代码\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\nbool isValid1(char * s){\n    int i=0,j=0;\n    char stack[100000];\n\n    while(s[i]!='\\0'){\n        if((s[i]==')' || s[i]==']' || s[i]=='}') && j==0){\n            return false;\n        }\n        if(s[i]=='(' || s[i]=='{' || s[i]=='['){\n            stack[j++] = s[i++];\n        }\n        else{\n            if(s[i]==')' && stack[j-1] != '('){\n                return false;\n            }\n            else if(s[i]=='}'&& stack[j-1] != '{'){\n                return false;\n            }\n            else if(s[i]==']' && stack[j-1] != '['){\n                return false;\n            }\n            i++;\n            j--;\n        }\n    }\n    if(j==0){\n        printf(\"chenggong\");\n        return true;\n\n    }else{\n        return false;\n    }\n}\n\nbool isValid(char * s){\n    int i = 0;\n    char str[10000] = {0} ;\n    int len = strlen(s);\n    if(len % 2 != 0){\n        printf(\"字符串长度为奇数：%s\",\"失败\\n\");\n        return false;\n    } else if (len == 0 ){\n        printf(\"字符串长度为0:%s\",\"成功\\n\");\n        return true;\n    }\n\n    for(int l = 0; l < strlen(s); l++){\n\n        printf(\"%s\\n\",\"进入循环\");\n        printf(\"第%d次循环\\n\",l+1);\n        if(s[l] == '(') {\n            printf(\"l为:%d\\n\", l);\n            printf(\"i为:%d\\n\", i);\n            str[i] = s[l];\n            printf(\"s[l]为:%c\\ts为:%s\\n\", s[l],s);\n            printf(\"str字符串为:%s\\n\", str);\n            i++;\n//            continue;\n        } else if (s[l] == '['){\n            printf(\"l为:%d\\n\", l);\n            printf(\"i为:%d\\n\", i);\n            str[i] = s[l];\n            printf(\"str字符串为:%s\\n\", str);\n            i++;\n        } else if (s[l] == '{'){\n            str[i] = s[l];\n            i++;\n        } else if (s[l] == ')'){\n            if(strlen(str) == 0){\n                printf(\"%s\",\"失败\\n\");\n                return false;\n            } else{\n                for (int j = i-1; j >= 0; --j) {\n                    printf(\"i为:%d\\n\", i);\n                    printf(\"j为:%d\\n\", j);\n                    printf(\"str字符串为:%s\\n\", str);\n                    if (str[j] == '('){\n\n                        str[j] = '\\0';\n                        printf(\"修改后的字符串为:%s\\n\", str);\n                        i--;\n                        break;\n                    }else if (str[j] != '('){\n                        printf(\"%s\",\"失败\");\n                        return false;\n\n                    }\n                    else{\n                        printf(\"%s\",\"失败\");\n                        return false;\n                    }\n                }\n            }\n        } else if (s[l] == ']'){\n            if(strlen(str) == 0){\n                printf(\"%s\",\"失败\");\n                return false;\n            } else{\n                for (int j = i-1; j >= 0; --j) {\n                    printf(\"i为:%d\\n\", i);\n                    printf(\"j为:%d\\n\", j);\n                    printf(\"str字符串为:%s\\n\", str);\n                    if (str[j] == '['  ){\n                        str[j] = '\\0';\n                        printf(\"修改后的字符串为:%s\\n\", str);\n                        i--;\n                        break;\n                    } else if (str[j] != '['){\n                        printf(\"%s\",\"失败\");\n                        return false;\n\n                    }\n\n                    else{\n                        printf(\"%s\",\"失败\");\n                        return false;\n                    }\n\n                }\n\n\n            }\n\n        } else if (s[l] == '}'){\n            printf(\"%s\\n\",\"进入\");\n            if(strlen(str) == 0){\n                printf(\"%s\",\"失败\\n\");\n                return false;\n            } else{\n                for (int j = i-1; j >= 0; --j) {\n                    printf(\"i为:%d\\n\", i);\n                    printf(\"j为:%d\\n\", j);\n                    printf(\"str字符串为:%s\\n\", str);\n                    if (str[j] == '{'){\n                        str[j] = '\\0';\n                        i--;\n                        break;\n\n\n                    }else if (str[j] == '{'){\n                        printf(\"%s\",\"失败\");\n                        return false;\n\n                    }\n                    else{\n                        printf(\"%s\",\"失败\");\n                        return false;\n                    }\n                }\n\n            }\n        }\n    }\n    if(strlen(str) == 0){\n        printf(\"%s\",\"成功\\n\");\n        return true;\n    }else{\n        printf(\"zheli%s\",\"失败\\n\");\n        return false;\n    }\n\n}\n\nint main() {\n//    isValid(\"{[]}\");\n    isValid1(\"{[]}\");\n    return 0;\n}\n\n```","source":"_posts/每日一题7-29.md","raw":"---\ntitle: 每日一题(三) 7.29\ntop: false\ncover: false\ntoc: false\nmathjax: false\ntags:\n  - 代码\n  - 每日一题\n  - 考研\ncategories:\n  - 每日一题\nsummary: 判断有效括号\nabbrlink: '7624'\ndate: 2020-07-29 17:17:01\npassword:\n---\n## 每日一题(三) 7.29\n\n##### 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n注意空字符串可被认为是有效字符串。\n\n##### 题解思路\n\n使用数组做栈，两个指针i和j，分别代表字符串和栈顶+1，先判断是否是({[,如果是进栈，不是则判断栈是否为空，空则返回false；如果栈顶是相对应字符，j--；否则，返回false。\n最后再判断栈中是否还有元素，没有元素则false，否则true。\n\n##### 代码\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\nbool isValid1(char * s){\n    int i=0,j=0;\n    char stack[100000];\n\n    while(s[i]!='\\0'){\n        if((s[i]==')' || s[i]==']' || s[i]=='}') && j==0){\n            return false;\n        }\n        if(s[i]=='(' || s[i]=='{' || s[i]=='['){\n            stack[j++] = s[i++];\n        }\n        else{\n            if(s[i]==')' && stack[j-1] != '('){\n                return false;\n            }\n            else if(s[i]=='}'&& stack[j-1] != '{'){\n                return false;\n            }\n            else if(s[i]==']' && stack[j-1] != '['){\n                return false;\n            }\n            i++;\n            j--;\n        }\n    }\n    if(j==0){\n        printf(\"chenggong\");\n        return true;\n\n    }else{\n        return false;\n    }\n}\n\nbool isValid(char * s){\n    int i = 0;\n    char str[10000] = {0} ;\n    int len = strlen(s);\n    if(len % 2 != 0){\n        printf(\"字符串长度为奇数：%s\",\"失败\\n\");\n        return false;\n    } else if (len == 0 ){\n        printf(\"字符串长度为0:%s\",\"成功\\n\");\n        return true;\n    }\n\n    for(int l = 0; l < strlen(s); l++){\n\n        printf(\"%s\\n\",\"进入循环\");\n        printf(\"第%d次循环\\n\",l+1);\n        if(s[l] == '(') {\n            printf(\"l为:%d\\n\", l);\n            printf(\"i为:%d\\n\", i);\n            str[i] = s[l];\n            printf(\"s[l]为:%c\\ts为:%s\\n\", s[l],s);\n            printf(\"str字符串为:%s\\n\", str);\n            i++;\n//            continue;\n        } else if (s[l] == '['){\n            printf(\"l为:%d\\n\", l);\n            printf(\"i为:%d\\n\", i);\n            str[i] = s[l];\n            printf(\"str字符串为:%s\\n\", str);\n            i++;\n        } else if (s[l] == '{'){\n            str[i] = s[l];\n            i++;\n        } else if (s[l] == ')'){\n            if(strlen(str) == 0){\n                printf(\"%s\",\"失败\\n\");\n                return false;\n            } else{\n                for (int j = i-1; j >= 0; --j) {\n                    printf(\"i为:%d\\n\", i);\n                    printf(\"j为:%d\\n\", j);\n                    printf(\"str字符串为:%s\\n\", str);\n                    if (str[j] == '('){\n\n                        str[j] = '\\0';\n                        printf(\"修改后的字符串为:%s\\n\", str);\n                        i--;\n                        break;\n                    }else if (str[j] != '('){\n                        printf(\"%s\",\"失败\");\n                        return false;\n\n                    }\n                    else{\n                        printf(\"%s\",\"失败\");\n                        return false;\n                    }\n                }\n            }\n        } else if (s[l] == ']'){\n            if(strlen(str) == 0){\n                printf(\"%s\",\"失败\");\n                return false;\n            } else{\n                for (int j = i-1; j >= 0; --j) {\n                    printf(\"i为:%d\\n\", i);\n                    printf(\"j为:%d\\n\", j);\n                    printf(\"str字符串为:%s\\n\", str);\n                    if (str[j] == '['  ){\n                        str[j] = '\\0';\n                        printf(\"修改后的字符串为:%s\\n\", str);\n                        i--;\n                        break;\n                    } else if (str[j] != '['){\n                        printf(\"%s\",\"失败\");\n                        return false;\n\n                    }\n\n                    else{\n                        printf(\"%s\",\"失败\");\n                        return false;\n                    }\n\n                }\n\n\n            }\n\n        } else if (s[l] == '}'){\n            printf(\"%s\\n\",\"进入\");\n            if(strlen(str) == 0){\n                printf(\"%s\",\"失败\\n\");\n                return false;\n            } else{\n                for (int j = i-1; j >= 0; --j) {\n                    printf(\"i为:%d\\n\", i);\n                    printf(\"j为:%d\\n\", j);\n                    printf(\"str字符串为:%s\\n\", str);\n                    if (str[j] == '{'){\n                        str[j] = '\\0';\n                        i--;\n                        break;\n\n\n                    }else if (str[j] == '{'){\n                        printf(\"%s\",\"失败\");\n                        return false;\n\n                    }\n                    else{\n                        printf(\"%s\",\"失败\");\n                        return false;\n                    }\n                }\n\n            }\n        }\n    }\n    if(strlen(str) == 0){\n        printf(\"%s\",\"成功\\n\");\n        return true;\n    }else{\n        printf(\"zheli%s\",\"失败\\n\");\n        return false;\n    }\n\n}\n\nint main() {\n//    isValid(\"{[]}\");\n    isValid1(\"{[]}\");\n    return 0;\n}\n\n```","slug":"每日一题7-29","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdik003qzl9kh3dndm84","content":"<h2 id=\"每日一题三-729\"><a class=\"markdownIt-Anchor\" href=\"#每日一题三-729\"></a> 每日一题(三) 7.29</h2>\n<h5 id=\"给定一个只包括-的字符串判断字符串是否有效\"><a class=\"markdownIt-Anchor\" href=\"#给定一个只包括-的字符串判断字符串是否有效\"></a> 给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串，判断字符串是否有效。</h5>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>\n左括号必须以正确的顺序闭合。<br>\n注意空字符串可被认为是有效字符串。</p>\n<h5 id=\"题解思路\"><a class=\"markdownIt-Anchor\" href=\"#题解思路\"></a> 题解思路</h5>\n<p>使用数组做栈，两个指针i和j，分别代表字符串和栈顶+1，先判断是否是({[,如果是进栈，不是则判断栈是否为空，空则返回false；如果栈顶是相对应字符，j–；否则，返回false。<br>\n最后再判断栈中是否还有元素，没有元素则false，否则true。</p>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h5>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isValid1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> * s)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">char</span> <span class=\"hljs-built_in\">stack</span>[<span class=\"hljs-number\">100000</span>];\n\n    <span class=\"hljs-keyword\">while</span>(s[i]!=<span class=\"hljs-string\">'\\0'</span>){\n        <span class=\"hljs-keyword\">if</span>((s[i]==<span class=\"hljs-string\">')'</span> || s[i]==<span class=\"hljs-string\">']'</span> || s[i]==<span class=\"hljs-string\">'}'</span>) &amp;&amp; j==<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">'('</span> || s[i]==<span class=\"hljs-string\">'{'</span> || s[i]==<span class=\"hljs-string\">'['</span>){\n            <span class=\"hljs-built_in\">stack</span>[j++] = s[i++];\n        }\n        <span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">')'</span> &amp;&amp; <span class=\"hljs-built_in\">stack</span>[j<span class=\"hljs-number\">-1</span>] != <span class=\"hljs-string\">'('</span>){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">'}'</span>&amp;&amp; <span class=\"hljs-built_in\">stack</span>[j<span class=\"hljs-number\">-1</span>] != <span class=\"hljs-string\">'{'</span>){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">']'</span> &amp;&amp; <span class=\"hljs-built_in\">stack</span>[j<span class=\"hljs-number\">-1</span>] != <span class=\"hljs-string\">'['</span>){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            i++;\n            j--;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"chenggong\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isValid</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> * s)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">10000</span>] = {<span class=\"hljs-number\">0</span>} ;\n    <span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-built_in\">strlen</span>(s);\n    <span class=\"hljs-keyword\">if</span>(len % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"字符串长度为奇数：%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (len == <span class=\"hljs-number\">0</span> ){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"字符串长度为0:%s\"</span>,<span class=\"hljs-string\">\"成功\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>; l &lt; <span class=\"hljs-built_in\">strlen</span>(s); l++){\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>,<span class=\"hljs-string\">\"进入循环\"</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"第%d次循环\\n\"</span>,l+<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">if</span>(s[l] == <span class=\"hljs-string\">'('</span>) {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"l为:%d\\n\"</span>, l);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n            str[i] = s[l];\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"s[l]为:%c\\ts为:%s\\n\"</span>, s[l],s);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n            i++;\n<span class=\"hljs-comment\">//            continue;</span>\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">'['</span>){\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"l为:%d\\n\"</span>, l);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n            str[i] = s[l];\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n            i++;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">'{'</span>){\n            str[i] = s[l];\n            i++;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">')'</span>){\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i<span class=\"hljs-number\">-1</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j) {\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"j为:%d\\n\"</span>, j);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n                    <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'('</span>){\n\n                        str[j] = <span class=\"hljs-string\">'\\0'</span>;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"修改后的字符串为:%s\\n\"</span>, str);\n                        i--;\n                        <span class=\"hljs-keyword\">break</span>;\n                    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[j] != <span class=\"hljs-string\">'('</span>){\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n                    }\n                    <span class=\"hljs-keyword\">else</span>{\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n                }\n            }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">']'</span>){\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i<span class=\"hljs-number\">-1</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j) {\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"j为:%d\\n\"</span>, j);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n                    <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'['</span>  ){\n                        str[j] = <span class=\"hljs-string\">'\\0'</span>;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"修改后的字符串为:%s\\n\"</span>, str);\n                        i--;\n                        <span class=\"hljs-keyword\">break</span>;\n                    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[j] != <span class=\"hljs-string\">'['</span>){\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n                    }\n\n                    <span class=\"hljs-keyword\">else</span>{\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n\n                }\n\n\n            }\n\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">'}'</span>){\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>,<span class=\"hljs-string\">\"进入\"</span>);\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i<span class=\"hljs-number\">-1</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j) {\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"j为:%d\\n\"</span>, j);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n                    <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'{'</span>){\n                        str[j] = <span class=\"hljs-string\">'\\0'</span>;\n                        i--;\n                        <span class=\"hljs-keyword\">break</span>;\n\n\n                    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'{'</span>){\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n                    }\n                    <span class=\"hljs-keyword\">else</span>{\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n                }\n\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"成功\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"zheli%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n<span class=\"hljs-comment\">//    isValid(\"{[]}\");</span>\n    isValid1(<span class=\"hljs-string\">\"{[]}\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"每日一题三-729\"><a class=\"markdownIt-Anchor\" href=\"#每日一题三-729\"></a> 每日一题(三) 7.29</h2>\n<h5 id=\"给定一个只包括-的字符串判断字符串是否有效\"><a class=\"markdownIt-Anchor\" href=\"#给定一个只包括-的字符串判断字符串是否有效\"></a> 给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串，判断字符串是否有效。</h5>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br />\n左括号必须以正确的顺序闭合。<br />\n注意空字符串可被认为是有效字符串。</p>\n<h5 id=\"题解思路\"><a class=\"markdownIt-Anchor\" href=\"#题解思路\"></a> 题解思路</h5>\n<p>使用数组做栈，两个指针i和j，分别代表字符串和栈顶+1，先判断是否是({[,如果是进栈，不是则判断栈是否为空，空则返回false；如果栈顶是相对应字符，j–；否则，返回false。<br />\n最后再判断栈中是否还有元素，没有元素则false，否则true。</p>\n<h5 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h5>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isValid1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> * s)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">char</span> <span class=\"hljs-built_in\">stack</span>[<span class=\"hljs-number\">100000</span>];\n\n    <span class=\"hljs-keyword\">while</span>(s[i]!=<span class=\"hljs-string\">'\\0'</span>){\n        <span class=\"hljs-keyword\">if</span>((s[i]==<span class=\"hljs-string\">')'</span> || s[i]==<span class=\"hljs-string\">']'</span> || s[i]==<span class=\"hljs-string\">'}'</span>) &amp;&amp; j==<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">'('</span> || s[i]==<span class=\"hljs-string\">'{'</span> || s[i]==<span class=\"hljs-string\">'['</span>){\n            <span class=\"hljs-built_in\">stack</span>[j++] = s[i++];\n        }\n        <span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">')'</span> &amp;&amp; <span class=\"hljs-built_in\">stack</span>[j<span class=\"hljs-number\">-1</span>] != <span class=\"hljs-string\">'('</span>){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">'}'</span>&amp;&amp; <span class=\"hljs-built_in\">stack</span>[j<span class=\"hljs-number\">-1</span>] != <span class=\"hljs-string\">'{'</span>){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]==<span class=\"hljs-string\">']'</span> &amp;&amp; <span class=\"hljs-built_in\">stack</span>[j<span class=\"hljs-number\">-1</span>] != <span class=\"hljs-string\">'['</span>){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            i++;\n            j--;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"chenggong\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isValid</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> * s)</span></span>{\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">10000</span>] = {<span class=\"hljs-number\">0</span>} ;\n    <span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-built_in\">strlen</span>(s);\n    <span class=\"hljs-keyword\">if</span>(len % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"字符串长度为奇数：%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (len == <span class=\"hljs-number\">0</span> ){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"字符串长度为0:%s\"</span>,<span class=\"hljs-string\">\"成功\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>; l &lt; <span class=\"hljs-built_in\">strlen</span>(s); l++){\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>,<span class=\"hljs-string\">\"进入循环\"</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"第%d次循环\\n\"</span>,l+<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">if</span>(s[l] == <span class=\"hljs-string\">'('</span>) {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"l为:%d\\n\"</span>, l);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n            str[i] = s[l];\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"s[l]为:%c\\ts为:%s\\n\"</span>, s[l],s);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n            i++;\n<span class=\"hljs-comment\">//            continue;</span>\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">'['</span>){\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"l为:%d\\n\"</span>, l);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n            str[i] = s[l];\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n            i++;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">'{'</span>){\n            str[i] = s[l];\n            i++;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">')'</span>){\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i<span class=\"hljs-number\">-1</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j) {\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"j为:%d\\n\"</span>, j);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n                    <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'('</span>){\n\n                        str[j] = <span class=\"hljs-string\">'\\0'</span>;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"修改后的字符串为:%s\\n\"</span>, str);\n                        i--;\n                        <span class=\"hljs-keyword\">break</span>;\n                    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[j] != <span class=\"hljs-string\">'('</span>){\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n                    }\n                    <span class=\"hljs-keyword\">else</span>{\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n                }\n            }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">']'</span>){\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i<span class=\"hljs-number\">-1</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j) {\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"j为:%d\\n\"</span>, j);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n                    <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'['</span>  ){\n                        str[j] = <span class=\"hljs-string\">'\\0'</span>;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"修改后的字符串为:%s\\n\"</span>, str);\n                        i--;\n                        <span class=\"hljs-keyword\">break</span>;\n                    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[j] != <span class=\"hljs-string\">'['</span>){\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n                    }\n\n                    <span class=\"hljs-keyword\">else</span>{\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n\n                }\n\n\n            }\n\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[l] == <span class=\"hljs-string\">'}'</span>){\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>,<span class=\"hljs-string\">\"进入\"</span>);\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span>{\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i<span class=\"hljs-number\">-1</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j) {\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"i为:%d\\n\"</span>, i);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"j为:%d\\n\"</span>, j);\n                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"str字符串为:%s\\n\"</span>, str);\n                    <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'{'</span>){\n                        str[j] = <span class=\"hljs-string\">'\\0'</span>;\n                        i--;\n                        <span class=\"hljs-keyword\">break</span>;\n\n\n                    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[j] == <span class=\"hljs-string\">'{'</span>){\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n                    }\n                    <span class=\"hljs-keyword\">else</span>{\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"失败\"</span>);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n                }\n\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str) == <span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>,<span class=\"hljs-string\">\"成功\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"zheli%s\"</span>,<span class=\"hljs-string\">\"失败\\n\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n<span class=\"hljs-comment\">//    isValid(\"{[]}\");</span>\n    isValid1(<span class=\"hljs-string\">\"{[]}\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n</code></pre>\n"},{"title":"线性表代码","top":false,"cover":false,"toc":false,"mathjax":true,"abbrlink":"f4b7","date":"2020-08-21T12:12:24.000Z","password":null,"summary":"线性表代码整理","_content":"## 线性表代码\n\n> ####  1.顺序表创建\n\n```c\n#define MaxSize 50\ntypedef struct {          //定义线性表的最大长度\n    int data[MaxSize];    //顺序表的元素\n    int length;           //顺序表的当前长度\n}SqList;                  //顺序表类型定义\nSqList L;                 //自行比较整型浮点型等简单数据类型的定义方式\n```\n\n> #### 2.顺序表排序（冒泡排序）\n\n```c\nvoid BubbleSort(SqList &L){                 //因为顺序表L将要改变，所以使用引用型。\n    for(int i = 0; i< L.length-1;i++){      //i指针指向表头，从0开始，直到顺序表长度减一\n        for(int j = L.length-1; j> 1;j--){  //j指针指向表尾，从长度减一开始，直到i指针\n            if(L.data[j-1]> L.data[j]){     //如果前一位比后一位大\n                int temp = L.data[j-1];     //就把前一位存入临时变量temp中\n                L.data[j-1] = L.data[j];    //把j指针的数据赋值给j-1\n                L.data[j] = temp;           //再把临时变量中的数据存入j指针中\n                                            //最终完成从小到大的排序过程\n            }                               //交换数据的三行代码不要省略\n        }\n    }\n}\n```\n\n> #### 3.顺序表插入问题（注意插入）：讲元素e插入到顺序表的第i个位置\n\n```c\nbool ListInsert(SqList &L, int i, int e){ //因为顺序表L将要改变，所以使用引用型。又定义指针i和元素e\n    if(i < 1|| i > L.length + 1)          //验证插入的合法性，只能插入数列的有效位\n        return false;\n    if(L.length >= MaxSize)               //验证顺序表长度是否超过最大限制\n        return false;\n    for(int j = L.length; j >= i; j--)    //从最后一位，一次往后移一位，直到要插入的位置\n        L.data[j] = L.data[j-1];\n    L.data[i-1] = e;                      //把元素e插入第i个位置\n    L.length++;                           //最终顺序表长度加1\n    return true;\n}\n```\n\n> #### 4.将元素e插入到递增的顺序表中，并让其仍然有序\n\n```c\nbool ListInster(SqList &L, int e){         //顺序表L会改变，所以用引用型。定义整型变量元素e\n    int i = 0;                             //初始化指针i，指向顺序表头部\n    while(L.data[i] < e && i < L.length){  //从头开始判断顺序表元素与元素e的大小关系，如果指针没有超过\n                                           //顺序表长度并且指针所指元素小于元素e\n        i++;                               //那么指针i向后移一位\n    }\n    for(int j = L.length; j > 1; j--){     //定义指针j指向顺序表元素+1的位置，直到i指针的位置停止\n        L.data[j] = L.data[j-1];           //依次向后移动\n    }\n    L.data[i] = e;                         //元素e插入到指针i的位置\n    L.length++;                            //顺序表长度加一\n    return true;\n}\n```\n\n> #### 5.顺序表删除\n\n- 删除顺序表L中第`i(1≤i≤L.length)`个位置的元素，成功则返回true，并将被删除的元素用引用变量e返回，否则返回false。（这是删除某一位置的元素）\n\n  ```c\n  bool ListDelete(SqList &L, int i, int &e){  //顺序表L会发生改变，所以使用引用型\n      if(i < 1 || i > L.length){              //判断i位置是否合法\n          return false;\n      }\n      e = L.data[i-1];                        //把要删除的元素赋值给变量e\n      for(int j = i; j < L.length, j++){\n          L.data[j-1] = L.data[j];            //依次补齐空缺，后一位往前移一位\n      }\n      L.length--;                             //顺序表长度减一\n      return true;\n  }\n  ```\n\n- 删除顺序表L中值为X的元素（这是删除某一值的方式）\n\n  ```c\n  bool ListDelete(SqList &L, int X){\n      int count = 0;                       //记录有多少个值为X的元素（有可能有相同的元素）\n      for(int i = 0; i < L.length; i++){   //从头到尾一次匹配看是否存在元素X\n          if(L.data[i] == x){\n              count++;                     //有的话计数器就加一\n          }else{\n              L.data[i-count] = L.data[i]; //没有的话就将后一位依次向前移动，直到再次匹配到或退出\n          }\n      }\n      L.length = L.length - count;         //更新顺序表长度\n  }\n  ```\n\n- 删除顺序表L中所有素数\n\n  ```c\n  bool Prime(int num){                     //求素数\n      for(int i = 2; i < num; i++){\n          if(num % 2 == 0){\n              return false;\n          }\n      }\n      return true;\n  }\n  void ListDelete(SqList &L, int x){\n      int count = 0;                       //计数器\n      for(int i = 0; i < L.length; i++){   //从头到尾依次查找\n          if(Prime(num)){                  //如果是素数，计数器加一\t\t\n              count++;\n          }else{\n              L.data[i-count] = L.data[i]; //如果没有，则补齐空缺位置\n          }\n      }\n      L.length = L.length - count;         //更新顺序表长度\n  }\n  ```\n\n- 删除顺序表L中最大值（最小值，此处注意与删除奇偶数的区别）\n\n  ```c\n  void ListDelete(SqList &L, int x){\n      int pos = 0;                              //记录最大值所在位置\n      int max = L.data[0];                      //从头开始扫描，把最大的值存入max中\n      for(int i = 1; i < L.length; i++){\n          if(max < L.data[i]){                  //如果max中的值小于后面的元素\n              pos = i;                          //存储最大值的位置\n              max = L.data[i];                  //就把比max大的那个值赋予给max\n          }\n      }\n      fot(int j = pos + 1; j < L.length; i++){  //依次把最大值的后一位往前移动，补全空缺\n          L.data[j-1] = L.data[j];                \n          L.length--;                           //长度减一\n      }\n  }\n  ```\n\n- 删除**顺序表**L中重复的值（**表已经有序**）\n\n  ```c\n  void ListDelete(SqList &L){\n      int count = 0;                          //计数器count\n      int num = L.data[0];                    //从第一个数开始比较是否有相同的值\n      for(int i = 1; i < L.length; i++){      //从头到尾依次扫描\n          if(L.data[i] == num){               //如果之后有值与num相等\n              count++;                        //计数器加一\n          }else{\n              num = L.data[i];                //否则，更新num的值\n              L.data[i - count] = L.data[i];  //并更新顺序表\n          }\n      }\n      L.length = L.length - count;\n  }\n  ```\n\n- 逆置：将顺序表L中的所有元素逆置过来\n\n  ```c\n  void Inversion(SqList &L){\n      int low = 0, high = L.length - 1;  //分别两个指针指向首尾\n      while(low < high){\n          int temp = L.data[low];        //把第一个元素赋值给临时变量temp\n          L.data[low] = L.data[high];    //把high的值赋予low\n          L.data[high] = temp;           //在把temp中的值赋予给high\n          low++;                         //完成一次交换，然后依次交换           \n          high--;\n      }\n  }\n  ```\n\n- 平台：找出顺序表中最大的平台值（**什么是平台值？**）\n\n  ---------------------------------\n\n- 顺序表合并：将两个升序顺序表合并为一个升序的顺序表\n\n  > i++   先执行i=0 再进行i=i+1,也就是i会是0,执行完了再变为1\n  > ++i   先执行i=i+1,i会是1\n\n  ```c\n  SqList Merge(Sqlist L1, Sqlist L2){\n      Sqlist L3;\n      int i = 0, j = 0, k = 0;\n      while(i < L1.length && j < L2.length){  //L1和L2长度要大于0\n          if(L1.data[i] < L2.data[j]){        //如果L1的一位比L2的一位小\n              L3.data[k++] = L1.data[i++];    //就把L1的一位放入L3中，并且i和k自增1\n          }else{                              //如果L1的一位比L2的一位大\n              L3.data[k++] = L2.data[j++];    //就把L2的一位放入L3中，并且j和k自增1\n          }\n      }                                       //当其中一个被放完时，再单独对另一个顺序表操作即可\n      while(i < L1.length){\n          L3.data[k++] = L1.data[i++];\n      }\n      while(i < L2.length){\n          L3.data[k++] = L2.data[j++];\n      }\n      L3.length = k;\n      return L3;\n  }\n  ```\n\n- 将两个升序顺序表合并为一个升序的顺序表**（只求∩交集）**\n\n  ```c\n  SqList Merge(Sqlist L1, Sqlist L2){\n      Sqlist L3;\n      int i = 0, j = 0, k = 0;\n      while(i < L1.length && j < L2.length){  //L1和L2长度要大于0\n          if(L1.data[i] < L2.data[j]){        //如果L1的一位比L2的一位小\n              i++;                            //i++\n          }else if(L1.data[i] > L2.data[j]){  //如果L1的一位比L2的一位大\n              j++;                            //j++\n          }else{\n              L3.data[k++] = L1.data[i++];    //如果L1的一位和L2的一位相等，则放入L3中\n              j++;                            //j++\n          }\n      }                                       \n      L3.length = k;\n      return L3;\n  }\n  ```\n\n- 将两个升序顺序表合并为一个升序的顺序表**（∪并集，没有重复元素）**\n\n  ```c\n  SqList Merge(Sqlist L1, Sqlist L2){\n      Sqlist L3;\n      int i = 0, j = 0, k = 0;\n      while(i < L1.length && j < L2.length){    //L1和L2长度要大于0\n          if(L1.data[i] < L2.data[j]){          //如果L1的一位比L2的一位小\n              L3.length[k++] = L2.length[i++];  //把L1放入L3，并且i和k自增\n          }else if(L1.data[i] > L2.data[j]){    //如果L1的一位比L2的一位大\n              L3.length[k++] = L2.length[j++];  //把L2放入L3，并且j和k自增\n          }else{\n              L3.data[k++] = L1.data[i++];      //如果L1的一位和L2的一位相等，则把L1放入L3中\n              j++;                              //j++\n          }\n      }                                         //当其中一个被放完时，再单独对另一个顺序表操作即可\n      while(i < L1.length){\n          L3.data[k++] = L1.data[i++];\n      }\n      while(i < L2.length){\n          L3.data[k++] = L2.data[j++];\n      }\n      L3.length = k;\n      return L3;\n  }\n  ```\n  \n\n","source":"_posts/线性表代码.md","raw":"---\ntitle: 线性表代码\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\n  - 线性表\ncategories:\n  - 代码\nabbrlink: f4b7\ndate: 2020-08-21 20:12:24\npassword:\nsummary: 线性表代码整理\n---\n## 线性表代码\n\n> ####  1.顺序表创建\n\n```c\n#define MaxSize 50\ntypedef struct {          //定义线性表的最大长度\n    int data[MaxSize];    //顺序表的元素\n    int length;           //顺序表的当前长度\n}SqList;                  //顺序表类型定义\nSqList L;                 //自行比较整型浮点型等简单数据类型的定义方式\n```\n\n> #### 2.顺序表排序（冒泡排序）\n\n```c\nvoid BubbleSort(SqList &L){                 //因为顺序表L将要改变，所以使用引用型。\n    for(int i = 0; i< L.length-1;i++){      //i指针指向表头，从0开始，直到顺序表长度减一\n        for(int j = L.length-1; j> 1;j--){  //j指针指向表尾，从长度减一开始，直到i指针\n            if(L.data[j-1]> L.data[j]){     //如果前一位比后一位大\n                int temp = L.data[j-1];     //就把前一位存入临时变量temp中\n                L.data[j-1] = L.data[j];    //把j指针的数据赋值给j-1\n                L.data[j] = temp;           //再把临时变量中的数据存入j指针中\n                                            //最终完成从小到大的排序过程\n            }                               //交换数据的三行代码不要省略\n        }\n    }\n}\n```\n\n> #### 3.顺序表插入问题（注意插入）：讲元素e插入到顺序表的第i个位置\n\n```c\nbool ListInsert(SqList &L, int i, int e){ //因为顺序表L将要改变，所以使用引用型。又定义指针i和元素e\n    if(i < 1|| i > L.length + 1)          //验证插入的合法性，只能插入数列的有效位\n        return false;\n    if(L.length >= MaxSize)               //验证顺序表长度是否超过最大限制\n        return false;\n    for(int j = L.length; j >= i; j--)    //从最后一位，一次往后移一位，直到要插入的位置\n        L.data[j] = L.data[j-1];\n    L.data[i-1] = e;                      //把元素e插入第i个位置\n    L.length++;                           //最终顺序表长度加1\n    return true;\n}\n```\n\n> #### 4.将元素e插入到递增的顺序表中，并让其仍然有序\n\n```c\nbool ListInster(SqList &L, int e){         //顺序表L会改变，所以用引用型。定义整型变量元素e\n    int i = 0;                             //初始化指针i，指向顺序表头部\n    while(L.data[i] < e && i < L.length){  //从头开始判断顺序表元素与元素e的大小关系，如果指针没有超过\n                                           //顺序表长度并且指针所指元素小于元素e\n        i++;                               //那么指针i向后移一位\n    }\n    for(int j = L.length; j > 1; j--){     //定义指针j指向顺序表元素+1的位置，直到i指针的位置停止\n        L.data[j] = L.data[j-1];           //依次向后移动\n    }\n    L.data[i] = e;                         //元素e插入到指针i的位置\n    L.length++;                            //顺序表长度加一\n    return true;\n}\n```\n\n> #### 5.顺序表删除\n\n- 删除顺序表L中第`i(1≤i≤L.length)`个位置的元素，成功则返回true，并将被删除的元素用引用变量e返回，否则返回false。（这是删除某一位置的元素）\n\n  ```c\n  bool ListDelete(SqList &L, int i, int &e){  //顺序表L会发生改变，所以使用引用型\n      if(i < 1 || i > L.length){              //判断i位置是否合法\n          return false;\n      }\n      e = L.data[i-1];                        //把要删除的元素赋值给变量e\n      for(int j = i; j < L.length, j++){\n          L.data[j-1] = L.data[j];            //依次补齐空缺，后一位往前移一位\n      }\n      L.length--;                             //顺序表长度减一\n      return true;\n  }\n  ```\n\n- 删除顺序表L中值为X的元素（这是删除某一值的方式）\n\n  ```c\n  bool ListDelete(SqList &L, int X){\n      int count = 0;                       //记录有多少个值为X的元素（有可能有相同的元素）\n      for(int i = 0; i < L.length; i++){   //从头到尾一次匹配看是否存在元素X\n          if(L.data[i] == x){\n              count++;                     //有的话计数器就加一\n          }else{\n              L.data[i-count] = L.data[i]; //没有的话就将后一位依次向前移动，直到再次匹配到或退出\n          }\n      }\n      L.length = L.length - count;         //更新顺序表长度\n  }\n  ```\n\n- 删除顺序表L中所有素数\n\n  ```c\n  bool Prime(int num){                     //求素数\n      for(int i = 2; i < num; i++){\n          if(num % 2 == 0){\n              return false;\n          }\n      }\n      return true;\n  }\n  void ListDelete(SqList &L, int x){\n      int count = 0;                       //计数器\n      for(int i = 0; i < L.length; i++){   //从头到尾依次查找\n          if(Prime(num)){                  //如果是素数，计数器加一\t\t\n              count++;\n          }else{\n              L.data[i-count] = L.data[i]; //如果没有，则补齐空缺位置\n          }\n      }\n      L.length = L.length - count;         //更新顺序表长度\n  }\n  ```\n\n- 删除顺序表L中最大值（最小值，此处注意与删除奇偶数的区别）\n\n  ```c\n  void ListDelete(SqList &L, int x){\n      int pos = 0;                              //记录最大值所在位置\n      int max = L.data[0];                      //从头开始扫描，把最大的值存入max中\n      for(int i = 1; i < L.length; i++){\n          if(max < L.data[i]){                  //如果max中的值小于后面的元素\n              pos = i;                          //存储最大值的位置\n              max = L.data[i];                  //就把比max大的那个值赋予给max\n          }\n      }\n      fot(int j = pos + 1; j < L.length; i++){  //依次把最大值的后一位往前移动，补全空缺\n          L.data[j-1] = L.data[j];                \n          L.length--;                           //长度减一\n      }\n  }\n  ```\n\n- 删除**顺序表**L中重复的值（**表已经有序**）\n\n  ```c\n  void ListDelete(SqList &L){\n      int count = 0;                          //计数器count\n      int num = L.data[0];                    //从第一个数开始比较是否有相同的值\n      for(int i = 1; i < L.length; i++){      //从头到尾依次扫描\n          if(L.data[i] == num){               //如果之后有值与num相等\n              count++;                        //计数器加一\n          }else{\n              num = L.data[i];                //否则，更新num的值\n              L.data[i - count] = L.data[i];  //并更新顺序表\n          }\n      }\n      L.length = L.length - count;\n  }\n  ```\n\n- 逆置：将顺序表L中的所有元素逆置过来\n\n  ```c\n  void Inversion(SqList &L){\n      int low = 0, high = L.length - 1;  //分别两个指针指向首尾\n      while(low < high){\n          int temp = L.data[low];        //把第一个元素赋值给临时变量temp\n          L.data[low] = L.data[high];    //把high的值赋予low\n          L.data[high] = temp;           //在把temp中的值赋予给high\n          low++;                         //完成一次交换，然后依次交换           \n          high--;\n      }\n  }\n  ```\n\n- 平台：找出顺序表中最大的平台值（**什么是平台值？**）\n\n  ---------------------------------\n\n- 顺序表合并：将两个升序顺序表合并为一个升序的顺序表\n\n  > i++   先执行i=0 再进行i=i+1,也就是i会是0,执行完了再变为1\n  > ++i   先执行i=i+1,i会是1\n\n  ```c\n  SqList Merge(Sqlist L1, Sqlist L2){\n      Sqlist L3;\n      int i = 0, j = 0, k = 0;\n      while(i < L1.length && j < L2.length){  //L1和L2长度要大于0\n          if(L1.data[i] < L2.data[j]){        //如果L1的一位比L2的一位小\n              L3.data[k++] = L1.data[i++];    //就把L1的一位放入L3中，并且i和k自增1\n          }else{                              //如果L1的一位比L2的一位大\n              L3.data[k++] = L2.data[j++];    //就把L2的一位放入L3中，并且j和k自增1\n          }\n      }                                       //当其中一个被放完时，再单独对另一个顺序表操作即可\n      while(i < L1.length){\n          L3.data[k++] = L1.data[i++];\n      }\n      while(i < L2.length){\n          L3.data[k++] = L2.data[j++];\n      }\n      L3.length = k;\n      return L3;\n  }\n  ```\n\n- 将两个升序顺序表合并为一个升序的顺序表**（只求∩交集）**\n\n  ```c\n  SqList Merge(Sqlist L1, Sqlist L2){\n      Sqlist L3;\n      int i = 0, j = 0, k = 0;\n      while(i < L1.length && j < L2.length){  //L1和L2长度要大于0\n          if(L1.data[i] < L2.data[j]){        //如果L1的一位比L2的一位小\n              i++;                            //i++\n          }else if(L1.data[i] > L2.data[j]){  //如果L1的一位比L2的一位大\n              j++;                            //j++\n          }else{\n              L3.data[k++] = L1.data[i++];    //如果L1的一位和L2的一位相等，则放入L3中\n              j++;                            //j++\n          }\n      }                                       \n      L3.length = k;\n      return L3;\n  }\n  ```\n\n- 将两个升序顺序表合并为一个升序的顺序表**（∪并集，没有重复元素）**\n\n  ```c\n  SqList Merge(Sqlist L1, Sqlist L2){\n      Sqlist L3;\n      int i = 0, j = 0, k = 0;\n      while(i < L1.length && j < L2.length){    //L1和L2长度要大于0\n          if(L1.data[i] < L2.data[j]){          //如果L1的一位比L2的一位小\n              L3.length[k++] = L2.length[i++];  //把L1放入L3，并且i和k自增\n          }else if(L1.data[i] > L2.data[j]){    //如果L1的一位比L2的一位大\n              L3.length[k++] = L2.length[j++];  //把L2放入L3，并且j和k自增\n          }else{\n              L3.data[k++] = L1.data[i++];      //如果L1的一位和L2的一位相等，则把L1放入L3中\n              j++;                              //j++\n          }\n      }                                         //当其中一个被放完时，再单独对另一个顺序表操作即可\n      while(i < L1.length){\n          L3.data[k++] = L1.data[i++];\n      }\n      while(i < L2.length){\n          L3.data[k++] = L2.data[j++];\n      }\n      L3.length = k;\n      return L3;\n  }\n  ```\n  \n\n","slug":"线性表代码","published":1,"updated":"2020-08-25T09:25:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdik003uzl9k70g0e7tz","content":"<h2 id=\"线性表代码\"><a class=\"markdownIt-Anchor\" href=\"#线性表代码\"></a> 线性表代码</h2>\n<blockquote>\n<h4 id=\"1顺序表创建\"><a class=\"markdownIt-Anchor\" href=\"#1顺序表创建\"></a> 1.顺序表创建</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> {</span>          <span class=\"hljs-comment\">//定义线性表的最大长度</span>\n    <span class=\"hljs-keyword\">int</span> data[MaxSize];    <span class=\"hljs-comment\">//顺序表的元素</span>\n    <span class=\"hljs-keyword\">int</span> length;           <span class=\"hljs-comment\">//顺序表的当前长度</span>\n}SqList;                  <span class=\"hljs-comment\">//顺序表类型定义</span>\nSqList L;                 <span class=\"hljs-comment\">//自行比较整型浮点型等简单数据类型的定义方式</span>\n</code></pre>\n<blockquote>\n<h4 id=\"2顺序表排序冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#2顺序表排序冒泡排序\"></a> 2.顺序表排序（冒泡排序）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BubbleSort</span><span class=\"hljs-params\">(SqList &amp;L)</span></span>{                 <span class=\"hljs-comment\">//因为顺序表L将要改变，所以使用引用型。</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt; L.length<span class=\"hljs-number\">-1</span>;i++){      <span class=\"hljs-comment\">//i指针指向表头，从0开始，直到顺序表长度减一</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = L.length<span class=\"hljs-number\">-1</span>; j&gt; <span class=\"hljs-number\">1</span>;j--){  <span class=\"hljs-comment\">//j指针指向表尾，从长度减一开始，直到i指针</span>\n            <span class=\"hljs-keyword\">if</span>(L.data[j<span class=\"hljs-number\">-1</span>]&gt; L.data[j]){     <span class=\"hljs-comment\">//如果前一位比后一位大</span>\n                <span class=\"hljs-keyword\">int</span> temp = L.data[j<span class=\"hljs-number\">-1</span>];     <span class=\"hljs-comment\">//就把前一位存入临时变量temp中</span>\n                L.data[j<span class=\"hljs-number\">-1</span>] = L.data[j];    <span class=\"hljs-comment\">//把j指针的数据赋值给j-1</span>\n                L.data[j] = temp;           <span class=\"hljs-comment\">//再把临时变量中的数据存入j指针中</span>\n                                            <span class=\"hljs-comment\">//最终完成从小到大的排序过程</span>\n            }                               <span class=\"hljs-comment\">//交换数据的三行代码不要省略</span>\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"3顺序表插入问题注意插入讲元素e插入到顺序表的第i个位置\"><a class=\"markdownIt-Anchor\" href=\"#3顺序表插入问题注意插入讲元素e插入到顺序表的第i个位置\"></a> 3.顺序表插入问题（注意插入）：讲元素e插入到顺序表的第i个位置</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListInsert</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> e)</span></span>{ <span class=\"hljs-comment\">//因为顺序表L将要改变，所以使用引用型。又定义指针i和元素e</span>\n    <span class=\"hljs-keyword\">if</span>(i &lt; <span class=\"hljs-number\">1</span>|| i &gt; L.length + <span class=\"hljs-number\">1</span>)          <span class=\"hljs-comment\">//验证插入的合法性，只能插入数列的有效位</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">if</span>(L.length &gt;= MaxSize)               <span class=\"hljs-comment\">//验证顺序表长度是否超过最大限制</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = L.length; j &gt;= i; j--)    <span class=\"hljs-comment\">//从最后一位，一次往后移一位，直到要插入的位置</span>\n        L.data[j] = L.data[j<span class=\"hljs-number\">-1</span>];\n    L.data[i<span class=\"hljs-number\">-1</span>] = e;                      <span class=\"hljs-comment\">//把元素e插入第i个位置</span>\n    L.length++;                           <span class=\"hljs-comment\">//最终顺序表长度加1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4将元素e插入到递增的顺序表中并让其仍然有序\"><a class=\"markdownIt-Anchor\" href=\"#4将元素e插入到递增的顺序表中并让其仍然有序\"></a> 4.将元素e插入到递增的顺序表中，并让其仍然有序</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListInster</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> e)</span></span>{         <span class=\"hljs-comment\">//顺序表L会改变，所以用引用型。定义整型变量元素e</span>\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;                             <span class=\"hljs-comment\">//初始化指针i，指向顺序表头部</span>\n    <span class=\"hljs-keyword\">while</span>(L.data[i] &lt; e &amp;&amp; i &lt; L.length){  <span class=\"hljs-comment\">//从头开始判断顺序表元素与元素e的大小关系，如果指针没有超过</span>\n                                           <span class=\"hljs-comment\">//顺序表长度并且指针所指元素小于元素e</span>\n        i++;                               <span class=\"hljs-comment\">//那么指针i向后移一位</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = L.length; j &gt; <span class=\"hljs-number\">1</span>; j--){     <span class=\"hljs-comment\">//定义指针j指向顺序表元素+1的位置，直到i指针的位置停止</span>\n        L.data[j] = L.data[j<span class=\"hljs-number\">-1</span>];           <span class=\"hljs-comment\">//依次向后移动</span>\n    }\n    L.data[i] = e;                         <span class=\"hljs-comment\">//元素e插入到指针i的位置</span>\n    L.length++;                            <span class=\"hljs-comment\">//顺序表长度加一</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5顺序表删除\"><a class=\"markdownIt-Anchor\" href=\"#5顺序表删除\"></a> 5.顺序表删除</h4>\n</blockquote>\n<ul>\n<li>\n<p>删除顺序表L中第<code>i(1≤i≤L.length)</code>个位置的元素，成功则返回true，并将被删除的元素用引用变量e返回，否则返回false。（这是删除某一位置的元素）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> &amp;e)</span></span>{  <span class=\"hljs-comment\">//顺序表L会发生改变，所以使用引用型</span>\n    <span class=\"hljs-keyword\">if</span>(i &lt; <span class=\"hljs-number\">1</span> || i &gt; L.length){              <span class=\"hljs-comment\">//判断i位置是否合法</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    e = L.data[i<span class=\"hljs-number\">-1</span>];                        <span class=\"hljs-comment\">//把要删除的元素赋值给变量e</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = i; j &lt; L.length, j++){\n        L.data[j<span class=\"hljs-number\">-1</span>] = L.data[j];            <span class=\"hljs-comment\">//依次补齐空缺，后一位往前移一位</span>\n    }\n    L.length--;                             <span class=\"hljs-comment\">//顺序表长度减一</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n<li>\n<p>删除顺序表L中值为X的元素（这是删除某一值的方式）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> X)</span></span>{\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;                       <span class=\"hljs-comment\">//记录有多少个值为X的元素（有可能有相同的元素）</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; L.length; i++){   <span class=\"hljs-comment\">//从头到尾一次匹配看是否存在元素X</span>\n        <span class=\"hljs-keyword\">if</span>(L.data[i] == x){\n            count++;                     <span class=\"hljs-comment\">//有的话计数器就加一</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            L.data[i-count] = L.data[i]; <span class=\"hljs-comment\">//没有的话就将后一位依次向前移动，直到再次匹配到或退出</span>\n        }\n    }\n    L.length = L.length - count;         <span class=\"hljs-comment\">//更新顺序表长度</span>\n}\n</code></pre>\n</li>\n<li>\n<p>删除顺序表L中所有素数</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Prime</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num)</span></span>{                     <span class=\"hljs-comment\">//求素数</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; num; i++){\n        <span class=\"hljs-keyword\">if</span>(num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;                       <span class=\"hljs-comment\">//计数器</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; L.length; i++){   <span class=\"hljs-comment\">//从头到尾依次查找</span>\n        <span class=\"hljs-keyword\">if</span>(Prime(num)){                  <span class=\"hljs-comment\">//如果是素数，计数器加一\t\t</span>\n            count++;\n        }<span class=\"hljs-keyword\">else</span>{\n            L.data[i-count] = L.data[i]; <span class=\"hljs-comment\">//如果没有，则补齐空缺位置</span>\n        }\n    }\n    L.length = L.length - count;         <span class=\"hljs-comment\">//更新顺序表长度</span>\n}\n</code></pre>\n</li>\n<li>\n<p>删除顺序表L中最大值（最小值，此处注意与删除奇偶数的区别）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">int</span> pos = <span class=\"hljs-number\">0</span>;                              <span class=\"hljs-comment\">//记录最大值所在位置</span>\n    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">max</span> = L.data[<span class=\"hljs-number\">0</span>];                      <span class=\"hljs-comment\">//从头开始扫描，把最大的值存入max中</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; L.length; i++){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">max</span> &lt; L.data[i]){                  <span class=\"hljs-comment\">//如果max中的值小于后面的元素</span>\n            pos = i;                          <span class=\"hljs-comment\">//存储最大值的位置</span>\n            <span class=\"hljs-built_in\">max</span> = L.data[i];                  <span class=\"hljs-comment\">//就把比max大的那个值赋予给max</span>\n        }\n    }\n    fot(<span class=\"hljs-keyword\">int</span> j = pos + <span class=\"hljs-number\">1</span>; j &lt; L.length; i++){  <span class=\"hljs-comment\">//依次把最大值的后一位往前移动，补全空缺</span>\n        L.data[j<span class=\"hljs-number\">-1</span>] = L.data[j];                \n        L.length--;                           <span class=\"hljs-comment\">//长度减一</span>\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>删除<strong>顺序表</strong>L中重复的值（<strong>表已经有序</strong>）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;                          <span class=\"hljs-comment\">//计数器count</span>\n    <span class=\"hljs-keyword\">int</span> num = L.data[<span class=\"hljs-number\">0</span>];                    <span class=\"hljs-comment\">//从第一个数开始比较是否有相同的值</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; L.length; i++){      <span class=\"hljs-comment\">//从头到尾依次扫描</span>\n        <span class=\"hljs-keyword\">if</span>(L.data[i] == num){               <span class=\"hljs-comment\">//如果之后有值与num相等</span>\n            count++;                        <span class=\"hljs-comment\">//计数器加一</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            num = L.data[i];                <span class=\"hljs-comment\">//否则，更新num的值</span>\n            L.data[i - count] = L.data[i];  <span class=\"hljs-comment\">//并更新顺序表</span>\n        }\n    }\n    L.length = L.length - count;\n}\n</code></pre>\n</li>\n<li>\n<p>逆置：将顺序表L中的所有元素逆置过来</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Inversion</span><span class=\"hljs-params\">(SqList &amp;L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>, high = L.length - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//分别两个指针指向首尾</span>\n    <span class=\"hljs-keyword\">while</span>(low &lt; high){\n        <span class=\"hljs-keyword\">int</span> temp = L.data[low];        <span class=\"hljs-comment\">//把第一个元素赋值给临时变量temp</span>\n        L.data[low] = L.data[high];    <span class=\"hljs-comment\">//把high的值赋予low</span>\n        L.data[high] = temp;           <span class=\"hljs-comment\">//在把temp中的值赋予给high</span>\n        low++;                         <span class=\"hljs-comment\">//完成一次交换，然后依次交换           </span>\n        high--;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>平台：找出顺序表中最大的平台值（<strong>什么是平台值？</strong>）</p>\n<hr>\n</li>\n<li>\n<p>顺序表合并：将两个升序顺序表合并为一个升序的顺序表</p>\n<blockquote>\n<p>i++   先执行i=0 再进行i=i+1,也就是i会是0,执行完了再变为1<br>\n++i   先执行i=i+1,i会是1</p>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">SqList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(Sqlist L1, Sqlist L2)</span></span>{\n    Sqlist L3;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length &amp;&amp; j &lt; L2.length){  <span class=\"hljs-comment\">//L1和L2长度要大于0</span>\n        <span class=\"hljs-keyword\">if</span>(L1.data[i] &lt; L2.data[j]){        <span class=\"hljs-comment\">//如果L1的一位比L2的一位小</span>\n            L3.data[k++] = L1.data[i++];    <span class=\"hljs-comment\">//就把L1的一位放入L3中，并且i和k自增1</span>\n        }<span class=\"hljs-keyword\">else</span>{                              <span class=\"hljs-comment\">//如果L1的一位比L2的一位大</span>\n            L3.data[k++] = L2.data[j++];    <span class=\"hljs-comment\">//就把L2的一位放入L3中，并且j和k自增1</span>\n        }\n    }                                       <span class=\"hljs-comment\">//当其中一个被放完时，再单独对另一个顺序表操作即可</span>\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length){\n        L3.data[k++] = L1.data[i++];\n    }\n    <span class=\"hljs-keyword\">while</span>(i &lt; L2.length){\n        L3.data[k++] = L2.data[j++];\n    }\n    L3.length = k;\n    <span class=\"hljs-keyword\">return</span> L3;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个升序顺序表合并为一个升序的顺序表**（只求∩交集）**</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">SqList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(Sqlist L1, Sqlist L2)</span></span>{\n    Sqlist L3;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length &amp;&amp; j &lt; L2.length){  <span class=\"hljs-comment\">//L1和L2长度要大于0</span>\n        <span class=\"hljs-keyword\">if</span>(L1.data[i] &lt; L2.data[j]){        <span class=\"hljs-comment\">//如果L1的一位比L2的一位小</span>\n            i++;                            <span class=\"hljs-comment\">//i++</span>\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(L1.data[i] &gt; L2.data[j]){  <span class=\"hljs-comment\">//如果L1的一位比L2的一位大</span>\n            j++;                            <span class=\"hljs-comment\">//j++</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            L3.data[k++] = L1.data[i++];    <span class=\"hljs-comment\">//如果L1的一位和L2的一位相等，则放入L3中</span>\n            j++;                            <span class=\"hljs-comment\">//j++</span>\n        }\n    }                                       \n    L3.length = k;\n    <span class=\"hljs-keyword\">return</span> L3;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个升序顺序表合并为一个升序的顺序表**（∪并集，没有重复元素）**</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">SqList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(Sqlist L1, Sqlist L2)</span></span>{\n    Sqlist L3;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length &amp;&amp; j &lt; L2.length){    <span class=\"hljs-comment\">//L1和L2长度要大于0</span>\n        <span class=\"hljs-keyword\">if</span>(L1.data[i] &lt; L2.data[j]){          <span class=\"hljs-comment\">//如果L1的一位比L2的一位小</span>\n            L3.length[k++] = L2.length[i++];  <span class=\"hljs-comment\">//把L1放入L3，并且i和k自增</span>\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(L1.data[i] &gt; L2.data[j]){    <span class=\"hljs-comment\">//如果L1的一位比L2的一位大</span>\n            L3.length[k++] = L2.length[j++];  <span class=\"hljs-comment\">//把L2放入L3，并且j和k自增</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            L3.data[k++] = L1.data[i++];      <span class=\"hljs-comment\">//如果L1的一位和L2的一位相等，则把L1放入L3中</span>\n            j++;                              <span class=\"hljs-comment\">//j++</span>\n        }\n    }                                         <span class=\"hljs-comment\">//当其中一个被放完时，再单独对另一个顺序表操作即可</span>\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length){\n        L3.data[k++] = L1.data[i++];\n    }\n    <span class=\"hljs-keyword\">while</span>(i &lt; L2.length){\n        L3.data[k++] = L2.data[j++];\n    }\n    L3.length = k;\n    <span class=\"hljs-keyword\">return</span> L3;\n}\n</code></pre>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"线性表代码\"><a class=\"markdownIt-Anchor\" href=\"#线性表代码\"></a> 线性表代码</h2>\n<blockquote>\n<h4 id=\"1顺序表创建\"><a class=\"markdownIt-Anchor\" href=\"#1顺序表创建\"></a> 1.顺序表创建</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> {</span>          <span class=\"hljs-comment\">//定义线性表的最大长度</span>\n    <span class=\"hljs-keyword\">int</span> data[MaxSize];    <span class=\"hljs-comment\">//顺序表的元素</span>\n    <span class=\"hljs-keyword\">int</span> length;           <span class=\"hljs-comment\">//顺序表的当前长度</span>\n}SqList;                  <span class=\"hljs-comment\">//顺序表类型定义</span>\nSqList L;                 <span class=\"hljs-comment\">//自行比较整型浮点型等简单数据类型的定义方式</span>\n</code></pre>\n<blockquote>\n<h4 id=\"2顺序表排序冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#2顺序表排序冒泡排序\"></a> 2.顺序表排序（冒泡排序）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BubbleSort</span><span class=\"hljs-params\">(SqList &amp;L)</span></span>{                 <span class=\"hljs-comment\">//因为顺序表L将要改变，所以使用引用型。</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt; L.length<span class=\"hljs-number\">-1</span>;i++){      <span class=\"hljs-comment\">//i指针指向表头，从0开始，直到顺序表长度减一</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = L.length<span class=\"hljs-number\">-1</span>; j&gt; <span class=\"hljs-number\">1</span>;j--){  <span class=\"hljs-comment\">//j指针指向表尾，从长度减一开始，直到i指针</span>\n            <span class=\"hljs-keyword\">if</span>(L.data[j<span class=\"hljs-number\">-1</span>]&gt; L.data[j]){     <span class=\"hljs-comment\">//如果前一位比后一位大</span>\n                <span class=\"hljs-keyword\">int</span> temp = L.data[j<span class=\"hljs-number\">-1</span>];     <span class=\"hljs-comment\">//就把前一位存入临时变量temp中</span>\n                L.data[j<span class=\"hljs-number\">-1</span>] = L.data[j];    <span class=\"hljs-comment\">//把j指针的数据赋值给j-1</span>\n                L.data[j] = temp;           <span class=\"hljs-comment\">//再把临时变量中的数据存入j指针中</span>\n                                            <span class=\"hljs-comment\">//最终完成从小到大的排序过程</span>\n            }                               <span class=\"hljs-comment\">//交换数据的三行代码不要省略</span>\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"3顺序表插入问题注意插入讲元素e插入到顺序表的第i个位置\"><a class=\"markdownIt-Anchor\" href=\"#3顺序表插入问题注意插入讲元素e插入到顺序表的第i个位置\"></a> 3.顺序表插入问题（注意插入）：讲元素e插入到顺序表的第i个位置</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListInsert</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> e)</span></span>{ <span class=\"hljs-comment\">//因为顺序表L将要改变，所以使用引用型。又定义指针i和元素e</span>\n    <span class=\"hljs-keyword\">if</span>(i &lt; <span class=\"hljs-number\">1</span>|| i &gt; L.length + <span class=\"hljs-number\">1</span>)          <span class=\"hljs-comment\">//验证插入的合法性，只能插入数列的有效位</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">if</span>(L.length &gt;= MaxSize)               <span class=\"hljs-comment\">//验证顺序表长度是否超过最大限制</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = L.length; j &gt;= i; j--)    <span class=\"hljs-comment\">//从最后一位，一次往后移一位，直到要插入的位置</span>\n        L.data[j] = L.data[j<span class=\"hljs-number\">-1</span>];\n    L.data[i<span class=\"hljs-number\">-1</span>] = e;                      <span class=\"hljs-comment\">//把元素e插入第i个位置</span>\n    L.length++;                           <span class=\"hljs-comment\">//最终顺序表长度加1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4将元素e插入到递增的顺序表中并让其仍然有序\"><a class=\"markdownIt-Anchor\" href=\"#4将元素e插入到递增的顺序表中并让其仍然有序\"></a> 4.将元素e插入到递增的顺序表中，并让其仍然有序</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListInster</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> e)</span></span>{         <span class=\"hljs-comment\">//顺序表L会改变，所以用引用型。定义整型变量元素e</span>\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;                             <span class=\"hljs-comment\">//初始化指针i，指向顺序表头部</span>\n    <span class=\"hljs-keyword\">while</span>(L.data[i] &lt; e &amp;&amp; i &lt; L.length){  <span class=\"hljs-comment\">//从头开始判断顺序表元素与元素e的大小关系，如果指针没有超过</span>\n                                           <span class=\"hljs-comment\">//顺序表长度并且指针所指元素小于元素e</span>\n        i++;                               <span class=\"hljs-comment\">//那么指针i向后移一位</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = L.length; j &gt; <span class=\"hljs-number\">1</span>; j--){     <span class=\"hljs-comment\">//定义指针j指向顺序表元素+1的位置，直到i指针的位置停止</span>\n        L.data[j] = L.data[j<span class=\"hljs-number\">-1</span>];           <span class=\"hljs-comment\">//依次向后移动</span>\n    }\n    L.data[i] = e;                         <span class=\"hljs-comment\">//元素e插入到指针i的位置</span>\n    L.length++;                            <span class=\"hljs-comment\">//顺序表长度加一</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5顺序表删除\"><a class=\"markdownIt-Anchor\" href=\"#5顺序表删除\"></a> 5.顺序表删除</h4>\n</blockquote>\n<ul>\n<li>\n<p>删除顺序表L中第<code>i(1≤i≤L.length)</code>个位置的元素，成功则返回true，并将被删除的元素用引用变量e返回，否则返回false。（这是删除某一位置的元素）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> &amp;e)</span></span>{  <span class=\"hljs-comment\">//顺序表L会发生改变，所以使用引用型</span>\n    <span class=\"hljs-keyword\">if</span>(i &lt; <span class=\"hljs-number\">1</span> || i &gt; L.length){              <span class=\"hljs-comment\">//判断i位置是否合法</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    e = L.data[i<span class=\"hljs-number\">-1</span>];                        <span class=\"hljs-comment\">//把要删除的元素赋值给变量e</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = i; j &lt; L.length, j++){\n        L.data[j<span class=\"hljs-number\">-1</span>] = L.data[j];            <span class=\"hljs-comment\">//依次补齐空缺，后一位往前移一位</span>\n    }\n    L.length--;                             <span class=\"hljs-comment\">//顺序表长度减一</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n<li>\n<p>删除顺序表L中值为X的元素（这是删除某一值的方式）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> X)</span></span>{\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;                       <span class=\"hljs-comment\">//记录有多少个值为X的元素（有可能有相同的元素）</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; L.length; i++){   <span class=\"hljs-comment\">//从头到尾一次匹配看是否存在元素X</span>\n        <span class=\"hljs-keyword\">if</span>(L.data[i] == x){\n            count++;                     <span class=\"hljs-comment\">//有的话计数器就加一</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            L.data[i-count] = L.data[i]; <span class=\"hljs-comment\">//没有的话就将后一位依次向前移动，直到再次匹配到或退出</span>\n        }\n    }\n    L.length = L.length - count;         <span class=\"hljs-comment\">//更新顺序表长度</span>\n}\n</code></pre>\n</li>\n<li>\n<p>删除顺序表L中所有素数</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Prime</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num)</span></span>{                     <span class=\"hljs-comment\">//求素数</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; num; i++){\n        <span class=\"hljs-keyword\">if</span>(num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;                       <span class=\"hljs-comment\">//计数器</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; L.length; i++){   <span class=\"hljs-comment\">//从头到尾依次查找</span>\n        <span class=\"hljs-keyword\">if</span>(Prime(num)){                  <span class=\"hljs-comment\">//如果是素数，计数器加一\t\t</span>\n            count++;\n        }<span class=\"hljs-keyword\">else</span>{\n            L.data[i-count] = L.data[i]; <span class=\"hljs-comment\">//如果没有，则补齐空缺位置</span>\n        }\n    }\n    L.length = L.length - count;         <span class=\"hljs-comment\">//更新顺序表长度</span>\n}\n</code></pre>\n</li>\n<li>\n<p>删除顺序表L中最大值（最小值，此处注意与删除奇偶数的区别）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">int</span> pos = <span class=\"hljs-number\">0</span>;                              <span class=\"hljs-comment\">//记录最大值所在位置</span>\n    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">max</span> = L.data[<span class=\"hljs-number\">0</span>];                      <span class=\"hljs-comment\">//从头开始扫描，把最大的值存入max中</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; L.length; i++){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">max</span> &lt; L.data[i]){                  <span class=\"hljs-comment\">//如果max中的值小于后面的元素</span>\n            pos = i;                          <span class=\"hljs-comment\">//存储最大值的位置</span>\n            <span class=\"hljs-built_in\">max</span> = L.data[i];                  <span class=\"hljs-comment\">//就把比max大的那个值赋予给max</span>\n        }\n    }\n    fot(<span class=\"hljs-keyword\">int</span> j = pos + <span class=\"hljs-number\">1</span>; j &lt; L.length; i++){  <span class=\"hljs-comment\">//依次把最大值的后一位往前移动，补全空缺</span>\n        L.data[j<span class=\"hljs-number\">-1</span>] = L.data[j];                \n        L.length--;                           <span class=\"hljs-comment\">//长度减一</span>\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>删除<strong>顺序表</strong>L中重复的值（<strong>表已经有序</strong>）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ListDelete</span><span class=\"hljs-params\">(SqList &amp;L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;                          <span class=\"hljs-comment\">//计数器count</span>\n    <span class=\"hljs-keyword\">int</span> num = L.data[<span class=\"hljs-number\">0</span>];                    <span class=\"hljs-comment\">//从第一个数开始比较是否有相同的值</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; L.length; i++){      <span class=\"hljs-comment\">//从头到尾依次扫描</span>\n        <span class=\"hljs-keyword\">if</span>(L.data[i] == num){               <span class=\"hljs-comment\">//如果之后有值与num相等</span>\n            count++;                        <span class=\"hljs-comment\">//计数器加一</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            num = L.data[i];                <span class=\"hljs-comment\">//否则，更新num的值</span>\n            L.data[i - count] = L.data[i];  <span class=\"hljs-comment\">//并更新顺序表</span>\n        }\n    }\n    L.length = L.length - count;\n}\n</code></pre>\n</li>\n<li>\n<p>逆置：将顺序表L中的所有元素逆置过来</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Inversion</span><span class=\"hljs-params\">(SqList &amp;L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>, high = L.length - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//分别两个指针指向首尾</span>\n    <span class=\"hljs-keyword\">while</span>(low &lt; high){\n        <span class=\"hljs-keyword\">int</span> temp = L.data[low];        <span class=\"hljs-comment\">//把第一个元素赋值给临时变量temp</span>\n        L.data[low] = L.data[high];    <span class=\"hljs-comment\">//把high的值赋予low</span>\n        L.data[high] = temp;           <span class=\"hljs-comment\">//在把temp中的值赋予给high</span>\n        low++;                         <span class=\"hljs-comment\">//完成一次交换，然后依次交换           </span>\n        high--;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>平台：找出顺序表中最大的平台值（<strong>什么是平台值？</strong>）</p>\n<hr />\n</li>\n<li>\n<p>顺序表合并：将两个升序顺序表合并为一个升序的顺序表</p>\n<blockquote>\n<p>i++   先执行i=0 再进行i=i+1,也就是i会是0,执行完了再变为1<br />\n++i   先执行i=i+1,i会是1</p>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">SqList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(Sqlist L1, Sqlist L2)</span></span>{\n    Sqlist L3;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length &amp;&amp; j &lt; L2.length){  <span class=\"hljs-comment\">//L1和L2长度要大于0</span>\n        <span class=\"hljs-keyword\">if</span>(L1.data[i] &lt; L2.data[j]){        <span class=\"hljs-comment\">//如果L1的一位比L2的一位小</span>\n            L3.data[k++] = L1.data[i++];    <span class=\"hljs-comment\">//就把L1的一位放入L3中，并且i和k自增1</span>\n        }<span class=\"hljs-keyword\">else</span>{                              <span class=\"hljs-comment\">//如果L1的一位比L2的一位大</span>\n            L3.data[k++] = L2.data[j++];    <span class=\"hljs-comment\">//就把L2的一位放入L3中，并且j和k自增1</span>\n        }\n    }                                       <span class=\"hljs-comment\">//当其中一个被放完时，再单独对另一个顺序表操作即可</span>\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length){\n        L3.data[k++] = L1.data[i++];\n    }\n    <span class=\"hljs-keyword\">while</span>(i &lt; L2.length){\n        L3.data[k++] = L2.data[j++];\n    }\n    L3.length = k;\n    <span class=\"hljs-keyword\">return</span> L3;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个升序顺序表合并为一个升序的顺序表**（只求∩交集）**</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">SqList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(Sqlist L1, Sqlist L2)</span></span>{\n    Sqlist L3;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length &amp;&amp; j &lt; L2.length){  <span class=\"hljs-comment\">//L1和L2长度要大于0</span>\n        <span class=\"hljs-keyword\">if</span>(L1.data[i] &lt; L2.data[j]){        <span class=\"hljs-comment\">//如果L1的一位比L2的一位小</span>\n            i++;                            <span class=\"hljs-comment\">//i++</span>\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(L1.data[i] &gt; L2.data[j]){  <span class=\"hljs-comment\">//如果L1的一位比L2的一位大</span>\n            j++;                            <span class=\"hljs-comment\">//j++</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            L3.data[k++] = L1.data[i++];    <span class=\"hljs-comment\">//如果L1的一位和L2的一位相等，则放入L3中</span>\n            j++;                            <span class=\"hljs-comment\">//j++</span>\n        }\n    }                                       \n    L3.length = k;\n    <span class=\"hljs-keyword\">return</span> L3;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个升序顺序表合并为一个升序的顺序表**（∪并集，没有重复元素）**</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">SqList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(Sqlist L1, Sqlist L2)</span></span>{\n    Sqlist L3;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length &amp;&amp; j &lt; L2.length){    <span class=\"hljs-comment\">//L1和L2长度要大于0</span>\n        <span class=\"hljs-keyword\">if</span>(L1.data[i] &lt; L2.data[j]){          <span class=\"hljs-comment\">//如果L1的一位比L2的一位小</span>\n            L3.length[k++] = L2.length[i++];  <span class=\"hljs-comment\">//把L1放入L3，并且i和k自增</span>\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(L1.data[i] &gt; L2.data[j]){    <span class=\"hljs-comment\">//如果L1的一位比L2的一位大</span>\n            L3.length[k++] = L2.length[j++];  <span class=\"hljs-comment\">//把L2放入L3，并且j和k自增</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            L3.data[k++] = L1.data[i++];      <span class=\"hljs-comment\">//如果L1的一位和L2的一位相等，则把L1放入L3中</span>\n            j++;                              <span class=\"hljs-comment\">//j++</span>\n        }\n    }                                         <span class=\"hljs-comment\">//当其中一个被放完时，再单独对另一个顺序表操作即可</span>\n    <span class=\"hljs-keyword\">while</span>(i &lt; L1.length){\n        L3.data[k++] = L1.data[i++];\n    }\n    <span class=\"hljs-keyword\">while</span>(i &lt; L2.length){\n        L3.data[k++] = L2.data[j++];\n    }\n    L3.length = k;\n    <span class=\"hljs-keyword\">return</span> L3;\n}\n</code></pre>\n</li>\n</ul>\n"},{"title":"艾宾浩斯背单词","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"背单词","abbrlink":"9eeb","date":"2020-06-13T08:12:49.000Z","password":null,"_content":"---\n<center> <h2>英语单词复习计划表<h2></center>\n\n| 序号 | 学习日期 | 学   习     内   容 | 1天  | 2天  | 4天  | 7天  | 15天 | 1月  | 是否完成 |\n| ---- | -------- | ------------------- | ---- | ---- | ---- | ---- | ---- | ---- | -------- |\n| 1    | 6月14日  | 恋恋有词第1章       | -    | -    | -    | -    | -    | -    |          |\n| 2    | 6月15日  | 恋恋有词第2章       | 1    | -    | -    | -    | -    | -    |          |\n| 3    | 6月16日  | 恋恋有词第3章       | 2    | 1    | -    | -    | -    | -    |          |\n| 4    | 6月17日  | 恋恋有词第4章       | 3    | 2    | -    | -    | -    | -    |          |\n| 5    | 6月18日  | 恋恋有词第5章       | 4    | 3    | 1    | -    | -    | -    |          |\n| 6    | 6月19日  | 恋恋有词第6章       | 5    | 4    | 2    | -    | -    | -    |          |\n| 7    | 6月20日  | 恋恋有词第7章       | 6    | 5    | 3    | -    | -    | -    |          |\n| 8    | 6月21日  | 恋恋有词第8章       | 7    | 6    | 4    | 1    | -    | -    |          |\n| 9    | 6月22日  | 恋恋有词第9章       | 8    | 7    | 5    | 2    | -    | -    |          |\n| 10   | 6月23日  | 恋恋有词第10章      | 9    | 8    | 6    | 3    | -    | -    |          |\n| 11   | 6月24日  | 恋恋有词第11章      | 10   | 9    | 7    | 4    | -    | -    |          |\n| 12   | 6月25日  | 恋恋有词第12章      | 11   | 10   | 8    | 5    | -    | -    |          |\n| 13   | 6月26日  | 恋恋有词第13章      | 12   | 11   | 9    | 6    | -    | -    |          |\n| 14   | 6月27日  | 恋恋有词第14章      | 13   | 12   | 10   | 7    | -    | -    |          |\n| 15   | 6月28日  | 恋恋有词第15章      | 14   | 13   | 11   | 8    | -    | -    |          |\n| 16   | 6月29日  | 恋恋有词第16章      | 15   | 14   | 12   | 9    | 1    | -    |          |\n| 17   | 6月30日  | 恋恋有词第17章      | 16   | 15   | 13   | 10   | 2    | -    |          |\n| 18   | 7月1日   | 恋恋有词第18章      | 17   | 16   | 14   | 11   | 3    | -    |          |\n| 19   | 7月2日   | 恋恋有词第19章      | 18   | 17   | 15   | 12   | 4    | -    |          |\n| 20   | 7月3日   | 恋恋有词第20章      | 19   | 18   | 16   | 13   | 5    | -    |          |\n| 21   | 7月4日   | 恋恋有词第21章      | 20   | 19   | 17   | 14   | 6    | -    |          |\n| 22   | 7月5日   | 恋恋有词第22章      | 21   | 20   | 18   | 15   | 7    | -    |          |\n| 23   | 7月6日   | 恋恋有词第23章      | 22   | 21   | 19   | 16   | 8    | -    |          |\n| 24   | 7月7日   | 恋恋有词第24章      | 23   | 22   | 20   | 17   | 9    | -    |          |\n| 25   | 7月8日   | 恋恋有词第25章      | 24   | 23   | 21   | 18   | 10   | -    |          |\n| 26   | 7月9日   | 恋恋有词第26章      | 25   | 24   | 22   | 19   | 11   | -    |          |\n| 27   | 7月10日  | 恋恋有词第27章      | 26   | 25   | 23   | 20   | 12   | -    |          |\n| 28   | 7月11日  | 恋恋有词第28章      | 27   | 26   | 24   | 21   | 13   | -    |          |\n| 29   | 7月12日  | 恋恋有词第29章      | 28   | 27   | 25   | 22   | 14   | -    |          |\n| 30   | 7月13日  | 恋恋有词第30章      | 29   | 28   | 26   | 23   | 15   | -    |          |\n| 31   | 7月14日  |                     | 30   | 29   | 27   | 24   | 16   | 1    |          |\n| 32   | 7月15日  |                     | 31   | 30   | 28   | 25   | 17   | 2    |          |\n| 33   | 7月16日  |                     | 32   | 31   | 29   | 26   | 18   | 3    |          |\n| 34   | 7月17日  |                     | 33   | 32   | 30   | 27   | 19   | 4    |          |\n| 35   | 7月18日  |                     | 34   | 33   | 31   | 28   | 20   | 5    |          |\n| 36   | 7月19日  |                     | 35   | 34   | 32   | 29   | 21   | 6    |          |\n| 37   | 7月20日  |                     | 36   | 35   | 33   | 30   | 22   | 7    |          |\n| 38   | 7月21日  |                     | 37   | 36   | 34   | 31   | 23   | 8    |          |\n| 39   | 7月22日  |                     | 38   | 37   | 35   | 32   | 24   | 9    |          |\n| 40   | 7月23日  |                     | 39   | 38   | 36   | 33   | 25   | 10   |          |\n| 41   | 7月24日  |                     | 40   | 39   | 37   | 34   | 26   | 11   |          |\n| 42   | 7月25日  |                     | 41   | 40   | 38   | 35   | 27   | 12   |          |\n| 43   | 7月26日  |                     | 42   | 41   | 39   | 36   | 28   | 13   |          |\n| 44   | 7月27日  |                     | 43   | 42   | 40   | 37   | 29   | 14   |          |\n| 45   | 7月28日  |                     | 44   | 43   | 41   | 38   | 30   | 15   |          |\n| 46   | 7月29日  |                     | 45   | 44   | 42   | 39   | 31   | 16   |          |\n| 47   | 7月30日  |                     | 46   | 45   | 43   | 40   | 32   | 17   |          |\n| 48   | 7月31日  |                     | 47   | 46   | 44   | 41   | 33   | 18   |          |\n| 49   | 8月1日   |                     | 48   | 47   | 45   | 42   | 34   | 19   |          |\n| 50   | 8月2日   |                     | 49   | 48   | 46   | 43   | 35   | 20   |          |\n| 51   | 8月3日   |                     | 50   | 49   | 47   | 44   | 36   | 21   |          |\n| 52   | 8月4日   |                     | 51   | 50   | 48   | 45   | 37   | 22   |          |\n| 53   | 8月5日   |                     | 52   | 51   | 49   | 46   | 38   | 23   |          |\n| 54   | 8月6日   |                     | 53   | 52   | 50   | 47   | 39   | 24   |          |\n| 55   | 8月7日   |                     | 54   | 53   | 51   | 48   | 40   | 25   |          |\n| 56   | 8月8日   |                     | 55   | 54   | 52   | 49   | 41   | 26   |          |\n| 57   | 8月9日   |                     | 56   | 55   | 53   | 50   | 42   | 27   |          |\n| 58   | 8月10日  |                     | 57   | 56   | 54   | 51   | 43   | 28   |          |\n| 59   | 8月11日  |                     | 58   | 57   | 55   | 52   | 44   | 29   |          |\n| 60   | 8月12日  |                     | 59   | 58   | 56   | 53   | 45   | 30   |          |\n","source":"_posts/艾宾浩斯背单词.md","raw":"---\ntitle: 艾宾浩斯背单词\ntop: false\ncover: false\ntoc: false\nmathjax: true\nsummary: 背单词\ntags:\n  - 考研\n  - 计划\n  - 男男\n  - 菁菁\ncategories:\n  - 考研\nabbrlink: 9eeb\ndate: 2020-06-13 16:12:49\npassword:\n---\n---\n<center> <h2>英语单词复习计划表<h2></center>\n\n| 序号 | 学习日期 | 学   习     内   容 | 1天  | 2天  | 4天  | 7天  | 15天 | 1月  | 是否完成 |\n| ---- | -------- | ------------------- | ---- | ---- | ---- | ---- | ---- | ---- | -------- |\n| 1    | 6月14日  | 恋恋有词第1章       | -    | -    | -    | -    | -    | -    |          |\n| 2    | 6月15日  | 恋恋有词第2章       | 1    | -    | -    | -    | -    | -    |          |\n| 3    | 6月16日  | 恋恋有词第3章       | 2    | 1    | -    | -    | -    | -    |          |\n| 4    | 6月17日  | 恋恋有词第4章       | 3    | 2    | -    | -    | -    | -    |          |\n| 5    | 6月18日  | 恋恋有词第5章       | 4    | 3    | 1    | -    | -    | -    |          |\n| 6    | 6月19日  | 恋恋有词第6章       | 5    | 4    | 2    | -    | -    | -    |          |\n| 7    | 6月20日  | 恋恋有词第7章       | 6    | 5    | 3    | -    | -    | -    |          |\n| 8    | 6月21日  | 恋恋有词第8章       | 7    | 6    | 4    | 1    | -    | -    |          |\n| 9    | 6月22日  | 恋恋有词第9章       | 8    | 7    | 5    | 2    | -    | -    |          |\n| 10   | 6月23日  | 恋恋有词第10章      | 9    | 8    | 6    | 3    | -    | -    |          |\n| 11   | 6月24日  | 恋恋有词第11章      | 10   | 9    | 7    | 4    | -    | -    |          |\n| 12   | 6月25日  | 恋恋有词第12章      | 11   | 10   | 8    | 5    | -    | -    |          |\n| 13   | 6月26日  | 恋恋有词第13章      | 12   | 11   | 9    | 6    | -    | -    |          |\n| 14   | 6月27日  | 恋恋有词第14章      | 13   | 12   | 10   | 7    | -    | -    |          |\n| 15   | 6月28日  | 恋恋有词第15章      | 14   | 13   | 11   | 8    | -    | -    |          |\n| 16   | 6月29日  | 恋恋有词第16章      | 15   | 14   | 12   | 9    | 1    | -    |          |\n| 17   | 6月30日  | 恋恋有词第17章      | 16   | 15   | 13   | 10   | 2    | -    |          |\n| 18   | 7月1日   | 恋恋有词第18章      | 17   | 16   | 14   | 11   | 3    | -    |          |\n| 19   | 7月2日   | 恋恋有词第19章      | 18   | 17   | 15   | 12   | 4    | -    |          |\n| 20   | 7月3日   | 恋恋有词第20章      | 19   | 18   | 16   | 13   | 5    | -    |          |\n| 21   | 7月4日   | 恋恋有词第21章      | 20   | 19   | 17   | 14   | 6    | -    |          |\n| 22   | 7月5日   | 恋恋有词第22章      | 21   | 20   | 18   | 15   | 7    | -    |          |\n| 23   | 7月6日   | 恋恋有词第23章      | 22   | 21   | 19   | 16   | 8    | -    |          |\n| 24   | 7月7日   | 恋恋有词第24章      | 23   | 22   | 20   | 17   | 9    | -    |          |\n| 25   | 7月8日   | 恋恋有词第25章      | 24   | 23   | 21   | 18   | 10   | -    |          |\n| 26   | 7月9日   | 恋恋有词第26章      | 25   | 24   | 22   | 19   | 11   | -    |          |\n| 27   | 7月10日  | 恋恋有词第27章      | 26   | 25   | 23   | 20   | 12   | -    |          |\n| 28   | 7月11日  | 恋恋有词第28章      | 27   | 26   | 24   | 21   | 13   | -    |          |\n| 29   | 7月12日  | 恋恋有词第29章      | 28   | 27   | 25   | 22   | 14   | -    |          |\n| 30   | 7月13日  | 恋恋有词第30章      | 29   | 28   | 26   | 23   | 15   | -    |          |\n| 31   | 7月14日  |                     | 30   | 29   | 27   | 24   | 16   | 1    |          |\n| 32   | 7月15日  |                     | 31   | 30   | 28   | 25   | 17   | 2    |          |\n| 33   | 7月16日  |                     | 32   | 31   | 29   | 26   | 18   | 3    |          |\n| 34   | 7月17日  |                     | 33   | 32   | 30   | 27   | 19   | 4    |          |\n| 35   | 7月18日  |                     | 34   | 33   | 31   | 28   | 20   | 5    |          |\n| 36   | 7月19日  |                     | 35   | 34   | 32   | 29   | 21   | 6    |          |\n| 37   | 7月20日  |                     | 36   | 35   | 33   | 30   | 22   | 7    |          |\n| 38   | 7月21日  |                     | 37   | 36   | 34   | 31   | 23   | 8    |          |\n| 39   | 7月22日  |                     | 38   | 37   | 35   | 32   | 24   | 9    |          |\n| 40   | 7月23日  |                     | 39   | 38   | 36   | 33   | 25   | 10   |          |\n| 41   | 7月24日  |                     | 40   | 39   | 37   | 34   | 26   | 11   |          |\n| 42   | 7月25日  |                     | 41   | 40   | 38   | 35   | 27   | 12   |          |\n| 43   | 7月26日  |                     | 42   | 41   | 39   | 36   | 28   | 13   |          |\n| 44   | 7月27日  |                     | 43   | 42   | 40   | 37   | 29   | 14   |          |\n| 45   | 7月28日  |                     | 44   | 43   | 41   | 38   | 30   | 15   |          |\n| 46   | 7月29日  |                     | 45   | 44   | 42   | 39   | 31   | 16   |          |\n| 47   | 7月30日  |                     | 46   | 45   | 43   | 40   | 32   | 17   |          |\n| 48   | 7月31日  |                     | 47   | 46   | 44   | 41   | 33   | 18   |          |\n| 49   | 8月1日   |                     | 48   | 47   | 45   | 42   | 34   | 19   |          |\n| 50   | 8月2日   |                     | 49   | 48   | 46   | 43   | 35   | 20   |          |\n| 51   | 8月3日   |                     | 50   | 49   | 47   | 44   | 36   | 21   |          |\n| 52   | 8月4日   |                     | 51   | 50   | 48   | 45   | 37   | 22   |          |\n| 53   | 8月5日   |                     | 52   | 51   | 49   | 46   | 38   | 23   |          |\n| 54   | 8月6日   |                     | 53   | 52   | 50   | 47   | 39   | 24   |          |\n| 55   | 8月7日   |                     | 54   | 53   | 51   | 48   | 40   | 25   |          |\n| 56   | 8月8日   |                     | 55   | 54   | 52   | 49   | 41   | 26   |          |\n| 57   | 8月9日   |                     | 56   | 55   | 53   | 50   | 42   | 27   |          |\n| 58   | 8月10日  |                     | 57   | 56   | 54   | 51   | 43   | 28   |          |\n| 59   | 8月11日  |                     | 58   | 57   | 55   | 52   | 44   | 29   |          |\n| 60   | 8月12日  |                     | 59   | 58   | 56   | 53   | 45   | 30   |          |\n","slug":"艾宾浩斯背单词","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdil003xzl9kgljxha2u","content":"<hr>\n<center> <h2>英语单词复习计划表</h2><h2></h2></center>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>学习日期</th>\n<th>学   习     内   容</th>\n<th>1天</th>\n<th>2天</th>\n<th>4天</th>\n<th>7天</th>\n<th>15天</th>\n<th>1月</th>\n<th>是否完成</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>6月14日</td>\n<td>恋恋有词第1章</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>6月15日</td>\n<td>恋恋有词第2章</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>6月16日</td>\n<td>恋恋有词第3章</td>\n<td>2</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>6月17日</td>\n<td>恋恋有词第4章</td>\n<td>3</td>\n<td>2</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>6月18日</td>\n<td>恋恋有词第5章</td>\n<td>4</td>\n<td>3</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>6月19日</td>\n<td>恋恋有词第6章</td>\n<td>5</td>\n<td>4</td>\n<td>2</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>7</td>\n<td>6月20日</td>\n<td>恋恋有词第7章</td>\n<td>6</td>\n<td>5</td>\n<td>3</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>8</td>\n<td>6月21日</td>\n<td>恋恋有词第8章</td>\n<td>7</td>\n<td>6</td>\n<td>4</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>9</td>\n<td>6月22日</td>\n<td>恋恋有词第9章</td>\n<td>8</td>\n<td>7</td>\n<td>5</td>\n<td>2</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>10</td>\n<td>6月23日</td>\n<td>恋恋有词第10章</td>\n<td>9</td>\n<td>8</td>\n<td>6</td>\n<td>3</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>6月24日</td>\n<td>恋恋有词第11章</td>\n<td>10</td>\n<td>9</td>\n<td>7</td>\n<td>4</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>12</td>\n<td>6月25日</td>\n<td>恋恋有词第12章</td>\n<td>11</td>\n<td>10</td>\n<td>8</td>\n<td>5</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>13</td>\n<td>6月26日</td>\n<td>恋恋有词第13章</td>\n<td>12</td>\n<td>11</td>\n<td>9</td>\n<td>6</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>6月27日</td>\n<td>恋恋有词第14章</td>\n<td>13</td>\n<td>12</td>\n<td>10</td>\n<td>7</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>15</td>\n<td>6月28日</td>\n<td>恋恋有词第15章</td>\n<td>14</td>\n<td>13</td>\n<td>11</td>\n<td>8</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>16</td>\n<td>6月29日</td>\n<td>恋恋有词第16章</td>\n<td>15</td>\n<td>14</td>\n<td>12</td>\n<td>9</td>\n<td>1</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>17</td>\n<td>6月30日</td>\n<td>恋恋有词第17章</td>\n<td>16</td>\n<td>15</td>\n<td>13</td>\n<td>10</td>\n<td>2</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>18</td>\n<td>7月1日</td>\n<td>恋恋有词第18章</td>\n<td>17</td>\n<td>16</td>\n<td>14</td>\n<td>11</td>\n<td>3</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>19</td>\n<td>7月2日</td>\n<td>恋恋有词第19章</td>\n<td>18</td>\n<td>17</td>\n<td>15</td>\n<td>12</td>\n<td>4</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>20</td>\n<td>7月3日</td>\n<td>恋恋有词第20章</td>\n<td>19</td>\n<td>18</td>\n<td>16</td>\n<td>13</td>\n<td>5</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>21</td>\n<td>7月4日</td>\n<td>恋恋有词第21章</td>\n<td>20</td>\n<td>19</td>\n<td>17</td>\n<td>14</td>\n<td>6</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>22</td>\n<td>7月5日</td>\n<td>恋恋有词第22章</td>\n<td>21</td>\n<td>20</td>\n<td>18</td>\n<td>15</td>\n<td>7</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>23</td>\n<td>7月6日</td>\n<td>恋恋有词第23章</td>\n<td>22</td>\n<td>21</td>\n<td>19</td>\n<td>16</td>\n<td>8</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>24</td>\n<td>7月7日</td>\n<td>恋恋有词第24章</td>\n<td>23</td>\n<td>22</td>\n<td>20</td>\n<td>17</td>\n<td>9</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>25</td>\n<td>7月8日</td>\n<td>恋恋有词第25章</td>\n<td>24</td>\n<td>23</td>\n<td>21</td>\n<td>18</td>\n<td>10</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>26</td>\n<td>7月9日</td>\n<td>恋恋有词第26章</td>\n<td>25</td>\n<td>24</td>\n<td>22</td>\n<td>19</td>\n<td>11</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>27</td>\n<td>7月10日</td>\n<td>恋恋有词第27章</td>\n<td>26</td>\n<td>25</td>\n<td>23</td>\n<td>20</td>\n<td>12</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>28</td>\n<td>7月11日</td>\n<td>恋恋有词第28章</td>\n<td>27</td>\n<td>26</td>\n<td>24</td>\n<td>21</td>\n<td>13</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>29</td>\n<td>7月12日</td>\n<td>恋恋有词第29章</td>\n<td>28</td>\n<td>27</td>\n<td>25</td>\n<td>22</td>\n<td>14</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>30</td>\n<td>7月13日</td>\n<td>恋恋有词第30章</td>\n<td>29</td>\n<td>28</td>\n<td>26</td>\n<td>23</td>\n<td>15</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>31</td>\n<td>7月14日</td>\n<td></td>\n<td>30</td>\n<td>29</td>\n<td>27</td>\n<td>24</td>\n<td>16</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>32</td>\n<td>7月15日</td>\n<td></td>\n<td>31</td>\n<td>30</td>\n<td>28</td>\n<td>25</td>\n<td>17</td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td>33</td>\n<td>7月16日</td>\n<td></td>\n<td>32</td>\n<td>31</td>\n<td>29</td>\n<td>26</td>\n<td>18</td>\n<td>3</td>\n<td></td>\n</tr>\n<tr>\n<td>34</td>\n<td>7月17日</td>\n<td></td>\n<td>33</td>\n<td>32</td>\n<td>30</td>\n<td>27</td>\n<td>19</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>35</td>\n<td>7月18日</td>\n<td></td>\n<td>34</td>\n<td>33</td>\n<td>31</td>\n<td>28</td>\n<td>20</td>\n<td>5</td>\n<td></td>\n</tr>\n<tr>\n<td>36</td>\n<td>7月19日</td>\n<td></td>\n<td>35</td>\n<td>34</td>\n<td>32</td>\n<td>29</td>\n<td>21</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>37</td>\n<td>7月20日</td>\n<td></td>\n<td>36</td>\n<td>35</td>\n<td>33</td>\n<td>30</td>\n<td>22</td>\n<td>7</td>\n<td></td>\n</tr>\n<tr>\n<td>38</td>\n<td>7月21日</td>\n<td></td>\n<td>37</td>\n<td>36</td>\n<td>34</td>\n<td>31</td>\n<td>23</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td>39</td>\n<td>7月22日</td>\n<td></td>\n<td>38</td>\n<td>37</td>\n<td>35</td>\n<td>32</td>\n<td>24</td>\n<td>9</td>\n<td></td>\n</tr>\n<tr>\n<td>40</td>\n<td>7月23日</td>\n<td></td>\n<td>39</td>\n<td>38</td>\n<td>36</td>\n<td>33</td>\n<td>25</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>41</td>\n<td>7月24日</td>\n<td></td>\n<td>40</td>\n<td>39</td>\n<td>37</td>\n<td>34</td>\n<td>26</td>\n<td>11</td>\n<td></td>\n</tr>\n<tr>\n<td>42</td>\n<td>7月25日</td>\n<td></td>\n<td>41</td>\n<td>40</td>\n<td>38</td>\n<td>35</td>\n<td>27</td>\n<td>12</td>\n<td></td>\n</tr>\n<tr>\n<td>43</td>\n<td>7月26日</td>\n<td></td>\n<td>42</td>\n<td>41</td>\n<td>39</td>\n<td>36</td>\n<td>28</td>\n<td>13</td>\n<td></td>\n</tr>\n<tr>\n<td>44</td>\n<td>7月27日</td>\n<td></td>\n<td>43</td>\n<td>42</td>\n<td>40</td>\n<td>37</td>\n<td>29</td>\n<td>14</td>\n<td></td>\n</tr>\n<tr>\n<td>45</td>\n<td>7月28日</td>\n<td></td>\n<td>44</td>\n<td>43</td>\n<td>41</td>\n<td>38</td>\n<td>30</td>\n<td>15</td>\n<td></td>\n</tr>\n<tr>\n<td>46</td>\n<td>7月29日</td>\n<td></td>\n<td>45</td>\n<td>44</td>\n<td>42</td>\n<td>39</td>\n<td>31</td>\n<td>16</td>\n<td></td>\n</tr>\n<tr>\n<td>47</td>\n<td>7月30日</td>\n<td></td>\n<td>46</td>\n<td>45</td>\n<td>43</td>\n<td>40</td>\n<td>32</td>\n<td>17</td>\n<td></td>\n</tr>\n<tr>\n<td>48</td>\n<td>7月31日</td>\n<td></td>\n<td>47</td>\n<td>46</td>\n<td>44</td>\n<td>41</td>\n<td>33</td>\n<td>18</td>\n<td></td>\n</tr>\n<tr>\n<td>49</td>\n<td>8月1日</td>\n<td></td>\n<td>48</td>\n<td>47</td>\n<td>45</td>\n<td>42</td>\n<td>34</td>\n<td>19</td>\n<td></td>\n</tr>\n<tr>\n<td>50</td>\n<td>8月2日</td>\n<td></td>\n<td>49</td>\n<td>48</td>\n<td>46</td>\n<td>43</td>\n<td>35</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>51</td>\n<td>8月3日</td>\n<td></td>\n<td>50</td>\n<td>49</td>\n<td>47</td>\n<td>44</td>\n<td>36</td>\n<td>21</td>\n<td></td>\n</tr>\n<tr>\n<td>52</td>\n<td>8月4日</td>\n<td></td>\n<td>51</td>\n<td>50</td>\n<td>48</td>\n<td>45</td>\n<td>37</td>\n<td>22</td>\n<td></td>\n</tr>\n<tr>\n<td>53</td>\n<td>8月5日</td>\n<td></td>\n<td>52</td>\n<td>51</td>\n<td>49</td>\n<td>46</td>\n<td>38</td>\n<td>23</td>\n<td></td>\n</tr>\n<tr>\n<td>54</td>\n<td>8月6日</td>\n<td></td>\n<td>53</td>\n<td>52</td>\n<td>50</td>\n<td>47</td>\n<td>39</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>55</td>\n<td>8月7日</td>\n<td></td>\n<td>54</td>\n<td>53</td>\n<td>51</td>\n<td>48</td>\n<td>40</td>\n<td>25</td>\n<td></td>\n</tr>\n<tr>\n<td>56</td>\n<td>8月8日</td>\n<td></td>\n<td>55</td>\n<td>54</td>\n<td>52</td>\n<td>49</td>\n<td>41</td>\n<td>26</td>\n<td></td>\n</tr>\n<tr>\n<td>57</td>\n<td>8月9日</td>\n<td></td>\n<td>56</td>\n<td>55</td>\n<td>53</td>\n<td>50</td>\n<td>42</td>\n<td>27</td>\n<td></td>\n</tr>\n<tr>\n<td>58</td>\n<td>8月10日</td>\n<td></td>\n<td>57</td>\n<td>56</td>\n<td>54</td>\n<td>51</td>\n<td>43</td>\n<td>28</td>\n<td></td>\n</tr>\n<tr>\n<td>59</td>\n<td>8月11日</td>\n<td></td>\n<td>58</td>\n<td>57</td>\n<td>55</td>\n<td>52</td>\n<td>44</td>\n<td>29</td>\n<td></td>\n</tr>\n<tr>\n<td>60</td>\n<td>8月12日</td>\n<td></td>\n<td>59</td>\n<td>58</td>\n<td>56</td>\n<td>53</td>\n<td>45</td>\n<td>30</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr />\n<center> <h2>英语单词复习计划表<h2></center>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>学习日期</th>\n<th>学   习     内   容</th>\n<th>1天</th>\n<th>2天</th>\n<th>4天</th>\n<th>7天</th>\n<th>15天</th>\n<th>1月</th>\n<th>是否完成</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>6月14日</td>\n<td>恋恋有词第1章</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>6月15日</td>\n<td>恋恋有词第2章</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>6月16日</td>\n<td>恋恋有词第3章</td>\n<td>2</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>6月17日</td>\n<td>恋恋有词第4章</td>\n<td>3</td>\n<td>2</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>6月18日</td>\n<td>恋恋有词第5章</td>\n<td>4</td>\n<td>3</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>6月19日</td>\n<td>恋恋有词第6章</td>\n<td>5</td>\n<td>4</td>\n<td>2</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>7</td>\n<td>6月20日</td>\n<td>恋恋有词第7章</td>\n<td>6</td>\n<td>5</td>\n<td>3</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>8</td>\n<td>6月21日</td>\n<td>恋恋有词第8章</td>\n<td>7</td>\n<td>6</td>\n<td>4</td>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>9</td>\n<td>6月22日</td>\n<td>恋恋有词第9章</td>\n<td>8</td>\n<td>7</td>\n<td>5</td>\n<td>2</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>10</td>\n<td>6月23日</td>\n<td>恋恋有词第10章</td>\n<td>9</td>\n<td>8</td>\n<td>6</td>\n<td>3</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>6月24日</td>\n<td>恋恋有词第11章</td>\n<td>10</td>\n<td>9</td>\n<td>7</td>\n<td>4</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>12</td>\n<td>6月25日</td>\n<td>恋恋有词第12章</td>\n<td>11</td>\n<td>10</td>\n<td>8</td>\n<td>5</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>13</td>\n<td>6月26日</td>\n<td>恋恋有词第13章</td>\n<td>12</td>\n<td>11</td>\n<td>9</td>\n<td>6</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>6月27日</td>\n<td>恋恋有词第14章</td>\n<td>13</td>\n<td>12</td>\n<td>10</td>\n<td>7</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>15</td>\n<td>6月28日</td>\n<td>恋恋有词第15章</td>\n<td>14</td>\n<td>13</td>\n<td>11</td>\n<td>8</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>16</td>\n<td>6月29日</td>\n<td>恋恋有词第16章</td>\n<td>15</td>\n<td>14</td>\n<td>12</td>\n<td>9</td>\n<td>1</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>17</td>\n<td>6月30日</td>\n<td>恋恋有词第17章</td>\n<td>16</td>\n<td>15</td>\n<td>13</td>\n<td>10</td>\n<td>2</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>18</td>\n<td>7月1日</td>\n<td>恋恋有词第18章</td>\n<td>17</td>\n<td>16</td>\n<td>14</td>\n<td>11</td>\n<td>3</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>19</td>\n<td>7月2日</td>\n<td>恋恋有词第19章</td>\n<td>18</td>\n<td>17</td>\n<td>15</td>\n<td>12</td>\n<td>4</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>20</td>\n<td>7月3日</td>\n<td>恋恋有词第20章</td>\n<td>19</td>\n<td>18</td>\n<td>16</td>\n<td>13</td>\n<td>5</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>21</td>\n<td>7月4日</td>\n<td>恋恋有词第21章</td>\n<td>20</td>\n<td>19</td>\n<td>17</td>\n<td>14</td>\n<td>6</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>22</td>\n<td>7月5日</td>\n<td>恋恋有词第22章</td>\n<td>21</td>\n<td>20</td>\n<td>18</td>\n<td>15</td>\n<td>7</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>23</td>\n<td>7月6日</td>\n<td>恋恋有词第23章</td>\n<td>22</td>\n<td>21</td>\n<td>19</td>\n<td>16</td>\n<td>8</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>24</td>\n<td>7月7日</td>\n<td>恋恋有词第24章</td>\n<td>23</td>\n<td>22</td>\n<td>20</td>\n<td>17</td>\n<td>9</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>25</td>\n<td>7月8日</td>\n<td>恋恋有词第25章</td>\n<td>24</td>\n<td>23</td>\n<td>21</td>\n<td>18</td>\n<td>10</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>26</td>\n<td>7月9日</td>\n<td>恋恋有词第26章</td>\n<td>25</td>\n<td>24</td>\n<td>22</td>\n<td>19</td>\n<td>11</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>27</td>\n<td>7月10日</td>\n<td>恋恋有词第27章</td>\n<td>26</td>\n<td>25</td>\n<td>23</td>\n<td>20</td>\n<td>12</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>28</td>\n<td>7月11日</td>\n<td>恋恋有词第28章</td>\n<td>27</td>\n<td>26</td>\n<td>24</td>\n<td>21</td>\n<td>13</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>29</td>\n<td>7月12日</td>\n<td>恋恋有词第29章</td>\n<td>28</td>\n<td>27</td>\n<td>25</td>\n<td>22</td>\n<td>14</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>30</td>\n<td>7月13日</td>\n<td>恋恋有词第30章</td>\n<td>29</td>\n<td>28</td>\n<td>26</td>\n<td>23</td>\n<td>15</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>31</td>\n<td>7月14日</td>\n<td></td>\n<td>30</td>\n<td>29</td>\n<td>27</td>\n<td>24</td>\n<td>16</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>32</td>\n<td>7月15日</td>\n<td></td>\n<td>31</td>\n<td>30</td>\n<td>28</td>\n<td>25</td>\n<td>17</td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td>33</td>\n<td>7月16日</td>\n<td></td>\n<td>32</td>\n<td>31</td>\n<td>29</td>\n<td>26</td>\n<td>18</td>\n<td>3</td>\n<td></td>\n</tr>\n<tr>\n<td>34</td>\n<td>7月17日</td>\n<td></td>\n<td>33</td>\n<td>32</td>\n<td>30</td>\n<td>27</td>\n<td>19</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>35</td>\n<td>7月18日</td>\n<td></td>\n<td>34</td>\n<td>33</td>\n<td>31</td>\n<td>28</td>\n<td>20</td>\n<td>5</td>\n<td></td>\n</tr>\n<tr>\n<td>36</td>\n<td>7月19日</td>\n<td></td>\n<td>35</td>\n<td>34</td>\n<td>32</td>\n<td>29</td>\n<td>21</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>37</td>\n<td>7月20日</td>\n<td></td>\n<td>36</td>\n<td>35</td>\n<td>33</td>\n<td>30</td>\n<td>22</td>\n<td>7</td>\n<td></td>\n</tr>\n<tr>\n<td>38</td>\n<td>7月21日</td>\n<td></td>\n<td>37</td>\n<td>36</td>\n<td>34</td>\n<td>31</td>\n<td>23</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td>39</td>\n<td>7月22日</td>\n<td></td>\n<td>38</td>\n<td>37</td>\n<td>35</td>\n<td>32</td>\n<td>24</td>\n<td>9</td>\n<td></td>\n</tr>\n<tr>\n<td>40</td>\n<td>7月23日</td>\n<td></td>\n<td>39</td>\n<td>38</td>\n<td>36</td>\n<td>33</td>\n<td>25</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>41</td>\n<td>7月24日</td>\n<td></td>\n<td>40</td>\n<td>39</td>\n<td>37</td>\n<td>34</td>\n<td>26</td>\n<td>11</td>\n<td></td>\n</tr>\n<tr>\n<td>42</td>\n<td>7月25日</td>\n<td></td>\n<td>41</td>\n<td>40</td>\n<td>38</td>\n<td>35</td>\n<td>27</td>\n<td>12</td>\n<td></td>\n</tr>\n<tr>\n<td>43</td>\n<td>7月26日</td>\n<td></td>\n<td>42</td>\n<td>41</td>\n<td>39</td>\n<td>36</td>\n<td>28</td>\n<td>13</td>\n<td></td>\n</tr>\n<tr>\n<td>44</td>\n<td>7月27日</td>\n<td></td>\n<td>43</td>\n<td>42</td>\n<td>40</td>\n<td>37</td>\n<td>29</td>\n<td>14</td>\n<td></td>\n</tr>\n<tr>\n<td>45</td>\n<td>7月28日</td>\n<td></td>\n<td>44</td>\n<td>43</td>\n<td>41</td>\n<td>38</td>\n<td>30</td>\n<td>15</td>\n<td></td>\n</tr>\n<tr>\n<td>46</td>\n<td>7月29日</td>\n<td></td>\n<td>45</td>\n<td>44</td>\n<td>42</td>\n<td>39</td>\n<td>31</td>\n<td>16</td>\n<td></td>\n</tr>\n<tr>\n<td>47</td>\n<td>7月30日</td>\n<td></td>\n<td>46</td>\n<td>45</td>\n<td>43</td>\n<td>40</td>\n<td>32</td>\n<td>17</td>\n<td></td>\n</tr>\n<tr>\n<td>48</td>\n<td>7月31日</td>\n<td></td>\n<td>47</td>\n<td>46</td>\n<td>44</td>\n<td>41</td>\n<td>33</td>\n<td>18</td>\n<td></td>\n</tr>\n<tr>\n<td>49</td>\n<td>8月1日</td>\n<td></td>\n<td>48</td>\n<td>47</td>\n<td>45</td>\n<td>42</td>\n<td>34</td>\n<td>19</td>\n<td></td>\n</tr>\n<tr>\n<td>50</td>\n<td>8月2日</td>\n<td></td>\n<td>49</td>\n<td>48</td>\n<td>46</td>\n<td>43</td>\n<td>35</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>51</td>\n<td>8月3日</td>\n<td></td>\n<td>50</td>\n<td>49</td>\n<td>47</td>\n<td>44</td>\n<td>36</td>\n<td>21</td>\n<td></td>\n</tr>\n<tr>\n<td>52</td>\n<td>8月4日</td>\n<td></td>\n<td>51</td>\n<td>50</td>\n<td>48</td>\n<td>45</td>\n<td>37</td>\n<td>22</td>\n<td></td>\n</tr>\n<tr>\n<td>53</td>\n<td>8月5日</td>\n<td></td>\n<td>52</td>\n<td>51</td>\n<td>49</td>\n<td>46</td>\n<td>38</td>\n<td>23</td>\n<td></td>\n</tr>\n<tr>\n<td>54</td>\n<td>8月6日</td>\n<td></td>\n<td>53</td>\n<td>52</td>\n<td>50</td>\n<td>47</td>\n<td>39</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>55</td>\n<td>8月7日</td>\n<td></td>\n<td>54</td>\n<td>53</td>\n<td>51</td>\n<td>48</td>\n<td>40</td>\n<td>25</td>\n<td></td>\n</tr>\n<tr>\n<td>56</td>\n<td>8月8日</td>\n<td></td>\n<td>55</td>\n<td>54</td>\n<td>52</td>\n<td>49</td>\n<td>41</td>\n<td>26</td>\n<td></td>\n</tr>\n<tr>\n<td>57</td>\n<td>8月9日</td>\n<td></td>\n<td>56</td>\n<td>55</td>\n<td>53</td>\n<td>50</td>\n<td>42</td>\n<td>27</td>\n<td></td>\n</tr>\n<tr>\n<td>58</td>\n<td>8月10日</td>\n<td></td>\n<td>57</td>\n<td>56</td>\n<td>54</td>\n<td>51</td>\n<td>43</td>\n<td>28</td>\n<td></td>\n</tr>\n<tr>\n<td>59</td>\n<td>8月11日</td>\n<td></td>\n<td>58</td>\n<td>57</td>\n<td>55</td>\n<td>52</td>\n<td>44</td>\n<td>29</td>\n<td></td>\n</tr>\n<tr>\n<td>60</td>\n<td>8月12日</td>\n<td></td>\n<td>59</td>\n<td>58</td>\n<td>56</td>\n<td>53</td>\n<td>45</td>\n<td>30</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"菁菁学习计划","top":false,"cover":false,"toc":true,"mathjax":true,"summary":"学习计划","abbrlink":"7930","date":"2020-06-08T06:16:39.000Z","password":null,"_content":"## 总计划 \n![](1.png)\n## 每日计划\n![](2.png)","source":"_posts/菁菁学习计划.md","raw":"---\ntitle: 菁菁学习计划\ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: 学习计划\ntags:\n  - 考研\n  - 计划\ncategories:\n  - 菁菁\nabbrlink: '7930'\ndate: 2020-06-08 14:16:39\npassword:\n---\n## 总计划 \n![](1.png)\n## 每日计划\n![](2.png)","slug":"菁菁学习计划","published":1,"updated":"2020-08-10T12:34:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdil0040zl9k63wnhirv","content":"<h2 id=\"总计划\"><a class=\"markdownIt-Anchor\" href=\"#总计划\"></a> 总计划</h2>\n<p><img src=\"1.png\" alt=\"\"></p>\n<h2 id=\"每日计划\"><a class=\"markdownIt-Anchor\" href=\"#每日计划\"></a> 每日计划</h2>\n<p><img src=\"2.png\" alt=\"\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"总计划\"><a class=\"markdownIt-Anchor\" href=\"#总计划\"></a> 总计划</h2>\n<p><img src=\"1.png\" alt=\"\" /></p>\n<h2 id=\"每日计划\"><a class=\"markdownIt-Anchor\" href=\"#每日计划\"></a> 每日计划</h2>\n<p><img src=\"2.png\" alt=\"\" /></p>\n"},{"title":"计网第一章　概述","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"第一章　计算机网络概述","abbrlink":"6c68","date":"2020-07-21T12:09:24.000Z","password":null,"_content":"\n## 第一章　计算机网络概述\n\n1. 不同程序同时在一台计算机内使用网络，可使用**服务点地址**来区别。\n\n3. 网络拓扑结构\n\n   - 网状\n   - 星状：中央控制器是整个网络性能的瓶颈\n   - 树状\n   - 总线型\n   - 环形\n\n4. 计算机网络的分类\n   - 按作用范围分类：局域网（一般为私有的）、城域网和广域网\n   - 按通讯介质分类：有线网（同轴电缆、双绞线和光纤）和无线网\n   - 按通信传播方式分类：点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）\n   - 按通信速率分类：低速网、中速网和高速网\n   - 按使用范围分类：公用网和专用网\n   - 按网络控制方式分类：集中式网络和分布式网络（无处理中心，每个结点地位平等）\n   - 按网络环境分类：部门网、企业网和校园网\n   \n4. **网络体系结构**：计算机网络的各个层次及其协议的集合成为体系结构\n\n5. ISO OSI参考模型\n\n   - 计算机网络从逻辑功能上可分为两个子网：**资源子网和通信子网**\n   - **由下到上、由低到高为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层**\n   - 物理层（中继器）：规定了机械、电气、功能和规程4个特性，单位是比特（bit）\n   - 数据链路层（网桥）：相邻结点的数据传输、帧同步、差错控制、流量控制、链路管理，单位是帧（frame）。提供**可靠通信**\n   - 网络层（路由器）：任意节点的数据传输、路由选择、阻塞控制国际互联，单位是分组或包\n   - **物理层、数据链路层和网络层**三层组成**通信子网**\n   - 传输层：**端到端**通信，流量控制、差错控制，单位是报文（message）\n   - 会话层：两个计算机上的进程间建立连接。提供同步点机制\n   - 表示层：解决用户信息的语法问题\n   - 应用层：处理用户的数据和信息\n6. Internet体系结构采用TCP/IP参考模型\n\n7. TCP/IP体系结构：物理层、数据链路层、网络层、传输层和应用层\n   - 物理层和数据链路层：这两层有时又称为网络接口层。数据链路层在TCP/IP协议中被认为是不可靠的。**保证可靠地通讯是传输层的任务**\n   \n   - 网络层：寻址、数据打包和路由选择，IP协议是一个**无连接、不可靠**的协议。包括地址解析协议ARP、反向地址解析协议RARP、Internet协议IP、Internet控制消息协议ICMP和Internet组管理协议IGMP\n   \n   - 传输层\n     - TCP传输控制协议：可靠有链接\n     - UDP用户数据报协议：不可靠无连接\n     \n   - 应用层：FTP交互式文件传输、SMTP邮件服务器间邮件传输、POP从邮件服务器上取回邮件、HTTP传输组成Web页面的文件、DNS解析域名成IP地址、SNMP简单网络管理协议\n   \n8. 物理层为第1层，应用层为第7层。**下层为上面各层提供服务**，相邻层传递的信息为服务数据单元SDU，对等层之间交换信息为协议数据单元PDU。**N层的PDU由N层的SDU加上该层的PCI（协议控制信息）构成**","source":"_posts/计网第一章-概述.md","raw":"---\ntitle: 计网第一章　概述\ntop: false\ncover: false\ntoc: false\nmathjax: true\nsummary: 第一章　计算机网络概述\ntags:\n  - 计网\n  - 总结\n  - 考研\ncategories:\n  - 计网\nabbrlink: 6c68\ndate: 2020-07-21 20:09:24\npassword:\n---\n\n## 第一章　计算机网络概述\n\n1. 不同程序同时在一台计算机内使用网络，可使用**服务点地址**来区别。\n\n3. 网络拓扑结构\n\n   - 网状\n   - 星状：中央控制器是整个网络性能的瓶颈\n   - 树状\n   - 总线型\n   - 环形\n\n4. 计算机网络的分类\n   - 按作用范围分类：局域网（一般为私有的）、城域网和广域网\n   - 按通讯介质分类：有线网（同轴电缆、双绞线和光纤）和无线网\n   - 按通信传播方式分类：点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）\n   - 按通信速率分类：低速网、中速网和高速网\n   - 按使用范围分类：公用网和专用网\n   - 按网络控制方式分类：集中式网络和分布式网络（无处理中心，每个结点地位平等）\n   - 按网络环境分类：部门网、企业网和校园网\n   \n4. **网络体系结构**：计算机网络的各个层次及其协议的集合成为体系结构\n\n5. ISO OSI参考模型\n\n   - 计算机网络从逻辑功能上可分为两个子网：**资源子网和通信子网**\n   - **由下到上、由低到高为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层**\n   - 物理层（中继器）：规定了机械、电气、功能和规程4个特性，单位是比特（bit）\n   - 数据链路层（网桥）：相邻结点的数据传输、帧同步、差错控制、流量控制、链路管理，单位是帧（frame）。提供**可靠通信**\n   - 网络层（路由器）：任意节点的数据传输、路由选择、阻塞控制国际互联，单位是分组或包\n   - **物理层、数据链路层和网络层**三层组成**通信子网**\n   - 传输层：**端到端**通信，流量控制、差错控制，单位是报文（message）\n   - 会话层：两个计算机上的进程间建立连接。提供同步点机制\n   - 表示层：解决用户信息的语法问题\n   - 应用层：处理用户的数据和信息\n6. Internet体系结构采用TCP/IP参考模型\n\n7. TCP/IP体系结构：物理层、数据链路层、网络层、传输层和应用层\n   - 物理层和数据链路层：这两层有时又称为网络接口层。数据链路层在TCP/IP协议中被认为是不可靠的。**保证可靠地通讯是传输层的任务**\n   \n   - 网络层：寻址、数据打包和路由选择，IP协议是一个**无连接、不可靠**的协议。包括地址解析协议ARP、反向地址解析协议RARP、Internet协议IP、Internet控制消息协议ICMP和Internet组管理协议IGMP\n   \n   - 传输层\n     - TCP传输控制协议：可靠有链接\n     - UDP用户数据报协议：不可靠无连接\n     \n   - 应用层：FTP交互式文件传输、SMTP邮件服务器间邮件传输、POP从邮件服务器上取回邮件、HTTP传输组成Web页面的文件、DNS解析域名成IP地址、SNMP简单网络管理协议\n   \n8. 物理层为第1层，应用层为第7层。**下层为上面各层提供服务**，相邻层传递的信息为服务数据单元SDU，对等层之间交换信息为协议数据单元PDU。**N层的PDU由N层的SDU加上该层的PCI（协议控制信息）构成**","slug":"计网第一章-概述","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdim0043zl9k6hh1d2iz","content":"<h2 id=\"第一章-计算机网络概述\"><a class=\"markdownIt-Anchor\" href=\"#第一章-计算机网络概述\"></a> 第一章　计算机网络概述</h2>\n<ol>\n<li>\n<p>不同程序同时在一台计算机内使用网络，可使用<strong>服务点地址</strong>来区别。</p>\n</li>\n<li>\n<p>网络拓扑结构</p>\n<ul>\n<li>网状</li>\n<li>星状：中央控制器是整个网络性能的瓶颈</li>\n<li>树状</li>\n<li>总线型</li>\n<li>环形</li>\n</ul>\n</li>\n<li>\n<p>计算机网络的分类</p>\n<ul>\n<li>按作用范围分类：局域网（一般为私有的）、城域网和广域网</li>\n<li>按通讯介质分类：有线网（同轴电缆、双绞线和光纤）和无线网</li>\n<li>按通信传播方式分类：点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）</li>\n<li>按通信速率分类：低速网、中速网和高速网</li>\n<li>按使用范围分类：公用网和专用网</li>\n<li>按网络控制方式分类：集中式网络和分布式网络（无处理中心，每个结点地位平等）</li>\n<li>按网络环境分类：部门网、企业网和校园网</li>\n</ul>\n</li>\n<li>\n<p><strong>网络体系结构</strong>：计算机网络的各个层次及其协议的集合成为体系结构</p>\n</li>\n<li>\n<p>ISO OSI参考模型</p>\n<ul>\n<li>计算机网络从逻辑功能上可分为两个子网：<strong>资源子网和通信子网</strong></li>\n<li><strong>由下到上、由低到高为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</strong></li>\n<li>物理层（中继器）：规定了机械、电气、功能和规程4个特性，单位是比特（bit）</li>\n<li>数据链路层（网桥）：相邻结点的数据传输、帧同步、差错控制、流量控制、链路管理，单位是帧（frame）。提供<strong>可靠通信</strong></li>\n<li>网络层（路由器）：任意节点的数据传输、路由选择、阻塞控制国际互联，单位是分组或包</li>\n<li><strong>物理层、数据链路层和网络层</strong>三层组成<strong>通信子网</strong></li>\n<li>传输层：<strong>端到端</strong>通信，流量控制、差错控制，单位是报文（message）</li>\n<li>会话层：两个计算机上的进程间建立连接。提供同步点机制</li>\n<li>表示层：解决用户信息的语法问题</li>\n<li>应用层：处理用户的数据和信息</li>\n</ul>\n</li>\n<li>\n<p>Internet体系结构采用TCP/IP参考模型</p>\n</li>\n<li>\n<p>TCP/IP体系结构：物理层、数据链路层、网络层、传输层和应用层</p>\n<ul>\n<li>\n<p>物理层和数据链路层：这两层有时又称为网络接口层。数据链路层在TCP/IP协议中被认为是不可靠的。<strong>保证可靠地通讯是传输层的任务</strong></p>\n</li>\n<li>\n<p>网络层：寻址、数据打包和路由选择，IP协议是一个<strong>无连接、不可靠</strong>的协议。包括地址解析协议ARP、反向地址解析协议RARP、Internet协议IP、Internet控制消息协议ICMP和Internet组管理协议IGMP</p>\n</li>\n<li>\n<p>传输层</p>\n<ul>\n<li>TCP传输控制协议：可靠有链接</li>\n<li>UDP用户数据报协议：不可靠无连接</li>\n</ul>\n</li>\n<li>\n<p>应用层：FTP交互式文件传输、SMTP邮件服务器间邮件传输、POP从邮件服务器上取回邮件、HTTP传输组成Web页面的文件、DNS解析域名成IP地址、SNMP简单网络管理协议</p>\n</li>\n</ul>\n</li>\n<li>\n<p>物理层为第1层，应用层为第7层。<strong>下层为上面各层提供服务</strong>，相邻层传递的信息为服务数据单元SDU，对等层之间交换信息为协议数据单元PDU。<strong>N层的PDU由N层的SDU加上该层的PCI（协议控制信息）构成</strong></p>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第一章-计算机网络概述\"><a class=\"markdownIt-Anchor\" href=\"#第一章-计算机网络概述\"></a> 第一章　计算机网络概述</h2>\n<ol>\n<li>\n<p>不同程序同时在一台计算机内使用网络，可使用<strong>服务点地址</strong>来区别。</p>\n</li>\n<li>\n<p>网络拓扑结构</p>\n<ul>\n<li>网状</li>\n<li>星状：中央控制器是整个网络性能的瓶颈</li>\n<li>树状</li>\n<li>总线型</li>\n<li>环形</li>\n</ul>\n</li>\n<li>\n<p>计算机网络的分类</p>\n<ul>\n<li>按作用范围分类：局域网（一般为私有的）、城域网和广域网</li>\n<li>按通讯介质分类：有线网（同轴电缆、双绞线和光纤）和无线网</li>\n<li>按通信传播方式分类：点对点传播网（星状、树状、环状和网状）和广播传播网（总线型网络和无线）</li>\n<li>按通信速率分类：低速网、中速网和高速网</li>\n<li>按使用范围分类：公用网和专用网</li>\n<li>按网络控制方式分类：集中式网络和分布式网络（无处理中心，每个结点地位平等）</li>\n<li>按网络环境分类：部门网、企业网和校园网</li>\n</ul>\n</li>\n<li>\n<p><strong>网络体系结构</strong>：计算机网络的各个层次及其协议的集合成为体系结构</p>\n</li>\n<li>\n<p>ISO OSI参考模型</p>\n<ul>\n<li>计算机网络从逻辑功能上可分为两个子网：<strong>资源子网和通信子网</strong></li>\n<li><strong>由下到上、由低到高为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</strong></li>\n<li>物理层（中继器）：规定了机械、电气、功能和规程4个特性，单位是比特（bit）</li>\n<li>数据链路层（网桥）：相邻结点的数据传输、帧同步、差错控制、流量控制、链路管理，单位是帧（frame）。提供<strong>可靠通信</strong></li>\n<li>网络层（路由器）：任意节点的数据传输、路由选择、阻塞控制国际互联，单位是分组或包</li>\n<li><strong>物理层、数据链路层和网络层</strong>三层组成<strong>通信子网</strong></li>\n<li>传输层：<strong>端到端</strong>通信，流量控制、差错控制，单位是报文（message）</li>\n<li>会话层：两个计算机上的进程间建立连接。提供同步点机制</li>\n<li>表示层：解决用户信息的语法问题</li>\n<li>应用层：处理用户的数据和信息</li>\n</ul>\n</li>\n<li>\n<p>Internet体系结构采用TCP/IP参考模型</p>\n</li>\n<li>\n<p>TCP/IP体系结构：物理层、数据链路层、网络层、传输层和应用层</p>\n<ul>\n<li>\n<p>物理层和数据链路层：这两层有时又称为网络接口层。数据链路层在TCP/IP协议中被认为是不可靠的。<strong>保证可靠地通讯是传输层的任务</strong></p>\n</li>\n<li>\n<p>网络层：寻址、数据打包和路由选择，IP协议是一个<strong>无连接、不可靠</strong>的协议。包括地址解析协议ARP、反向地址解析协议RARP、Internet协议IP、Internet控制消息协议ICMP和Internet组管理协议IGMP</p>\n</li>\n<li>\n<p>传输层</p>\n<ul>\n<li>TCP传输控制协议：可靠有链接</li>\n<li>UDP用户数据报协议：不可靠无连接</li>\n</ul>\n</li>\n<li>\n<p>应用层：FTP交互式文件传输、SMTP邮件服务器间邮件传输、POP从邮件服务器上取回邮件、HTTP传输组成Web页面的文件、DNS解析域名成IP地址、SNMP简单网络管理协议</p>\n</li>\n</ul>\n</li>\n<li>\n<p>物理层为第1层，应用层为第7层。<strong>下层为上面各层提供服务</strong>，相邻层传递的信息为服务数据单元SDU，对等层之间交换信息为协议数据单元PDU。<strong>N层的PDU由N层的SDU加上该层的PCI（协议控制信息）构成</strong></p>\n</li>\n</ol>\n"},{"title":"计网第七章-局域网和广域网技术","top":false,"cover":false,"toc":false,"mathjax":true,"abbrlink":"93d0","date":"2020-08-12T13:18:52.000Z","password":null,"summary":"第七章 局域网和广域网技术","_content":"## 第七章 局域网和广域网技术\n\n1. IEEE802.2：它是LLC协议标准，分为两个功能子集，**数据链路控制（LLC）子层**和**媒体访问控制（MAC）子层**\n\n2. 逻辑链路控制（LLC）子层是IEEE802数据链路层的上子层，它对于所有的LAN协议来说都是相同的\n\n3. MAC子层解决共享介质的竞争使用问题。它包含了将数据从一个地方传送到另一个地方所必须的同步、标记、流量和差错控制的规范，同时也包括下一个站点的物理地址。不同的局域网具有不同的MAC协议\n\n4. IEEE802各个标准和OSI模型的层次对应关系\n\n![对应关系](img.png)\n\n5. 逻辑链路控制（LLC）子层\n\n![对应关系](img2.png)\n   - LLC-PDU与HDLC类似，包含四个域：目的服务访问点（DSAP）、源服务访问点（SSAP）、控制域和信息域\n   - DASP和SSAP是LLC所使用的地址，SAP叫服务访问点。用来标明接收和发送数据的计算机上的协议栈\n\n6. LLC地址与MAC地址\n   - 在MAC帧的帧首中，有目的站地址和源站地址，它们是6字节长。MAC帧中的地址是站点的物理地址\n   - 在LLC帧的帧首中，用DSAP和SSAP，该地址是逻辑地址，是数据链路层的不同服务访问点\n\n7. 以太网\n   - IEEE 讲基带划分为5个不同的标准：10Base5、10base-T和100base-T等\n   - 开头数字指明了数据传输速率：最后的数字或字母（5,2，T（双绞线））指明了最大电缆长度或电缆类别；base指明的是基带传输\n   - IEEE只定义了一个宽带类标准：10Broad36，用于小区网络连接\n   - IEEE 802.3定义了两类标准：基带和宽带\n   - 基带类使用数字信号传输数据，用以太网使用曼彻斯特编码\n   - 宽带类使用模拟信号传输数据\n\n8. 以太网访问模式\n\n   - 在LAN中，多个用户在没有任何控制的情况下同时访问一条线路时，会存在由于不同信号叠加而相互破坏的情况。这就是**冲突**。为了使冲突发生的可能性最小，需要有一种机制来协调通信\n\n   - 以太网的媒体访问控制机制称为**带有冲突检测**的载波帧听多路访问（**CSMA/CD**）\n   - **多路访问（MA）**：不提供通信管制（**不听就说**）\n   - **载波监听多路访问（CSMA）**：首先监听链路上是否已经存在通信。由于存在传输延迟，还是会出现冲突**（先听后说）**\n   - **带有冲突检测的载波监听多路访问（CSMA/CD）**：发送是同CSMA一样，在传输的时候继续监听链路是否发生冲突（**边听边说**）\n     - 如果链路是空闲的，则可以发送并同时检测冲突\n     - 如果链路的忙的，则继续监听，直到检测到链路空闲\n     - 如果在发送过程中检测到冲突，则停止当前帧的发送，发阻塞信号，等待一段选定的时间（退避间隔）\n     - **先听后发，也听也发，冲突停发，随机重发**\n\n9. CSMA可分为三种\n   - 非坚持CSMA：如果链路是空闲的，则可以发送。如果链路是忙的，则等待一段时间。等待时间的长短在一个时间范围内随机选择\n   - 坚持CSMA（1-坚持）：如果链路是空闲的，则可以发送。如果链路是忙的，则继续帧听，直到检测到链路空闲，立即发送\n   - P-坚持CSMA：如果链路是空闲的，则以P的概率发送，而以（1-P）的概率延迟一个单位时间。如果链路是忙的，继续监听直至链路空闲。（例如，当有N个站点时，试图传输的站点的期望值为NP，为避免冲突应使**NP<1**）\n\n10. 退避算法（二进制指数退避）\n    - 对每一个帧，当第一次发生冲突时，设置参数`L=2`；\n    - 退避间隔取1到L个时间片中的一个随机数。一个时间片等于链路上最大传输延迟的两倍\n    - 当帧重复发生一次冲突时，则将参数L加倍。L的最大值为1024.即当L增加到1024时，L不再增加\n    - 帧的最大重传次数为16，超过这个次数，则该帧不再重传，并报告出错\n\n11. 最短帧长公式：$L_{min} =2×S÷V×R$ \n    - $L_{min}$：最短数据帧长（$bit$）\n    - $S$：任意两站点间的最大距离（$m$）\n    - $R$：数据传输速率（$Mbps$）\n    - $V$：电子传播速度（$200m/us$）\n\n12. 以太网$MAC$帧格式\n\n    | 前导码 |  SFD  | 目标地址 | 源地址 | LLC-PDU长度/类型 |   LLC-PDU   |  CRC  |\n    | :----: | :---: | :------: | :----: | :--------------: | :---------: | :---: |\n    | 7字节  | 1字节 |  6字节   | 6字节  |      2字节       | 46-1500字节 | 4字节 |\n\n    - 前导码：包含7个字节，在这个域中，1和0交替出现，警告系统接收即将到来的数据帧，同时使系统能够调整同步输入时钟\n    - 帧起始分界符（SFD）：帧起始分界符标记了**帧的开始**。它只有一个字节，模式是`10101011`，SFD通知接收方后面所有内容都是数据\n    - 目的地址（DA）：DA域为6个字节，标记了数据帧下一个结点的物理地址\n    - 源地址（SA）：SA域也分配了6个字节。它包含了最后一个转发此帧的设备的物理地址。也是上个结点的物理地址\n    - LLC-PDU的长度/类型：该字节指出了LLC-PDU的字节数，即LLC-PDU域中的有效字节数\n    - LLC-PDU：以太网MAC帧讲802.2的整个帧作为透明数据包含了进来。该域的长度可以从46到1500字节不等\n    - CRC：MAC帧的最后一个域是差错检测，占32位，用CRC\n\n13. 以太网种类\n    - 10base5粗缆以太网（总线）\n    - 10base2细缆以太网（总线）\n    - 10base-T双绞线以太网（星型）\n    - 100base-T快速以太网（星型）","source":"_posts/计网第七章-局域网和广域网技术.md","raw":"---\ntitle: 计网第七章-局域网和广域网技术\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 计网\n  - 总结\n  - 考研\ncategories:\n  - 计网\nabbrlink: 93d0\ndate: 2020-08-12 21:18:52\npassword:\nsummary: 第七章 局域网和广域网技术\n---\n## 第七章 局域网和广域网技术\n\n1. IEEE802.2：它是LLC协议标准，分为两个功能子集，**数据链路控制（LLC）子层**和**媒体访问控制（MAC）子层**\n\n2. 逻辑链路控制（LLC）子层是IEEE802数据链路层的上子层，它对于所有的LAN协议来说都是相同的\n\n3. MAC子层解决共享介质的竞争使用问题。它包含了将数据从一个地方传送到另一个地方所必须的同步、标记、流量和差错控制的规范，同时也包括下一个站点的物理地址。不同的局域网具有不同的MAC协议\n\n4. IEEE802各个标准和OSI模型的层次对应关系\n\n![对应关系](img.png)\n\n5. 逻辑链路控制（LLC）子层\n\n![对应关系](img2.png)\n   - LLC-PDU与HDLC类似，包含四个域：目的服务访问点（DSAP）、源服务访问点（SSAP）、控制域和信息域\n   - DASP和SSAP是LLC所使用的地址，SAP叫服务访问点。用来标明接收和发送数据的计算机上的协议栈\n\n6. LLC地址与MAC地址\n   - 在MAC帧的帧首中，有目的站地址和源站地址，它们是6字节长。MAC帧中的地址是站点的物理地址\n   - 在LLC帧的帧首中，用DSAP和SSAP，该地址是逻辑地址，是数据链路层的不同服务访问点\n\n7. 以太网\n   - IEEE 讲基带划分为5个不同的标准：10Base5、10base-T和100base-T等\n   - 开头数字指明了数据传输速率：最后的数字或字母（5,2，T（双绞线））指明了最大电缆长度或电缆类别；base指明的是基带传输\n   - IEEE只定义了一个宽带类标准：10Broad36，用于小区网络连接\n   - IEEE 802.3定义了两类标准：基带和宽带\n   - 基带类使用数字信号传输数据，用以太网使用曼彻斯特编码\n   - 宽带类使用模拟信号传输数据\n\n8. 以太网访问模式\n\n   - 在LAN中，多个用户在没有任何控制的情况下同时访问一条线路时，会存在由于不同信号叠加而相互破坏的情况。这就是**冲突**。为了使冲突发生的可能性最小，需要有一种机制来协调通信\n\n   - 以太网的媒体访问控制机制称为**带有冲突检测**的载波帧听多路访问（**CSMA/CD**）\n   - **多路访问（MA）**：不提供通信管制（**不听就说**）\n   - **载波监听多路访问（CSMA）**：首先监听链路上是否已经存在通信。由于存在传输延迟，还是会出现冲突**（先听后说）**\n   - **带有冲突检测的载波监听多路访问（CSMA/CD）**：发送是同CSMA一样，在传输的时候继续监听链路是否发生冲突（**边听边说**）\n     - 如果链路是空闲的，则可以发送并同时检测冲突\n     - 如果链路的忙的，则继续监听，直到检测到链路空闲\n     - 如果在发送过程中检测到冲突，则停止当前帧的发送，发阻塞信号，等待一段选定的时间（退避间隔）\n     - **先听后发，也听也发，冲突停发，随机重发**\n\n9. CSMA可分为三种\n   - 非坚持CSMA：如果链路是空闲的，则可以发送。如果链路是忙的，则等待一段时间。等待时间的长短在一个时间范围内随机选择\n   - 坚持CSMA（1-坚持）：如果链路是空闲的，则可以发送。如果链路是忙的，则继续帧听，直到检测到链路空闲，立即发送\n   - P-坚持CSMA：如果链路是空闲的，则以P的概率发送，而以（1-P）的概率延迟一个单位时间。如果链路是忙的，继续监听直至链路空闲。（例如，当有N个站点时，试图传输的站点的期望值为NP，为避免冲突应使**NP<1**）\n\n10. 退避算法（二进制指数退避）\n    - 对每一个帧，当第一次发生冲突时，设置参数`L=2`；\n    - 退避间隔取1到L个时间片中的一个随机数。一个时间片等于链路上最大传输延迟的两倍\n    - 当帧重复发生一次冲突时，则将参数L加倍。L的最大值为1024.即当L增加到1024时，L不再增加\n    - 帧的最大重传次数为16，超过这个次数，则该帧不再重传，并报告出错\n\n11. 最短帧长公式：$L_{min} =2×S÷V×R$ \n    - $L_{min}$：最短数据帧长（$bit$）\n    - $S$：任意两站点间的最大距离（$m$）\n    - $R$：数据传输速率（$Mbps$）\n    - $V$：电子传播速度（$200m/us$）\n\n12. 以太网$MAC$帧格式\n\n    | 前导码 |  SFD  | 目标地址 | 源地址 | LLC-PDU长度/类型 |   LLC-PDU   |  CRC  |\n    | :----: | :---: | :------: | :----: | :--------------: | :---------: | :---: |\n    | 7字节  | 1字节 |  6字节   | 6字节  |      2字节       | 46-1500字节 | 4字节 |\n\n    - 前导码：包含7个字节，在这个域中，1和0交替出现，警告系统接收即将到来的数据帧，同时使系统能够调整同步输入时钟\n    - 帧起始分界符（SFD）：帧起始分界符标记了**帧的开始**。它只有一个字节，模式是`10101011`，SFD通知接收方后面所有内容都是数据\n    - 目的地址（DA）：DA域为6个字节，标记了数据帧下一个结点的物理地址\n    - 源地址（SA）：SA域也分配了6个字节。它包含了最后一个转发此帧的设备的物理地址。也是上个结点的物理地址\n    - LLC-PDU的长度/类型：该字节指出了LLC-PDU的字节数，即LLC-PDU域中的有效字节数\n    - LLC-PDU：以太网MAC帧讲802.2的整个帧作为透明数据包含了进来。该域的长度可以从46到1500字节不等\n    - CRC：MAC帧的最后一个域是差错检测，占32位，用CRC\n\n13. 以太网种类\n    - 10base5粗缆以太网（总线）\n    - 10base2细缆以太网（总线）\n    - 10base-T双绞线以太网（星型）\n    - 100base-T快速以太网（星型）","slug":"计网第七章-局域网和广域网技术","published":1,"updated":"2020-08-21T06:24:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdim0047zl9kgkl59zb0","content":"<h2 id=\"第七章-局域网和广域网技术\"><a class=\"markdownIt-Anchor\" href=\"#第七章-局域网和广域网技术\"></a> 第七章 局域网和广域网技术</h2>\n<ol>\n<li>\n<p>IEEE802.2：它是LLC协议标准，分为两个功能子集，<strong>数据链路控制（LLC）子层</strong>和<strong>媒体访问控制（MAC）子层</strong></p>\n</li>\n<li>\n<p>逻辑链路控制（LLC）子层是IEEE802数据链路层的上子层，它对于所有的LAN协议来说都是相同的</p>\n</li>\n<li>\n<p>MAC子层解决共享介质的竞争使用问题。它包含了将数据从一个地方传送到另一个地方所必须的同步、标记、流量和差错控制的规范，同时也包括下一个站点的物理地址。不同的局域网具有不同的MAC协议</p>\n</li>\n<li>\n<p>IEEE802各个标准和OSI模型的层次对应关系</p>\n</li>\n</ol>\n<p><img src=\"img.png\" alt=\"对应关系\"></p>\n<ol start=\"5\">\n<li>逻辑链路控制（LLC）子层</li>\n</ol>\n<p><img src=\"img2.png\" alt=\"对应关系\"></p>\n<ul>\n<li>LLC-PDU与HDLC类似，包含四个域：目的服务访问点（DSAP）、源服务访问点（SSAP）、控制域和信息域</li>\n<li>DASP和SSAP是LLC所使用的地址，SAP叫服务访问点。用来标明接收和发送数据的计算机上的协议栈</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>LLC地址与MAC地址</p>\n<ul>\n<li>在MAC帧的帧首中，有目的站地址和源站地址，它们是6字节长。MAC帧中的地址是站点的物理地址</li>\n<li>在LLC帧的帧首中，用DSAP和SSAP，该地址是逻辑地址，是数据链路层的不同服务访问点</li>\n</ul>\n</li>\n<li>\n<p>以太网</p>\n<ul>\n<li>IEEE 讲基带划分为5个不同的标准：10Base5、10base-T和100base-T等</li>\n<li>开头数字指明了数据传输速率：最后的数字或字母（5,2，T（双绞线））指明了最大电缆长度或电缆类别；base指明的是基带传输</li>\n<li>IEEE只定义了一个宽带类标准：10Broad36，用于小区网络连接</li>\n<li>IEEE 802.3定义了两类标准：基带和宽带</li>\n<li>基带类使用数字信号传输数据，用以太网使用曼彻斯特编码</li>\n<li>宽带类使用模拟信号传输数据</li>\n</ul>\n</li>\n<li>\n<p>以太网访问模式</p>\n<ul>\n<li>\n<p>在LAN中，多个用户在没有任何控制的情况下同时访问一条线路时，会存在由于不同信号叠加而相互破坏的情况。这就是<strong>冲突</strong>。为了使冲突发生的可能性最小，需要有一种机制来协调通信</p>\n</li>\n<li>\n<p>以太网的媒体访问控制机制称为<strong>带有冲突检测</strong>的载波帧听多路访问（<strong>CSMA/CD</strong>）</p>\n</li>\n<li>\n<p><strong>多路访问（MA）</strong>：不提供通信管制（<strong>不听就说</strong>）</p>\n</li>\n<li>\n<p><strong>载波监听多路访问（CSMA）</strong>：首先监听链路上是否已经存在通信。由于存在传输延迟，还是会出现冲突**（先听后说）**</p>\n</li>\n<li>\n<p><strong>带有冲突检测的载波监听多路访问（CSMA/CD）</strong>：发送是同CSMA一样，在传输的时候继续监听链路是否发生冲突（<strong>边听边说</strong>）</p>\n<ul>\n<li>如果链路是空闲的，则可以发送并同时检测冲突</li>\n<li>如果链路的忙的，则继续监听，直到检测到链路空闲</li>\n<li>如果在发送过程中检测到冲突，则停止当前帧的发送，发阻塞信号，等待一段选定的时间（退避间隔）</li>\n<li><strong>先听后发，也听也发，冲突停发，随机重发</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>CSMA可分为三种</p>\n<ul>\n<li>非坚持CSMA：如果链路是空闲的，则可以发送。如果链路是忙的，则等待一段时间。等待时间的长短在一个时间范围内随机选择</li>\n<li>坚持CSMA（1-坚持）：如果链路是空闲的，则可以发送。如果链路是忙的，则继续帧听，直到检测到链路空闲，立即发送</li>\n<li>P-坚持CSMA：如果链路是空闲的，则以P的概率发送，而以（1-P）的概率延迟一个单位时间。如果链路是忙的，继续监听直至链路空闲。（例如，当有N个站点时，试图传输的站点的期望值为NP，为避免冲突应使<strong>NP&lt;1</strong>）</li>\n</ul>\n</li>\n<li>\n<p>退避算法（二进制指数退避）</p>\n<ul>\n<li>对每一个帧，当第一次发生冲突时，设置参数<code>L=2</code>；</li>\n<li>退避间隔取1到L个时间片中的一个随机数。一个时间片等于链路上最大传输延迟的两倍</li>\n<li>当帧重复发生一次冲突时，则将参数L加倍。L的最大值为1024.即当L增加到1024时，L不再增加</li>\n<li>帧的最大重传次数为16，超过这个次数，则该帧不再重传，并报告出错</li>\n</ul>\n</li>\n<li>\n<p>最短帧长公式：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>2</mn><mo>×</mo><mi>S</mi><mo>÷</mo><mi>V</mi><mo>×</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">L_{min} =2×S÷V×R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">L_{min}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：最短数据帧长（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">bit</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span></span></span></span>）</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>：任意两站点间的最大距离（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>）</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>：数据传输速率（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Mbps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span>）</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span>：电子传播速度（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>200</mn><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>u</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">200m/us</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord mathdefault\">m</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">s</span></span></span></span>）</li>\n</ul>\n</li>\n<li>\n<p>以太网<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>A</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">MAC</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>帧格式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">前导码</th>\n<th style=\"text-align:center\">SFD</th>\n<th style=\"text-align:center\">目标地址</th>\n<th style=\"text-align:center\">源地址</th>\n<th style=\"text-align:center\">LLC-PDU长度/类型</th>\n<th style=\"text-align:center\">LLC-PDU</th>\n<th style=\"text-align:center\">CRC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7字节</td>\n<td style=\"text-align:center\">1字节</td>\n<td style=\"text-align:center\">6字节</td>\n<td style=\"text-align:center\">6字节</td>\n<td style=\"text-align:center\">2字节</td>\n<td style=\"text-align:center\">46-1500字节</td>\n<td style=\"text-align:center\">4字节</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>前导码：包含7个字节，在这个域中，1和0交替出现，警告系统接收即将到来的数据帧，同时使系统能够调整同步输入时钟</li>\n<li>帧起始分界符（SFD）：帧起始分界符标记了<strong>帧的开始</strong>。它只有一个字节，模式是<code>10101011</code>，SFD通知接收方后面所有内容都是数据</li>\n<li>目的地址（DA）：DA域为6个字节，标记了数据帧下一个结点的物理地址</li>\n<li>源地址（SA）：SA域也分配了6个字节。它包含了最后一个转发此帧的设备的物理地址。也是上个结点的物理地址</li>\n<li>LLC-PDU的长度/类型：该字节指出了LLC-PDU的字节数，即LLC-PDU域中的有效字节数</li>\n<li>LLC-PDU：以太网MAC帧讲802.2的整个帧作为透明数据包含了进来。该域的长度可以从46到1500字节不等</li>\n<li>CRC：MAC帧的最后一个域是差错检测，占32位，用CRC</li>\n</ul>\n</li>\n<li>\n<p>以太网种类</p>\n<ul>\n<li>10base5粗缆以太网（总线）</li>\n<li>10base2细缆以太网（总线）</li>\n<li>10base-T双绞线以太网（星型）</li>\n<li>100base-T快速以太网（星型）</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第七章-局域网和广域网技术\"><a class=\"markdownIt-Anchor\" href=\"#第七章-局域网和广域网技术\"></a> 第七章 局域网和广域网技术</h2>\n<ol>\n<li>\n<p>IEEE802.2：它是LLC协议标准，分为两个功能子集，<strong>数据链路控制（LLC）子层</strong>和<strong>媒体访问控制（MAC）子层</strong></p>\n</li>\n<li>\n<p>逻辑链路控制（LLC）子层是IEEE802数据链路层的上子层，它对于所有的LAN协议来说都是相同的</p>\n</li>\n<li>\n<p>MAC子层解决共享介质的竞争使用问题。它包含了将数据从一个地方传送到另一个地方所必须的同步、标记、流量和差错控制的规范，同时也包括下一个站点的物理地址。不同的局域网具有不同的MAC协议</p>\n</li>\n<li>\n<p>IEEE802各个标准和OSI模型的层次对应关系</p>\n</li>\n</ol>\n<p><img src=\"img.png\" alt=\"对应关系\" /></p>\n<ol start=\"5\">\n<li>逻辑链路控制（LLC）子层</li>\n</ol>\n<p><img src=\"img2.png\" alt=\"对应关系\" /></p>\n<ul>\n<li>LLC-PDU与HDLC类似，包含四个域：目的服务访问点（DSAP）、源服务访问点（SSAP）、控制域和信息域</li>\n<li>DASP和SSAP是LLC所使用的地址，SAP叫服务访问点。用来标明接收和发送数据的计算机上的协议栈</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>LLC地址与MAC地址</p>\n<ul>\n<li>在MAC帧的帧首中，有目的站地址和源站地址，它们是6字节长。MAC帧中的地址是站点的物理地址</li>\n<li>在LLC帧的帧首中，用DSAP和SSAP，该地址是逻辑地址，是数据链路层的不同服务访问点</li>\n</ul>\n</li>\n<li>\n<p>以太网</p>\n<ul>\n<li>IEEE 讲基带划分为5个不同的标准：10Base5、10base-T和100base-T等</li>\n<li>开头数字指明了数据传输速率：最后的数字或字母（5,2，T（双绞线））指明了最大电缆长度或电缆类别；base指明的是基带传输</li>\n<li>IEEE只定义了一个宽带类标准：10Broad36，用于小区网络连接</li>\n<li>IEEE 802.3定义了两类标准：基带和宽带</li>\n<li>基带类使用数字信号传输数据，用以太网使用曼彻斯特编码</li>\n<li>宽带类使用模拟信号传输数据</li>\n</ul>\n</li>\n<li>\n<p>以太网访问模式</p>\n<ul>\n<li>\n<p>在LAN中，多个用户在没有任何控制的情况下同时访问一条线路时，会存在由于不同信号叠加而相互破坏的情况。这就是<strong>冲突</strong>。为了使冲突发生的可能性最小，需要有一种机制来协调通信</p>\n</li>\n<li>\n<p>以太网的媒体访问控制机制称为<strong>带有冲突检测</strong>的载波帧听多路访问（<strong>CSMA/CD</strong>）</p>\n</li>\n<li>\n<p><strong>多路访问（MA）</strong>：不提供通信管制（<strong>不听就说</strong>）</p>\n</li>\n<li>\n<p><strong>载波监听多路访问（CSMA）</strong>：首先监听链路上是否已经存在通信。由于存在传输延迟，还是会出现冲突**（先听后说）**</p>\n</li>\n<li>\n<p><strong>带有冲突检测的载波监听多路访问（CSMA/CD）</strong>：发送是同CSMA一样，在传输的时候继续监听链路是否发生冲突（<strong>边听边说</strong>）</p>\n<ul>\n<li>如果链路是空闲的，则可以发送并同时检测冲突</li>\n<li>如果链路的忙的，则继续监听，直到检测到链路空闲</li>\n<li>如果在发送过程中检测到冲突，则停止当前帧的发送，发阻塞信号，等待一段选定的时间（退避间隔）</li>\n<li><strong>先听后发，也听也发，冲突停发，随机重发</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>CSMA可分为三种</p>\n<ul>\n<li>非坚持CSMA：如果链路是空闲的，则可以发送。如果链路是忙的，则等待一段时间。等待时间的长短在一个时间范围内随机选择</li>\n<li>坚持CSMA（1-坚持）：如果链路是空闲的，则可以发送。如果链路是忙的，则继续帧听，直到检测到链路空闲，立即发送</li>\n<li>P-坚持CSMA：如果链路是空闲的，则以P的概率发送，而以（1-P）的概率延迟一个单位时间。如果链路是忙的，继续监听直至链路空闲。（例如，当有N个站点时，试图传输的站点的期望值为NP，为避免冲突应使<strong>NP&lt;1</strong>）</li>\n</ul>\n</li>\n<li>\n<p>退避算法（二进制指数退避）</p>\n<ul>\n<li>对每一个帧，当第一次发生冲突时，设置参数<code>L=2</code>；</li>\n<li>退避间隔取1到L个时间片中的一个随机数。一个时间片等于链路上最大传输延迟的两倍</li>\n<li>当帧重复发生一次冲突时，则将参数L加倍。L的最大值为1024.即当L增加到1024时，L不再增加</li>\n<li>帧的最大重传次数为16，超过这个次数，则该帧不再重传，并报告出错</li>\n</ul>\n</li>\n<li>\n<p>最短帧长公式：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>2</mn><mo>×</mo><mi>S</mi><mo>÷</mo><mi>V</mi><mo>×</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">L_{min} =2×S÷V×R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">L_{min}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：最短数据帧长（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">bit</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span></span></span></span>）</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>：任意两站点间的最大距离（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>）</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>：数据传输速率（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Mbps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span>）</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span>：电子传播速度（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>200</mn><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>u</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">200m/us</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord mathdefault\">m</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">s</span></span></span></span>）</li>\n</ul>\n</li>\n<li>\n<p>以太网<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>A</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">MAC</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>帧格式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">前导码</th>\n<th style=\"text-align:center\">SFD</th>\n<th style=\"text-align:center\">目标地址</th>\n<th style=\"text-align:center\">源地址</th>\n<th style=\"text-align:center\">LLC-PDU长度/类型</th>\n<th style=\"text-align:center\">LLC-PDU</th>\n<th style=\"text-align:center\">CRC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">7字节</td>\n<td style=\"text-align:center\">1字节</td>\n<td style=\"text-align:center\">6字节</td>\n<td style=\"text-align:center\">6字节</td>\n<td style=\"text-align:center\">2字节</td>\n<td style=\"text-align:center\">46-1500字节</td>\n<td style=\"text-align:center\">4字节</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>前导码：包含7个字节，在这个域中，1和0交替出现，警告系统接收即将到来的数据帧，同时使系统能够调整同步输入时钟</li>\n<li>帧起始分界符（SFD）：帧起始分界符标记了<strong>帧的开始</strong>。它只有一个字节，模式是<code>10101011</code>，SFD通知接收方后面所有内容都是数据</li>\n<li>目的地址（DA）：DA域为6个字节，标记了数据帧下一个结点的物理地址</li>\n<li>源地址（SA）：SA域也分配了6个字节。它包含了最后一个转发此帧的设备的物理地址。也是上个结点的物理地址</li>\n<li>LLC-PDU的长度/类型：该字节指出了LLC-PDU的字节数，即LLC-PDU域中的有效字节数</li>\n<li>LLC-PDU：以太网MAC帧讲802.2的整个帧作为透明数据包含了进来。该域的长度可以从46到1500字节不等</li>\n<li>CRC：MAC帧的最后一个域是差错检测，占32位，用CRC</li>\n</ul>\n</li>\n<li>\n<p>以太网种类</p>\n<ul>\n<li>10base5粗缆以太网（总线）</li>\n<li>10base2细缆以太网（总线）</li>\n<li>10base-T双绞线以太网（星型）</li>\n<li>100base-T快速以太网（星型）</li>\n</ul>\n</li>\n</ol>\n"},{"title":"计网第五章-网络层","top":false,"cover":false,"toc":false,"mathjax":true,"abbrlink":"8cfd","date":"2020-08-10T10:22:12.000Z","password":null,"summary":"第五章 网络层","_content":"## 第五章 网络层\n\n1. 网络层的主要功能：交换和路由\n2. 距离向量路由算法：在距离向量路由中，每个路由器周期性的将自己关于整个网络的信息发送给他的邻居\n   - 每个路由都保存关于整个网络的信息\n   - 仅仅和邻居交换网络信息\n   - 信息的交换是通过有规律的时间间隔来进行的\n\n3. 链路状态路由算法：链路状态路由中，每个路由器和互联网络中的所有其他路由器共享关于其邻居的信息\n   - 共享关于邻居的信息\n   - 共享的信息发送给所有的路由器\n   - 信息的共享在有规律的时间间隔内进行\n\n4. 链路状态数据库\n\n   - $Dijkstra$**算法**：从路由器到网络的链路的费用才有效，而从网络到路由器的链路的费用总是0\n\n     - 每个路由器在使用$Dijkstra$算法时，根据下面四个步骤来形成自己的最短路径树（最小支撑树）\n\n       ①选择自己作为根的结点，并将根标记为永久性结点。算法接着从根出发连接其所有邻居结点。这种结点是临时性的\n\n       ②算法比较所有的临时连接，找出费用最小的路径，该路径上的所有弧和结点被标记为最短路径树上的永久部分\n\n       ③算法考察链路状态数据库，找出从这个选定的最短路径向外延伸所能连接的所有非永久性结点，将这些结点临时性地加到最短路径树上\n\n       ④如果所有的结点已经成为最短路径树上的永久部分，则算法结束，去掉非永久性的弧。否则，转步骤②继续执行。\n\n   - $Dijkstra$算法总结\n   \n     ①初始化：设$N$表示网络结点集合，先令$N={1}$，对所有不在$N$中的结点写出：\n     \n     $$\n     S(V)= \\begin{cases} L(1,V) & \\text {;若结点V与结点1相邻}  \\\\ \\infty & \\text {;若结点V与结点1不相邻} \\end{cases}\n     $$\n     \n     ②找出一个不在$N$中的结点W，使$S(W)$值为最小，把$W$加入$N$中，然后对所有不在$N$中的结点按下式更新：\n     $$\n     S(V) \\leftarrow min[S(V),S(W)+L(W,V)]\n     $$\n     \n     ③重复步骤②，直到所有的网络结点都在$N$中为止","source":"_posts/计网第五章-网络层.md","raw":"---\ntitle: 计网第五章-网络层\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 计网\n  - 总结\n  - 考研\ncategories:\n  - 计网\nabbrlink: 8cfd\ndate: 2020-08-10 18:22:12\npassword:\nsummary: 第五章 网络层\n---\n## 第五章 网络层\n\n1. 网络层的主要功能：交换和路由\n2. 距离向量路由算法：在距离向量路由中，每个路由器周期性的将自己关于整个网络的信息发送给他的邻居\n   - 每个路由都保存关于整个网络的信息\n   - 仅仅和邻居交换网络信息\n   - 信息的交换是通过有规律的时间间隔来进行的\n\n3. 链路状态路由算法：链路状态路由中，每个路由器和互联网络中的所有其他路由器共享关于其邻居的信息\n   - 共享关于邻居的信息\n   - 共享的信息发送给所有的路由器\n   - 信息的共享在有规律的时间间隔内进行\n\n4. 链路状态数据库\n\n   - $Dijkstra$**算法**：从路由器到网络的链路的费用才有效，而从网络到路由器的链路的费用总是0\n\n     - 每个路由器在使用$Dijkstra$算法时，根据下面四个步骤来形成自己的最短路径树（最小支撑树）\n\n       ①选择自己作为根的结点，并将根标记为永久性结点。算法接着从根出发连接其所有邻居结点。这种结点是临时性的\n\n       ②算法比较所有的临时连接，找出费用最小的路径，该路径上的所有弧和结点被标记为最短路径树上的永久部分\n\n       ③算法考察链路状态数据库，找出从这个选定的最短路径向外延伸所能连接的所有非永久性结点，将这些结点临时性地加到最短路径树上\n\n       ④如果所有的结点已经成为最短路径树上的永久部分，则算法结束，去掉非永久性的弧。否则，转步骤②继续执行。\n\n   - $Dijkstra$算法总结\n   \n     ①初始化：设$N$表示网络结点集合，先令$N={1}$，对所有不在$N$中的结点写出：\n     \n     $$\n     S(V)= \\begin{cases} L(1,V) & \\text {;若结点V与结点1相邻}  \\\\ \\infty & \\text {;若结点V与结点1不相邻} \\end{cases}\n     $$\n     \n     ②找出一个不在$N$中的结点W，使$S(W)$值为最小，把$W$加入$N$中，然后对所有不在$N$中的结点按下式更新：\n     $$\n     S(V) \\leftarrow min[S(V),S(W)+L(W,V)]\n     $$\n     \n     ③重复步骤②，直到所有的网络结点都在$N$中为止","slug":"计网第五章-网络层","published":1,"updated":"2020-08-10T12:19:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdin004bzl9khzna1qgm","content":"<h2 id=\"第五章-网络层\"><a class=\"markdownIt-Anchor\" href=\"#第五章-网络层\"></a> 第五章 网络层</h2>\n<ol>\n<li>\n<p>网络层的主要功能：交换和路由</p>\n</li>\n<li>\n<p>距离向量路由算法：在距离向量路由中，每个路由器周期性的将自己关于整个网络的信息发送给他的邻居</p>\n<ul>\n<li>每个路由都保存关于整个网络的信息</li>\n<li>仅仅和邻居交换网络信息</li>\n<li>信息的交换是通过有规律的时间间隔来进行的</li>\n</ul>\n</li>\n<li>\n<p>链路状态路由算法：链路状态路由中，每个路由器和互联网络中的所有其他路由器共享关于其邻居的信息</p>\n<ul>\n<li>共享关于邻居的信息</li>\n<li>共享的信息发送给所有的路由器</li>\n<li>信息的共享在有规律的时间间隔内进行</li>\n</ul>\n</li>\n<li>\n<p>链路状态数据库</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span></span></span></span><strong>算法</strong>：从路由器到网络的链路的费用才有效，而从网络到路由器的链路的费用总是0</p>\n<ul>\n<li>\n<p>每个路由器在使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span></span></span></span>算法时，根据下面四个步骤来形成自己的最短路径树（最小支撑树）</p>\n<p>①选择自己作为根的结点，并将根标记为永久性结点。算法接着从根出发连接其所有邻居结点。这种结点是临时性的</p>\n<p>②算法比较所有的临时连接，找出费用最小的路径，该路径上的所有弧和结点被标记为最短路径树上的永久部分</p>\n<p>③算法考察链路状态数据库，找出从这个选定的最短路径向外延伸所能连接的所有非永久性结点，将这些结点临时性地加到最短路径树上</p>\n<p>④如果所有的结点已经成为最短路径树上的永久部分，则算法结束，去掉非永久性的弧。否则，转步骤②继续执行。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span></span></span></span>算法总结</p>\n<p>①初始化：设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>表示网络结点集合，先令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N={1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span></span>，对所有不在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中的结点写出：</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>;若结点V与结点1相邻</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>;若结点V与结点1不相邻</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">S(V)= \\begin{cases} L(1,V) &amp; \\text {;若结点V与结点1相邻}  \\\\ \\infty &amp; \\text {;若结点V与结点1不相邻} \\end{cases}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">;</span><span class=\"mord cjk_fallback\">若结点</span><span class=\"mord\">V</span><span class=\"mord cjk_fallback\">与结点</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">相邻</span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">;</span><span class=\"mord cjk_fallback\">若结点</span><span class=\"mord\">V</span><span class=\"mord cjk_fallback\">与结点</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">不相邻</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>②找出一个不在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中的结点W，使<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(W)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span></span></span></span>值为最小，把<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span>加入<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中，然后对所有不在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中的结点按下式更新：</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>←</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">S(V) \\leftarrow min[S(V),S(W)+L(W,V)]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mclose\">]</span></span></span></span></span></p>\n<p>③重复步骤②，直到所有的网络结点都在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中为止</p>\n</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第五章-网络层\"><a class=\"markdownIt-Anchor\" href=\"#第五章-网络层\"></a> 第五章 网络层</h2>\n<ol>\n<li>\n<p>网络层的主要功能：交换和路由</p>\n</li>\n<li>\n<p>距离向量路由算法：在距离向量路由中，每个路由器周期性的将自己关于整个网络的信息发送给他的邻居</p>\n<ul>\n<li>每个路由都保存关于整个网络的信息</li>\n<li>仅仅和邻居交换网络信息</li>\n<li>信息的交换是通过有规律的时间间隔来进行的</li>\n</ul>\n</li>\n<li>\n<p>链路状态路由算法：链路状态路由中，每个路由器和互联网络中的所有其他路由器共享关于其邻居的信息</p>\n<ul>\n<li>共享关于邻居的信息</li>\n<li>共享的信息发送给所有的路由器</li>\n<li>信息的共享在有规律的时间间隔内进行</li>\n</ul>\n</li>\n<li>\n<p>链路状态数据库</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span></span></span></span><strong>算法</strong>：从路由器到网络的链路的费用才有效，而从网络到路由器的链路的费用总是0</p>\n<ul>\n<li>\n<p>每个路由器在使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span></span></span></span>算法时，根据下面四个步骤来形成自己的最短路径树（最小支撑树）</p>\n<p>①选择自己作为根的结点，并将根标记为永久性结点。算法接着从根出发连接其所有邻居结点。这种结点是临时性的</p>\n<p>②算法比较所有的临时连接，找出费用最小的路径，该路径上的所有弧和结点被标记为最短路径树上的永久部分</p>\n<p>③算法考察链路状态数据库，找出从这个选定的最短路径向外延伸所能连接的所有非永久性结点，将这些结点临时性地加到最短路径树上</p>\n<p>④如果所有的结点已经成为最短路径树上的永久部分，则算法结束，去掉非永久性的弧。否则，转步骤②继续执行。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span></span></span></span>算法总结</p>\n<p>①初始化：设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>表示网络结点集合，先令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N={1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span></span>，对所有不在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中的结点写出：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>;若结点V与结点1相邻</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>;若结点V与结点1不相邻</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">S(V)= \\begin{cases} L(1,V) &amp; \\text {;若结点V与结点1相邻}  \\\\ \\infty &amp; \\text {;若结点V与结点1不相邻} \\end{cases}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">;</span><span class=\"mord cjk_fallback\">若结点</span><span class=\"mord\">V</span><span class=\"mord cjk_fallback\">与结点</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">相邻</span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">;</span><span class=\"mord cjk_fallback\">若结点</span><span class=\"mord\">V</span><span class=\"mord cjk_fallback\">与结点</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">不相邻</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>②找出一个不在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中的结点W，使<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(W)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span></span></span></span>值为最小，把<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span>加入<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中，然后对所有不在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中的结点按下式更新：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>←</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">S(V) \\leftarrow min[S(V),S(W)+L(W,V)]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mclose\">]</span></span></span></span></span></p>\n<p>③重复步骤②，直到所有的网络结点都在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>中为止</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"计网第八章-TCP/IP协议","top":false,"cover":false,"toc":false,"mathjax":true,"abbrlink":"156a","date":"2020-08-23T02:49:07.000Z","password":null,"summary":"第八章 TCP/IP协议","_content":"## 第八章 TCP/IP协议\n\n1. TCP/IP体系结构\n   - TCP/IP协议的网络层的主要功能是寻址、数据打包和路由选择\n   - 主要协议有：地址解析协议（ARP）、反向地址解析协议（RARP）、网际协议（IP）、Internet控制消息协议（ICMP）和Internet组管理协议（IGMP）\n   - ARP负责将IP地址解析为结点的物理地址，以便于物理设备（如网卡）按该地址接收数据\n   - RARP负责将物理地址解析成IP地址，这个协议主要是针对无盘工作站获得IP地址而设计的\n   - ICMP用于传送差错报文及其他控制信息\n2. 网际协议IP\n   - IP协议是TCP/IP协议族中的核心协议。所有的TCP、UDP、ICMP、IGMP数据都是以IP数据报格式传输的\n   - IP协议为高层提供不可靠、无连接的数据报通信。尽最大努力交付\n\n3. IP地址：网络中的每个独立主机的每个接口必须有一个唯一的Internet地址，也称为**IP地址**。IP地址长度为**32位**。表示地址空间是$2^{32}$\n4. IP地址的表示方法\n   - 二进制表示方法\n   - 点分十进制表示方法：为了使32位地址更加简介和更容易阅读，因特网的地址通常写成用小数点把各字节分隔开的形式。每个字节用一个十进制数表示，这个数小于256\n   - 十六进制表示方法\n   - 二进制表示方法：在二进制表示方法中，用一个32位的比特序列表示IP地址，为了使这个地址有更好的可读性，通常在每个字节之间加上一个或多个空格做分割。例如：`10000001 00001110 00000110 00011111`，但不便于记忆\n\n5. 分类IP地址：IP地址按照层次结构划分成五类：A、B、C、D、E类。每一类地址都由两个固定长度的字段组成，其中第一个字段是网络号net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号host-id，它标志一个主机地址。\n\n   ![ip地址分类](ip地址分类.png)\n\n6. 各类IP地址的范围\n\n   ![IP地址范围](IP地址范围.png)\n\n   **助记：**`0～A(128)～B(28+64)～C(128+64+32)～D(128+64+32+16)~E(128+64+32+16+8)`\n\n7. IPv4报文格式\n\n   ![IP报文格式](IP报文格式.png)\n\n   - 总长度：占16位，指首部和数据之和的长度，单位为字节。因此数据报的最大长度为65535字节。总长度必须不超过最大传送单元MTU\n   - 标识（identification）：占16位，它是一个计数器，用来产生数据报的标识\n   - 标志（flag）：占3位，目前只有前两位有意义。\n     - 标识字段的**MF（More Fragment）**。**MF=1表示后面\"还有分片\"**，MF=0表示最后一个分片\n     - 标识字段的**DF（Don't Fragment）**。**DF=0时表示允许分片**\n\n   - 片偏移13位（偏移量）：较长的分组在分片后某片在原分组中的相对位置。**片偏移以8个字节为偏移单位**\n     - 例：以太网的MTU（最大传输单位）为1400字节，路由器将把到达的一个4000字节数据的报文为3段，第一段有1400字节数据，分段偏移为0；第二段有1400字节数据，分段偏移位1400÷8=175；第三段有1200字节数据，分段偏移位350\n\n8. **子网掩码（待补充）**：IP地址 + 子网掩码 = 网络地址\n\n9. 特殊的IP地址\n\n   - 网络地址（NET-ID）：主机标识部分为全\"0\"的IP地址不分配给任何主机，而是作为网络本身的标识\n     - 例：主机 202.198.151.136所在网段的网络地址为：202.198.151.0（主机位变为0）；主机130.100.100.136（B类地址）所在网段的网络地址为：130.100.0.0\n\n   - 直接广播地址：主机标识全为\"1\"的IP地址不分配给任何主机，用做广播地址\n     - 例：主机 202.198.151.136所在网段的直接广播地址为：202.198.151.255（主机位变为1）；主机130.100.100.136（B类地址）所在网段的直接广播地址为：130.100.255.25\n   - 有限广播地址：32位为全为1的IP地址称为有限广播地址\n     - 例：有限广播地址为：255.255.255.255\n   - 主机本身地址：32位为全0的IP地址称为主机本身地址\n     - 例：主机本身地址：0.0.0.0\n\n10. 划分子网：从1985年起在IP地址中又增加了一个\"子网号字段\"，使两级的IP地址变成为三级的IP地址。这种做法叫做划分子网（SubNetting）。划分子网已成为因特网的正式标准协议\n\n    - 目前所有的主机都要求支持子网编址。子网编址不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是把主机号进一步划分为一个子网号和一个主机号\n\n      ![B类子网编码](B类子网编码.png)\n\n    - 当没有划分子网时，IP地址是两级结构。划分子网后，IP地址就变成了三级结构\n\n    - 划分子网只是把IP地址的主机号host-id这部分进行再划分，而不改变IP地址原来的网络号net-id\n\n11. **子网掩码（有待补充）**：从一个IP地址中无法解析源主机或目的主机所连接的网络是否进行了子网划分。使用子网掩码（Subnet Mask）可以找出IP地址中的子网部分\n\n12. ARP地址解析协议：就是将主机IP地址映射为硬件地址。在局域网中，网络中实际传输的单元是\"数据帧\"，数据帧的首部有目的主机的MAC地址。在以太网中，一个主机要和另一个主机进行直接通信，必须通过地址解析协议获得目的主机的MAC地址。**ARP协议的基本功能就是通过目的设备的IP地址，查询目标设备的MAC地址（物理地址）**\n\n13. Internet控制报文协议ICMP[网络层]：IP协议是一种不可可靠无连接的包传输。当数据包经过多个网络传输过程中，可能出现错误、目的主机不响应、包拥塞和包丢失等。为了处理这些问题，在IP层引入了一个子协议：ICMP（Internet Control Message Protocol）\n\n14. Internet组管理协议IGMP：IP地址有三种类型，分别是单播地址、广播地址和多播地址。广播和多播地址仅应用于UDP协议，它们主要应用在报文同时传送到多个接收者的情况\n\n    - 多播使用多播地址（D类IP地址）\n    - 当把多播通信扩展到单个网络段以外需要通过路由器转发多播数据时，复杂性就增加了。需要一个协议让多播路由器了解确定网络中属于多播组的任何一个主机。这个协议就是Internet组管理协议（IGMP）\n\n15. 用户数据报协议（UDP）：UDP采用非连接的方式提供应用层的事务处理，UDP不提供可靠性，也就是说，UDP协议不提供端到端的确认和重传功能，他不保证数据包一定能达到目的地，因此称为不可靠协议。UDP必须在IP上运行。他的下层协议是以IP作为前提的\n\n16. 传输控制协议TCP：TCP提供了一种可靠的面向连接的字节流传输层服务，TCP提供端到端的流量控制，并计算和验证一个强制性的端到端检查和。尽管TCP和UDP都使用相同的网络层（IP），TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。\n\n    - TCP连接的建立和释放：建立一个TCP连接需要三次握手，而释放一个TCP连接需要经过4次握手\n    - TCP连接的建立采用客户/服务器方式\n    - 主动发起连接建立的应用进程叫做客户（client）\n    - 被动等待连接的应用进程叫做服务器（server）\n\n    > #### 三次握手:\n    >\n    > TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。\n\n    <img src=\"三次挥手.gif\" alt=\"三次挥手\" style=\"zoom: 67%;\" />\n\n    > ​\t张三首先向李四招手(syn)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(ack)。张三看到李四微笑后确认了李四成功辨认出了自己(进入estalished状态)。\n    >\n    > ​\t但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(syn)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(ack)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入established状态)。\n    >\n    > ​\t于是两人加快步伐，走到了一起，相互拥抱。\n\n    <img src=\"三次握手建立过程.gif\" alt=\"三次握手建立过程\" style=\"zoom: 50%;\" />\n\n    > ​\t我们看到这个过程中一共是四个动作，张三招手--李四点头微笑--李四招手--张三点头微笑。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(syn+ack)。于是四个动作就简化成了三个动作，张三招手--李四点头微笑并招手--张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。\n    >\n    > ​\t我们看到有两个中间状态，syn_sent和syn_rcvd，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。syn_sent是主动打开方的「半打开」状态，syn_rcvd是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。\n\n    > #### 四次挥手:\n    > \n    > ​\tTCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(fin)——李四伤感地微笑(ack)——李四挥手(fin)——张三伤感地微笑(ack)。\n\n    <img src=\"四次挥手.gif\" alt=\"四次挥手\" style=\"zoom:67%;\" />\n\n    > ​\t之所以中间的两个动作没有合并，是因为tcp存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，超张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。\n\n    <img src=\"四次挥手过程.gif\" alt=\"四次挥手过程\"  />\n    \n    > 上面有一个非常特殊的状态`time_wait`，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。\n    >\n    > 它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的`time_wait`状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。\n    >\n    > 它的作用是重传最后一个ack报文，确保对方可以收到。因为如果对方没有收到ack的话，会重传fin报文，处于time_wait状态的套接字会立即向对方重发ack报文。\n    >\n    > 同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文(因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上)传过来时，都会被立即丢弃掉。4分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。\n    >\n    > 4分钟就是2个MSL，每个MSL是2分钟。MSL就是`maximium segment lifetime`——最长报文寿命。这个时间是由官方RFC协议规定的。至于为什么是2个MSL而不是1个MSL，我还没有看到一个非常满意的解释。\n    >\n    > 四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从`fin_wait_1`状态直接进入到`time_wait`状态，跳过了`fin_wait_2`状态。","source":"_posts/计网第八章-TCP-IP协议.md","raw":"---\ntitle: 计网第八章-TCP/IP协议\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 计网\n  - 总结\n  - 考研\ncategories:\n  - 计网\nabbrlink: 156a\ndate: 2020-08-23 10:49:07\npassword:\nsummary: 第八章 TCP/IP协议\n---\n## 第八章 TCP/IP协议\n\n1. TCP/IP体系结构\n   - TCP/IP协议的网络层的主要功能是寻址、数据打包和路由选择\n   - 主要协议有：地址解析协议（ARP）、反向地址解析协议（RARP）、网际协议（IP）、Internet控制消息协议（ICMP）和Internet组管理协议（IGMP）\n   - ARP负责将IP地址解析为结点的物理地址，以便于物理设备（如网卡）按该地址接收数据\n   - RARP负责将物理地址解析成IP地址，这个协议主要是针对无盘工作站获得IP地址而设计的\n   - ICMP用于传送差错报文及其他控制信息\n2. 网际协议IP\n   - IP协议是TCP/IP协议族中的核心协议。所有的TCP、UDP、ICMP、IGMP数据都是以IP数据报格式传输的\n   - IP协议为高层提供不可靠、无连接的数据报通信。尽最大努力交付\n\n3. IP地址：网络中的每个独立主机的每个接口必须有一个唯一的Internet地址，也称为**IP地址**。IP地址长度为**32位**。表示地址空间是$2^{32}$\n4. IP地址的表示方法\n   - 二进制表示方法\n   - 点分十进制表示方法：为了使32位地址更加简介和更容易阅读，因特网的地址通常写成用小数点把各字节分隔开的形式。每个字节用一个十进制数表示，这个数小于256\n   - 十六进制表示方法\n   - 二进制表示方法：在二进制表示方法中，用一个32位的比特序列表示IP地址，为了使这个地址有更好的可读性，通常在每个字节之间加上一个或多个空格做分割。例如：`10000001 00001110 00000110 00011111`，但不便于记忆\n\n5. 分类IP地址：IP地址按照层次结构划分成五类：A、B、C、D、E类。每一类地址都由两个固定长度的字段组成，其中第一个字段是网络号net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号host-id，它标志一个主机地址。\n\n   ![ip地址分类](ip地址分类.png)\n\n6. 各类IP地址的范围\n\n   ![IP地址范围](IP地址范围.png)\n\n   **助记：**`0～A(128)～B(28+64)～C(128+64+32)～D(128+64+32+16)~E(128+64+32+16+8)`\n\n7. IPv4报文格式\n\n   ![IP报文格式](IP报文格式.png)\n\n   - 总长度：占16位，指首部和数据之和的长度，单位为字节。因此数据报的最大长度为65535字节。总长度必须不超过最大传送单元MTU\n   - 标识（identification）：占16位，它是一个计数器，用来产生数据报的标识\n   - 标志（flag）：占3位，目前只有前两位有意义。\n     - 标识字段的**MF（More Fragment）**。**MF=1表示后面\"还有分片\"**，MF=0表示最后一个分片\n     - 标识字段的**DF（Don't Fragment）**。**DF=0时表示允许分片**\n\n   - 片偏移13位（偏移量）：较长的分组在分片后某片在原分组中的相对位置。**片偏移以8个字节为偏移单位**\n     - 例：以太网的MTU（最大传输单位）为1400字节，路由器将把到达的一个4000字节数据的报文为3段，第一段有1400字节数据，分段偏移为0；第二段有1400字节数据，分段偏移位1400÷8=175；第三段有1200字节数据，分段偏移位350\n\n8. **子网掩码（待补充）**：IP地址 + 子网掩码 = 网络地址\n\n9. 特殊的IP地址\n\n   - 网络地址（NET-ID）：主机标识部分为全\"0\"的IP地址不分配给任何主机，而是作为网络本身的标识\n     - 例：主机 202.198.151.136所在网段的网络地址为：202.198.151.0（主机位变为0）；主机130.100.100.136（B类地址）所在网段的网络地址为：130.100.0.0\n\n   - 直接广播地址：主机标识全为\"1\"的IP地址不分配给任何主机，用做广播地址\n     - 例：主机 202.198.151.136所在网段的直接广播地址为：202.198.151.255（主机位变为1）；主机130.100.100.136（B类地址）所在网段的直接广播地址为：130.100.255.25\n   - 有限广播地址：32位为全为1的IP地址称为有限广播地址\n     - 例：有限广播地址为：255.255.255.255\n   - 主机本身地址：32位为全0的IP地址称为主机本身地址\n     - 例：主机本身地址：0.0.0.0\n\n10. 划分子网：从1985年起在IP地址中又增加了一个\"子网号字段\"，使两级的IP地址变成为三级的IP地址。这种做法叫做划分子网（SubNetting）。划分子网已成为因特网的正式标准协议\n\n    - 目前所有的主机都要求支持子网编址。子网编址不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是把主机号进一步划分为一个子网号和一个主机号\n\n      ![B类子网编码](B类子网编码.png)\n\n    - 当没有划分子网时，IP地址是两级结构。划分子网后，IP地址就变成了三级结构\n\n    - 划分子网只是把IP地址的主机号host-id这部分进行再划分，而不改变IP地址原来的网络号net-id\n\n11. **子网掩码（有待补充）**：从一个IP地址中无法解析源主机或目的主机所连接的网络是否进行了子网划分。使用子网掩码（Subnet Mask）可以找出IP地址中的子网部分\n\n12. ARP地址解析协议：就是将主机IP地址映射为硬件地址。在局域网中，网络中实际传输的单元是\"数据帧\"，数据帧的首部有目的主机的MAC地址。在以太网中，一个主机要和另一个主机进行直接通信，必须通过地址解析协议获得目的主机的MAC地址。**ARP协议的基本功能就是通过目的设备的IP地址，查询目标设备的MAC地址（物理地址）**\n\n13. Internet控制报文协议ICMP[网络层]：IP协议是一种不可可靠无连接的包传输。当数据包经过多个网络传输过程中，可能出现错误、目的主机不响应、包拥塞和包丢失等。为了处理这些问题，在IP层引入了一个子协议：ICMP（Internet Control Message Protocol）\n\n14. Internet组管理协议IGMP：IP地址有三种类型，分别是单播地址、广播地址和多播地址。广播和多播地址仅应用于UDP协议，它们主要应用在报文同时传送到多个接收者的情况\n\n    - 多播使用多播地址（D类IP地址）\n    - 当把多播通信扩展到单个网络段以外需要通过路由器转发多播数据时，复杂性就增加了。需要一个协议让多播路由器了解确定网络中属于多播组的任何一个主机。这个协议就是Internet组管理协议（IGMP）\n\n15. 用户数据报协议（UDP）：UDP采用非连接的方式提供应用层的事务处理，UDP不提供可靠性，也就是说，UDP协议不提供端到端的确认和重传功能，他不保证数据包一定能达到目的地，因此称为不可靠协议。UDP必须在IP上运行。他的下层协议是以IP作为前提的\n\n16. 传输控制协议TCP：TCP提供了一种可靠的面向连接的字节流传输层服务，TCP提供端到端的流量控制，并计算和验证一个强制性的端到端检查和。尽管TCP和UDP都使用相同的网络层（IP），TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。\n\n    - TCP连接的建立和释放：建立一个TCP连接需要三次握手，而释放一个TCP连接需要经过4次握手\n    - TCP连接的建立采用客户/服务器方式\n    - 主动发起连接建立的应用进程叫做客户（client）\n    - 被动等待连接的应用进程叫做服务器（server）\n\n    > #### 三次握手:\n    >\n    > TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。\n\n    <img src=\"三次挥手.gif\" alt=\"三次挥手\" style=\"zoom: 67%;\" />\n\n    > ​\t张三首先向李四招手(syn)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(ack)。张三看到李四微笑后确认了李四成功辨认出了自己(进入estalished状态)。\n    >\n    > ​\t但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(syn)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(ack)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入established状态)。\n    >\n    > ​\t于是两人加快步伐，走到了一起，相互拥抱。\n\n    <img src=\"三次握手建立过程.gif\" alt=\"三次握手建立过程\" style=\"zoom: 50%;\" />\n\n    > ​\t我们看到这个过程中一共是四个动作，张三招手--李四点头微笑--李四招手--张三点头微笑。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(syn+ack)。于是四个动作就简化成了三个动作，张三招手--李四点头微笑并招手--张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。\n    >\n    > ​\t我们看到有两个中间状态，syn_sent和syn_rcvd，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。syn_sent是主动打开方的「半打开」状态，syn_rcvd是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。\n\n    > #### 四次挥手:\n    > \n    > ​\tTCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(fin)——李四伤感地微笑(ack)——李四挥手(fin)——张三伤感地微笑(ack)。\n\n    <img src=\"四次挥手.gif\" alt=\"四次挥手\" style=\"zoom:67%;\" />\n\n    > ​\t之所以中间的两个动作没有合并，是因为tcp存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，超张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。\n\n    <img src=\"四次挥手过程.gif\" alt=\"四次挥手过程\"  />\n    \n    > 上面有一个非常特殊的状态`time_wait`，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。\n    >\n    > 它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的`time_wait`状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。\n    >\n    > 它的作用是重传最后一个ack报文，确保对方可以收到。因为如果对方没有收到ack的话，会重传fin报文，处于time_wait状态的套接字会立即向对方重发ack报文。\n    >\n    > 同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文(因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上)传过来时，都会被立即丢弃掉。4分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。\n    >\n    > 4分钟就是2个MSL，每个MSL是2分钟。MSL就是`maximium segment lifetime`——最长报文寿命。这个时间是由官方RFC协议规定的。至于为什么是2个MSL而不是1个MSL，我还没有看到一个非常满意的解释。\n    >\n    > 四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从`fin_wait_1`状态直接进入到`time_wait`状态，跳过了`fin_wait_2`状态。","slug":"计网第八章-TCP-IP协议","published":1,"updated":"2020-08-25T13:10:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdin004fzl9k8xx400ex","content":"<h2 id=\"第八章-tcpip协议\"><a class=\"markdownIt-Anchor\" href=\"#第八章-tcpip协议\"></a> 第八章 TCP/IP协议</h2>\n<ol>\n<li>\n<p>TCP/IP体系结构</p>\n<ul>\n<li>TCP/IP协议的网络层的主要功能是寻址、数据打包和路由选择</li>\n<li>主要协议有：地址解析协议（ARP）、反向地址解析协议（RARP）、网际协议（IP）、Internet控制消息协议（ICMP）和Internet组管理协议（IGMP）</li>\n<li>ARP负责将IP地址解析为结点的物理地址，以便于物理设备（如网卡）按该地址接收数据</li>\n<li>RARP负责将物理地址解析成IP地址，这个协议主要是针对无盘工作站获得IP地址而设计的</li>\n<li>ICMP用于传送差错报文及其他控制信息</li>\n</ul>\n</li>\n<li>\n<p>网际协议IP</p>\n<ul>\n<li>IP协议是TCP/IP协议族中的核心协议。所有的TCP、UDP、ICMP、IGMP数据都是以IP数据报格式传输的</li>\n<li>IP协议为高层提供不可靠、无连接的数据报通信。尽最大努力交付</li>\n</ul>\n</li>\n<li>\n<p>IP地址：网络中的每个独立主机的每个接口必须有一个唯一的Internet地址，也称为<strong>IP地址</strong>。IP地址长度为<strong>32位</strong>。表示地址空间是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>IP地址的表示方法</p>\n<ul>\n<li>二进制表示方法</li>\n<li>点分十进制表示方法：为了使32位地址更加简介和更容易阅读，因特网的地址通常写成用小数点把各字节分隔开的形式。每个字节用一个十进制数表示，这个数小于256</li>\n<li>十六进制表示方法</li>\n<li>二进制表示方法：在二进制表示方法中，用一个32位的比特序列表示IP地址，为了使这个地址有更好的可读性，通常在每个字节之间加上一个或多个空格做分割。例如：<code>10000001 00001110 00000110 00011111</code>，但不便于记忆</li>\n</ul>\n</li>\n<li>\n<p>分类IP地址：IP地址按照层次结构划分成五类：A、B、C、D、E类。每一类地址都由两个固定长度的字段组成，其中第一个字段是网络号net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号host-id，它标志一个主机地址。</p>\n<p><img src=\"ip%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.png\" alt=\"ip地址分类\"></p>\n</li>\n<li>\n<p>各类IP地址的范围</p>\n<p><img src=\"IP%E5%9C%B0%E5%9D%80%E8%8C%83%E5%9B%B4.png\" alt=\"IP地址范围\"></p>\n<p><strong>助记：</strong><code>0～A(128)～B(28+64)～C(128+64+32)～D(128+64+32+16)~E(128+64+32+16+8)</code></p>\n</li>\n<li>\n<p>IPv4报文格式</p>\n<p><img src=\"IP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png\" alt=\"IP报文格式\"></p>\n<ul>\n<li>\n<p>总长度：占16位，指首部和数据之和的长度，单位为字节。因此数据报的最大长度为65535字节。总长度必须不超过最大传送单元MTU</p>\n</li>\n<li>\n<p>标识（identification）：占16位，它是一个计数器，用来产生数据报的标识</p>\n</li>\n<li>\n<p>标志（flag）：占3位，目前只有前两位有意义。</p>\n<ul>\n<li>标识字段的<strong>MF（More Fragment）</strong>。<strong>MF=1表示后面\"还有分片\"</strong>，MF=0表示最后一个分片</li>\n<li>标识字段的<strong>DF（Don’t Fragment）</strong>。<strong>DF=0时表示允许分片</strong></li>\n</ul>\n</li>\n<li>\n<p>片偏移13位（偏移量）：较长的分组在分片后某片在原分组中的相对位置。<strong>片偏移以8个字节为偏移单位</strong></p>\n<ul>\n<li>例：以太网的MTU（最大传输单位）为1400字节，路由器将把到达的一个4000字节数据的报文为3段，第一段有1400字节数据，分段偏移为0；第二段有1400字节数据，分段偏移位1400÷8=175；第三段有1200字节数据，分段偏移位350</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>子网掩码（待补充）</strong>：IP地址 + 子网掩码 = 网络地址</p>\n</li>\n<li>\n<p>特殊的IP地址</p>\n<ul>\n<li>\n<p>网络地址（NET-ID）：主机标识部分为全\"0\"的IP地址不分配给任何主机，而是作为网络本身的标识</p>\n<ul>\n<li>例：主机 202.198.151.136所在网段的网络地址为：202.198.151.0（主机位变为0）；主机130.100.100.136（B类地址）所在网段的网络地址为：130.100.0.0</li>\n</ul>\n</li>\n<li>\n<p>直接广播地址：主机标识全为\"1\"的IP地址不分配给任何主机，用做广播地址</p>\n<ul>\n<li>例：主机 202.198.151.136所在网段的直接广播地址为：202.198.151.255（主机位变为1）；主机130.100.100.136（B类地址）所在网段的直接广播地址为：130.100.255.25</li>\n</ul>\n</li>\n<li>\n<p>有限广播地址：32位为全为1的IP地址称为有限广播地址</p>\n<ul>\n<li>例：有限广播地址为：255.255.255.255</li>\n</ul>\n</li>\n<li>\n<p>主机本身地址：32位为全0的IP地址称为主机本身地址</p>\n<ul>\n<li>例：主机本身地址：0.0.0.0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>划分子网：从1985年起在IP地址中又增加了一个\"子网号字段\"，使两级的IP地址变成为三级的IP地址。这种做法叫做划分子网（SubNetting）。划分子网已成为因特网的正式标准协议</p>\n<ul>\n<li>\n<p>目前所有的主机都要求支持子网编址。子网编址不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是把主机号进一步划分为一个子网号和一个主机号</p>\n<p><img src=\"B%E7%B1%BB%E5%AD%90%E7%BD%91%E7%BC%96%E7%A0%81.png\" alt=\"B类子网编码\"></p>\n</li>\n<li>\n<p>当没有划分子网时，IP地址是两级结构。划分子网后，IP地址就变成了三级结构</p>\n</li>\n<li>\n<p>划分子网只是把IP地址的主机号host-id这部分进行再划分，而不改变IP地址原来的网络号net-id</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>子网掩码（有待补充）</strong>：从一个IP地址中无法解析源主机或目的主机所连接的网络是否进行了子网划分。使用子网掩码（Subnet Mask）可以找出IP地址中的子网部分</p>\n</li>\n<li>\n<p>ARP地址解析协议：就是将主机IP地址映射为硬件地址。在局域网中，网络中实际传输的单元是\"数据帧\"，数据帧的首部有目的主机的MAC地址。在以太网中，一个主机要和另一个主机进行直接通信，必须通过地址解析协议获得目的主机的MAC地址。<strong>ARP协议的基本功能就是通过目的设备的IP地址，查询目标设备的MAC地址（物理地址）</strong></p>\n</li>\n<li>\n<p>Internet控制报文协议ICMP[网络层]：IP协议是一种不可可靠无连接的包传输。当数据包经过多个网络传输过程中，可能出现错误、目的主机不响应、包拥塞和包丢失等。为了处理这些问题，在IP层引入了一个子协议：ICMP（Internet Control Message Protocol）</p>\n</li>\n<li>\n<p>Internet组管理协议IGMP：IP地址有三种类型，分别是单播地址、广播地址和多播地址。广播和多播地址仅应用于UDP协议，它们主要应用在报文同时传送到多个接收者的情况</p>\n<ul>\n<li>多播使用多播地址（D类IP地址）</li>\n<li>当把多播通信扩展到单个网络段以外需要通过路由器转发多播数据时，复杂性就增加了。需要一个协议让多播路由器了解确定网络中属于多播组的任何一个主机。这个协议就是Internet组管理协议（IGMP）</li>\n</ul>\n</li>\n<li>\n<p>用户数据报协议（UDP）：UDP采用非连接的方式提供应用层的事务处理，UDP不提供可靠性，也就是说，UDP协议不提供端到端的确认和重传功能，他不保证数据包一定能达到目的地，因此称为不可靠协议。UDP必须在IP上运行。他的下层协议是以IP作为前提的</p>\n</li>\n<li>\n<p>传输控制协议TCP：TCP提供了一种可靠的面向连接的字节流传输层服务，TCP提供端到端的流量控制，并计算和验证一个强制性的端到端检查和。尽管TCP和UDP都使用相同的网络层（IP），TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。</p>\n<ul>\n<li>TCP连接的建立和释放：建立一个TCP连接需要三次握手，而释放一个TCP连接需要经过4次握手</li>\n<li>TCP连接的建立采用客户/服务器方式</li>\n<li>主动发起连接建立的应用进程叫做客户（client）</li>\n<li>被动等待连接的应用进程叫做服务器（server）</li>\n</ul>\n<blockquote>\n<h4 id=\"三次握手\"><a class=\"markdownIt-Anchor\" href=\"#三次握手\"></a> 三次握手:</h4>\n<p>TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。</p>\n</blockquote>\n<img src=\"三次挥手.gif\" alt=\"三次挥手\" style=\"zoom: 67%;\">\n<blockquote>\n<p>​\t张三首先向李四招手(syn)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(ack)。张三看到李四微笑后确认了李四成功辨认出了自己(进入estalished状态)。</p>\n<p>​\t但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(syn)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(ack)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入established状态)。</p>\n<p>​\t于是两人加快步伐，走到了一起，相互拥抱。</p>\n</blockquote>\n<img src=\"三次握手建立过程.gif\" alt=\"三次握手建立过程\" style=\"zoom: 50%;\">\n<blockquote>\n<p>​\t我们看到这个过程中一共是四个动作，张三招手–李四点头微笑–李四招手–张三点头微笑。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(syn+ack)。于是四个动作就简化成了三个动作，张三招手–李四点头微笑并招手–张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p>\n<p>​\t我们看到有两个中间状态，syn_sent和syn_rcvd，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。syn_sent是主动打开方的「半打开」状态，syn_rcvd是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。</p>\n</blockquote>\n<blockquote>\n<h4 id=\"四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#四次挥手\"></a> 四次挥手:</h4>\n<p>​\tTCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(fin)——李四伤感地微笑(ack)——李四挥手(fin)——张三伤感地微笑(ack)。</p>\n</blockquote>\n<img src=\"四次挥手.gif\" alt=\"四次挥手\" style=\"zoom:67%;\">\n<blockquote>\n<p>​\t之所以中间的两个动作没有合并，是因为tcp存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，超张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。</p>\n</blockquote>\n<img src=\"四次挥手过程.gif\" alt=\"四次挥手过程\">\n<blockquote>\n<p>上面有一个非常特殊的状态<code>time_wait</code>，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。</p>\n<p>它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的<code>time_wait</code>状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。</p>\n<p>它的作用是重传最后一个ack报文，确保对方可以收到。因为如果对方没有收到ack的话，会重传fin报文，处于time_wait状态的套接字会立即向对方重发ack报文。</p>\n<p>同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文(因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上)传过来时，都会被立即丢弃掉。4分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。</p>\n<p>4分钟就是2个MSL，每个MSL是2分钟。MSL就是<code>maximium segment lifetime</code>——最长报文寿命。这个时间是由官方RFC协议规定的。至于为什么是2个MSL而不是1个MSL，我还没有看到一个非常满意的解释。</p>\n<p>四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从<code>fin_wait_1</code>状态直接进入到<code>time_wait</code>状态，跳过了<code>fin_wait_2</code>状态。</p>\n</blockquote>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第八章-tcpip协议\"><a class=\"markdownIt-Anchor\" href=\"#第八章-tcpip协议\"></a> 第八章 TCP/IP协议</h2>\n<ol>\n<li>\n<p>TCP/IP体系结构</p>\n<ul>\n<li>TCP/IP协议的网络层的主要功能是寻址、数据打包和路由选择</li>\n<li>主要协议有：地址解析协议（ARP）、反向地址解析协议（RARP）、网际协议（IP）、Internet控制消息协议（ICMP）和Internet组管理协议（IGMP）</li>\n<li>ARP负责将IP地址解析为结点的物理地址，以便于物理设备（如网卡）按该地址接收数据</li>\n<li>RARP负责将物理地址解析成IP地址，这个协议主要是针对无盘工作站获得IP地址而设计的</li>\n<li>ICMP用于传送差错报文及其他控制信息</li>\n</ul>\n</li>\n<li>\n<p>网际协议IP</p>\n<ul>\n<li>IP协议是TCP/IP协议族中的核心协议。所有的TCP、UDP、ICMP、IGMP数据都是以IP数据报格式传输的</li>\n<li>IP协议为高层提供不可靠、无连接的数据报通信。尽最大努力交付</li>\n</ul>\n</li>\n<li>\n<p>IP地址：网络中的每个独立主机的每个接口必须有一个唯一的Internet地址，也称为<strong>IP地址</strong>。IP地址长度为<strong>32位</strong>。表示地址空间是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>IP地址的表示方法</p>\n<ul>\n<li>二进制表示方法</li>\n<li>点分十进制表示方法：为了使32位地址更加简介和更容易阅读，因特网的地址通常写成用小数点把各字节分隔开的形式。每个字节用一个十进制数表示，这个数小于256</li>\n<li>十六进制表示方法</li>\n<li>二进制表示方法：在二进制表示方法中，用一个32位的比特序列表示IP地址，为了使这个地址有更好的可读性，通常在每个字节之间加上一个或多个空格做分割。例如：<code>10000001 00001110 00000110 00011111</code>，但不便于记忆</li>\n</ul>\n</li>\n<li>\n<p>分类IP地址：IP地址按照层次结构划分成五类：A、B、C、D、E类。每一类地址都由两个固定长度的字段组成，其中第一个字段是网络号net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号host-id，它标志一个主机地址。</p>\n<p><img src=\"ip%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.png\" alt=\"ip地址分类\" /></p>\n</li>\n<li>\n<p>各类IP地址的范围</p>\n<p><img src=\"IP%E5%9C%B0%E5%9D%80%E8%8C%83%E5%9B%B4.png\" alt=\"IP地址范围\" /></p>\n<p><strong>助记：</strong><code>0～A(128)～B(28+64)～C(128+64+32)～D(128+64+32+16)~E(128+64+32+16+8)</code></p>\n</li>\n<li>\n<p>IPv4报文格式</p>\n<p><img src=\"IP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png\" alt=\"IP报文格式\" /></p>\n<ul>\n<li>\n<p>总长度：占16位，指首部和数据之和的长度，单位为字节。因此数据报的最大长度为65535字节。总长度必须不超过最大传送单元MTU</p>\n</li>\n<li>\n<p>标识（identification）：占16位，它是一个计数器，用来产生数据报的标识</p>\n</li>\n<li>\n<p>标志（flag）：占3位，目前只有前两位有意义。</p>\n<ul>\n<li>标识字段的<strong>MF（More Fragment）</strong>。<strong>MF=1表示后面&quot;还有分片&quot;</strong>，MF=0表示最后一个分片</li>\n<li>标识字段的<strong>DF（Don’t Fragment）</strong>。<strong>DF=0时表示允许分片</strong></li>\n</ul>\n</li>\n<li>\n<p>片偏移13位（偏移量）：较长的分组在分片后某片在原分组中的相对位置。<strong>片偏移以8个字节为偏移单位</strong></p>\n<ul>\n<li>例：以太网的MTU（最大传输单位）为1400字节，路由器将把到达的一个4000字节数据的报文为3段，第一段有1400字节数据，分段偏移为0；第二段有1400字节数据，分段偏移位1400÷8=175；第三段有1200字节数据，分段偏移位350</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>子网掩码（待补充）</strong>：IP地址 + 子网掩码 = 网络地址</p>\n</li>\n<li>\n<p>特殊的IP地址</p>\n<ul>\n<li>\n<p>网络地址（NET-ID）：主机标识部分为全&quot;0&quot;的IP地址不分配给任何主机，而是作为网络本身的标识</p>\n<ul>\n<li>例：主机 202.198.151.136所在网段的网络地址为：202.198.151.0（主机位变为0）；主机130.100.100.136（B类地址）所在网段的网络地址为：130.100.0.0</li>\n</ul>\n</li>\n<li>\n<p>直接广播地址：主机标识全为&quot;1&quot;的IP地址不分配给任何主机，用做广播地址</p>\n<ul>\n<li>例：主机 202.198.151.136所在网段的直接广播地址为：202.198.151.255（主机位变为1）；主机130.100.100.136（B类地址）所在网段的直接广播地址为：130.100.255.25</li>\n</ul>\n</li>\n<li>\n<p>有限广播地址：32位为全为1的IP地址称为有限广播地址</p>\n<ul>\n<li>例：有限广播地址为：255.255.255.255</li>\n</ul>\n</li>\n<li>\n<p>主机本身地址：32位为全0的IP地址称为主机本身地址</p>\n<ul>\n<li>例：主机本身地址：0.0.0.0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>划分子网：从1985年起在IP地址中又增加了一个&quot;子网号字段&quot;，使两级的IP地址变成为三级的IP地址。这种做法叫做划分子网（SubNetting）。划分子网已成为因特网的正式标准协议</p>\n<ul>\n<li>\n<p>目前所有的主机都要求支持子网编址。子网编址不是把IP地址看成由单纯的一个网络号和一个主机号组成，而是把主机号进一步划分为一个子网号和一个主机号</p>\n<p><img src=\"B%E7%B1%BB%E5%AD%90%E7%BD%91%E7%BC%96%E7%A0%81.png\" alt=\"B类子网编码\" /></p>\n</li>\n<li>\n<p>当没有划分子网时，IP地址是两级结构。划分子网后，IP地址就变成了三级结构</p>\n</li>\n<li>\n<p>划分子网只是把IP地址的主机号host-id这部分进行再划分，而不改变IP地址原来的网络号net-id</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>子网掩码（有待补充）</strong>：从一个IP地址中无法解析源主机或目的主机所连接的网络是否进行了子网划分。使用子网掩码（Subnet Mask）可以找出IP地址中的子网部分</p>\n</li>\n<li>\n<p>ARP地址解析协议：就是将主机IP地址映射为硬件地址。在局域网中，网络中实际传输的单元是&quot;数据帧&quot;，数据帧的首部有目的主机的MAC地址。在以太网中，一个主机要和另一个主机进行直接通信，必须通过地址解析协议获得目的主机的MAC地址。<strong>ARP协议的基本功能就是通过目的设备的IP地址，查询目标设备的MAC地址（物理地址）</strong></p>\n</li>\n<li>\n<p>Internet控制报文协议ICMP[网络层]：IP协议是一种不可可靠无连接的包传输。当数据包经过多个网络传输过程中，可能出现错误、目的主机不响应、包拥塞和包丢失等。为了处理这些问题，在IP层引入了一个子协议：ICMP（Internet Control Message Protocol）</p>\n</li>\n<li>\n<p>Internet组管理协议IGMP：IP地址有三种类型，分别是单播地址、广播地址和多播地址。广播和多播地址仅应用于UDP协议，它们主要应用在报文同时传送到多个接收者的情况</p>\n<ul>\n<li>多播使用多播地址（D类IP地址）</li>\n<li>当把多播通信扩展到单个网络段以外需要通过路由器转发多播数据时，复杂性就增加了。需要一个协议让多播路由器了解确定网络中属于多播组的任何一个主机。这个协议就是Internet组管理协议（IGMP）</li>\n</ul>\n</li>\n<li>\n<p>用户数据报协议（UDP）：UDP采用非连接的方式提供应用层的事务处理，UDP不提供可靠性，也就是说，UDP协议不提供端到端的确认和重传功能，他不保证数据包一定能达到目的地，因此称为不可靠协议。UDP必须在IP上运行。他的下层协议是以IP作为前提的</p>\n</li>\n<li>\n<p>传输控制协议TCP：TCP提供了一种可靠的面向连接的字节流传输层服务，TCP提供端到端的流量控制，并计算和验证一个强制性的端到端检查和。尽管TCP和UDP都使用相同的网络层（IP），TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。</p>\n<ul>\n<li>TCP连接的建立和释放：建立一个TCP连接需要三次握手，而释放一个TCP连接需要经过4次握手</li>\n<li>TCP连接的建立采用客户/服务器方式</li>\n<li>主动发起连接建立的应用进程叫做客户（client）</li>\n<li>被动等待连接的应用进程叫做服务器（server）</li>\n</ul>\n<blockquote>\n<h4 id=\"三次握手\"><a class=\"markdownIt-Anchor\" href=\"#三次握手\"></a> 三次握手:</h4>\n<p>TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。</p>\n</blockquote>\n<img src=\"三次挥手.gif\" alt=\"三次挥手\" style=\"zoom: 67%;\" />\n<blockquote>\n<p>​\t张三首先向李四招手(syn)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(ack)。张三看到李四微笑后确认了李四成功辨认出了自己(进入estalished状态)。</p>\n<p>​\t但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(syn)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(ack)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入established状态)。</p>\n<p>​\t于是两人加快步伐，走到了一起，相互拥抱。</p>\n</blockquote>\n<img src=\"三次握手建立过程.gif\" alt=\"三次握手建立过程\" style=\"zoom: 50%;\" />\n<blockquote>\n<p>​\t我们看到这个过程中一共是四个动作，张三招手–李四点头微笑–李四招手–张三点头微笑。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(syn+ack)。于是四个动作就简化成了三个动作，张三招手–李四点头微笑并招手–张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p>\n<p>​\t我们看到有两个中间状态，syn_sent和syn_rcvd，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。syn_sent是主动打开方的「半打开」状态，syn_rcvd是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。</p>\n</blockquote>\n<blockquote>\n<h4 id=\"四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#四次挥手\"></a> 四次挥手:</h4>\n<p>​\tTCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(fin)——李四伤感地微笑(ack)——李四挥手(fin)——张三伤感地微笑(ack)。</p>\n</blockquote>\n<img src=\"四次挥手.gif\" alt=\"四次挥手\" style=\"zoom:67%;\" />\n<blockquote>\n<p>​\t之所以中间的两个动作没有合并，是因为tcp存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，超张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。</p>\n</blockquote>\n<img src=\"四次挥手过程.gif\" alt=\"四次挥手过程\"  />\n<blockquote>\n<p>上面有一个非常特殊的状态<code>time_wait</code>，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。</p>\n<p>它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的<code>time_wait</code>状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。</p>\n<p>它的作用是重传最后一个ack报文，确保对方可以收到。因为如果对方没有收到ack的话，会重传fin报文，处于time_wait状态的套接字会立即向对方重发ack报文。</p>\n<p>同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文(因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上)传过来时，都会被立即丢弃掉。4分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。</p>\n<p>4分钟就是2个MSL，每个MSL是2分钟。MSL就是<code>maximium segment lifetime</code>——最长报文寿命。这个时间是由官方RFC协议规定的。至于为什么是2个MSL而不是1个MSL，我还没有看到一个非常满意的解释。</p>\n<p>四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从<code>fin_wait_1</code>状态直接进入到<code>time_wait</code>状态，跳过了<code>fin_wait_2</code>状态。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"计网第六章-传输层","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"第六章 传输层","abbrlink":"2140","date":"2020-08-12T06:41:19.000Z","password":null,"_content":"## 第六章 传输层\n\n1. 在OSI参考模型中，传输层位于通信子网和资源子网之间，是整个协议层次中最核心的一层\n2. 传输层的作用：在优化网络服务的基础上，为源主机上的进程和目的主机上的进程之间**提供可靠地透明数据传送**，使高层用户在相互通信时不必关心通信子网实现的细节\n3. 拥塞控制\n   - Cwnd --- 拥塞窗口（发送端窗口的大小，不和Rwnd一致）\n   - Rwnd --- 接收端窗口\n   - SMSS --- 发送端最大数据段尺寸（单个数据段的大小上限，不包括TCP/IP报文的头）\n   - Ssthresh --- 慢启动阀值（调整拥塞窗口增长）\n4. 慢启动\n\n","source":"_posts/计网第六章-传输层.md","raw":"---\ntitle: 计网第六章-传输层\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 计网\n  - 总结\n  - 考研\ncategories:\n  - 计网\nsummary: 第六章 传输层\nabbrlink: '2140'\ndate: 2020-08-12 14:41:19\npassword:\n---\n## 第六章 传输层\n\n1. 在OSI参考模型中，传输层位于通信子网和资源子网之间，是整个协议层次中最核心的一层\n2. 传输层的作用：在优化网络服务的基础上，为源主机上的进程和目的主机上的进程之间**提供可靠地透明数据传送**，使高层用户在相互通信时不必关心通信子网实现的细节\n3. 拥塞控制\n   - Cwnd --- 拥塞窗口（发送端窗口的大小，不和Rwnd一致）\n   - Rwnd --- 接收端窗口\n   - SMSS --- 发送端最大数据段尺寸（单个数据段的大小上限，不包括TCP/IP报文的头）\n   - Ssthresh --- 慢启动阀值（调整拥塞窗口增长）\n4. 慢启动\n\n","slug":"计网第六章-传输层","published":1,"updated":"2020-09-08T08:11:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdio004jzl9kgkq6cew3","content":"<h2 id=\"第六章-传输层\"><a class=\"markdownIt-Anchor\" href=\"#第六章-传输层\"></a> 第六章 传输层</h2>\n<ol>\n<li>在OSI参考模型中，传输层位于通信子网和资源子网之间，是整个协议层次中最核心的一层</li>\n<li>传输层的作用：在优化网络服务的基础上，为源主机上的进程和目的主机上的进程之间<strong>提供可靠地透明数据传送</strong>，使高层用户在相互通信时不必关心通信子网实现的细节</li>\n<li>拥塞控制\n<ul>\n<li>Cwnd — 拥塞窗口（发送端窗口的大小，不和Rwnd一致）</li>\n<li>Rwnd — 接收端窗口</li>\n<li>SMSS — 发送端最大数据段尺寸（单个数据段的大小上限，不包括TCP/IP报文的头）</li>\n<li>Ssthresh — 慢启动阀值（调整拥塞窗口增长）</li>\n</ul>\n</li>\n<li>慢启动</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第六章-传输层\"><a class=\"markdownIt-Anchor\" href=\"#第六章-传输层\"></a> 第六章 传输层</h2>\n<ol>\n<li>在OSI参考模型中，传输层位于通信子网和资源子网之间，是整个协议层次中最核心的一层</li>\n<li>传输层的作用：在优化网络服务的基础上，为源主机上的进程和目的主机上的进程之间<strong>提供可靠地透明数据传送</strong>，使高层用户在相互通信时不必关心通信子网实现的细节</li>\n<li>拥塞控制\n<ul>\n<li>Cwnd — 拥塞窗口（发送端窗口的大小，不和Rwnd一致）</li>\n<li>Rwnd — 接收端窗口</li>\n<li>SMSS — 发送端最大数据段尺寸（单个数据段的大小上限，不包括TCP/IP报文的头）</li>\n<li>Ssthresh — 慢启动阀值（调整拥塞窗口增长）</li>\n</ul>\n</li>\n<li>慢启动</li>\n</ol>\n"},{"title":"计网第四章-数据链路层","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"第四章 数据链路层","abbrlink":"2693","date":"2020-07-28T11:51:43.000Z","password":null,"_content":"## 第四章 数据链路层\n\n1. 线路规程：\n\n   - 询问/确认模式\n\n     - 使用场合：一条链路的两端的设备级别相同，任意一个设备都可以启动一个会话过程\n\n     - 工作方式：启动方首先发送一个询问帧（ENQ）询问接收方是否可以接收数据。接收方如果已经准备好接收，必须回答一个确认帧（ACK）。一旦讲所有数据发送完毕，发送系统以一个传输结束帧（EOT）结束传输\n- 轮询/选择模式\n     - 使用场合：在有一个设备作为主设备，其他设备为从设备的多点连接系统\n     - 工作方式\n     - 选择：当主设备有数据发送时就采用选择模式。在发送数据前，主设备产生并发送一个选择帧（SEL），并在帧的地址域中填入接收数据的从设备的地址。如果从设备是激活的并且正在运行，其地址和选择帧中的地址域中的地址相同，它向主设备返回一个确认帧（ACK）。\n     - 轮询：轮询功能是主设备请求从设备进行传输。在没有接到请求前，从设备是不允许发送数据的。当主设备收到否认帧，主设备就轮询下一个从设备，直到他发现一个要发送的从设备为止。当回应是数据帧时，从设备读入该帧并向从设备返回一个确认帧来确认已经接收。\n2. 流量控制与差错控制\n   - 自动重复请求（ARQ）：数据帧在传输中出现错误，接收方就返回一个否定应答帧（NAK），出错的帧就会被发送方重新传送。这个过程叫做自动重复请求。\n   - 数据被重传的情况有三种：**帧破坏、帧丢失和应答帧丢失**\n   - 流量控制和差错控制是结合在一起实现的。\n\n3. **停止等待协议**\n\n   - 发送方每发送一帧后就等待应答。只有收到一个应答帧（ACK）后，才发送下一个帧。直到发送方发送一个传输结束帧（也就是线路上只有一帧）\n\n   - 完成一帧发送所需最短的时间\n\n     - 一个窗口时间$WT$。$WT=t_1+2t_p+2t_{Proc}+t_S$。\n     \n       _其中，$t_I$是发送一个数据帧的时间，设一个数据帧的长度为$L_f$比特，发送数据速率为$C$bps，则$t_I=L_f/C$秒。_\n     \n       _$t_s$是确认帧的发送时间，设一个确认帧的长度为$L_S$比特，发送数据速率为$C$bps，则$t_S=L_S/C$秒。_\n     \n       _$t_p$是电信号在物理链路上的传播延迟。_\n     \n       $t_{Proc}$是收到一帧的处理时间和一个帧的形成时间。\n     \n     \n\n4. **滑动窗口协议**\n   - 流量控制：发送方在收到应答消息前可以发送多个帧。接收方使用一个确认（ACK）帧来对多个帧的接收进行确认。具体可以接受多少帧视窗口大小而定。\n     - 回退n自动重复请求\n     - 选择拒绝自动重复请求：窗口尺寸小于等于$n/2$。","source":"_posts/计网第四章-数据链路层.md","raw":"---\ntitle: 计网第四章-数据链路层\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 计网\n  - 总结\n  - 考研\ncategories:\n  - 计网\nsummary: 第四章 数据链路层\nabbrlink: '2693'\ndate: 2020-07-28 19:51:43\npassword:\n---\n## 第四章 数据链路层\n\n1. 线路规程：\n\n   - 询问/确认模式\n\n     - 使用场合：一条链路的两端的设备级别相同，任意一个设备都可以启动一个会话过程\n\n     - 工作方式：启动方首先发送一个询问帧（ENQ）询问接收方是否可以接收数据。接收方如果已经准备好接收，必须回答一个确认帧（ACK）。一旦讲所有数据发送完毕，发送系统以一个传输结束帧（EOT）结束传输\n- 轮询/选择模式\n     - 使用场合：在有一个设备作为主设备，其他设备为从设备的多点连接系统\n     - 工作方式\n     - 选择：当主设备有数据发送时就采用选择模式。在发送数据前，主设备产生并发送一个选择帧（SEL），并在帧的地址域中填入接收数据的从设备的地址。如果从设备是激活的并且正在运行，其地址和选择帧中的地址域中的地址相同，它向主设备返回一个确认帧（ACK）。\n     - 轮询：轮询功能是主设备请求从设备进行传输。在没有接到请求前，从设备是不允许发送数据的。当主设备收到否认帧，主设备就轮询下一个从设备，直到他发现一个要发送的从设备为止。当回应是数据帧时，从设备读入该帧并向从设备返回一个确认帧来确认已经接收。\n2. 流量控制与差错控制\n   - 自动重复请求（ARQ）：数据帧在传输中出现错误，接收方就返回一个否定应答帧（NAK），出错的帧就会被发送方重新传送。这个过程叫做自动重复请求。\n   - 数据被重传的情况有三种：**帧破坏、帧丢失和应答帧丢失**\n   - 流量控制和差错控制是结合在一起实现的。\n\n3. **停止等待协议**\n\n   - 发送方每发送一帧后就等待应答。只有收到一个应答帧（ACK）后，才发送下一个帧。直到发送方发送一个传输结束帧（也就是线路上只有一帧）\n\n   - 完成一帧发送所需最短的时间\n\n     - 一个窗口时间$WT$。$WT=t_1+2t_p+2t_{Proc}+t_S$。\n     \n       _其中，$t_I$是发送一个数据帧的时间，设一个数据帧的长度为$L_f$比特，发送数据速率为$C$bps，则$t_I=L_f/C$秒。_\n     \n       _$t_s$是确认帧的发送时间，设一个确认帧的长度为$L_S$比特，发送数据速率为$C$bps，则$t_S=L_S/C$秒。_\n     \n       _$t_p$是电信号在物理链路上的传播延迟。_\n     \n       $t_{Proc}$是收到一帧的处理时间和一个帧的形成时间。\n     \n     \n\n4. **滑动窗口协议**\n   - 流量控制：发送方在收到应答消息前可以发送多个帧。接收方使用一个确认（ACK）帧来对多个帧的接收进行确认。具体可以接受多少帧视窗口大小而定。\n     - 回退n自动重复请求\n     - 选择拒绝自动重复请求：窗口尺寸小于等于$n/2$。","slug":"计网第四章-数据链路层","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdip004nzl9kautecz9p","content":"<h2 id=\"第四章-数据链路层\"><a class=\"markdownIt-Anchor\" href=\"#第四章-数据链路层\"></a> 第四章 数据链路层</h2>\n<ol>\n<li>\n<p>线路规程：</p>\n<ul>\n<li>\n<p>询问/确认模式</p>\n<ul>\n<li>\n<p>使用场合：一条链路的两端的设备级别相同，任意一个设备都可以启动一个会话过程</p>\n</li>\n<li>\n<p>工作方式：启动方首先发送一个询问帧（ENQ）询问接收方是否可以接收数据。接收方如果已经准备好接收，必须回答一个确认帧（ACK）。一旦讲所有数据发送完毕，发送系统以一个传输结束帧（EOT）结束传输</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>轮询/选择模式\n<ul>\n<li>使用场合：在有一个设备作为主设备，其他设备为从设备的多点连接系统</li>\n<li>工作方式</li>\n<li>选择：当主设备有数据发送时就采用选择模式。在发送数据前，主设备产生并发送一个选择帧（SEL），并在帧的地址域中填入接收数据的从设备的地址。如果从设备是激活的并且正在运行，其地址和选择帧中的地址域中的地址相同，它向主设备返回一个确认帧（ACK）。</li>\n<li>轮询：轮询功能是主设备请求从设备进行传输。在没有接到请求前，从设备是不允许发送数据的。当主设备收到否认帧，主设备就轮询下一个从设备，直到他发现一个要发送的从设备为止。当回应是数据帧时，从设备读入该帧并向从设备返回一个确认帧来确认已经接收。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>流量控制与差错控制</p>\n<ul>\n<li>自动重复请求（ARQ）：数据帧在传输中出现错误，接收方就返回一个否定应答帧（NAK），出错的帧就会被发送方重新传送。这个过程叫做自动重复请求。</li>\n<li>数据被重传的情况有三种：<strong>帧破坏、帧丢失和应答帧丢失</strong></li>\n<li>流量控制和差错控制是结合在一起实现的。</li>\n</ul>\n</li>\n<li>\n<p><strong>停止等待协议</strong></p>\n<ul>\n<li>\n<p>发送方每发送一帧后就等待应答。只有收到一个应答帧（ACK）后，才发送下一个帧。直到发送方发送一个传输结束帧（也就是线路上只有一帧）</p>\n</li>\n<li>\n<p>完成一帧发送所需最短的时间</p>\n<ul>\n<li>\n<p>一个窗口时间<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">WT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mi>p</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">WT=t_1+2t_p+2t_{Proc}+t_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9305479999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</p>\n<p><em>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是发送一个数据帧的时间，设一个数据帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub><mo>=</mo><msub><mi>L</mi><mi>f</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_I=L_f/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒。</em></p>\n<p><em><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是确认帧的发送时间，设一个确认帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>S</mi></msub><mo>=</mo><msub><mi>L</mi><mi>S</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_S=L_S/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒。</em></p>\n<p><em><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9011879999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>是电信号在物理链路上的传播延迟。</em></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">t_{Proc}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是收到一帧的处理时间和一个帧的形成时间。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>滑动窗口协议</strong></p>\n<ul>\n<li>流量控制：发送方在收到应答消息前可以发送多个帧。接收方使用一个确认（ACK）帧来对多个帧的接收进行确认。具体可以接受多少帧视窗口大小而定。\n<ul>\n<li>回退n自动重复请求</li>\n<li>选择拒绝自动重复请求：窗口尺寸小于等于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第四章-数据链路层\"><a class=\"markdownIt-Anchor\" href=\"#第四章-数据链路层\"></a> 第四章 数据链路层</h2>\n<ol>\n<li>\n<p>线路规程：</p>\n<ul>\n<li>\n<p>询问/确认模式</p>\n<ul>\n<li>\n<p>使用场合：一条链路的两端的设备级别相同，任意一个设备都可以启动一个会话过程</p>\n</li>\n<li>\n<p>工作方式：启动方首先发送一个询问帧（ENQ）询问接收方是否可以接收数据。接收方如果已经准备好接收，必须回答一个确认帧（ACK）。一旦讲所有数据发送完毕，发送系统以一个传输结束帧（EOT）结束传输</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>轮询/选择模式\n<ul>\n<li>使用场合：在有一个设备作为主设备，其他设备为从设备的多点连接系统</li>\n<li>工作方式</li>\n<li>选择：当主设备有数据发送时就采用选择模式。在发送数据前，主设备产生并发送一个选择帧（SEL），并在帧的地址域中填入接收数据的从设备的地址。如果从设备是激活的并且正在运行，其地址和选择帧中的地址域中的地址相同，它向主设备返回一个确认帧（ACK）。</li>\n<li>轮询：轮询功能是主设备请求从设备进行传输。在没有接到请求前，从设备是不允许发送数据的。当主设备收到否认帧，主设备就轮询下一个从设备，直到他发现一个要发送的从设备为止。当回应是数据帧时，从设备读入该帧并向从设备返回一个确认帧来确认已经接收。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>流量控制与差错控制</p>\n<ul>\n<li>自动重复请求（ARQ）：数据帧在传输中出现错误，接收方就返回一个否定应答帧（NAK），出错的帧就会被发送方重新传送。这个过程叫做自动重复请求。</li>\n<li>数据被重传的情况有三种：<strong>帧破坏、帧丢失和应答帧丢失</strong></li>\n<li>流量控制和差错控制是结合在一起实现的。</li>\n</ul>\n</li>\n<li>\n<p><strong>停止等待协议</strong></p>\n<ul>\n<li>\n<p>发送方每发送一帧后就等待应答。只有收到一个应答帧（ACK）后，才发送下一个帧。直到发送方发送一个传输结束帧（也就是线路上只有一帧）</p>\n</li>\n<li>\n<p>完成一帧发送所需最短的时间</p>\n<ul>\n<li>\n<p>一个窗口时间<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">WT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span>。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mi>p</mi></msub><mo>+</mo><mn>2</mn><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub><mo>+</mo><msub><mi>t</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">WT=t_1+2t_p+2t_{Proc}+t_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9305479999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</p>\n<p><em>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是发送一个数据帧的时间，设一个数据帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>I</mi></msub><mo>=</mo><msub><mi>L</mi><mi>f</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_I=L_f/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒。</em></p>\n<p><em><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是确认帧的发送时间，设一个确认帧的长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>L</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>比特，发送数据速率为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>bps，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>S</mi></msub><mo>=</mo><msub><mi>L</mi><mi>S</mi></msub><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">t_S=L_S/C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>秒。</em></p>\n<p><em><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9011879999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>是电信号在物理链路上的传播延迟。</em></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">t_{Proc}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是收到一帧的处理时间和一个帧的形成时间。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>滑动窗口协议</strong></p>\n<ul>\n<li>流量控制：发送方在收到应答消息前可以发送多个帧。接收方使用一个确认（ACK）帧来对多个帧的接收进行确认。具体可以接受多少帧视窗口大小而定。\n<ul>\n<li>回退n自动重复请求</li>\n<li>选择拒绝自动重复请求：窗口尺寸小于等于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"链表代码","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"链表代码整理","abbrlink":"d09f","date":"2020-08-26T13:14:06.000Z","password":null,"_content":"\n## 链表相关代码\n\n> #### 1.单链表结点类型描述\n```c\ntypedef struct LNode{     //定义单链表结点类型\n    int data;             //数据域\n    struct LNode *next;   //指针域，指向下一个结点的指针\n}LNode,*LinkList;         //LNode是结构体的别名，用LNode即可代替typedef struct LNode\n                          //LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next\n```\n\n\n> #### 2.链表创建（头插法）\n>\n> 每个结点插入的时间为$O(1)$，设单链表长度为n，则总时间复杂度为$O(n)$\n\n> - `sizeof`函数计算数据（包括数组、变量、类型、结构体等）所占内存空间，用字节数表示\n> - `malloc`函数用于在内存开辟了一段地址，而这段地址的首地址存在返回的那个指针变量里，由于不知道到底这段地址有多长，可以存什么变量，所以它的类型是空的，你可以强制类型转换，使其变成确定长度，固定存放一种数据类型的地址，而不管它是哪种类型，其首地址还是原来那个，还是存在一个指针变量中，指针变量就是放指针的嘛，指针是一个地址，指针变量是一个我们定义的，用来放那个地址的变量。\n>\n> **那么代码的意思就是说：**\n>\n> - 分配一个内存，大小是LNode的大小，并将这个内存地址转化为Linklist型，然后将赋给L，所以L为地址。是给L赋值，也就是L被改为指向malloc()新分配的地址\n>\n```c\nLinkList CreatList(LinkList &L){\n    LNode *s;\n    int x;                                  //待插入的数据x\n    L = (LinkList)malloc(sizeof(LNode));    //创建LNode型头结点，并强制转换成LinkList类型，头结点\n                                            //L是一个指针的地址，所以要转化成指针类型\n    L -> next = NULL;                       //初始为空链表\n    scanf(\"%d\",x);                          //输入结点的值\n    while(x!=9999){                         //输入9999表示结束\n        //申请一个LNode大小的空间,得到的指针强制转换为指向Lnode类型的指针,然后赋值给s\n        s = (LNode*)malloc(sizeof(LNode));  //创建新节点，这句话的作用是由系统生成一个LNode型链表\n                                            //的结点，同时将该结点的起始位置赋给指针变量s\n                                            //，s为LNode型的指针\n        s -> data = x;                      //赋值\n        s ->next = L -> next;\n        L -> next = s;                      //将新结点插入表中，L为头指针，注意头插法的代码顺序\n        scanf(\"%d\",&x)                      //继续输入值\n    }\n    return L;\n}\n```\n\n> #### 3.链表创建（尾插法）\n>\n> 每个结点插入的时间为$O(1)$，设单链表长度为n，则总时间复杂度为$O(n)$\n\n```c\nLinkList CreatList(LinkList &L){\n    int x;                                  //待插入数据\n    L = (LinkList)maclloc(sizeof(LNode));   //创建头结点\n    LNode *s, *r = L;                       //r为表尾指针\n    scanf(\"%d\",x);                          //输入结点的值\n    while(x!=9999){\n        s = (LNode*)malloc(sizeof(LNode));  //创建新结点\n        s -> data = x;                      //赋值\n        r -> next = s;                      //尾插法，插入的结点在尾指针的后边\n        r = s;                              //尾指针r再指向新插入尾部的结点s\n        scanf(\"%d\",&x);                     //继续输入值\n    }\n    r -> next = NULL;                       //尾结点指针置空\n    return L;\n}\n```\n\n> #### 4.链表的排序（**重点**）不理解，要复习\n\n```c\nvoid sort(LinkList &L){\n    LNode *p = L -> next, *pre;\n    LNode *r = p -> next;\n    p -> next = NULL;\n    p = r;\n    while(p!=NULL){\n        r = p -> next;\n        pre = L;\n        while(pre->next != NULL && pre->next->data < p->data){\n            pre = pre -> next;\n        }\n        p -> next = pre -> next;\n        pre -> next = p;\n        p = r;\n    }\n}\n```\n\n> #### 5.链表的插入\n\n- 将元素x插入到第n个位置上，需要先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i-1个结点，再在其后插入新结点（链表带头结点）\n\n  ```c\n  bool Insert(LinkList &L,int n,int e){             //链表L引用型\n      LNode *pre = L,*p = L->next;                  //LNode型pre指针指向头结点L，p指针指向next\n      int i = 1;                                    //开始计数\n      while(i<n && p){\n          pre = p;                                  //直到到达n，找到前驱pre\n          p = p -> next;\n          i++\n      }\n      if(i == n){\n          LNode *s = (LNode*)malloc(sizeof(LNode)); //新建指针s指向结点\n          s -> data = e;                            //赋值为e\n          s -> next = pre -> next;                  //新插入的s的后继指向pre的后继\n          pre -> next = s;                          //pre的后继指向s\n          return true;                              //完成插入\n      }else{\n          return false;\n      }\n  }\n  ```\n\n- 将元素x插入到有序链表中，使其仍然有序（链表带头结点）\n\n  ```c\n  void Insert(LinkList &L, int e){\n      LNode *pre = L,*p = L->next;\n      while(p){                                     //判断p指针的数据和元素e的大小\n          if(p->data < e){\n              pre = p;                              //直到找到\n              p = p -> next;\n          }else{\n              break;                                //当找到后，跳出循环\n          }\n      }\n      LNode *s = (LNode*)malloc(sizeof(LNode));     //分配s指针的结点\n      s -> data = e;                                //插入数据\n      s -> next = pre -> next;\n      pre ->next = s;\n  }\n  ```\n\n> #### 5.链表的删除\n\n- 删除链表中值为x的结点\n\n  ```c\n  void Del(LinkList &L,int x){\n      LNode *pre = L;                   //pre指针指向头结点\n      LNode *p = L -> next;             //p指针指向头结点的next\n      while(p){                         //p不为空时\n          if(p->data != x){             //如果没有查询到\n              pre = p;                  //两个指针依次往后移\n              p = p -> next;\n          }else{                        //直到p指针的值与x的相同\n              pre -> next = p -> next;  //删除节点\n              free(p);                  //free多余的结点\n              p = pre -> next;\n          }\n      }\n      return L;\n  }\n  ```\n\n- 删除链表中最大值的结点（多加入两个确定最大值的指针即可）\n\n  ```c\n  LinkList Del(LinkList &L, int x){\n      LNode *pre = L, *p = L -> next, *mpre = pre, *mp = p; //建立结点\n      while(p){\n          if(p->data > mp->data){                           //比较数据的大小\n              mpre = pre;                                   //如果大于，最大值指向p\n              mp = p;\n          }\n          pre = p;                                          //一次往后查找\n          p = p -> next;\n      }\n      mpre -> next = mp -> next;                            //删除节点\n      free(mp);\n      return L;\n  }\n  ```\n\n- 删除**有序**链表中重复值节点\n\n  ```c\n  LinkList Del(LinkList &L, int x){\n      LNode *pre = L, *p = L -> next;\n      while(p){\n          if(pre->next && pre->next->data == p->data){\n              pre -> next = p -> next;\n              free(p);\n              p = pre -> next;\n          }else{\n              pre = p;\n              p = p -> next;\n          }\n      }\n      return L;\n  }\n  ```\n\n> #### 6. 链表的逆置\n\n- 将链表L的所有结点逆置（采用头插法）\n\n  ```c\n  LinkList Inversion(LinkList &L){\n      LNode *p = L -> next, *r;\n      L -> next = NULL;\n      while(p){\n          r = p -> next;\n          p -> next = L -> next;\n          L -> next = p;\n          p = r;\n      }\n      return L;\n  }\n  ```\n\n> #### 7. 链表的合并\n\n- 将两个有序链表合并为一个有序链表\n\n  ```c\n  LinkList Merge(LinkList &L1, LinkList &L2){\n      LNode *p = L1 -> next, *q = L2 -> next, *r = L1;\n      L1 -> next = NULL;\n      while(p && q){\n          if(p->data < q->data){\n              r -> next = p;\n              r = p;\n              p = p -> next;\n          }else{\n              r -> next = q;\n              r = q;\n              q = q -> next;\n          }\n      }\n      return L1;\n  }\n  ```\n\n- 将两个有序链表合并为一个有序链表（取交集）\n\n  ```c\n  LinkList Merge(LinkList &L1, LinkList &L2){\n      LNode *p = L1 -> next, *q = L2 -> next, *r = L1;\n      L1 -> next = NULL;\n      while(p && q){\n          if(p->data < q->data){\n              p = p -> next;\n          }else if(p->data > q->data){\n              q = q -> next;\n          }else{\n              r -> next = p;\n              r = p;\n              p = p -> next;\n              q = q -> next;\n          }\n      }\n      return L1;\n  }\n  ```\n\n- 将两个有序链表合并为一个有序链表（并集）\n\n  ```c\n  LinkList Merge(LinkList &L1, LinkList &L2){\n      LNode *p = L1 -> next, *q = L2 -> next, *r = L1;\n      L1 -> next = NULL;\n      while(p && q){\n          if(p->data < q->data){\n              r -> next = p;\n              r = p;\n              p = p -> next;\n          }else if(p->data > q->data){\n              r -> next = p;\n              r = q;\n              q = q -> next;\n          }else{\n              r -> next = p;\n              r = p;\n              p = p -> next;\n              q = q -> next;\n          }\n      }\n      while(p){\n          r -> next = p;\n      }\n      while(q){\n          r -> next = q;\n      }\n      return L1;\n  }\n  ```\n\n> #### 8. 链表拆分问题\n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得`A={a1,a2,...,an},B={bn,...,b2,b1}`\n\n  ```c\n  LinkList Merge(LinkList &L){\n      LNode *p = L -> next, *r;\n      int i = 1;\n      LinkList A = L, *s = A;                      //尾插需要个尾指针，指向头指针\n      LinkList B = (LNode*)malloc(sizeof(LNode));  //创建B表表头\n      B -> next = NULL;                            //B表的初始化\n      while(p){\n          r = p -> next;\n          if(i%2 == 1){                            //基数位时\n              s -> next = p;                       //尾插法，正序\n              s = p;\n              p = r;\n              i++;\n          }else{                                   //偶数时\n              p -> next = B -> next;               //头插法，因为要倒序\n              B -> next = p;                      \n              p = r;\n              i++;\n          }\n      }\n      s -> next =NULL;\n      return A,B;\n}\n  ```\n  \n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，计一个就地算法，讲其拆分为两个线性表，使得`A={a1,a2,...,an},B={b1,...,bn-1,bn}`\n\n  - 与上一题相比，只有链表B变为尾插（保证正序即可）\n\n  ```c\n  LinkList Merge(LinkList &L){\n      LNode *p = L -> next, *r;\n      int i = 1;\n      LinkList A = L; *s = A;\n      LinkList B = (LNode*)malloc(sizeof(LNode)), *s1 = b;  //创建B表表头,并指向头指针\n      while(p){\n          r = p -> next;\n          if(i%2 == 1){                            //基数位时\n              s -> next = p;                       //尾插法，正序\n              s = p;\n              p = r;\n              i++;\n          }else{                                   //偶数时\n              s1 -> next = p;                       //尾插法，正序\n              s = p;\n              p = r;\n              i++;\n          }\n      }\n      s -> next =NULL;\n      s1 -> next =NULL;\n      return A,B;\n  }\n  ```\n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得`A={an,an-1,...,a1},B={bn,...,b2,b1}`\n\n  ```c\n  LinkList Merge(LinkList &L){\n      LNode *p = L -> next, *r;\n      int i = 1;\n      LinkList A = L; \n      LinkList B = (LNode*)malloc(sizeof(LNode));  //创建B表表头\n      A -> next = NULL;\n      A -> next = NULL;\n      while(p){\n          r = p -> next;\n          if(i%2 == 1){                            //基数位时\n              p -> next = A -> next;               //头插法，因为要倒序\n              A -> next = p;                      \n              p = r;\n              i++;\n          }else{                                   //偶数时\n              p -> next = B -> next;               //头插法，因为要倒序\n              B -> next = p;                      \n              p = r;\n              i++;\n          }\n      }\n      return A,B;\n  }\n  ```\n\n> #### 9. 判断两个链表是否有相同结点（找出相同结点）\n\n```c\nint Length(LinkList &L){  //计算链表长度\n    int num = 0;\n    while(L != NULL){\n        num++;\n        L = L -> next;\n    }\n    return num;\n}\nbool Judeg(LinkList &L1, LinkList &L2){\n    int len1 = Length(L1);\n    int len2 = Length(L2);\n    if(len1 > len2){                   //让两个链表拥有相同的尾部长度\n        int num = len1 - len2;\n        for(int i = 0; i < num; i++){\n            L1 = L1 -> next;\n        }\n    }else{\n        int num = len2 - len1;\n        for(int i = 0; i < num; i++){\n            L2 = L2 -> next;\n    }\n    while(L1){\n        if(L1 == L2){\n            return 1;\n        }\n        L1 = L1 -> next;\n        L2 = L2 -> next;\n    }\n    return 0;\n}\n```\n\n> #### 10. 栈的基本操作\n\n- 栈的顺序存储类型描述\n\n  ```c\n  #define Maxsize 50       //定义栈中元素的最大个数\n  typedef struct{\n      int data[Maxsize];   //存放栈中元素\n      int top;             //栈顶指针\n  }SqStack;\n  ```\n\n- 初始化\n\n  ```c\n  void InitStack(Sqstack &S){\n      S.top = -1;               //初始化栈顶指针\n  }\n  ```\n\n- 判断栈空\n\n  ```c\n  bool StackEmpty(S){\n      if(S.top == -1){\n          return true;\n      }else{\n          return false;\n      }\n  }\n  ```\n\n- 进栈\n\n  ```c\n  bool Push(SqStack &S, int x){\n      if(S.top == MaxSize - 1){\n          return false;\n      }\n      S.data[++S.top] = x;       //指针先加1，再入栈\n      return true;\n  }\n  ```\n\n- 出栈\n\n  ```c\n  bool Pop（SqStack &S, int &x){\n      if(S.top == -1){\n          return false;\n      }\n      x = S.data[S.top--];\n      return true;\n  }\n  ```\n\n- 读栈顶元素\n\n  ```c\n  bool GetTop(SqStack S, int &x){\n      if(S.top == MaxSize - 1){\n          return false;\n      }\n      x = S.data[S.top];\n      return true;\n  }\n  ```\n","source":"_posts/链表代码.md","raw":"---\ntitle: 链表代码\ntop: false\ncover: false\ntoc: false\nmathjax: true\ntags:\n  - 代码\n  - 考研\n  - 链表\ncategories:\n  - 代码\nsummary: 链表代码整理\nabbrlink: d09f\ndate: 2020-08-26 21:14:06\npassword:\n---\n\n## 链表相关代码\n\n> #### 1.单链表结点类型描述\n```c\ntypedef struct LNode{     //定义单链表结点类型\n    int data;             //数据域\n    struct LNode *next;   //指针域，指向下一个结点的指针\n}LNode,*LinkList;         //LNode是结构体的别名，用LNode即可代替typedef struct LNode\n                          //LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next\n```\n\n\n> #### 2.链表创建（头插法）\n>\n> 每个结点插入的时间为$O(1)$，设单链表长度为n，则总时间复杂度为$O(n)$\n\n> - `sizeof`函数计算数据（包括数组、变量、类型、结构体等）所占内存空间，用字节数表示\n> - `malloc`函数用于在内存开辟了一段地址，而这段地址的首地址存在返回的那个指针变量里，由于不知道到底这段地址有多长，可以存什么变量，所以它的类型是空的，你可以强制类型转换，使其变成确定长度，固定存放一种数据类型的地址，而不管它是哪种类型，其首地址还是原来那个，还是存在一个指针变量中，指针变量就是放指针的嘛，指针是一个地址，指针变量是一个我们定义的，用来放那个地址的变量。\n>\n> **那么代码的意思就是说：**\n>\n> - 分配一个内存，大小是LNode的大小，并将这个内存地址转化为Linklist型，然后将赋给L，所以L为地址。是给L赋值，也就是L被改为指向malloc()新分配的地址\n>\n```c\nLinkList CreatList(LinkList &L){\n    LNode *s;\n    int x;                                  //待插入的数据x\n    L = (LinkList)malloc(sizeof(LNode));    //创建LNode型头结点，并强制转换成LinkList类型，头结点\n                                            //L是一个指针的地址，所以要转化成指针类型\n    L -> next = NULL;                       //初始为空链表\n    scanf(\"%d\",x);                          //输入结点的值\n    while(x!=9999){                         //输入9999表示结束\n        //申请一个LNode大小的空间,得到的指针强制转换为指向Lnode类型的指针,然后赋值给s\n        s = (LNode*)malloc(sizeof(LNode));  //创建新节点，这句话的作用是由系统生成一个LNode型链表\n                                            //的结点，同时将该结点的起始位置赋给指针变量s\n                                            //，s为LNode型的指针\n        s -> data = x;                      //赋值\n        s ->next = L -> next;\n        L -> next = s;                      //将新结点插入表中，L为头指针，注意头插法的代码顺序\n        scanf(\"%d\",&x)                      //继续输入值\n    }\n    return L;\n}\n```\n\n> #### 3.链表创建（尾插法）\n>\n> 每个结点插入的时间为$O(1)$，设单链表长度为n，则总时间复杂度为$O(n)$\n\n```c\nLinkList CreatList(LinkList &L){\n    int x;                                  //待插入数据\n    L = (LinkList)maclloc(sizeof(LNode));   //创建头结点\n    LNode *s, *r = L;                       //r为表尾指针\n    scanf(\"%d\",x);                          //输入结点的值\n    while(x!=9999){\n        s = (LNode*)malloc(sizeof(LNode));  //创建新结点\n        s -> data = x;                      //赋值\n        r -> next = s;                      //尾插法，插入的结点在尾指针的后边\n        r = s;                              //尾指针r再指向新插入尾部的结点s\n        scanf(\"%d\",&x);                     //继续输入值\n    }\n    r -> next = NULL;                       //尾结点指针置空\n    return L;\n}\n```\n\n> #### 4.链表的排序（**重点**）不理解，要复习\n\n```c\nvoid sort(LinkList &L){\n    LNode *p = L -> next, *pre;\n    LNode *r = p -> next;\n    p -> next = NULL;\n    p = r;\n    while(p!=NULL){\n        r = p -> next;\n        pre = L;\n        while(pre->next != NULL && pre->next->data < p->data){\n            pre = pre -> next;\n        }\n        p -> next = pre -> next;\n        pre -> next = p;\n        p = r;\n    }\n}\n```\n\n> #### 5.链表的插入\n\n- 将元素x插入到第n个位置上，需要先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i-1个结点，再在其后插入新结点（链表带头结点）\n\n  ```c\n  bool Insert(LinkList &L,int n,int e){             //链表L引用型\n      LNode *pre = L,*p = L->next;                  //LNode型pre指针指向头结点L，p指针指向next\n      int i = 1;                                    //开始计数\n      while(i<n && p){\n          pre = p;                                  //直到到达n，找到前驱pre\n          p = p -> next;\n          i++\n      }\n      if(i == n){\n          LNode *s = (LNode*)malloc(sizeof(LNode)); //新建指针s指向结点\n          s -> data = e;                            //赋值为e\n          s -> next = pre -> next;                  //新插入的s的后继指向pre的后继\n          pre -> next = s;                          //pre的后继指向s\n          return true;                              //完成插入\n      }else{\n          return false;\n      }\n  }\n  ```\n\n- 将元素x插入到有序链表中，使其仍然有序（链表带头结点）\n\n  ```c\n  void Insert(LinkList &L, int e){\n      LNode *pre = L,*p = L->next;\n      while(p){                                     //判断p指针的数据和元素e的大小\n          if(p->data < e){\n              pre = p;                              //直到找到\n              p = p -> next;\n          }else{\n              break;                                //当找到后，跳出循环\n          }\n      }\n      LNode *s = (LNode*)malloc(sizeof(LNode));     //分配s指针的结点\n      s -> data = e;                                //插入数据\n      s -> next = pre -> next;\n      pre ->next = s;\n  }\n  ```\n\n> #### 5.链表的删除\n\n- 删除链表中值为x的结点\n\n  ```c\n  void Del(LinkList &L,int x){\n      LNode *pre = L;                   //pre指针指向头结点\n      LNode *p = L -> next;             //p指针指向头结点的next\n      while(p){                         //p不为空时\n          if(p->data != x){             //如果没有查询到\n              pre = p;                  //两个指针依次往后移\n              p = p -> next;\n          }else{                        //直到p指针的值与x的相同\n              pre -> next = p -> next;  //删除节点\n              free(p);                  //free多余的结点\n              p = pre -> next;\n          }\n      }\n      return L;\n  }\n  ```\n\n- 删除链表中最大值的结点（多加入两个确定最大值的指针即可）\n\n  ```c\n  LinkList Del(LinkList &L, int x){\n      LNode *pre = L, *p = L -> next, *mpre = pre, *mp = p; //建立结点\n      while(p){\n          if(p->data > mp->data){                           //比较数据的大小\n              mpre = pre;                                   //如果大于，最大值指向p\n              mp = p;\n          }\n          pre = p;                                          //一次往后查找\n          p = p -> next;\n      }\n      mpre -> next = mp -> next;                            //删除节点\n      free(mp);\n      return L;\n  }\n  ```\n\n- 删除**有序**链表中重复值节点\n\n  ```c\n  LinkList Del(LinkList &L, int x){\n      LNode *pre = L, *p = L -> next;\n      while(p){\n          if(pre->next && pre->next->data == p->data){\n              pre -> next = p -> next;\n              free(p);\n              p = pre -> next;\n          }else{\n              pre = p;\n              p = p -> next;\n          }\n      }\n      return L;\n  }\n  ```\n\n> #### 6. 链表的逆置\n\n- 将链表L的所有结点逆置（采用头插法）\n\n  ```c\n  LinkList Inversion(LinkList &L){\n      LNode *p = L -> next, *r;\n      L -> next = NULL;\n      while(p){\n          r = p -> next;\n          p -> next = L -> next;\n          L -> next = p;\n          p = r;\n      }\n      return L;\n  }\n  ```\n\n> #### 7. 链表的合并\n\n- 将两个有序链表合并为一个有序链表\n\n  ```c\n  LinkList Merge(LinkList &L1, LinkList &L2){\n      LNode *p = L1 -> next, *q = L2 -> next, *r = L1;\n      L1 -> next = NULL;\n      while(p && q){\n          if(p->data < q->data){\n              r -> next = p;\n              r = p;\n              p = p -> next;\n          }else{\n              r -> next = q;\n              r = q;\n              q = q -> next;\n          }\n      }\n      return L1;\n  }\n  ```\n\n- 将两个有序链表合并为一个有序链表（取交集）\n\n  ```c\n  LinkList Merge(LinkList &L1, LinkList &L2){\n      LNode *p = L1 -> next, *q = L2 -> next, *r = L1;\n      L1 -> next = NULL;\n      while(p && q){\n          if(p->data < q->data){\n              p = p -> next;\n          }else if(p->data > q->data){\n              q = q -> next;\n          }else{\n              r -> next = p;\n              r = p;\n              p = p -> next;\n              q = q -> next;\n          }\n      }\n      return L1;\n  }\n  ```\n\n- 将两个有序链表合并为一个有序链表（并集）\n\n  ```c\n  LinkList Merge(LinkList &L1, LinkList &L2){\n      LNode *p = L1 -> next, *q = L2 -> next, *r = L1;\n      L1 -> next = NULL;\n      while(p && q){\n          if(p->data < q->data){\n              r -> next = p;\n              r = p;\n              p = p -> next;\n          }else if(p->data > q->data){\n              r -> next = p;\n              r = q;\n              q = q -> next;\n          }else{\n              r -> next = p;\n              r = p;\n              p = p -> next;\n              q = q -> next;\n          }\n      }\n      while(p){\n          r -> next = p;\n      }\n      while(q){\n          r -> next = q;\n      }\n      return L1;\n  }\n  ```\n\n> #### 8. 链表拆分问题\n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得`A={a1,a2,...,an},B={bn,...,b2,b1}`\n\n  ```c\n  LinkList Merge(LinkList &L){\n      LNode *p = L -> next, *r;\n      int i = 1;\n      LinkList A = L, *s = A;                      //尾插需要个尾指针，指向头指针\n      LinkList B = (LNode*)malloc(sizeof(LNode));  //创建B表表头\n      B -> next = NULL;                            //B表的初始化\n      while(p){\n          r = p -> next;\n          if(i%2 == 1){                            //基数位时\n              s -> next = p;                       //尾插法，正序\n              s = p;\n              p = r;\n              i++;\n          }else{                                   //偶数时\n              p -> next = B -> next;               //头插法，因为要倒序\n              B -> next = p;                      \n              p = r;\n              i++;\n          }\n      }\n      s -> next =NULL;\n      return A,B;\n}\n  ```\n  \n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，计一个就地算法，讲其拆分为两个线性表，使得`A={a1,a2,...,an},B={b1,...,bn-1,bn}`\n\n  - 与上一题相比，只有链表B变为尾插（保证正序即可）\n\n  ```c\n  LinkList Merge(LinkList &L){\n      LNode *p = L -> next, *r;\n      int i = 1;\n      LinkList A = L; *s = A;\n      LinkList B = (LNode*)malloc(sizeof(LNode)), *s1 = b;  //创建B表表头,并指向头指针\n      while(p){\n          r = p -> next;\n          if(i%2 == 1){                            //基数位时\n              s -> next = p;                       //尾插法，正序\n              s = p;\n              p = r;\n              i++;\n          }else{                                   //偶数时\n              s1 -> next = p;                       //尾插法，正序\n              s = p;\n              p = r;\n              i++;\n          }\n      }\n      s -> next =NULL;\n      s1 -> next =NULL;\n      return A,B;\n  }\n  ```\n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得`A={an,an-1,...,a1},B={bn,...,b2,b1}`\n\n  ```c\n  LinkList Merge(LinkList &L){\n      LNode *p = L -> next, *r;\n      int i = 1;\n      LinkList A = L; \n      LinkList B = (LNode*)malloc(sizeof(LNode));  //创建B表表头\n      A -> next = NULL;\n      A -> next = NULL;\n      while(p){\n          r = p -> next;\n          if(i%2 == 1){                            //基数位时\n              p -> next = A -> next;               //头插法，因为要倒序\n              A -> next = p;                      \n              p = r;\n              i++;\n          }else{                                   //偶数时\n              p -> next = B -> next;               //头插法，因为要倒序\n              B -> next = p;                      \n              p = r;\n              i++;\n          }\n      }\n      return A,B;\n  }\n  ```\n\n> #### 9. 判断两个链表是否有相同结点（找出相同结点）\n\n```c\nint Length(LinkList &L){  //计算链表长度\n    int num = 0;\n    while(L != NULL){\n        num++;\n        L = L -> next;\n    }\n    return num;\n}\nbool Judeg(LinkList &L1, LinkList &L2){\n    int len1 = Length(L1);\n    int len2 = Length(L2);\n    if(len1 > len2){                   //让两个链表拥有相同的尾部长度\n        int num = len1 - len2;\n        for(int i = 0; i < num; i++){\n            L1 = L1 -> next;\n        }\n    }else{\n        int num = len2 - len1;\n        for(int i = 0; i < num; i++){\n            L2 = L2 -> next;\n    }\n    while(L1){\n        if(L1 == L2){\n            return 1;\n        }\n        L1 = L1 -> next;\n        L2 = L2 -> next;\n    }\n    return 0;\n}\n```\n\n> #### 10. 栈的基本操作\n\n- 栈的顺序存储类型描述\n\n  ```c\n  #define Maxsize 50       //定义栈中元素的最大个数\n  typedef struct{\n      int data[Maxsize];   //存放栈中元素\n      int top;             //栈顶指针\n  }SqStack;\n  ```\n\n- 初始化\n\n  ```c\n  void InitStack(Sqstack &S){\n      S.top = -1;               //初始化栈顶指针\n  }\n  ```\n\n- 判断栈空\n\n  ```c\n  bool StackEmpty(S){\n      if(S.top == -1){\n          return true;\n      }else{\n          return false;\n      }\n  }\n  ```\n\n- 进栈\n\n  ```c\n  bool Push(SqStack &S, int x){\n      if(S.top == MaxSize - 1){\n          return false;\n      }\n      S.data[++S.top] = x;       //指针先加1，再入栈\n      return true;\n  }\n  ```\n\n- 出栈\n\n  ```c\n  bool Pop（SqStack &S, int &x){\n      if(S.top == -1){\n          return false;\n      }\n      x = S.data[S.top--];\n      return true;\n  }\n  ```\n\n- 读栈顶元素\n\n  ```c\n  bool GetTop(SqStack S, int &x){\n      if(S.top == MaxSize - 1){\n          return false;\n      }\n      x = S.data[S.top];\n      return true;\n  }\n  ```\n","slug":"链表代码","published":1,"updated":"2020-08-30T13:46:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdip004rzl9k0f6x4b09","content":"<h2 id=\"链表相关代码\"><a class=\"markdownIt-Anchor\" href=\"#链表相关代码\"></a> 链表相关代码</h2>\n<blockquote>\n<h4 id=\"1单链表结点类型描述\"><a class=\"markdownIt-Anchor\" href=\"#1单链表结点类型描述\"></a> 1.单链表结点类型描述</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>{</span>     <span class=\"hljs-comment\">//定义单链表结点类型</span>\n    <span class=\"hljs-keyword\">int</span> data;             <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">next</span>;</span>   <span class=\"hljs-comment\">//指针域，指向下一个结点的指针</span>\n}LNode,*LinkList;         <span class=\"hljs-comment\">//LNode是结构体的别名，用LNode即可代替typedef struct LNode</span>\n                          <span class=\"hljs-comment\">//LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next</span>\n</code></pre>\n<blockquote>\n<h4 id=\"2链表创建头插法\"><a class=\"markdownIt-Anchor\" href=\"#2链表创建头插法\"></a> 2.链表创建（头插法）</h4>\n<p>每个结点插入的时间为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，设单链表长度为n，则总时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>sizeof</code>函数计算数据（包括数组、变量、类型、结构体等）所占内存空间，用字节数表示</li>\n<li><code>malloc</code>函数用于在内存开辟了一段地址，而这段地址的首地址存在返回的那个指针变量里，由于不知道到底这段地址有多长，可以存什么变量，所以它的类型是空的，你可以强制类型转换，使其变成确定长度，固定存放一种数据类型的地址，而不管它是哪种类型，其首地址还是原来那个，还是存在一个指针变量中，指针变量就是放指针的嘛，指针是一个地址，指针变量是一个我们定义的，用来放那个地址的变量。</li>\n</ul>\n<p><strong>那么代码的意思就是说：</strong></p>\n<ul>\n<li>分配一个内存，大小是LNode的大小，并将这个内存地址转化为Linklist型，然后将赋给L，所以L为地址。是给L赋值，也就是L被改为指向malloc()新分配的地址</li>\n</ul>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">CreatList</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *s;\n    <span class=\"hljs-keyword\">int</span> x;                                  <span class=\"hljs-comment\">//待插入的数据x</span>\n    L = (LinkList)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));    <span class=\"hljs-comment\">//创建LNode型头结点，并强制转换成LinkList类型，头结点</span>\n                                            <span class=\"hljs-comment\">//L是一个指针的地址，所以要转化成指针类型</span>\n    L -&gt; next = <span class=\"hljs-literal\">NULL</span>;                       <span class=\"hljs-comment\">//初始为空链表</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,x);                          <span class=\"hljs-comment\">//输入结点的值</span>\n    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">9999</span>){                         <span class=\"hljs-comment\">//输入9999表示结束</span>\n        <span class=\"hljs-comment\">//申请一个LNode大小的空间,得到的指针强制转换为指向Lnode类型的指针,然后赋值给s</span>\n        s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建新节点，这句话的作用是由系统生成一个LNode型链表</span>\n                                            <span class=\"hljs-comment\">//的结点，同时将该结点的起始位置赋给指针变量s</span>\n                                            <span class=\"hljs-comment\">//，s为LNode型的指针</span>\n        s -&gt; data = x;                      <span class=\"hljs-comment\">//赋值</span>\n        s -&gt;next = L -&gt; next;\n        L -&gt; next = s;                      <span class=\"hljs-comment\">//将新结点插入表中，L为头指针，注意头插法的代码顺序</span>\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;x)                      <span class=\"hljs-comment\">//继续输入值</span>\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"3链表创建尾插法\"><a class=\"markdownIt-Anchor\" href=\"#3链表创建尾插法\"></a> 3.链表创建（尾插法）</h4>\n<p>每个结点插入的时间为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，设单链表长度为n，则总时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">CreatList</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> x;                                  <span class=\"hljs-comment\">//待插入数据</span>\n    L = (LinkList)maclloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));   <span class=\"hljs-comment\">//创建头结点</span>\n    LNode *s, *r = L;                       <span class=\"hljs-comment\">//r为表尾指针</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,x);                          <span class=\"hljs-comment\">//输入结点的值</span>\n    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">9999</span>){\n        s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建新结点</span>\n        s -&gt; data = x;                      <span class=\"hljs-comment\">//赋值</span>\n        r -&gt; next = s;                      <span class=\"hljs-comment\">//尾插法，插入的结点在尾指针的后边</span>\n        r = s;                              <span class=\"hljs-comment\">//尾指针r再指向新插入尾部的结点s</span>\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;x);                     <span class=\"hljs-comment\">//继续输入值</span>\n    }\n    r -&gt; next = <span class=\"hljs-literal\">NULL</span>;                       <span class=\"hljs-comment\">//尾结点指针置空</span>\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4链表的排序重点不理解要复习\"><a class=\"markdownIt-Anchor\" href=\"#4链表的排序重点不理解要复习\"></a> 4.链表的排序（<strong>重点</strong>）不理解，要复习</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *pre;\n    LNode *r = p -&gt; next;\n    p -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    p = r;\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n        r = p -&gt; next;\n        pre = L;\n        <span class=\"hljs-keyword\">while</span>(pre-&gt;next != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;next-&gt;data &lt; p-&gt;data){\n            pre = pre -&gt; next;\n        }\n        p -&gt; next = pre -&gt; next;\n        pre -&gt; next = p;\n        p = r;\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5链表的插入\"><a class=\"markdownIt-Anchor\" href=\"#5链表的插入\"></a> 5.链表的插入</h4>\n</blockquote>\n<ul>\n<li>\n<p>将元素x插入到第n个位置上，需要先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i-1个结点，再在其后插入新结点（链表带头结点）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> e)</span></span>{             <span class=\"hljs-comment\">//链表L引用型</span>\n    LNode *pre = L,*p = L-&gt;next;                  <span class=\"hljs-comment\">//LNode型pre指针指向头结点L，p指针指向next</span>\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;                                    <span class=\"hljs-comment\">//开始计数</span>\n    <span class=\"hljs-keyword\">while</span>(i&lt;n &amp;&amp; p){\n        pre = p;                                  <span class=\"hljs-comment\">//直到到达n，找到前驱pre</span>\n        p = p -&gt; next;\n        i++\n    }\n    <span class=\"hljs-keyword\">if</span>(i == n){\n        LNode *s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode)); <span class=\"hljs-comment\">//新建指针s指向结点</span>\n        s -&gt; data = e;                            <span class=\"hljs-comment\">//赋值为e</span>\n        s -&gt; next = pre -&gt; next;                  <span class=\"hljs-comment\">//新插入的s的后继指向pre的后继</span>\n        pre -&gt; next = s;                          <span class=\"hljs-comment\">//pre的后继指向s</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;                              <span class=\"hljs-comment\">//完成插入</span>\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>将元素x插入到有序链表中，使其仍然有序（链表带头结点）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(LinkList &amp;L, <span class=\"hljs-keyword\">int</span> e)</span></span>{\n    LNode *pre = L,*p = L-&gt;next;\n    <span class=\"hljs-keyword\">while</span>(p){                                     <span class=\"hljs-comment\">//判断p指针的数据和元素e的大小</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; e){\n            pre = p;                              <span class=\"hljs-comment\">//直到找到</span>\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">break</span>;                                <span class=\"hljs-comment\">//当找到后，跳出循环</span>\n        }\n    }\n    LNode *s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));     <span class=\"hljs-comment\">//分配s指针的结点</span>\n    s -&gt; data = e;                                <span class=\"hljs-comment\">//插入数据</span>\n    s -&gt; next = pre -&gt; next;\n    pre -&gt;next = s;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"5链表的删除\"><a class=\"markdownIt-Anchor\" href=\"#5链表的删除\"></a> 5.链表的删除</h4>\n</blockquote>\n<ul>\n<li>\n<p>删除链表中值为x的结点</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> x)</span></span>{\n    LNode *pre = L;                   <span class=\"hljs-comment\">//pre指针指向头结点</span>\n    LNode *p = L -&gt; next;             <span class=\"hljs-comment\">//p指针指向头结点的next</span>\n    <span class=\"hljs-keyword\">while</span>(p){                         <span class=\"hljs-comment\">//p不为空时</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data != x){             <span class=\"hljs-comment\">//如果没有查询到</span>\n            pre = p;                  <span class=\"hljs-comment\">//两个指针依次往后移</span>\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{                        <span class=\"hljs-comment\">//直到p指针的值与x的相同</span>\n            pre -&gt; next = p -&gt; next;  <span class=\"hljs-comment\">//删除节点</span>\n            <span class=\"hljs-built_in\">free</span>(p);                  <span class=\"hljs-comment\">//free多余的结点</span>\n            p = pre -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n<li>\n<p>删除链表中最大值的结点（多加入两个确定最大值的指针即可）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(LinkList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    LNode *pre = L, *p = L -&gt; next, *mpre = pre, *mp = p; <span class=\"hljs-comment\">//建立结点</span>\n    <span class=\"hljs-keyword\">while</span>(p){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &gt; mp-&gt;data){                           <span class=\"hljs-comment\">//比较数据的大小</span>\n            mpre = pre;                                   <span class=\"hljs-comment\">//如果大于，最大值指向p</span>\n            mp = p;\n        }\n        pre = p;                                          <span class=\"hljs-comment\">//一次往后查找</span>\n        p = p -&gt; next;\n    }\n    mpre -&gt; next = mp -&gt; next;                            <span class=\"hljs-comment\">//删除节点</span>\n    <span class=\"hljs-built_in\">free</span>(mp);\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n<li>\n<p>删除<strong>有序</strong>链表中重复值节点</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(LinkList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    LNode *pre = L, *p = L -&gt; next;\n    <span class=\"hljs-keyword\">while</span>(p){\n        <span class=\"hljs-keyword\">if</span>(pre-&gt;next &amp;&amp; pre-&gt;next-&gt;data == p-&gt;data){\n            pre -&gt; next = p -&gt; next;\n            <span class=\"hljs-built_in\">free</span>(p);\n            p = pre -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            pre = p;\n            p = p -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"6-链表的逆置\"><a class=\"markdownIt-Anchor\" href=\"#6-链表的逆置\"></a> 6. 链表的逆置</h4>\n</blockquote>\n<ul>\n<li>\n<p>将链表L的所有结点逆置（采用头插法）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Inversion</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *r;\n    L -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p){\n        r = p -&gt; next;\n        p -&gt; next = L -&gt; next;\n        L -&gt; next = p;\n        p = r;\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"7-链表的合并\"><a class=\"markdownIt-Anchor\" href=\"#7-链表的合并\"></a> 7. 链表的合并</h4>\n</blockquote>\n<ul>\n<li>\n<p>将两个有序链表合并为一个有序链表</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    LNode *p = L1 -&gt; next, *q = L2 -&gt; next, *r = L1;\n    L1 -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p &amp;&amp; q){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; q-&gt;data){\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            r -&gt; next = q;\n            r = q;\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L1;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个有序链表合并为一个有序链表（取交集）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    LNode *p = L1 -&gt; next, *q = L2 -&gt; next, *r = L1;\n    L1 -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p &amp;&amp; q){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; q-&gt;data){\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p-&gt;data &gt; q-&gt;data){\n            q = q -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L1;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个有序链表合并为一个有序链表（并集）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    LNode *p = L1 -&gt; next, *q = L2 -&gt; next, *r = L1;\n    L1 -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p &amp;&amp; q){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; q-&gt;data){\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p-&gt;data &gt; q-&gt;data){\n            r -&gt; next = p;\n            r = q;\n            q = q -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(p){\n        r -&gt; next = p;\n    }\n    <span class=\"hljs-keyword\">while</span>(q){\n        r -&gt; next = q;\n    }\n    <span class=\"hljs-keyword\">return</span> L1;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"8-链表拆分问题\"><a class=\"markdownIt-Anchor\" href=\"#8-链表拆分问题\"></a> 8. 链表拆分问题</h4>\n</blockquote>\n<ul>\n<li>\n<p>设<code>C = {a1,b1,a2,b2,...,an,bn}</code>为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得<code>A={a1,a2,...,an},B={bn,...,b2,b1}</code></p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *r;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\n    LinkList A = L, *s = A;                      <span class=\"hljs-comment\">//尾插需要个尾指针，指向头指针</span>\n    LinkList B = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建B表表头</span>\n    B -&gt; next = <span class=\"hljs-literal\">NULL</span>;                            <span class=\"hljs-comment\">//B表的初始化</span>\n    <span class=\"hljs-keyword\">while</span>(p){\n        r = p -&gt; next;\n        <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>){                            <span class=\"hljs-comment\">//基数位时</span>\n            s -&gt; next = p;                       <span class=\"hljs-comment\">//尾插法，正序</span>\n            s = p;\n            p = r;\n            i++;\n        }<span class=\"hljs-keyword\">else</span>{                                   <span class=\"hljs-comment\">//偶数时</span>\n            p -&gt; next = B -&gt; next;               <span class=\"hljs-comment\">//头插法，因为要倒序</span>\n            B -&gt; next = p;                      \n            p = r;\n            i++;\n        }\n    }\n    s -&gt; next =<span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> A,B;\n</code></pre>\n</li>\n</ul>\n<p>}</p>\n<pre class=\"highlight\"><code class=\"\">\n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，计一个就地算法，讲其拆分为两个线性表，使得`A={a1,a2,...,an},B={b1,...,bn-1,bn}`\n\n- 与上一题相比，只有链表B变为尾插（保证正序即可）\n\n```c\nLinkList Merge(LinkList &amp;L){\n    LNode *p = L -&gt; next, *r;\n    int i = 1;\n    LinkList A = L; *s = A;\n    LinkList B = (LNode*)malloc(sizeof(LNode)), *s1 = b;  //创建B表表头,并指向头指针\n    while(p){\n        r = p -&gt; next;\n        if(i%2 == 1){                            //基数位时\n            s -&gt; next = p;                       //尾插法，正序\n            s = p;\n            p = r;\n            i++;\n        }else{                                   //偶数时\n            s1 -&gt; next = p;                       //尾插法，正序\n            s = p;\n            p = r;\n            i++;\n        }\n    }\n    s -&gt; next =NULL;\n    s1 -&gt; next =NULL;\n    return A,B;\n}\n</code></pre>\n<ul>\n<li>\n<p>设<code>C = {a1,b1,a2,b2,...,an,bn}</code>为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得<code>A={an,an-1,...,a1},B={bn,...,b2,b1}</code></p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *r;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\n    LinkList A = L; \n    LinkList B = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建B表表头</span>\n    A -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    A -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p){\n        r = p -&gt; next;\n        <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>){                            <span class=\"hljs-comment\">//基数位时</span>\n            p -&gt; next = A -&gt; next;               <span class=\"hljs-comment\">//头插法，因为要倒序</span>\n            A -&gt; next = p;                      \n            p = r;\n            i++;\n        }<span class=\"hljs-keyword\">else</span>{                                   <span class=\"hljs-comment\">//偶数时</span>\n            p -&gt; next = B -&gt; next;               <span class=\"hljs-comment\">//头插法，因为要倒序</span>\n            B -&gt; next = p;                      \n            p = r;\n            i++;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> A,B;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"9-判断两个链表是否有相同结点找出相同结点\"><a class=\"markdownIt-Anchor\" href=\"#9-判断两个链表是否有相同结点找出相同结点\"></a> 9. 判断两个链表是否有相同结点（找出相同结点）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Length</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{  <span class=\"hljs-comment\">//计算链表长度</span>\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(L != <span class=\"hljs-literal\">NULL</span>){\n        num++;\n        L = L -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> num;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Judeg</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    <span class=\"hljs-keyword\">int</span> len1 = Length(L1);\n    <span class=\"hljs-keyword\">int</span> len2 = Length(L2);\n    <span class=\"hljs-keyword\">if</span>(len1 &gt; len2){                   <span class=\"hljs-comment\">//让两个链表拥有相同的尾部长度</span>\n        <span class=\"hljs-keyword\">int</span> num = len1 - len2;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; num; i++){\n            L1 = L1 -&gt; next;\n        }\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">int</span> num = len2 - len1;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; num; i++){\n            L2 = L2 -&gt; next;\n    }\n    <span class=\"hljs-keyword\">while</span>(L1){\n        <span class=\"hljs-keyword\">if</span>(L1 == L2){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        }\n        L1 = L1 -&gt; next;\n        L2 = L2 -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"10-栈的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#10-栈的基本操作\"></a> 10. 栈的基本操作</h4>\n</blockquote>\n<ul>\n<li>\n<p>栈的顺序存储类型描述</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> Maxsize 50       <span class=\"hljs-comment\">//定义栈中元素的最大个数</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data[Maxsize];   <span class=\"hljs-comment\">//存放栈中元素</span>\n    <span class=\"hljs-keyword\">int</span> top;             <span class=\"hljs-comment\">//栈顶指针</span>\n}SqStack;\n</code></pre>\n</li>\n<li>\n<p>初始化</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitStack</span><span class=\"hljs-params\">(Sqstack &amp;S)</span></span>{\n    S.top = <span class=\"hljs-number\">-1</span>;               <span class=\"hljs-comment\">//初始化栈顶指针</span>\n}\n</code></pre>\n</li>\n<li>\n<p>判断栈空</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">StackEmpty</span><span class=\"hljs-params\">(S)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>进栈</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Push</span><span class=\"hljs-params\">(SqStack &amp;S, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(S.top == MaxSize - <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    S.data[++S.top] = x;       <span class=\"hljs-comment\">//指针先加1，再入栈</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n<li>\n<p>出栈</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">bool</span> Pop（SqStack &amp;S, <span class=\"hljs-keyword\">int</span> &amp;x){\n    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    x = S.data[S.top--];\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n<li>\n<p>读栈顶元素</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetTop</span><span class=\"hljs-params\">(SqStack S, <span class=\"hljs-keyword\">int</span> &amp;x)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(S.top == MaxSize - <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    x = S.data[S.top];\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"链表相关代码\"><a class=\"markdownIt-Anchor\" href=\"#链表相关代码\"></a> 链表相关代码</h2>\n<blockquote>\n<h4 id=\"1单链表结点类型描述\"><a class=\"markdownIt-Anchor\" href=\"#1单链表结点类型描述\"></a> 1.单链表结点类型描述</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>{</span>     <span class=\"hljs-comment\">//定义单链表结点类型</span>\n    <span class=\"hljs-keyword\">int</span> data;             <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">next</span>;</span>   <span class=\"hljs-comment\">//指针域，指向下一个结点的指针</span>\n}LNode,*LinkList;         <span class=\"hljs-comment\">//LNode是结构体的别名，用LNode即可代替typedef struct LNode</span>\n                          <span class=\"hljs-comment\">//LinkList是结构体指针的别名，用LinkList指针代替struct LNode *next</span>\n</code></pre>\n<blockquote>\n<h4 id=\"2链表创建头插法\"><a class=\"markdownIt-Anchor\" href=\"#2链表创建头插法\"></a> 2.链表创建（头插法）</h4>\n<p>每个结点插入的时间为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，设单链表长度为n，则总时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>sizeof</code>函数计算数据（包括数组、变量、类型、结构体等）所占内存空间，用字节数表示</li>\n<li><code>malloc</code>函数用于在内存开辟了一段地址，而这段地址的首地址存在返回的那个指针变量里，由于不知道到底这段地址有多长，可以存什么变量，所以它的类型是空的，你可以强制类型转换，使其变成确定长度，固定存放一种数据类型的地址，而不管它是哪种类型，其首地址还是原来那个，还是存在一个指针变量中，指针变量就是放指针的嘛，指针是一个地址，指针变量是一个我们定义的，用来放那个地址的变量。</li>\n</ul>\n<p><strong>那么代码的意思就是说：</strong></p>\n<ul>\n<li>分配一个内存，大小是LNode的大小，并将这个内存地址转化为Linklist型，然后将赋给L，所以L为地址。是给L赋值，也就是L被改为指向malloc()新分配的地址</li>\n</ul>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">CreatList</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *s;\n    <span class=\"hljs-keyword\">int</span> x;                                  <span class=\"hljs-comment\">//待插入的数据x</span>\n    L = (LinkList)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));    <span class=\"hljs-comment\">//创建LNode型头结点，并强制转换成LinkList类型，头结点</span>\n                                            <span class=\"hljs-comment\">//L是一个指针的地址，所以要转化成指针类型</span>\n    L -&gt; next = <span class=\"hljs-literal\">NULL</span>;                       <span class=\"hljs-comment\">//初始为空链表</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,x);                          <span class=\"hljs-comment\">//输入结点的值</span>\n    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">9999</span>){                         <span class=\"hljs-comment\">//输入9999表示结束</span>\n        <span class=\"hljs-comment\">//申请一个LNode大小的空间,得到的指针强制转换为指向Lnode类型的指针,然后赋值给s</span>\n        s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建新节点，这句话的作用是由系统生成一个LNode型链表</span>\n                                            <span class=\"hljs-comment\">//的结点，同时将该结点的起始位置赋给指针变量s</span>\n                                            <span class=\"hljs-comment\">//，s为LNode型的指针</span>\n        s -&gt; data = x;                      <span class=\"hljs-comment\">//赋值</span>\n        s -&gt;next = L -&gt; next;\n        L -&gt; next = s;                      <span class=\"hljs-comment\">//将新结点插入表中，L为头指针，注意头插法的代码顺序</span>\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;x)                      <span class=\"hljs-comment\">//继续输入值</span>\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"3链表创建尾插法\"><a class=\"markdownIt-Anchor\" href=\"#3链表创建尾插法\"></a> 3.链表创建（尾插法）</h4>\n<p>每个结点插入的时间为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，设单链表长度为n，则总时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">CreatList</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    <span class=\"hljs-keyword\">int</span> x;                                  <span class=\"hljs-comment\">//待插入数据</span>\n    L = (LinkList)maclloc(<span class=\"hljs-keyword\">sizeof</span>(LNode));   <span class=\"hljs-comment\">//创建头结点</span>\n    LNode *s, *r = L;                       <span class=\"hljs-comment\">//r为表尾指针</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,x);                          <span class=\"hljs-comment\">//输入结点的值</span>\n    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">9999</span>){\n        s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建新结点</span>\n        s -&gt; data = x;                      <span class=\"hljs-comment\">//赋值</span>\n        r -&gt; next = s;                      <span class=\"hljs-comment\">//尾插法，插入的结点在尾指针的后边</span>\n        r = s;                              <span class=\"hljs-comment\">//尾指针r再指向新插入尾部的结点s</span>\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;x);                     <span class=\"hljs-comment\">//继续输入值</span>\n    }\n    r -&gt; next = <span class=\"hljs-literal\">NULL</span>;                       <span class=\"hljs-comment\">//尾结点指针置空</span>\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"4链表的排序重点不理解要复习\"><a class=\"markdownIt-Anchor\" href=\"#4链表的排序重点不理解要复习\"></a> 4.链表的排序（<strong>重点</strong>）不理解，要复习</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *pre;\n    LNode *r = p -&gt; next;\n    p -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    p = r;\n    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>){\n        r = p -&gt; next;\n        pre = L;\n        <span class=\"hljs-keyword\">while</span>(pre-&gt;next != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;next-&gt;data &lt; p-&gt;data){\n            pre = pre -&gt; next;\n        }\n        p -&gt; next = pre -&gt; next;\n        pre -&gt; next = p;\n        p = r;\n    }\n}\n</code></pre>\n<blockquote>\n<h4 id=\"5链表的插入\"><a class=\"markdownIt-Anchor\" href=\"#5链表的插入\"></a> 5.链表的插入</h4>\n</blockquote>\n<ul>\n<li>\n<p>将元素x插入到第n个位置上，需要先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i-1个结点，再在其后插入新结点（链表带头结点）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> e)</span></span>{             <span class=\"hljs-comment\">//链表L引用型</span>\n    LNode *pre = L,*p = L-&gt;next;                  <span class=\"hljs-comment\">//LNode型pre指针指向头结点L，p指针指向next</span>\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;                                    <span class=\"hljs-comment\">//开始计数</span>\n    <span class=\"hljs-keyword\">while</span>(i&lt;n &amp;&amp; p){\n        pre = p;                                  <span class=\"hljs-comment\">//直到到达n，找到前驱pre</span>\n        p = p -&gt; next;\n        i++\n    }\n    <span class=\"hljs-keyword\">if</span>(i == n){\n        LNode *s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode)); <span class=\"hljs-comment\">//新建指针s指向结点</span>\n        s -&gt; data = e;                            <span class=\"hljs-comment\">//赋值为e</span>\n        s -&gt; next = pre -&gt; next;                  <span class=\"hljs-comment\">//新插入的s的后继指向pre的后继</span>\n        pre -&gt; next = s;                          <span class=\"hljs-comment\">//pre的后继指向s</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;                              <span class=\"hljs-comment\">//完成插入</span>\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>将元素x插入到有序链表中，使其仍然有序（链表带头结点）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(LinkList &amp;L, <span class=\"hljs-keyword\">int</span> e)</span></span>{\n    LNode *pre = L,*p = L-&gt;next;\n    <span class=\"hljs-keyword\">while</span>(p){                                     <span class=\"hljs-comment\">//判断p指针的数据和元素e的大小</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; e){\n            pre = p;                              <span class=\"hljs-comment\">//直到找到</span>\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">break</span>;                                <span class=\"hljs-comment\">//当找到后，跳出循环</span>\n        }\n    }\n    LNode *s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));     <span class=\"hljs-comment\">//分配s指针的结点</span>\n    s -&gt; data = e;                                <span class=\"hljs-comment\">//插入数据</span>\n    s -&gt; next = pre -&gt; next;\n    pre -&gt;next = s;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"5链表的删除\"><a class=\"markdownIt-Anchor\" href=\"#5链表的删除\"></a> 5.链表的删除</h4>\n</blockquote>\n<ul>\n<li>\n<p>删除链表中值为x的结点</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> x)</span></span>{\n    LNode *pre = L;                   <span class=\"hljs-comment\">//pre指针指向头结点</span>\n    LNode *p = L -&gt; next;             <span class=\"hljs-comment\">//p指针指向头结点的next</span>\n    <span class=\"hljs-keyword\">while</span>(p){                         <span class=\"hljs-comment\">//p不为空时</span>\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data != x){             <span class=\"hljs-comment\">//如果没有查询到</span>\n            pre = p;                  <span class=\"hljs-comment\">//两个指针依次往后移</span>\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{                        <span class=\"hljs-comment\">//直到p指针的值与x的相同</span>\n            pre -&gt; next = p -&gt; next;  <span class=\"hljs-comment\">//删除节点</span>\n            <span class=\"hljs-built_in\">free</span>(p);                  <span class=\"hljs-comment\">//free多余的结点</span>\n            p = pre -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n<li>\n<p>删除链表中最大值的结点（多加入两个确定最大值的指针即可）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(LinkList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    LNode *pre = L, *p = L -&gt; next, *mpre = pre, *mp = p; <span class=\"hljs-comment\">//建立结点</span>\n    <span class=\"hljs-keyword\">while</span>(p){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &gt; mp-&gt;data){                           <span class=\"hljs-comment\">//比较数据的大小</span>\n            mpre = pre;                                   <span class=\"hljs-comment\">//如果大于，最大值指向p</span>\n            mp = p;\n        }\n        pre = p;                                          <span class=\"hljs-comment\">//一次往后查找</span>\n        p = p -&gt; next;\n    }\n    mpre -&gt; next = mp -&gt; next;                            <span class=\"hljs-comment\">//删除节点</span>\n    <span class=\"hljs-built_in\">free</span>(mp);\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n<li>\n<p>删除<strong>有序</strong>链表中重复值节点</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Del</span><span class=\"hljs-params\">(LinkList &amp;L, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    LNode *pre = L, *p = L -&gt; next;\n    <span class=\"hljs-keyword\">while</span>(p){\n        <span class=\"hljs-keyword\">if</span>(pre-&gt;next &amp;&amp; pre-&gt;next-&gt;data == p-&gt;data){\n            pre -&gt; next = p -&gt; next;\n            <span class=\"hljs-built_in\">free</span>(p);\n            p = pre -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            pre = p;\n            p = p -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"6-链表的逆置\"><a class=\"markdownIt-Anchor\" href=\"#6-链表的逆置\"></a> 6. 链表的逆置</h4>\n</blockquote>\n<ul>\n<li>\n<p>将链表L的所有结点逆置（采用头插法）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Inversion</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *r;\n    L -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p){\n        r = p -&gt; next;\n        p -&gt; next = L -&gt; next;\n        L -&gt; next = p;\n        p = r;\n    }\n    <span class=\"hljs-keyword\">return</span> L;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"7-链表的合并\"><a class=\"markdownIt-Anchor\" href=\"#7-链表的合并\"></a> 7. 链表的合并</h4>\n</blockquote>\n<ul>\n<li>\n<p>将两个有序链表合并为一个有序链表</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    LNode *p = L1 -&gt; next, *q = L2 -&gt; next, *r = L1;\n    L1 -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p &amp;&amp; q){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; q-&gt;data){\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            r -&gt; next = q;\n            r = q;\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L1;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个有序链表合并为一个有序链表（取交集）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    LNode *p = L1 -&gt; next, *q = L2 -&gt; next, *r = L1;\n    L1 -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p &amp;&amp; q){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; q-&gt;data){\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p-&gt;data &gt; q-&gt;data){\n            q = q -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> L1;\n}\n</code></pre>\n</li>\n<li>\n<p>将两个有序链表合并为一个有序链表（并集）</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    LNode *p = L1 -&gt; next, *q = L2 -&gt; next, *r = L1;\n    L1 -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p &amp;&amp; q){\n        <span class=\"hljs-keyword\">if</span>(p-&gt;data &lt; q-&gt;data){\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p-&gt;data &gt; q-&gt;data){\n            r -&gt; next = p;\n            r = q;\n            q = q -&gt; next;\n        }<span class=\"hljs-keyword\">else</span>{\n            r -&gt; next = p;\n            r = p;\n            p = p -&gt; next;\n            q = q -&gt; next;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span>(p){\n        r -&gt; next = p;\n    }\n    <span class=\"hljs-keyword\">while</span>(q){\n        r -&gt; next = q;\n    }\n    <span class=\"hljs-keyword\">return</span> L1;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"8-链表拆分问题\"><a class=\"markdownIt-Anchor\" href=\"#8-链表拆分问题\"></a> 8. 链表拆分问题</h4>\n</blockquote>\n<ul>\n<li>\n<p>设<code>C = {a1,b1,a2,b2,...,an,bn}</code>为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得<code>A={a1,a2,...,an},B={bn,...,b2,b1}</code></p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *r;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\n    LinkList A = L, *s = A;                      <span class=\"hljs-comment\">//尾插需要个尾指针，指向头指针</span>\n    LinkList B = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建B表表头</span>\n    B -&gt; next = <span class=\"hljs-literal\">NULL</span>;                            <span class=\"hljs-comment\">//B表的初始化</span>\n    <span class=\"hljs-keyword\">while</span>(p){\n        r = p -&gt; next;\n        <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>){                            <span class=\"hljs-comment\">//基数位时</span>\n            s -&gt; next = p;                       <span class=\"hljs-comment\">//尾插法，正序</span>\n            s = p;\n            p = r;\n            i++;\n        }<span class=\"hljs-keyword\">else</span>{                                   <span class=\"hljs-comment\">//偶数时</span>\n            p -&gt; next = B -&gt; next;               <span class=\"hljs-comment\">//头插法，因为要倒序</span>\n            B -&gt; next = p;                      \n            p = r;\n            i++;\n        }\n    }\n    s -&gt; next =<span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> A,B;\n</code></pre>\n</li>\n</ul>\n<p>}</p>\n<pre class=\"highlight\"><code class=\"\">\n\n- 设`C = {a1,b1,a2,b2,...,an,bn}`为线性表，采用带头结点的hc单链表存放，计一个就地算法，讲其拆分为两个线性表，使得`A={a1,a2,...,an},B={b1,...,bn-1,bn}`\n\n- 与上一题相比，只有链表B变为尾插（保证正序即可）\n\n```c\nLinkList Merge(LinkList &amp;L){\n    LNode *p = L -&gt; next, *r;\n    int i = 1;\n    LinkList A = L; *s = A;\n    LinkList B = (LNode*)malloc(sizeof(LNode)), *s1 = b;  //创建B表表头,并指向头指针\n    while(p){\n        r = p -&gt; next;\n        if(i%2 == 1){                            //基数位时\n            s -&gt; next = p;                       //尾插法，正序\n            s = p;\n            p = r;\n            i++;\n        }else{                                   //偶数时\n            s1 -&gt; next = p;                       //尾插法，正序\n            s = p;\n            p = r;\n            i++;\n        }\n    }\n    s -&gt; next =NULL;\n    s1 -&gt; next =NULL;\n    return A,B;\n}\n</code></pre>\n<ul>\n<li>\n<p>设<code>C = {a1,b1,a2,b2,...,an,bn}</code>为线性表，采用带头结点的hc单链表存放，设计一个就地算法，讲其拆分为两个线性表，使得<code>A={an,an-1,...,a1},B={bn,...,b2,b1}</code></p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{\n    LNode *p = L -&gt; next, *r;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\n    LinkList A = L; \n    LinkList B = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));  <span class=\"hljs-comment\">//创建B表表头</span>\n    A -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    A -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">while</span>(p){\n        r = p -&gt; next;\n        <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>){                            <span class=\"hljs-comment\">//基数位时</span>\n            p -&gt; next = A -&gt; next;               <span class=\"hljs-comment\">//头插法，因为要倒序</span>\n            A -&gt; next = p;                      \n            p = r;\n            i++;\n        }<span class=\"hljs-keyword\">else</span>{                                   <span class=\"hljs-comment\">//偶数时</span>\n            p -&gt; next = B -&gt; next;               <span class=\"hljs-comment\">//头插法，因为要倒序</span>\n            B -&gt; next = p;                      \n            p = r;\n            i++;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> A,B;\n}\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"9-判断两个链表是否有相同结点找出相同结点\"><a class=\"markdownIt-Anchor\" href=\"#9-判断两个链表是否有相同结点找出相同结点\"></a> 9. 判断两个链表是否有相同结点（找出相同结点）</h4>\n</blockquote>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Length</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>{  <span class=\"hljs-comment\">//计算链表长度</span>\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(L != <span class=\"hljs-literal\">NULL</span>){\n        num++;\n        L = L -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> num;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Judeg</span><span class=\"hljs-params\">(LinkList &amp;L1, LinkList &amp;L2)</span></span>{\n    <span class=\"hljs-keyword\">int</span> len1 = Length(L1);\n    <span class=\"hljs-keyword\">int</span> len2 = Length(L2);\n    <span class=\"hljs-keyword\">if</span>(len1 &gt; len2){                   <span class=\"hljs-comment\">//让两个链表拥有相同的尾部长度</span>\n        <span class=\"hljs-keyword\">int</span> num = len1 - len2;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; num; i++){\n            L1 = L1 -&gt; next;\n        }\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">int</span> num = len2 - len1;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; num; i++){\n            L2 = L2 -&gt; next;\n    }\n    <span class=\"hljs-keyword\">while</span>(L1){\n        <span class=\"hljs-keyword\">if</span>(L1 == L2){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        }\n        L1 = L1 -&gt; next;\n        L2 = L2 -&gt; next;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<blockquote>\n<h4 id=\"10-栈的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#10-栈的基本操作\"></a> 10. 栈的基本操作</h4>\n</blockquote>\n<ul>\n<li>\n<p>栈的顺序存储类型描述</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> Maxsize 50       <span class=\"hljs-comment\">//定义栈中元素的最大个数</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>{</span>\n    <span class=\"hljs-keyword\">int</span> data[Maxsize];   <span class=\"hljs-comment\">//存放栈中元素</span>\n    <span class=\"hljs-keyword\">int</span> top;             <span class=\"hljs-comment\">//栈顶指针</span>\n}SqStack;\n</code></pre>\n</li>\n<li>\n<p>初始化</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitStack</span><span class=\"hljs-params\">(Sqstack &amp;S)</span></span>{\n    S.top = <span class=\"hljs-number\">-1</span>;               <span class=\"hljs-comment\">//初始化栈顶指针</span>\n}\n</code></pre>\n</li>\n<li>\n<p>判断栈空</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">StackEmpty</span><span class=\"hljs-params\">(S)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>进栈</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Push</span><span class=\"hljs-params\">(SqStack &amp;S, <span class=\"hljs-keyword\">int</span> x)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(S.top == MaxSize - <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    S.data[++S.top] = x;       <span class=\"hljs-comment\">//指针先加1，再入栈</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n<li>\n<p>出栈</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">bool</span> Pop（SqStack &amp;S, <span class=\"hljs-keyword\">int</span> &amp;x){\n    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    x = S.data[S.top--];\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n<li>\n<p>读栈顶元素</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetTop</span><span class=\"hljs-params\">(SqStack S, <span class=\"hljs-keyword\">int</span> &amp;x)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(S.top == MaxSize - <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    x = S.data[S.top];\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n</li>\n</ul>\n"},{"title":"高数第一讲总结","top":false,"cover":false,"toc":false,"mathjax":true,"summary":"第一章　函数极限与连续","abbrlink":"6214","date":"2020-07-21T06:38:44.000Z","password":null,"_content":"\n## 第一章　函数极限与连续\n\n- ### 极限\n\n  - 等式脱帽法\n\n$$\n  f(x)=A+ x ,其中\\displaystyle \\lim_{x \\to }{x}=0\n$$\n  - 局部保号性：若Ａ大于０，则函数ｆ(x)也大于０\n\n- ### 极限的计算\n\n  - 先化简\n\n  - 再变形\n    \n    - 换元、通分、因式分解\n    \n  - **中值定理**\n\n    - 拉格朗日中值定理：见到ｆ - ｆ、ｆ - ｆ的导数 \n\n    - 积分中值定理（见到函数和积分时使用）\n    $$\n    \\int_a^b{f(x)}dx=f(\\xi)(b-a)\n    $$\n    - 牛顿－莱布尼兹公式\n  \n    - 泰勒公式（三阶及其以上使用）\n\n  \n\n","source":"_posts/高数第一讲总结.md","raw":"---\ntitle: 高数第一讲总结\ntop: false\ncover: false\ntoc: false\nmathjax: true\nsummary: 第一章　函数极限与连续\ntags:\n  - 高数\n  - 总结\n  - 考研\ncategories:\n  - 数学\nabbrlink: '6214'\ndate: 2020-07-21 14:38:44\npassword:\n---\n\n## 第一章　函数极限与连续\n\n- ### 极限\n\n  - 等式脱帽法\n\n$$\n  f(x)=A+ x ,其中\\displaystyle \\lim_{x \\to }{x}=0\n$$\n  - 局部保号性：若Ａ大于０，则函数ｆ(x)也大于０\n\n- ### 极限的计算\n\n  - 先化简\n\n  - 再变形\n    \n    - 换元、通分、因式分解\n    \n  - **中值定理**\n\n    - 拉格朗日中值定理：见到ｆ - ｆ、ｆ - ｆ的导数 \n\n    - 积分中值定理（见到函数和积分时使用）\n    $$\n    \\int_a^b{f(x)}dx=f(\\xi)(b-a)\n    $$\n    - 牛顿－莱布尼兹公式\n  \n    - 泰勒公式（三阶及其以上使用）\n\n  \n\n","slug":"高数第一讲总结","published":1,"updated":"2020-08-10T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckocvzdiq004uzl9k7kr7at6v","content":"<h2 id=\"第一章-函数极限与连续\"><a class=\"markdownIt-Anchor\" href=\"#第一章-函数极限与连续\"></a> 第一章　函数极限与连续</h2>\n<ul>\n<li>\n<h3 id=\"极限\"><a class=\"markdownIt-Anchor\" href=\"#极限\"></a> 极限</h3>\n<ul>\n<li>等式脱帽法</li>\n</ul>\n</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo>+</mo><mi>x</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">其</mi><mi mathvariant=\"normal\">中</mi><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo></mrow></munder><mi>x</mi><mo>=</mo><mn>0</mn></mstyle></mrow><annotation encoding=\"application/x-tex\">  f(x)=A+ x ,其中\\displaystyle \\lim_{x \\to }{x}=0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">中</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.1em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">→</span></span></span></span><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<ul>\n<li>\n<p>局部保号性：若Ａ大于０，则函数ｆ(x)也大于０</p>\n</li>\n<li>\n<h3 id=\"极限的计算\"><a class=\"markdownIt-Anchor\" href=\"#极限的计算\"></a> 极限的计算</h3>\n<ul>\n<li>\n<p>先化简</p>\n</li>\n<li>\n<p>再变形</p>\n<ul>\n<li>换元、通分、因式分解</li>\n</ul>\n</li>\n<li>\n<p><strong>中值定理</strong></p>\n<ul>\n<li>\n<p>拉格朗日中值定理：见到ｆ - ｆ、ｆ - ｆ的导数</p>\n</li>\n<li>\n<p>积分中值定理（见到函数和积分时使用）</p>\n</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mi>d</mi><mi>x</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>ξ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\int_a^b{f(x)}dx=f(\\xi)(b-a)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.5109580000000005em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5990080000000004em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span><span style=\"top:-3.812900000000001em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04601em;\">ξ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li>\n<p>牛顿－莱布尼兹公式</p>\n</li>\n<li>\n<p>泰勒公式（三阶及其以上使用）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"galleries":[{"name":"2020","cover":"2020/images/cover/p0.jpg","description":"我的图床","photos":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg"]},{"name":"test","cover":"test/images/cover/13.jpg","description":"2018年记录","photos":["12.jpg"]},{"name":"serect","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]},{"name":"个人生活","cover":"serect/images/lock.jpg","description":"密码","photos":["15.jpg"]}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第一章-函数极限与连续\"><a class=\"markdownIt-Anchor\" href=\"#第一章-函数极限与连续\"></a> 第一章　函数极限与连续</h2>\n<ul>\n<li>\n<h3 id=\"极限\"><a class=\"markdownIt-Anchor\" href=\"#极限\"></a> 极限</h3>\n<ul>\n<li>等式脱帽法</li>\n</ul>\n</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo>+</mo><mi>x</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">其</mi><mi mathvariant=\"normal\">中</mi><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo></mrow></munder><mi>x</mi><mo>=</mo><mn>0</mn></mstyle></mrow><annotation encoding=\"application/x-tex\">  f(x)=A+ x ,其中\\displaystyle \\lim_{x \\to }{x}=0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">中</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.1em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">→</span></span></span></span><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<ul>\n<li>\n<p>局部保号性：若Ａ大于０，则函数ｆ(x)也大于０</p>\n</li>\n<li>\n<h3 id=\"极限的计算\"><a class=\"markdownIt-Anchor\" href=\"#极限的计算\"></a> 极限的计算</h3>\n<ul>\n<li>\n<p>先化简</p>\n</li>\n<li>\n<p>再变形</p>\n<ul>\n<li>换元、通分、因式分解</li>\n</ul>\n</li>\n<li>\n<p><strong>中值定理</strong></p>\n<ul>\n<li>\n<p>拉格朗日中值定理：见到ｆ - ｆ、ｆ - ｆ的导数</p>\n</li>\n<li>\n<p>积分中值定理（见到函数和积分时使用）</p>\n</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mi>d</mi><mi>x</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>ξ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\int_a^b{f(x)}dx=f(\\xi)(b-a)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.5109580000000005em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5990080000000004em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span><span style=\"top:-3.812900000000001em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04601em;\">ξ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li>\n<p>牛顿－莱布尼兹公式</p>\n</li>\n<li>\n<p>泰勒公式（三阶及其以上使用）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/SimCSE（一）/dropout.jpeg","slug":"dropout.jpeg","post":"ckocvzdi50014zl9kh1y56vl9","modified":1,"renderable":0},{"_id":"source/_posts/SimCSE（四）/Supervised SimCSE.png","slug":"Supervised SimCSE.png","post":"ckocvzdib0021zl9k1v8y60hr","modified":1,"renderable":0},{"_id":"source/_posts/SimCSE（九）/训练结果.png","slug":"训练结果.png","post":"ckocvzdi9001kzl9k2waj8h2x","modified":1,"renderable":0},{"_id":"source/_posts/SimCSE（三）/ICML2020.pdf","slug":"ICML2020.pdf","post":"ckocvzdi7001czl9k2iw8htnh","modified":1,"renderable":0},{"_id":"source/_posts/SimCSE（三）/对比表示学习.webp","post":"ckocvzdi7001czl9k2iw8htnh","slug":"对比表示学习.webp","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（十）/dropout.jpeg","post":"ckocvzdia001rzl9kgsxd9tak","slug":"dropout.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（十）/拟合对比.png","post":"ckocvzdia001rzl9kgsxd9tak","slug":"拟合对比.png","modified":1,"renderable":1},{"_id":"source/_posts/菁菁学习计划/1.png","post":"ckocvzdil0040zl9k63wnhirv","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/菁菁学习计划/2.png","post":"ckocvzdil0040zl9k63wnhirv","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/计网第七章-局域网和广域网技术/img.png","post":"ckocvzdim0047zl9kgkl59zb0","slug":"img.png","modified":1,"renderable":1},{"_id":"source/_posts/计网第七章-局域网和广域网技术/img2.png","post":"ckocvzdim0047zl9kgkl59zb0","slug":"img2.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（一）/拟合图片.jpeg","post":"ckocvzdi50014zl9kh1y56vl9","slug":"拟合图片.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（一）/拟合对比.png","post":"ckocvzdi50014zl9kh1y56vl9","slug":"拟合对比.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（四）/001-surprise.png","post":"ckocvzdib0021zl9k1v8y60hr","slug":"001-surprise.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（四）/Unsupervised SimCSE.png","post":"ckocvzdib0021zl9k1v8y60hr","slug":"Unsupervised SimCSE.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（六）/Figure 2.png","post":"ckocvzdib001yzl9kfop94nni","slug":"Figure 2.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（六）/Table 2.png","post":"ckocvzdib001yzl9kfop94nni","slug":"Table 2.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（六）/Table 3.png","post":"ckocvzdib001yzl9kfop94nni","slug":"Table 3.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（六）/Table 4.png","post":"ckocvzdib001yzl9kfop94nni","slug":"Table 4.png","modified":1,"renderable":1},{"_id":"source/_posts/SimCSE（六）/Table 5.png","post":"ckocvzdib001yzl9kfop94nni","slug":"Table 5.png","modified":1,"renderable":1},{"_id":"source/_posts/吉林大学招生简章/专硕.png","post":"ckocvzdid002dzl9ke86t2cpf","slug":"专硕.png","modified":1,"renderable":1},{"_id":"source/_posts/吉林大学招生简章/学硕.png","post":"ckocvzdid002dzl9ke86t2cpf","slug":"学硕.png","modified":1,"renderable":1},{"_id":"source/_posts/吉林大学招生简章/计算机专硕.png","post":"ckocvzdid002dzl9ke86t2cpf","slug":"计算机专硕.png","modified":1,"renderable":1},{"_id":"source/_posts/吉林大学招生简章/计算机学硕1.png","post":"ckocvzdid002dzl9ke86t2cpf","slug":"计算机学硕1.png","modified":1,"renderable":1},{"_id":"source/_posts/吉林大学招生简章/计算机学硕2.png","post":"ckocvzdid002dzl9ke86t2cpf","slug":"计算机学硕2.png","modified":1,"renderable":1},{"_id":"source/_posts/强化-计网第二章-物理层/ASK.png","post":"ckocvzdig002wzl9kahch0qav","slug":"ASK.png","modified":1,"renderable":1},{"_id":"source/_posts/强化-计网第二章-物理层/FSK.png","post":"ckocvzdig002wzl9kahch0qav","slug":"FSK.png","modified":1,"renderable":1},{"_id":"source/_posts/强化-计网第二章-物理层/PSK.png","post":"ckocvzdig002wzl9kahch0qav","slug":"PSK.png","modified":1,"renderable":1},{"_id":"source/_posts/强化-计网第二章-物理层/QAM.png","post":"ckocvzdig002wzl9kahch0qav","slug":"QAM.png","modified":1,"renderable":1},{"_id":"source/_posts/强化-计网第二章-物理层/单极性编码.png","post":"ckocvzdig002wzl9kahch0qav","slug":"单极性编码.png","modified":1,"renderable":1},{"_id":"source/_posts/强化-计网第二章-物理层/曼彻斯特.png","post":"ckocvzdig002wzl9kahch0qav","slug":"曼彻斯特.png","modified":1,"renderable":1},{"_id":"source/_posts/强化-计网第二章-物理层/非归零编码.png","post":"ckocvzdig002wzl9kahch0qav","slug":"非归零编码.png","modified":1,"renderable":1},{"_id":"source/_posts/计网第八章-TCP-IP协议/B类子网编码.png","post":"ckocvzdin004fzl9k8xx400ex","slug":"B类子网编码.png","modified":1,"renderable":1},{"_id":"source/_posts/计网第八章-TCP-IP协议/IP地址范围.png","post":"ckocvzdin004fzl9k8xx400ex","slug":"IP地址范围.png","modified":1,"renderable":1},{"_id":"source/_posts/计网第八章-TCP-IP协议/IP报文格式.png","post":"ckocvzdin004fzl9k8xx400ex","slug":"IP报文格式.png","modified":1,"renderable":1},{"_id":"source/_posts/计网第八章-TCP-IP协议/ip地址分类.png","post":"ckocvzdin004fzl9k8xx400ex","slug":"ip地址分类.png","modified":1,"renderable":1},{"_id":"source/_posts/计网第八章-TCP-IP协议/三次挥手.gif","slug":"三次挥手.gif","post":"ckocvzdin004fzl9k8xx400ex","modified":1,"renderable":0},{"_id":"source/_posts/计网第八章-TCP-IP协议/三次握手建立过程.gif","slug":"三次握手建立过程.gif","post":"ckocvzdin004fzl9k8xx400ex","modified":1,"renderable":0},{"_id":"source/_posts/计网第八章-TCP-IP协议/四次挥手.gif","slug":"四次挥手.gif","post":"ckocvzdin004fzl9k8xx400ex","modified":1,"renderable":0},{"_id":"source/_posts/计网第八章-TCP-IP协议/四次挥手过程.gif","slug":"四次挥手过程.gif","post":"ckocvzdin004fzl9k8xx400ex","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ckocvzdhy0009zl9kab4v9vbj","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi2000hzl9kbvcqamwn"},{"post_id":"ckocvzdht0001zl9k7uhk90wz","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi3000mzl9ketw74iz2"},{"post_id":"ckocvzdhz000bzl9k41rx7hnk","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi3000pzl9k5jpg10cv"},{"post_id":"ckocvzdi1000fzl9k5y5e66oz","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi4000uzl9kh8ap4dmy"},{"post_id":"ckocvzdhv0003zl9keozj1256","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi5000xzl9k4ar30g03"},{"post_id":"ckocvzdi1000gzl9kcl4e6r7r","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi50012zl9kbdrhhmz1"},{"post_id":"ckocvzdhx0007zl9k3smu2xbr","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi70015zl9khn328w9q"},{"post_id":"ckocvzdi4000tzl9k351g308h","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdi70019zl9kavk8dk1e"},{"post_id":"ckocvzdi2000lzl9k93pkenpz","category_id":"ckocvzdi4000rzl9k7xc66hao","_id":"ckocvzdi8001dzl9kf7zrhuk2"},{"post_id":"ckocvzdi3000ozl9k1wtshen0","category_id":"ckocvzdi50011zl9k2aenc0cd","_id":"ckocvzdi8001hzl9ke1if0ifo"},{"post_id":"ckocvzdi4000wzl9kbmbo0e50","category_id":"ckocvzdi7001azl9kck4wa8q6","_id":"ckocvzdia001pzl9k1jwcc1vr"},{"post_id":"ckocvzdi50010zl9k8nj41v13","category_id":"ckocvzdi50011zl9k2aenc0cd","_id":"ckocvzdib001vzl9kh8pyfti2"},{"post_id":"ckocvzdia001rzl9kgsxd9tak","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdic0022zl9k9zyagb0h"},{"post_id":"ckocvzdi50014zl9kh1y56vl9","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdic0026zl9k9jc4c022"},{"post_id":"ckocvzdia001uzl9kg9ip0a7y","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdid002azl9kezzm523c"},{"post_id":"ckocvzdib001yzl9kfop94nni","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdid002ezl9kb386gvze"},{"post_id":"ckocvzdi70018zl9kfrdq35rv","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdie002hzl9k7yed6jz7"},{"post_id":"ckocvzdib0021zl9k1v8y60hr","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdie002mzl9k60tt4db5"},{"post_id":"ckocvzdic0025zl9k2xxbhq0u","category_id":"ckocvzdi50011zl9k2aenc0cd","_id":"ckocvzdif002pzl9k6s9e6f0m"},{"post_id":"ckocvzdi7001czl9k2iw8htnh","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdif002uzl9khmk99su2"},{"post_id":"ckocvzdid0029zl9k947b69ij","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdig002xzl9kf974djeu"},{"post_id":"ckocvzdi8001gzl9kacvj48ms","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdig0032zl9khep36l52"},{"post_id":"ckocvzdie002lzl9kfm7h6aj1","category_id":"ckocvzdi50011zl9k2aenc0cd","_id":"ckocvzdih0034zl9kb03mc95r"},{"post_id":"ckocvzdi9001kzl9k2waj8h2x","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdih0037zl9k0bjjh24j"},{"post_id":"ckocvzdi9001nzl9k3taze0k9","category_id":"ckocvzdia001ozl9k5nbyeab2","_id":"ckocvzdii003bzl9k3tudb3gr"},{"post_id":"ckocvzdig0031zl9karjwd6c0","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdii003fzl9k1blh5vr8"},{"post_id":"ckocvzdih0033zl9k6q8061q2","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdij003jzl9k254kgmzu"},{"post_id":"ckocvzdid002dzl9ke86t2cpf","category_id":"ckocvzdig002zzl9k9lnj9z03","_id":"ckocvzdij003nzl9k4ovccl2x"},{"post_id":"ckocvzdie002gzl9kdj7ygyet","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdik003rzl9khhw1gvip"},{"post_id":"ckocvzdij003izl9k69ah30z5","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdik003vzl9khg520a2w"},{"post_id":"ckocvzdif002ozl9k3nfc3t1o","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdil003yzl9k46hth89h"},{"post_id":"ckocvzdif002tzl9kajba3s2j","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdim0042zl9ke8t96gfg"},{"post_id":"ckocvzdik003uzl9k70g0e7tz","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdim0044zl9khcf2e054"},{"post_id":"ckocvzdig002wzl9kahch0qav","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdim0048zl9kfruqbbo2"},{"post_id":"ckocvzdil0040zl9k63wnhirv","category_id":"ckocvzdi4000rzl9k7xc66hao","_id":"ckocvzdin004czl9k19gg6718"},{"post_id":"ckocvzdim0043zl9k6hh1d2iz","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdio004gzl9kauy4fmtt"},{"post_id":"ckocvzdih0036zl9kcs0sartb","category_id":"ckocvzdil0041zl9khtcdh2cl","_id":"ckocvzdio004kzl9k62206nc3"},{"post_id":"ckocvzdim0047zl9kgkl59zb0","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdip004ozl9kgy1xaf0u"},{"post_id":"ckocvzdin004bzl9khzna1qgm","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdiq004szl9kbo2s200o"},{"post_id":"ckocvzdii003azl9k0thnb41r","category_id":"ckocvzdil0041zl9khtcdh2cl","_id":"ckocvzdiq004vzl9kd14jfrlr"},{"post_id":"ckocvzdin004fzl9k8xx400ex","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdir004xzl9k2ysf6qzp"},{"post_id":"ckocvzdio004jzl9kgkq6cew3","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdir004zzl9khna6f86g"},{"post_id":"ckocvzdii003ezl9k8ozngg1o","category_id":"ckocvzdil0041zl9khtcdh2cl","_id":"ckocvzdir0052zl9k39prg2s7"},{"post_id":"ckocvzdip004nzl9kautecz9p","category_id":"ckocvzdih0038zl9k7v8v55l2","_id":"ckocvzdir0055zl9k64kb0uxq"},{"post_id":"ckocvzdip004rzl9k0f6x4b09","category_id":"ckocvzdhw0005zl9khytw5b43","_id":"ckocvzdir0058zl9k4wwod6kl"},{"post_id":"ckocvzdij003mzl9kd9ie3v7p","category_id":"ckocvzdip004pzl9k9cuh3s5j","_id":"ckocvzdis005bzl9khjnlc4sp"},{"post_id":"ckocvzdik003qzl9kh3dndm84","category_id":"ckocvzdil0041zl9khtcdh2cl","_id":"ckocvzdis005czl9kh9lj5k9k"},{"post_id":"ckocvzdil003xzl9kgljxha2u","category_id":"ckocvzdir0051zl9keoa39j94","_id":"ckocvzdis005ezl9k4oavdc73"},{"post_id":"ckocvzdiq004uzl9k7kr7at6v","category_id":"ckocvzdir0057zl9k3dgu83hm","_id":"ckocvzdis005fzl9k6tekhi2u"}],"PostTag":[{"post_id":"ckocvzdi1000fzl9k5y5e66oz","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdi2000kzl9keub84zek"},{"post_id":"ckocvzdi1000fzl9k5y5e66oz","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdi3000nzl9kaaah5af4"},{"post_id":"ckocvzdht0001zl9k7uhk90wz","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdi4000szl9k14dv7sh0"},{"post_id":"ckocvzdht0001zl9k7uhk90wz","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdi4000vzl9kgd6u9ngv"},{"post_id":"ckocvzdi1000gzl9kcl4e6r7r","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdi5000zzl9k9oova2jd"},{"post_id":"ckocvzdi1000gzl9kcl4e6r7r","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdi50013zl9k3jlud11p"},{"post_id":"ckocvzdi4000tzl9k351g308h","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdi70017zl9kax3z4isb"},{"post_id":"ckocvzdi4000tzl9k351g308h","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdi7001bzl9k4mgb4op9"},{"post_id":"ckocvzdhv0003zl9keozj1256","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdi8001fzl9kfl3sgjej"},{"post_id":"ckocvzdhv0003zl9keozj1256","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdi9001jzl9kfy7gfbon"},{"post_id":"ckocvzdhx0007zl9k3smu2xbr","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdi9001mzl9khrl67vnd"},{"post_id":"ckocvzdhx0007zl9k3smu2xbr","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdia001qzl9k418kf56h"},{"post_id":"ckocvzdhy0009zl9kab4v9vbj","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdia001tzl9k006ue945"},{"post_id":"ckocvzdhy0009zl9kab4v9vbj","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdib001xzl9k9rrje30h"},{"post_id":"ckocvzdhz000bzl9k41rx7hnk","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdib0020zl9kf6zrhvxi"},{"post_id":"ckocvzdhz000bzl9k41rx7hnk","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdic0024zl9k9ybu5yve"},{"post_id":"ckocvzdi2000lzl9k93pkenpz","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdic0027zl9k9muhblj8"},{"post_id":"ckocvzdi2000lzl9k93pkenpz","tag_id":"ckocvzdia001szl9kcpgd7kk1","_id":"ckocvzdid002czl9k3fn634ys"},{"post_id":"ckocvzdi3000ozl9k1wtshen0","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdie002fzl9kc02j7ycj"},{"post_id":"ckocvzdi3000ozl9k1wtshen0","tag_id":"ckocvzdib001zzl9k4kgrbzrh","_id":"ckocvzdie002kzl9k3p7d19fh"},{"post_id":"ckocvzdic0025zl9k2xxbhq0u","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdif002nzl9k5me572ku"},{"post_id":"ckocvzdic0025zl9k2xxbhq0u","tag_id":"ckocvzdib001zzl9k4kgrbzrh","_id":"ckocvzdif002szl9k0qdxh8cv"},{"post_id":"ckocvzdie002lzl9kfm7h6aj1","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdig002vzl9k5yuh59gg"},{"post_id":"ckocvzdie002lzl9kfm7h6aj1","tag_id":"ckocvzdib001zzl9k4kgrbzrh","_id":"ckocvzdig0030zl9khawlgn5v"},{"post_id":"ckocvzdi4000wzl9kbmbo0e50","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdih0039zl9k140lb3e9"},{"post_id":"ckocvzdi4000wzl9kbmbo0e50","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdii003czl9ka97t2sg4"},{"post_id":"ckocvzdi4000wzl9kbmbo0e50","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdii003hzl9kd12udxme"},{"post_id":"ckocvzdi4000wzl9kbmbo0e50","tag_id":"ckocvzdib001zzl9k4kgrbzrh","_id":"ckocvzdij003kzl9k4ksh9xu1"},{"post_id":"ckocvzdi50010zl9k8nj41v13","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdik003pzl9k2gbj1x8b"},{"post_id":"ckocvzdi50010zl9k8nj41v13","tag_id":"ckocvzdib001zzl9k4kgrbzrh","_id":"ckocvzdik003szl9k2f0fcwks"},{"post_id":"ckocvzdil0040zl9k63wnhirv","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdim0045zl9k92eddrk4"},{"post_id":"ckocvzdil0040zl9k63wnhirv","tag_id":"ckocvzdib001zzl9k4kgrbzrh","_id":"ckocvzdin004azl9kg01dacwt"},{"post_id":"ckocvzdi50014zl9kh1y56vl9","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdin004dzl9ka5y2f41b"},{"post_id":"ckocvzdi50014zl9kh1y56vl9","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdio004izl9kf2634a4r"},{"post_id":"ckocvzdi50014zl9kh1y56vl9","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdio004lzl9k7qfu181u"},{"post_id":"ckocvzdi50014zl9kh1y56vl9","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdip004qzl9kc4gv0n6c"},{"post_id":"ckocvzdi70018zl9kfrdq35rv","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdir0050zl9k77c0765a"},{"post_id":"ckocvzdi70018zl9kfrdq35rv","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdir0053zl9k3lfs8pc8"},{"post_id":"ckocvzdi70018zl9kfrdq35rv","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdir0056zl9k5wt074cy"},{"post_id":"ckocvzdi70018zl9kfrdq35rv","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdir0059zl9k68ez4y0n"},{"post_id":"ckocvzdi7001czl9k2iw8htnh","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdis005hzl9k7io54e9a"},{"post_id":"ckocvzdi7001czl9k2iw8htnh","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdis005izl9ke562gega"},{"post_id":"ckocvzdi7001czl9k2iw8htnh","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdis005kzl9kghm5bz7c"},{"post_id":"ckocvzdi7001czl9k2iw8htnh","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdis005lzl9kbmzsfxv4"},{"post_id":"ckocvzdi8001gzl9kacvj48ms","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdit005pzl9k8jfpg14k"},{"post_id":"ckocvzdi8001gzl9kacvj48ms","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdit005qzl9k5ade1ynn"},{"post_id":"ckocvzdi8001gzl9kacvj48ms","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdiu005szl9kfvmeb3qw"},{"post_id":"ckocvzdi8001gzl9kacvj48ms","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdiu005tzl9kerhmgqpb"},{"post_id":"ckocvzdi9001kzl9k2waj8h2x","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdiu005wzl9kfy15hl7a"},{"post_id":"ckocvzdi9001kzl9k2waj8h2x","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdiu005xzl9k5hyp1s7d"},{"post_id":"ckocvzdi9001kzl9k2waj8h2x","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdiu005zzl9keh3e9ugf"},{"post_id":"ckocvzdi9001kzl9k2waj8h2x","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdiu0060zl9k2u1tgm4v"},{"post_id":"ckocvzdi9001nzl9k3taze0k9","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdiv0063zl9k0qyfe4tt"},{"post_id":"ckocvzdi9001nzl9k3taze0k9","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdiv0064zl9k8ddnb7bc"},{"post_id":"ckocvzdi9001nzl9k3taze0k9","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdiv0066zl9kgsxbawo8"},{"post_id":"ckocvzdi9001nzl9k3taze0k9","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdiv0067zl9ka4es5j99"},{"post_id":"ckocvzdia001rzl9kgsxd9tak","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdiv006bzl9kh6xge53l"},{"post_id":"ckocvzdia001rzl9kgsxd9tak","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdiv006czl9k9a6s519k"},{"post_id":"ckocvzdia001rzl9kgsxd9tak","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdix006ezl9k2faz0q9e"},{"post_id":"ckocvzdia001rzl9kgsxd9tak","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdix006fzl9k60dub7f6"},{"post_id":"ckocvzdia001uzl9kg9ip0a7y","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdiy006jzl9k8pz73bn4"},{"post_id":"ckocvzdia001uzl9kg9ip0a7y","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdiy006kzl9k9ijcd7ae"},{"post_id":"ckocvzdia001uzl9kg9ip0a7y","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdiy006mzl9k73qn8c2d"},{"post_id":"ckocvzdia001uzl9kg9ip0a7y","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdiy006nzl9k24r447wy"},{"post_id":"ckocvzdib001yzl9kfop94nni","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdiy006rzl9k4yffdxp3"},{"post_id":"ckocvzdib001yzl9kfop94nni","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdiy006szl9keemrd17k"},{"post_id":"ckocvzdib001yzl9kfop94nni","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdiz006uzl9k0zvm2jwx"},{"post_id":"ckocvzdib001yzl9kfop94nni","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdiz006vzl9kgpqphu79"},{"post_id":"ckocvzdib0021zl9k1v8y60hr","tag_id":"ckocvzdic0028zl9kbafw5mlg","_id":"ckocvzdiz006zzl9k6yyqdazs"},{"post_id":"ckocvzdib0021zl9k1v8y60hr","tag_id":"ckocvzdie002izl9k7abi2as5","_id":"ckocvzdiz0070zl9kf7uu6xqr"},{"post_id":"ckocvzdib0021zl9k1v8y60hr","tag_id":"ckocvzdik003tzl9kfab1696z","_id":"ckocvzdiz0072zl9k5jiad7zn"},{"post_id":"ckocvzdib0021zl9k1v8y60hr","tag_id":"ckocvzdif002qzl9kg2qr62m8","_id":"ckocvzdiz0073zl9kgtjw316d"},{"post_id":"ckocvzdid0029zl9k947b69ij","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdiz0075zl9kbn8dhssm"},{"post_id":"ckocvzdid0029zl9k947b69ij","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdiz0076zl9k3xg50c1o"},{"post_id":"ckocvzdid0029zl9k947b69ij","tag_id":"ckocvzdiz006yzl9k1qi2gb7t","_id":"ckocvzdj00078zl9kh7lyfzai"},{"post_id":"ckocvzdid002dzl9ke86t2cpf","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj00079zl9k7ecv4cap"},{"post_id":"ckocvzdid002dzl9ke86t2cpf","tag_id":"ckocvzdia001szl9kcpgd7kk1","_id":"ckocvzdj0007azl9k3a4j204j"},{"post_id":"ckocvzdid002dzl9ke86t2cpf","tag_id":"ckocvzdiz0071zl9kdp8vb1iq","_id":"ckocvzdj0007czl9ka09jgtv1"},{"post_id":"ckocvzdie002gzl9kdj7ygyet","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj0007ezl9k9eig5afz"},{"post_id":"ckocvzdie002gzl9kdj7ygyet","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj0007fzl9kaiisb2cf"},{"post_id":"ckocvzdie002gzl9kdj7ygyet","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj0007hzl9key7ycsgv"},{"post_id":"ckocvzdie002gzl9kdj7ygyet","tag_id":"ckocvzdj0007bzl9kh8m8fjgn","_id":"ckocvzdj0007izl9k6q7tfrb7"},{"post_id":"ckocvzdif002ozl9k3nfc3t1o","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj1007mzl9kcv33eij4"},{"post_id":"ckocvzdif002ozl9k3nfc3t1o","tag_id":"ckocvzdj0007gzl9kgm917xey","_id":"ckocvzdj1007nzl9k0ogz4wro"},{"post_id":"ckocvzdif002ozl9k3nfc3t1o","tag_id":"ckocvzdj0007jzl9kbb8s72qe","_id":"ckocvzdj1007pzl9k3y5ugmy9"},{"post_id":"ckocvzdif002ozl9k3nfc3t1o","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj1007qzl9kfm5l45rb"},{"post_id":"ckocvzdif002ozl9k3nfc3t1o","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj1007szl9kb79120yg"},{"post_id":"ckocvzdif002tzl9kajba3s2j","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj1007uzl9k7n6h6gb0"},{"post_id":"ckocvzdif002tzl9kajba3s2j","tag_id":"ckocvzdj0007jzl9kbb8s72qe","_id":"ckocvzdj1007vzl9ketzx3jy7"},{"post_id":"ckocvzdif002tzl9kajba3s2j","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj1007xzl9k4w8u2zbz"},{"post_id":"ckocvzdif002tzl9kajba3s2j","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj2007yzl9kf7ml5cgm"},{"post_id":"ckocvzdig002wzl9kahch0qav","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj20081zl9kag5d4hng"},{"post_id":"ckocvzdig002wzl9kahch0qav","tag_id":"ckocvzdj0007jzl9kbb8s72qe","_id":"ckocvzdj20082zl9k9lc68xtm"},{"post_id":"ckocvzdig002wzl9kahch0qav","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj20084zl9k51p9dgzy"},{"post_id":"ckocvzdig002wzl9kahch0qav","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj20085zl9k3qghc2ef"},{"post_id":"ckocvzdig0031zl9karjwd6c0","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj20087zl9k5moj3zbh"},{"post_id":"ckocvzdig0031zl9karjwd6c0","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj20088zl9k3eyk5nj3"},{"post_id":"ckocvzdig0031zl9karjwd6c0","tag_id":"ckocvzdj20080zl9kbp3rfaws","_id":"ckocvzdj2008azl9kasgs9g0d"},{"post_id":"ckocvzdih0033zl9k6q8061q2","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj3008bzl9kb7y1c4c4"},{"post_id":"ckocvzdih0033zl9k6q8061q2","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj3008dzl9k0m177wj6"},{"post_id":"ckocvzdih0033zl9k6q8061q2","tag_id":"ckocvzdj20083zl9kagzc40qg","_id":"ckocvzdj3008ezl9k8be7axwx"},{"post_id":"ckocvzdih0036zl9kcs0sartb","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj3008gzl9kboub3t2v"},{"post_id":"ckocvzdih0036zl9kcs0sartb","tag_id":"ckocvzdj20086zl9kf7bm8cgm","_id":"ckocvzdj3008hzl9kgy1tgun7"},{"post_id":"ckocvzdih0036zl9kcs0sartb","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj3008jzl9k9icl9jut"},{"post_id":"ckocvzdii003azl9k0thnb41r","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj3008kzl9k50b7dr5d"},{"post_id":"ckocvzdii003azl9k0thnb41r","tag_id":"ckocvzdj20086zl9kf7bm8cgm","_id":"ckocvzdj3008mzl9k24ql9bo1"},{"post_id":"ckocvzdii003azl9k0thnb41r","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj3008nzl9kcfze50fm"},{"post_id":"ckocvzdii003ezl9k8ozngg1o","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj3008ozl9k9q7d7quy"},{"post_id":"ckocvzdii003ezl9k8ozngg1o","tag_id":"ckocvzdj20086zl9kf7bm8cgm","_id":"ckocvzdj3008qzl9k8sd087iy"},{"post_id":"ckocvzdii003ezl9k8ozngg1o","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj3008rzl9k1zqm4wky"},{"post_id":"ckocvzdij003izl9k69ah30z5","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj4008tzl9kb6l270tp"},{"post_id":"ckocvzdij003izl9k69ah30z5","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj4008uzl9k73zvazpr"},{"post_id":"ckocvzdij003izl9k69ah30z5","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj4008wzl9k7its1bbf"},{"post_id":"ckocvzdij003mzl9kd9ie3v7p","tag_id":"ckocvzdj3008lzl9kclh946zc","_id":"ckocvzdj4008xzl9k2mrtfhj9"},{"post_id":"ckocvzdij003mzl9kd9ie3v7p","tag_id":"ckocvzdj3008pzl9k5so441hg","_id":"ckocvzdj4008zzl9kd9ft86zq"},{"post_id":"ckocvzdik003qzl9kh3dndm84","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj40090zl9kdiglg49n"},{"post_id":"ckocvzdik003qzl9kh3dndm84","tag_id":"ckocvzdj20086zl9kf7bm8cgm","_id":"ckocvzdj40092zl9k8yhl891y"},{"post_id":"ckocvzdik003qzl9kh3dndm84","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj40093zl9kdgzsfahr"},{"post_id":"ckocvzdik003uzl9k70g0e7tz","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj40095zl9k8wix2i1v"},{"post_id":"ckocvzdik003uzl9k70g0e7tz","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj40096zl9kgds65zru"},{"post_id":"ckocvzdik003uzl9k70g0e7tz","tag_id":"ckocvzdj4008vzl9kg5u00kjf","_id":"ckocvzdj50098zl9khx9p4q41"},{"post_id":"ckocvzdil003xzl9kgljxha2u","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj50099zl9kev9n75sx"},{"post_id":"ckocvzdil003xzl9kgljxha2u","tag_id":"ckocvzdib001zzl9k4kgrbzrh","_id":"ckocvzdj5009bzl9k4ygvcejd"},{"post_id":"ckocvzdil003xzl9kgljxha2u","tag_id":"ckocvzdj0007bzl9kh8m8fjgn","_id":"ckocvzdj5009czl9k6zev62n4"},{"post_id":"ckocvzdil003xzl9kgljxha2u","tag_id":"ckocvzdj40091zl9kcvoj6g8s","_id":"ckocvzdj5009ezl9k7m4g3u87"},{"post_id":"ckocvzdim0043zl9k6hh1d2iz","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj5009fzl9kfogzdcxc"},{"post_id":"ckocvzdim0043zl9k6hh1d2iz","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj5009hzl9kb9p0534d"},{"post_id":"ckocvzdim0043zl9k6hh1d2iz","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj5009izl9kg39dh1uz"},{"post_id":"ckocvzdim0047zl9kgkl59zb0","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj5009kzl9k2oczbyvq"},{"post_id":"ckocvzdim0047zl9kgkl59zb0","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj5009lzl9k4ojg8d6c"},{"post_id":"ckocvzdim0047zl9kgkl59zb0","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj6009nzl9k5lnz6d5j"},{"post_id":"ckocvzdin004bzl9khzna1qgm","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj6009ozl9kci1wc4lv"},{"post_id":"ckocvzdin004bzl9khzna1qgm","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj6009qzl9k6sc675u5"},{"post_id":"ckocvzdin004bzl9khzna1qgm","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj6009rzl9k5ubw23vl"},{"post_id":"ckocvzdin004fzl9k8xx400ex","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj6009tzl9kdww269lv"},{"post_id":"ckocvzdin004fzl9k8xx400ex","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj6009uzl9k06hecse8"},{"post_id":"ckocvzdin004fzl9k8xx400ex","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj6009wzl9kajt95kv6"},{"post_id":"ckocvzdio004jzl9kgkq6cew3","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj6009yzl9k6xy446ed"},{"post_id":"ckocvzdio004jzl9kgkq6cew3","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj6009zzl9k08lz5w3s"},{"post_id":"ckocvzdio004jzl9kgkq6cew3","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj700a1zl9kh6sufq72"},{"post_id":"ckocvzdip004nzl9kautecz9p","tag_id":"ckocvzdiz0074zl9k5md57cd6","_id":"ckocvzdj700a3zl9k84qm0frr"},{"post_id":"ckocvzdip004nzl9kautecz9p","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj700a4zl9k8tnsactr"},{"post_id":"ckocvzdip004nzl9kautecz9p","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj700a6zl9kd1q3601z"},{"post_id":"ckocvzdip004rzl9k0f6x4b09","tag_id":"ckocvzdhx0006zl9kcyngeww8","_id":"ckocvzdj700a7zl9kff384fk1"},{"post_id":"ckocvzdip004rzl9k0f6x4b09","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj700a9zl9k8xub350w"},{"post_id":"ckocvzdip004rzl9k0f6x4b09","tag_id":"ckocvzdj700a2zl9k5c6l1n39","_id":"ckocvzdj700aazl9k3qx8at5b"},{"post_id":"ckocvzdiq004uzl9k7kr7at6v","tag_id":"ckocvzdj700a5zl9kd2ibg96x","_id":"ckocvzdj800abzl9k5qize98c"},{"post_id":"ckocvzdiq004uzl9k7kr7at6v","tag_id":"ckocvzdj00077zl9kaqtl2r1r","_id":"ckocvzdj800aczl9kht50h1ui"},{"post_id":"ckocvzdiq004uzl9k7kr7at6v","tag_id":"ckocvzdi0000dzl9k86l1auqk","_id":"ckocvzdj800adzl9k3d2u012m"}],"Tag":[{"name":"代码","_id":"ckocvzdhx0006zl9kcyngeww8"},{"name":"考研","_id":"ckocvzdi0000dzl9k86l1auqk"},{"name":"心理学","_id":"ckocvzdia001szl9kcpgd7kk1"},{"name":"计划","_id":"ckocvzdib001zzl9k4kgrbzrh"},{"name":"论文","_id":"ckocvzdic0028zl9kbafw5mlg"},{"name":"研究生","_id":"ckocvzdie002izl9k7abi2as5"},{"name":"SimCSE","_id":"ckocvzdif002qzl9kg2qr62m8"},{"name":"知识图谱","_id":"ckocvzdik003tzl9kfab1696z"},{"name":"图","_id":"ckocvzdiz006yzl9k1qi2gb7t"},{"name":"计算机","_id":"ckocvzdiz0071zl9kdp8vb1iq"},{"name":"计网","_id":"ckocvzdiz0074zl9k5md57cd6"},{"name":"总结","_id":"ckocvzdj00077zl9kaqtl2r1r"},{"name":"男男","_id":"ckocvzdj0007bzl9kh8m8fjgn"},{"name":"数据链路层","_id":"ckocvzdj0007gzl9kgm917xey"},{"name":"强化","_id":"ckocvzdj0007jzl9kbb8s72qe"},{"name":"排序","_id":"ckocvzdj20080zl9kbp3rfaws"},{"name":"树","_id":"ckocvzdj20083zl9kagzc40qg"},{"name":"每日一题","_id":"ckocvzdj20086zl9kf7bm8cgm"},{"name":"Typora","_id":"ckocvzdj3008lzl9kclh946zc"},{"name":"Markdown","_id":"ckocvzdj3008pzl9k5so441hg"},{"name":"线性表","_id":"ckocvzdj4008vzl9kg5u00kjf"},{"name":"菁菁","_id":"ckocvzdj40091zl9kcvoj6g8s"},{"name":"链表","_id":"ckocvzdj700a2zl9k5c6l1n39"},{"name":"高数","_id":"ckocvzdj700a5zl9kd2ibg96x"}]}}